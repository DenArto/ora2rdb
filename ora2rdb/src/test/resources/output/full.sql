--------------------------------------------------------
--  DDL for Sequence ABANDONEDREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ABANDONEDREASON_SEQ"          ;
ALTER SEQUENCE "ABANDONEDREASON_SEQ" RESTART WITH 281;
--------------------------------------------------------
--  DDL for Sequence ACTIVITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ACTIVITY_SEQ"          ;
ALTER SEQUENCE "ACTIVITY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ALTGOODSGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ALTGOODSGROUP_SEQ"          ;
ALTER SEQUENCE "ALTGOODSGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ALTGOODSGROUPTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ALTGOODSGROUPTYPE_SEQ"          ;
ALTER SEQUENCE "ALTGOODSGROUPTYPE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ANYDATA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ANYDATA_SEQ"          ;
ALTER SEQUENCE "ANYDATA_SEQ" RESTART WITH 75831;
--------------------------------------------------------
--  DDL for Sequence APPMODULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPMODULE_SEQ"          ;
ALTER SEQUENCE "APPMODULE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence APPOBJPROP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPOBJPROP_SEQ"          ;
ALTER SEQUENCE "APPOBJPROP_SEQ" RESTART WITH 1981;
--------------------------------------------------------
--  DDL for Sequence APPOBJ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPOBJ_SEQ"          ;
ALTER SEQUENCE "APPOBJ_SEQ" RESTART WITH 481;
--------------------------------------------------------
--  DDL for Sequence APPOINTMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPOINTMENT_SEQ"          ;
ALTER SEQUENCE "APPOINTMENT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence AUCTIONBID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AUCTIONBID_SEQ"          ;
ALTER SEQUENCE "AUCTIONBID_SEQ" RESTART WITH 8391;
--------------------------------------------------------
--  DDL for Sequence AUCTIONLOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "AUCTIONLOG_SEQ"          ;
ALTER SEQUENCE "AUCTIONLOG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence BANKGUARANTEEDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BANKGUARANTEEDOC_SEQ"          ;
ALTER SEQUENCE "BANKGUARANTEEDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence BANKGUARANTEEREFDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BANKGUARANTEEREFDOC_SEQ"          ;
ALTER SEQUENCE "BANKGUARANTEEREFDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence BANKGUARANTEEREFREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BANKGUARANTEEREFREASON_SEQ"          ;
ALTER SEQUENCE "BANKGUARANTEEREFREASON_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence BANK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BANK_SEQ"          ;
ALTER SEQUENCE "BANK_SEQ" RESTART WITH 4461;
--------------------------------------------------------
--  DDL for Sequence BUDGCODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BUDGCODE_SEQ"          ;
ALTER SEQUENCE "BUDGCODE_SEQ" RESTART WITH 11881;
--------------------------------------------------------
--  DDL for Sequence BUDGETLINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BUDGETLINE_SEQ"          ;
ALTER SEQUENCE "BUDGETLINE_SEQ" RESTART WITH 64431;
--------------------------------------------------------
--  DDL for Sequence BUDGET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BUDGET_SEQ"          ;
ALTER SEQUENCE "BUDGET_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence BUDGETSTAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BUDGETSTAGE_SEQ"          ;
ALTER SEQUENCE "BUDGETSTAGE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence CACHE_LIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CACHE_LIST_SEQ"          ;
ALTER SEQUENCE "CACHE_LIST_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CAVILDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CAVILDOC_SEQ"          ;
ALTER SEQUENCE "CAVILDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CAVILTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CAVILTYPE_SEQ"          ;
ALTER SEQUENCE "CAVILTYPE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CERTINTERCHANGEREQUEST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CERTINTERCHANGEREQUEST_SEQ"          ;
ALTER SEQUENCE "CERTINTERCHANGEREQUEST_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CERTREQUEST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CERTREQUEST_SEQ"          ;
ALTER SEQUENCE "CERTREQUEST_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CERTREVOKEREQUEST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CERTREVOKEREQUEST_SEQ"          ;
ALTER SEQUENCE "CERTREVOKEREQUEST_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CLAIMDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLAIMDOC_SEQ"          ;
ALTER SEQUENCE "CLAIMDOC_SEQ" RESTART WITH 241;
--------------------------------------------------------
--  DDL for Sequence CLAIMPAYFACT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLAIMPAYFACT_SEQ"          ;
ALTER SEQUENCE "CLAIMPAYFACT_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence CLAIMPENALTYCHANGEDOCINFO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLAIMPENALTYCHANGEDOCINFO_SEQ"          ;
ALTER SEQUENCE "CLAIMPENALTYCHANGEDOCINFO_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CLASSOPER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLASSOPER_SEQ"          ;
ALTER SEQUENCE "CLASSOPER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CLIENTOBJECTCOMMENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLIENTOBJECTCOMMENTS_SEQ"          ;
ALTER SEQUENCE "CLIENTOBJECTCOMMENTS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CLIENTOBJECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLIENTOBJECT_SEQ"          ;
ALTER SEQUENCE "CLIENTOBJECT_SEQ" RESTART WITH 1041;
--------------------------------------------------------
--  DDL for Sequence CLNDDAY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLNDDAY_SEQ"          ;
ALTER SEQUENCE "CLNDDAY_SEQ" RESTART WITH 2201;
--------------------------------------------------------
--  DDL for Sequence CLNDTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CLNDTYPE_SEQ"          ;
ALTER SEQUENCE "CLNDTYPE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence CMPDISCUSSION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CMPDISCUSSION_SEQ"          ;
ALTER SEQUENCE "CMPDISCUSSION_SEQ" RESTART WITH 291;
--------------------------------------------------------
--  DDL for Sequence CMPQUALREQ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CMPQUALREQ_SEQ"          ;
ALTER SEQUENCE "CMPQUALREQ_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CODETYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CODETYPE_SEQ"          ;
ALTER SEQUENCE "CODETYPE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence COMMEMBER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMMEMBER_SEQ"          ;
ALTER SEQUENCE "COMMEMBER_SEQ" RESTART WITH 24541;
--------------------------------------------------------
--  DDL for Sequence COMMISSION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMMISSION_SEQ"          ;
ALTER SEQUENCE "COMMISSION_SEQ" RESTART WITH 4421;
--------------------------------------------------------
--  DDL for Sequence COMPLAINTDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "COMPLAINTDOC_SEQ"          ;
ALTER SEQUENCE "COMPLAINTDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CONFCONCLUSIONCONTRACT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONFCONCLUSIONCONTRACT_SEQ"          ;
ALTER SEQUENCE "CONFCONCLUSIONCONTRACT_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence CONPAYFACT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONPAYFACT_SEQ"          ;
ALTER SEQUENCE "CONPAYFACT_SEQ" RESTART WITH 92681;
--------------------------------------------------------
--  DDL for Sequence CONSOLIDDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONSOLIDDOC_SEQ"          ;
ALTER SEQUENCE "CONSOLIDDOC_SEQ" RESTART WITH 261;
--------------------------------------------------------
--  DDL for Sequence CONSTRUCTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONSTRUCTION_SEQ"          ;
ALTER SEQUENCE "CONSTRUCTION_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CONTRACTCARDDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTCARDDOC_SEQ"          ;
ALTER SEQUENCE "CONTRACTCARDDOC_SEQ" RESTART WITH 281;
--------------------------------------------------------
--  DDL for Sequence CONTRACTDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTDOC_SEQ"          ;
ALTER SEQUENCE "CONTRACTDOC_SEQ" RESTART WITH 86121;
--------------------------------------------------------
--  DDL for Sequence CONTRACTEXECDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTEXECDOC_SEQ"          ;
ALTER SEQUENCE "CONTRACTEXECDOC_SEQ" RESTART WITH 8221;
--------------------------------------------------------
--  DDL for Sequence CONTRACTREASON_DOCLINES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTREASON_DOCLINES_SEQ"          ;
ALTER SEQUENCE "CONTRACTREASON_DOCLINES_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence CONTRACTREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTREASON_SEQ"          ;
ALTER SEQUENCE "CONTRACTREASON_SEQ" RESTART WITH 801;
--------------------------------------------------------
--  DDL for Sequence CONTRACTTEMPLATEDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTRACTTEMPLATEDOC_SEQ"          ;
ALTER SEQUENCE "CONTRACTTEMPLATEDOC_SEQ" RESTART WITH 17361;
--------------------------------------------------------
--  DDL for Sequence CONTYPEATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTYPEATTACH_SEQ"          ;
ALTER SEQUENCE "CONTYPEATTACH_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CONTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CONTYPE_SEQ"          ;
ALTER SEQUENCE "CONTYPE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CRLFILE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CRLFILE_SEQ"          ;
ALTER SEQUENCE "CRLFILE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence CRLPOINT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CRLPOINT_SEQ"          ;
ALTER SEQUENCE "CRLPOINT_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence CURHISTORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CURHISTORY_SEQ"          ;
ALTER SEQUENCE "CURHISTORY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DATAOBJECTCHANGELOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DATAOBJECTCHANGELOG_SEQ"          ;
ALTER SEQUENCE "DATAOBJECTCHANGELOG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DATASOURCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DATASOURCE_SEQ"          ;
ALTER SEQUENCE "DATASOURCE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DAYVERSION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DAYVERSION_SEQ"          ;
ALTER SEQUENCE "DAYVERSION_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DBCONNECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DBCONNECT_SEQ"          ;
ALTER SEQUENCE "DBCONNECT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DBCONSTRAINT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DBCONSTRAINT_SEQ"          ;
ALTER SEQUENCE "DBCONSTRAINT_SEQ" RESTART WITH 321;
--------------------------------------------------------
--  DDL for Sequence DECREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DECREASON_SEQ"          ;
ALTER SEQUENCE "DECREASON_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence DELIVERYBASIS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DELIVERYBASIS_SEQ"          ;
ALTER SEQUENCE "DELIVERYBASIS_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence DESCGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DESCGROUP_SEQ"          ;
ALTER SEQUENCE "DESCGROUP_SEQ" RESTART WITH 121;
--------------------------------------------------------
--  DDL for Sequence DESCRIPTIONCACHE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DESCRIPTIONCACHE_SEQ"          ;
ALTER SEQUENCE "DESCRIPTIONCACHE_SEQ" RESTART WITH 22241;
--------------------------------------------------------
--  DDL for Sequence DESCRIPTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DESCRIPTION_SEQ"          ;
ALTER SEQUENCE "DESCRIPTION_SEQ" RESTART WITH 281;
--------------------------------------------------------
--  DDL for Sequence DEVIATIONFACTFOUNDATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DEVIATIONFACTFOUNDATION_SEQ"          ;
ALTER SEQUENCE "DEVIATIONFACTFOUNDATION_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence DIGEST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DIGEST_SEQ"          ;
ALTER SEQUENCE "DIGEST_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence DIGESTSIGN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DIGESTSIGN_SEQ"          ;
ALTER SEQUENCE "DIGESTSIGN_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence DOCACTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCACTION_SEQ"          ;
ALTER SEQUENCE "DOCACTION_SEQ" RESTART WITH 1921;
--------------------------------------------------------
--  DDL for Sequence DOCATTACHEX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCATTACHEX_SEQ"          ;
ALTER SEQUENCE "DOCATTACHEX_SEQ" RESTART WITH 330981;
--------------------------------------------------------
--  DDL for Sequence DOCATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCATTACH_SEQ"          ;
ALTER SEQUENCE "DOCATTACH_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DOCCATEGORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCCATEGORY_SEQ"          ;
ALTER SEQUENCE "DOCCATEGORY_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence DOCCLASS_DISPSTATUS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCCLASS_DISPSTATUS_SEQ"          ;
ALTER SEQUENCE "DOCCLASS_DISPSTATUS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DOCCOMMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCCOMMENT_SEQ"          ;
ALTER SEQUENCE "DOCCOMMENT_SEQ" RESTART WITH 367791;
--------------------------------------------------------
--  DDL for Sequence DOCCUSTOMFIELDS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCCUSTOMFIELDS_SEQ"          ;
ALTER SEQUENCE "DOCCUSTOMFIELDS_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence DOCDIGESTRULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCDIGESTRULE_SEQ"          ;
ALTER SEQUENCE "DOCDIGESTRULE_SEQ" RESTART WITH 141;
--------------------------------------------------------
--  DDL for Sequence DOCEVENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCEVENT_SEQ"          ;
ALTER SEQUENCE "DOCEVENT_SEQ" RESTART WITH 5021;
--------------------------------------------------------
--  DDL for Sequence DOCEVERRLOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCEVERRLOG_SEQ"          ;
ALTER SEQUENCE "DOCEVERRLOG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DOCGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCGROUP_SEQ"          ;
ALTER SEQUENCE "DOCGROUP_SEQ" RESTART WITH 70;
--------------------------------------------------------
--  DDL for Sequence DOCJOURNAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCJOURNAL_SEQ"          ;
ALTER SEQUENCE "DOCJOURNAL_SEQ" RESTART WITH 3216711;
--------------------------------------------------------
--  DDL for Sequence DOCREQ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCREQ_SEQ"          ;
ALTER SEQUENCE "DOCREQ_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DOCRETENTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCRETENTION_SEQ"          ;
ALTER SEQUENCE "DOCRETENTION_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence DOCRETENTIONSTATITEMS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCRETENTIONSTATITEMS_SEQ"          ;
ALTER SEQUENCE "DOCRETENTIONSTATITEMS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence DOCSELECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCSELECT_SEQ"          ;
ALTER SEQUENCE "DOCSELECT_SEQ" RESTART WITH 261;
--------------------------------------------------------
--  DDL for Sequence DOCSTATUS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCSTATUS_SEQ"          ;
ALTER SEQUENCE "DOCSTATUS_SEQ" RESTART WITH 781;
--------------------------------------------------------
--  DDL for Sequence DOCUMENTREPORTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCUMENTREPORTS_SEQ"          ;
ALTER SEQUENCE "DOCUMENTREPORTS_SEQ" RESTART WITH 161;
--------------------------------------------------------
--  DDL for Sequence DOCUMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOCUMENT_SEQ"          ;
ALTER SEQUENCE "DOCUMENT_SEQ" RESTART WITH 308041;
--------------------------------------------------------
--  DDL for Sequence DOMEN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "DOMEN_SEQ"          ;
ALTER SEQUENCE "DOMEN_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence EQUALITYCODES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EQUALITYCODES_SEQ"          ;
ALTER SEQUENCE "EQUALITYCODES_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence EQUALITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "EQUALITY_SEQ"          ;
ALTER SEQUENCE "EQUALITY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ESCHECKRULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESCHECKRULE_SEQ"          ;
ALTER SEQUENCE "ESCHECKRULE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ESTIMATE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ESTIMATE_SEQ"          ;
ALTER SEQUENCE "ESTIMATE_SEQ" RESTART WITH 4161;
--------------------------------------------------------
--  DDL for Sequence ETPATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ETPATTACH_SEQ"          ;
ALTER SEQUENCE "ETPATTACH_SEQ" RESTART WITH 9551;
--------------------------------------------------------
--  DDL for Sequence ETP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ETP_SEQ"          ;
ALTER SEQUENCE "ETP_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence ETPTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ETPTYPE_SEQ"          ;
ALTER SEQUENCE "ETPTYPE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence FACTDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FACTDOC_SEQ"          ;
ALTER SEQUENCE "FACTDOC_SEQ" RESTART WITH 31891;
--------------------------------------------------------
--  DDL for Sequence FACTDOCTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FACTDOCTYPE_SEQ"          ;
ALTER SEQUENCE "FACTDOCTYPE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence FETCHMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FETCHMODE_SEQ"          ;
ALTER SEQUENCE "FETCHMODE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence FGROUPATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FGROUPATTACH_SEQ"          ;
ALTER SEQUENCE "FGROUPATTACH_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence FGROUPHEADER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FGROUPHEADER_SEQ"          ;
ALTER SEQUENCE "FGROUPHEADER_SEQ" RESTART WITH 261;
--------------------------------------------------------
--  DDL for Sequence FGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FGROUP_SEQ"          ;
ALTER SEQUENCE "FGROUP_SEQ" RESTART WITH 581;
--------------------------------------------------------
--  DDL for Sequence FINSRCSATISFY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FINSRCSATISFY_SEQ"          ;
ALTER SEQUENCE "FINSRCSATISFY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence FINSRC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FINSRC_SEQ"          ;
ALTER SEQUENCE "FINSRC_SEQ" RESTART WITH 161;
--------------------------------------------------------
--  DDL for Sequence FORMATCONVERTER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FORMATCONVERTER_SEQ"          ;
ALTER SEQUENCE "FORMATCONVERTER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence FUNCAT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FUNCAT_SEQ"          ;
ALTER SEQUENCE "FUNCAT_SEQ" RESTART WITH 121;
--------------------------------------------------------
--  DDL for Sequence FUNUNIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "FUNUNIT_SEQ"          ;
ALTER SEQUENCE "FUNUNIT_SEQ" RESTART WITH 681;
--------------------------------------------------------
--  DDL for Sequence GCREGISTER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GCREGISTER_SEQ"          ;
ALTER SEQUENCE "GCREGISTER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GENERATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GENERATION_SEQ"          ;
ALTER SEQUENCE "GENERATION_SEQ" RESTART WITH 1447443;
--------------------------------------------------------
--  DDL for Sequence GOODSBANGOODSOKPD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSBANGOODSOKPD_SEQ"          ;
ALTER SEQUENCE "GOODSBANGOODSOKPD_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSBANPURCHASEMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSBANPURCHASEMODE_SEQ"          ;
ALTER SEQUENCE "GOODSBANPURCHASEMODE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSBAN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSBAN_SEQ"          ;
ALTER SEQUENCE "GOODSBAN_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSBRANCH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSBRANCH_SEQ"          ;
ALTER SEQUENCE "GOODSBRANCH_SEQ" RESTART WITH 61;
--------------------------------------------------------
--  DDL for Sequence GOODSDOCDETAIL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSDOCDETAIL_SEQ"          ;
ALTER SEQUENCE "GOODSDOCDETAIL_SEQ" RESTART WITH 301741;
--------------------------------------------------------
--  DDL for Sequence GOODSGROUPPURCHASEMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSGROUPPURCHASEMODE_SEQ"          ;
ALTER SEQUENCE "GOODSGROUPPURCHASEMODE_SEQ" RESTART WITH 201;
--------------------------------------------------------
--  DDL for Sequence GOODSGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSGROUP_SEQ"          ;
ALTER SEQUENCE "GOODSGROUP_SEQ" RESTART WITH 48901;
--------------------------------------------------------
--  DDL for Sequence GOODSOKDPCOUNTRYPREF_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKDPCOUNTRYPREF_SEQ"          ;
ALTER SEQUENCE "GOODSOKDPCOUNTRYPREF_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSOKDPPURCHASEMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKDPPURCHASEMODE_SEQ"          ;
ALTER SEQUENCE "GOODSOKDPPURCHASEMODE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSOKDP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKDP_SEQ"          ;
ALTER SEQUENCE "GOODSOKDP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODSOKPDCOUNTRYPREF_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKPDCOUNTRYPREF_SEQ"          ;
ALTER SEQUENCE "GOODSOKPDCOUNTRYPREF_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence GOODSOKPDPURCHASEMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKPDPURCHASEMODE_SEQ"          ;
ALTER SEQUENCE "GOODSOKPDPURCHASEMODE_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence GOODSOKPD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKPD_SEQ"          ;
ALTER SEQUENCE "GOODSOKPD_SEQ" RESTART WITH 56521;
--------------------------------------------------------
--  DDL for Sequence GOODSOKVED_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSOKVED_SEQ"          ;
ALTER SEQUENCE "GOODSOKVED_SEQ" RESTART WITH 4861;
--------------------------------------------------------
--  DDL for Sequence GOODSPRICE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODSPRICE_SEQ"          ;
ALTER SEQUENCE "GOODSPRICE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GOODS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GOODS_SEQ"          ;
ALTER SEQUENCE "GOODS_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence GRANTINVESTMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GRANTINVESTMENT_SEQ"          ;
ALTER SEQUENCE "GRANTINVESTMENT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence GROUPPROP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "GROUPPROP_SEQ"          ;
ALTER SEQUENCE "GROUPPROP_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence HISTORYMODIFY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "HISTORYMODIFY_SEQ"          ;
ALTER SEQUENCE "HISTORYMODIFY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence INDUSTRYCODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INDUSTRYCODE_SEQ"          ;
ALTER SEQUENCE "INDUSTRYCODE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence INSTITUTIONLINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INSTITUTIONLINE_SEQ"          ;
ALTER SEQUENCE "INSTITUTIONLINE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence INTERBUDGET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INTERBUDGET_SEQ"          ;
ALTER SEQUENCE "INTERBUDGET_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence INVOICEDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "INVOICEDOC_SEQ"          ;
ALTER SEQUENCE "INVOICEDOC_SEQ" RESTART WITH 201;
--------------------------------------------------------
--  DDL for Sequence JAVACLASS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "JAVACLASS_SEQ"          ;
ALTER SEQUENCE "JAVACLASS_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence KBKLINEFIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "KBKLINEFIT_SEQ"          ;
ALTER SEQUENCE "KBKLINEFIT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence KLADR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "KLADR_SEQ"          ;
ALTER SEQUENCE "KLADR_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence KLADRSTREET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "KLADRSTREET_SEQ"          ;
ALTER SEQUENCE "KLADRSTREET_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence LEDGER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LEDGER_SEQ"          ;
ALTER SEQUENCE "LEDGER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence LIABILITYCREDENTIAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LIABILITYCREDENTIAL_SEQ"          ;
ALTER SEQUENCE "LIABILITYCREDENTIAL_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence LIABILITYEXPENSE_DOCLINES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LIABILITYEXPENSE_DOCLINES_SEQ"          ;
ALTER SEQUENCE "LIABILITYEXPENSE_DOCLINES_SEQ" RESTART WITH 111196211;
--------------------------------------------------------
--  DDL for Sequence LIABILITYEXPENSE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LIABILITYEXPENSE_SEQ"          ;
ALTER SEQUENCE "LIABILITYEXPENSE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence LIABILITYGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LIABILITYGROUP_SEQ"          ;
ALTER SEQUENCE "LIABILITYGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence LICTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "LICTYPE_SEQ"          ;
ALTER SEQUENCE "LICTYPE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence MAILATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MAILATTACH_SEQ"          ;
ALTER SEQUENCE "MAILATTACH_SEQ" RESTART WITH 49441;
--------------------------------------------------------
--  DDL for Sequence MAILRECEIVERGROUP_RECEIVER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MAILRECEIVERGROUP_RECEIVER_SEQ"          ;
ALTER SEQUENCE "MAILRECEIVERGROUP_RECEIVER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence MAILRECEIVERGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MAILRECEIVERGROUP_SEQ"          ;
ALTER SEQUENCE "MAILRECEIVERGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence MAIL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MAIL_SEQ"          ;
ALTER SEQUENCE "MAIL_SEQ" RESTART WITH 226261;
--------------------------------------------------------
--  DDL for Sequence MENUITEM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MENUITEM_SEQ"          ;
ALTER SEQUENCE "MENUITEM_SEQ" RESTART WITH 901;
--------------------------------------------------------
--  DDL for Sequence MENUITEMWEB_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MENUITEMWEB_SEQ"          ;
ALTER SEQUENCE "MENUITEMWEB_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence MENU_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MENU_SEQ"          ;
ALTER SEQUENCE "MENU_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence METACONSTRAINT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "METACONSTRAINT_SEQ"          ;
ALTER SEQUENCE "METACONSTRAINT_SEQ" RESTART WITH 161;
--------------------------------------------------------
--  DDL for Sequence METAOBJECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "METAOBJECT_SEQ"          ;
ALTER SEQUENCE "METAOBJECT_SEQ" RESTART WITH 181;
--------------------------------------------------------
--  DDL for Sequence MSGQUEUE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MSGQUEUE_SEQ"          ;
ALTER SEQUENCE "MSGQUEUE_SEQ" RESTART WITH 193821;
--------------------------------------------------------
--  DDL for Sequence MSG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MSG_SEQ"          ;
ALTER SEQUENCE "MSG_SEQ" RESTART WITH 2580921;
--------------------------------------------------------
--  DDL for Sequence NECESSITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NECESSITY_SEQ"          ;
ALTER SEQUENCE "NECESSITY_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence NOTICEDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTICEDOC_SEQ"          ;
ALTER SEQUENCE "NOTICEDOC_SEQ" RESTART WITH 121;
--------------------------------------------------------
--  DDL for Sequence NOTICEEMAILORG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTICEEMAILORG_SEQ"          ;
ALTER SEQUENCE "NOTICEEMAILORG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence NOTIFYMSGGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTIFYMSGGROUP_SEQ"          ;
ALTER SEQUENCE "NOTIFYMSGGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence NOTIFYMSGRULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTIFYMSGRULE_SEQ"          ;
ALTER SEQUENCE "NOTIFYMSGRULE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence NOTIFYMSG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NOTIFYMSG_SEQ"          ;
ALTER SEQUENCE "NOTIFYMSG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence NUMGENERATOR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NUMGENERATOR_SEQ"          ;
ALTER SEQUENCE "NUMGENERATOR_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence NUMPREFIX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NUMPREFIX_SEQ"          ;
ALTER SEQUENCE "NUMPREFIX_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence NUMSEQUENCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "NUMSEQUENCE_SEQ"          ;
ALTER SEQUENCE "NUMSEQUENCE_SEQ" RESTART WITH 1061;
--------------------------------------------------------
--  DDL for Sequence OFFERDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OFFERDOC_SEQ"          ;
ALTER SEQUENCE "OFFERDOC_SEQ" RESTART WITH 13921;
--------------------------------------------------------
--  DDL for Sequence OFRREQREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OFRREQREASON_SEQ"          ;
ALTER SEQUENCE "OFRREQREASON_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence OFRRETREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OFRRETREASON_SEQ"          ;
ALTER SEQUENCE "OFRRETREASON_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence OIDREF_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OIDREF_SEQ"          ;
ALTER SEQUENCE "OIDREF_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence OKTMO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OKTMO_SEQ"          ;
ALTER SEQUENCE "OKTMO_SEQ" RESTART WITH 177941;
--------------------------------------------------------
--  DDL for Sequence OLAPQUERY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OLAPQUERY_SEQ"          ;
ALTER SEQUENCE "OLAPQUERY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence OOSORGROLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OOSORGROLE_SEQ"          ;
ALTER SEQUENCE "OOSORGROLE_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence OOS223PURCHASENOTICEINFO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OOS223PURCHASENOTICEINFO_SEQ"          ;
ALTER SEQUENCE "OOS223PURCHASENOTICEINFO_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence OOS223PURCHNOTICELOTINFO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OOS223PURCHNOTICELOTINFO_SEQ"          ;
ALTER SEQUENCE "OOS223PURCHNOTICELOTINFO_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ORDERDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORDERDOC_SEQ"          ;
ALTER SEQUENCE "ORDERDOC_SEQ" RESTART WITH 10931;
--------------------------------------------------------
--  DDL for Sequence ORDERSUMMARY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORDERSUMMARY_SEQ"          ;
ALTER SEQUENCE "ORDERSUMMARY_SEQ" RESTART WITH 468151;
--------------------------------------------------------
--  DDL for Sequence ORGACCOUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGACCOUNT_SEQ"          ;
ALTER SEQUENCE "ORGACCOUNT_SEQ" RESTART WITH 56941;
--------------------------------------------------------
--  DDL for Sequence ORGADDKPP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGADDKPP_SEQ"          ;
ALTER SEQUENCE "ORGADDKPP_SEQ" RESTART WITH 561;
--------------------------------------------------------
--  DDL for Sequence ORGATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGATTACH_SEQ"          ;
ALTER SEQUENCE "ORGATTACH_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence ORGCONCCONT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGCONCCONT_SEQ"          ;
ALTER SEQUENCE "ORGCONCCONT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ORGETP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGETP_SEQ"          ;
ALTER SEQUENCE "ORGETP_SEQ" RESTART WITH 401;
--------------------------------------------------------
--  DDL for Sequence ORGFORM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGFORM_SEQ"          ;
ALTER SEQUENCE "ORGFORM_SEQ" RESTART WITH 201;
--------------------------------------------------------
--  DDL for Sequence ORGOOS223FZUSER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGOOS223FZUSER_SEQ"          ;
ALTER SEQUENCE "ORGOOS223FZUSER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ORGROLES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGROLES_SEQ"          ;
ALTER SEQUENCE "ORGROLES_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ORG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORG_SEQ"          ;
ALTER SEQUENCE "ORG_SEQ" RESTART WITH 36961;
--------------------------------------------------------
--  DDL for Sequence ORGUNFAIR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ORGUNFAIR_SEQ"          ;
ALTER SEQUENCE "ORGUNFAIR_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence PACKTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PACKTYPE_SEQ"          ;
ALTER SEQUENCE "PACKTYPE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence PANELITEM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PANELITEM_SEQ"          ;
ALTER SEQUENCE "PANELITEM_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence PANEL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PANEL_SEQ"          ;
ALTER SEQUENCE "PANEL_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence PAYCONDITION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PAYCONDITION_SEQ"          ;
ALTER SEQUENCE "PAYCONDITION_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence PERSONAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PERSONAL_SEQ"          ;
ALTER SEQUENCE "PERSONAL_SEQ" RESTART WITH 2941;
--------------------------------------------------------
--  DDL for Sequence PERSON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PERSON_SEQ"          ;
ALTER SEQUENCE "PERSON_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLACEMENTFEATUREPM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLACEMENTFEATUREPM_SEQ"          ;
ALTER SEQUENCE "PLACEMENTFEATUREPM_SEQ" RESTART WITH 181;
--------------------------------------------------------
--  DDL for Sequence PLACEMENTFEATURE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLACEMENTFEATURE_SEQ"          ;
ALTER SEQUENCE "PLACEMENTFEATURE_SEQ" RESTART WITH 101;
--------------------------------------------------------
--  DDL for Sequence PLACINGWAY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLACINGWAY_SEQ"          ;
ALTER SEQUENCE "PLACINGWAY_SEQ" RESTART WITH 261;
--------------------------------------------------------
--  DDL for Sequence PLANDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLANDOC_SEQ"          ;
ALTER SEQUENCE "PLANDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLANPOSITIONCHANGEREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLANPOSITIONCHANGEREASON_SEQ"          ;
ALTER SEQUENCE "PLANPOSITIONCHANGEREASON_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence PLAN2ARRANGEMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2ARRANGEMENT_SEQ"          ;
ALTER SEQUENCE "PLAN2ARRANGEMENT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLAN2CHANGEREASON_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2CHANGEREASON_SEQ"          ;
ALTER SEQUENCE "PLAN2CHANGEREASON_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence PLAN2DAILYTOTALS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2DAILYTOTALS_SEQ"          ;
ALTER SEQUENCE "PLAN2DAILYTOTALS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLAN2DOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2DOC_SEQ"          ;
ALTER SEQUENCE "PLAN2DOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLAN2GOODS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2GOODS_SEQ"          ;
ALTER SEQUENCE "PLAN2GOODS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLAN2LEDGER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2LEDGER_SEQ"          ;
ALTER SEQUENCE "PLAN2LEDGER_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSEXTNUMBER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSEXTNUMBER_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSEXTNUMBER_SEQ" RESTART WITH 15521;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSFEATURE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSFEATURE_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSFEATURE_SEQ" RESTART WITH 156041;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSKBK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSKBK_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSKBK_SEQ" RESTART WITH 185781;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSKBKYEAR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSKBKYEAR_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSKBKYEAR_SEQ" RESTART WITH 156581;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSOKVED_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSOKVED_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSOKVED_SEQ" RESTART WITH 160301;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSPOSITION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSPOSITION_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSPOSITION_SEQ" RESTART WITH 334441;
--------------------------------------------------------
--  DDL for Sequence PLAN2OOSPRODUCT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN2OOSPRODUCT_SEQ"          ;
ALTER SEQUENCE "PLAN2OOSPRODUCT_SEQ" RESTART WITH 657441;
--------------------------------------------------------
--  DDL for Sequence PLAN3DOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN3DOC_SEQ"          ;
ALTER SEQUENCE "PLAN3DOC_SEQ" RESTART WITH 10381;
--------------------------------------------------------
--  DDL for Sequence PLAN3PURCHASEDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLAN3PURCHASEDOC_SEQ"          ;
ALTER SEQUENCE "PLAN3PURCHASEDOC_SEQ" RESTART WITH 39941;
--------------------------------------------------------
--  DDL for Sequence PLGOODS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PLGOODS_SEQ"          ;
ALTER SEQUENCE "PLGOODS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PREFERENCEGROUPFEATURE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PREFERENCEGROUPFEATURE_SEQ"          ;
ALTER SEQUENCE "PREFERENCEGROUPFEATURE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PREFERENCEGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PREFERENCEGROUP_SEQ"          ;
ALTER SEQUENCE "PREFERENCEGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PROCTREE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PROCTREE_SEQ"          ;
ALTER SEQUENCE "PROCTREE_SEQ" RESTART WITH 19301;
--------------------------------------------------------
--  DDL for Sequence PROCUREMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PROCUREMENT_SEQ"          ;
ALTER SEQUENCE "PROCUREMENT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PURCHASECARRY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PURCHASECARRY_SEQ"          ;
ALTER SEQUENCE "PURCHASECARRY_SEQ" RESTART WITH 231321;
--------------------------------------------------------
--  DDL for Sequence PURCHASEMETHOD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PURCHASEMETHOD_SEQ"          ;
ALTER SEQUENCE "PURCHASEMETHOD_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PURCHASEMODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PURCHASEMODE_SEQ"          ;
ALTER SEQUENCE "PURCHASEMODE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PURCHASEPLANDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PURCHASEPLANDOC_SEQ"          ;
ALTER SEQUENCE "PURCHASEPLANDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence PURCHASEPLAN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PURCHASEPLAN_SEQ"          ;
ALTER SEQUENCE "PURCHASEPLAN_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence QUALIFYSELECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "QUALIFYSELECT_SEQ"          ;
ALTER SEQUENCE "QUALIFYSELECT_SEQ" RESTART WITH 48571;
--------------------------------------------------------
--  DDL for Sequence QUALREQ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "QUALREQ_SEQ"          ;
ALTER SEQUENCE "QUALREQ_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RECOILDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RECOILDOC_SEQ"          ;
ALTER SEQUENCE "RECOILDOC_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REFATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REFATTACH_SEQ"          ;
ALTER SEQUENCE "REFATTACH_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REFERENCECLASS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REFERENCECLASS_SEQ"          ;
ALTER SEQUENCE "REFERENCECLASS_SEQ" RESTART WITH 321;
--------------------------------------------------------
--  DDL for Sequence REFINANCINGRATE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REFINANCINGRATE_SEQ"          ;
ALTER SEQUENCE "REFINANCINGRATE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence REFJOURNAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REFJOURNAL_SEQ"          ;
ALTER SEQUENCE "REFJOURNAL_SEQ" RESTART WITH 34591;
--------------------------------------------------------
--  DDL for Sequence REFUSALFACTFOUNDATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REFUSALFACTFOUNDATION_SEQ"          ;
ALTER SEQUENCE "REFUSALFACTFOUNDATION_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence REPDOCUMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPDOCUMENT_SEQ"          ;
ALTER SEQUENCE "REPDOCUMENT_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence REPFIELD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPFIELD_SEQ"          ;
ALTER SEQUENCE "REPFIELD_SEQ" RESTART WITH 301;
--------------------------------------------------------
--  DDL for Sequence REPFORM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPFORM_SEQ"          ;
ALTER SEQUENCE "REPFORM_SEQ" RESTART WITH 141;
--------------------------------------------------------
--  DDL for Sequence REPFRAGMENTCHILD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPFRAGMENTCHILD_SEQ"          ;
ALTER SEQUENCE "REPFRAGMENTCHILD_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REPFRAGMENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPFRAGMENT_SEQ"          ;
ALTER SEQUENCE "REPFRAGMENT_SEQ" RESTART WITH 41;
--------------------------------------------------------
--  DDL for Sequence REPORT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPORT_SEQ"          ;
ALTER SEQUENCE "REPORT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REPPROFILE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPPROFILE_SEQ"          ;
ALTER SEQUENCE "REPPROFILE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REPSOURCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPSOURCE_SEQ"          ;
ALTER SEQUENCE "REPSOURCE_SEQ" RESTART WITH 121;
--------------------------------------------------------
--  DDL for Sequence REPTEMPLATEATTACH_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REPTEMPLATEATTACH_SEQ"          ;
ALTER SEQUENCE "REPTEMPLATEATTACH_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence REQUESTDOC_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REQUESTDOC_SEQ"          ;
ALTER SEQUENCE "REQUESTDOC_SEQ" RESTART WITH 14801;
--------------------------------------------------------
--  DDL for Sequence REQUIREMENTTYPEPM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REQUIREMENTTYPEPM_SEQ"          ;
ALTER SEQUENCE "REQUIREMENTTYPEPM_SEQ" RESTART WITH 187;
--------------------------------------------------------
--  DDL for Sequence REQUIREMENTTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "REQUIREMENTTYPE_SEQ"          ;
ALTER SEQUENCE "REQUIREMENTTYPE_SEQ" RESTART WITH 35;
--------------------------------------------------------
--  DDL for Sequence RESERVEDBUDGETLINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RESERVEDBUDGETLINE_SEQ"          ;
ALTER SEQUENCE "RESERVEDBUDGETLINE_SEQ" RESTART WITH 5441;
--------------------------------------------------------
--  DDL for Sequence RESPONSIBILITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RESPONSIBILITY_SEQ"          ;
ALTER SEQUENCE "RESPONSIBILITY_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RNP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RNP_SEQ"          ;
ALTER SEQUENCE "RNP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence ROLEREGISTER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "ROLEREGISTER_SEQ"          ;
ALTER SEQUENCE "ROLEREGISTER_SEQ" RESTART WITH 25431;
--------------------------------------------------------
--  DDL for Sequence RPL$CONSTRAINTFIELDS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPL$CONSTRAINTFIELDS_SEQ"          ;
ALTER SEQUENCE "RPL$CONSTRAINTFIELDS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RPL$CONSTRAINTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPL$CONSTRAINTS_SEQ"          ;
ALTER SEQUENCE "RPL$CONSTRAINTS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RPLOBJECT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPLOBJECT_SEQ"          ;
ALTER SEQUENCE "RPLOBJECT_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence RPLRULE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPLRULE_SEQ"          ;
ALTER SEQUENCE "RPLRULE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence RPL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPL_SEQ"          ;
ALTER SEQUENCE "RPL_SEQ" RESTART WITH 81;
--------------------------------------------------------
--  DDL for Sequence RPLSITE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPLSITE_SEQ"          ;
ALTER SEQUENCE "RPLSITE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RPLTABLEPLUGIN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPLTABLEPLUGIN_SEQ"          ;
ALTER SEQUENCE "RPLTABLEPLUGIN_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RPLTABLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RPLTABLE_SEQ"          ;
ALTER SEQUENCE "RPLTABLE_SEQ" RESTART WITH 421;
--------------------------------------------------------
--  DDL for Sequence RQQUALREQ_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RQQUALREQ_SEQ"          ;
ALTER SEQUENCE "RQQUALREQ_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RULEREQUISITE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RULEREQUISITE_SEQ"          ;
ALTER SEQUENCE "RULEREQUISITE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence RULESCRIPT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "RULESCRIPT_SEQ"          ;
ALTER SEQUENCE "RULESCRIPT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence SCHEXPDOCS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCHEXPDOCS_SEQ"          ;
ALTER SEQUENCE "SCHEXPDOCS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence SCHPLAN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCHPLAN_SEQ"          ;
ALTER SEQUENCE "SCHPLAN_SEQ" RESTART WITH 261;
--------------------------------------------------------
--  DDL for Sequence SCHTASK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SCHTASK_SEQ"          ;
ALTER SEQUENCE "SCHTASK_SEQ" RESTART WITH 161;
--------------------------------------------------------
--  DDL for Sequence SEQ_DOCEXCHANGESCHEME
--------------------------------------------------------

   CREATE SEQUENCE  "SEQ_DOCEXCHANGESCHEME"          ;
ALTER SEQUENCE "SEQ_DOCEXCHANGESCHEME" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence SERVERACTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SERVERACTION_SEQ"          ;
ALTER SEQUENCE "SERVERACTION_SEQ" RESTART WITH 1621;
--------------------------------------------------------
--  DDL for Sequence SERVERPROCESSOR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SERVERPROCESSOR_SEQ"          ;
ALTER SEQUENCE "SERVERPROCESSOR_SEQ" RESTART WITH 561;
--------------------------------------------------------
--  DDL for Sequence SERVERPROVIDER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SERVERPROVIDER_SEQ"          ;
ALTER SEQUENCE "SERVERPROVIDER_SEQ" RESTART WITH 381;
--------------------------------------------------------
--  DDL for Sequence SIGNEXPORTLOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SIGNEXPORTLOG_SEQ"          ;
ALTER SEQUENCE "SIGNEXPORTLOG_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence STATISTICSSOURCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STATISTICSSOURCE_SEQ"          ;
ALTER SEQUENCE "STATISTICSSOURCE_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence STOREDDOCUMENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "STOREDDOCUMENTS_SEQ"          ;
ALTER SEQUENCE "STOREDDOCUMENTS_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence SYSEVENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SYSEVENT_SEQ"          ;
ALTER SEQUENCE "SYSEVENT_SEQ" RESTART WITH 1396191;
--------------------------------------------------------
--  DDL for Sequence SYSPARAM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SYSPARAM_SEQ"          ;
ALTER SEQUENCE "SYSPARAM_SEQ" RESTART WITH 1401;
--------------------------------------------------------
--  DDL for Sequence SYSRIGHT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SYSRIGHT_SEQ"          ;
ALTER SEQUENCE "SYSRIGHT_SEQ" RESTART WITH 561;
--------------------------------------------------------
--  DDL for Sequence SYSUSER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "SYSUSER_SEQ"          ;
ALTER SEQUENCE "SYSUSER_SEQ" RESTART WITH 4141;
--------------------------------------------------------
--  DDL for Sequence TASKJOURNAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TASKJOURNAL_SEQ"          ;
ALTER SEQUENCE "TASKJOURNAL_SEQ" RESTART WITH 10259631;
--------------------------------------------------------
--  DDL for Sequence TENDERCRITERIONCHILD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDERCRITERIONCHILD_SEQ"          ;
ALTER SEQUENCE "TENDERCRITERIONCHILD_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence TENDERCRITERIONPM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDERCRITERIONPM_SEQ"          ;
ALTER SEQUENCE "TENDERCRITERIONPM_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence TENDERCRITERION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDERCRITERION_SEQ"          ;
ALTER SEQUENCE "TENDERCRITERION_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence TENDERLINECOMM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDERLINECOMM_SEQ"          ;
ALTER SEQUENCE "TENDERLINECOMM_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence TENDERLINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDERLINE_SEQ"          ;
ALTER SEQUENCE "TENDERLINE_SEQ" RESTART WITH 461;
--------------------------------------------------------
--  DDL for Sequence TENDER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TENDER_SEQ"          ;
ALTER SEQUENCE "TENDER_SEQ" RESTART WITH 501;
--------------------------------------------------------
--  DDL for Sequence TERRITORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TERRITORY_SEQ"          ;
ALTER SEQUENCE "TERRITORY_SEQ" RESTART WITH 29921;
--------------------------------------------------------
--  DDL for Sequence TERTYPE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TERTYPE_SEQ"          ;
ALTER SEQUENCE "TERTYPE_SEQ" RESTART WITH 61;
--------------------------------------------------------
--  DDL for Sequence TYPEDOCREQGROUP_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TYPEDOCREQGROUP_SEQ"          ;
ALTER SEQUENCE "TYPEDOCREQGROUP_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence TYPEREQCRIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "TYPEREQCRIT_SEQ"          ;
ALTER SEQUENCE "TYPEREQCRIT_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence UNIT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "UNIT_SEQ"          ;
ALTER SEQUENCE "UNIT_SEQ" RESTART WITH 601;
--------------------------------------------------------
--  DDL for Sequence UPDPACKAGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "UPDPACKAGE_SEQ"          ;
ALTER SEQUENCE "UPDPACKAGE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence USERBUDGET_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERBUDGET_SEQ"          ;
ALTER SEQUENCE "USERBUDGET_SEQ" RESTART WITH 301;
--------------------------------------------------------
--  DDL for Sequence USERCERT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERCERT_SEQ"          ;
ALTER SEQUENCE "USERCERT_SEQ" RESTART WITH 21;
--------------------------------------------------------
--  DDL for Sequence USERORG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERORG_SEQ"          ;
ALTER SEQUENCE "USERORG_SEQ" RESTART WITH 1441;
--------------------------------------------------------
--  DDL for Sequence USERROLE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERROLE_SEQ"          ;
ALTER SEQUENCE "USERROLE_SEQ" RESTART WITH 941;
--------------------------------------------------------
--  DDL for Sequence USERROLES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERROLES_SEQ"          ;
ALTER SEQUENCE "USERROLES_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence USERSESSION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERSESSION_SEQ"          ;
ALTER SEQUENCE "USERSESSION_SEQ" RESTART WITH 1093271;
--------------------------------------------------------
--  DDL for Sequence USESCRYPTOLIBPARAM_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USESCRYPTOLIBPARAM_SEQ"          ;
ALTER SEQUENCE "USESCRYPTOLIBPARAM_SEQ" RESTART WITH 214;
--------------------------------------------------------
--  DDL for Sequence USESCRYPTOLIB_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USESCRYPTOLIB_SEQ"          ;
ALTER SEQUENCE "USESCRYPTOLIB_SEQ" RESTART WITH 3;
--------------------------------------------------------
--  DDL for Sequence WEBSTATCACHE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "WEBSTATCACHE_SEQ"          ;
ALTER SEQUENCE "WEBSTATCACHE_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Sequence WEBSTATCACHEVAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "WEBSTATCACHEVAL_SEQ"          ;
ALTER SEQUENCE "WEBSTATCACHEVAL_SEQ" RESTART WITH 1;
--------------------------------------------------------
--  DDL for Table ABANDONEDREASON
--------------------------------------------------------

  CREATE TABLE "ABANDONEDREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(350 ) NOT NULL, 
	"OBJECTNAME" VARCHAR(350 ), 
	"REASONTYPE" VARCHAR(4 ) NOT NULL, 
	"DOCTYPECODE" VARCHAR(50 ) NOT NULL, 
	"DOCTYPENAME" VARCHAR(350 ), 
	"PLACINGWAYCODE" VARCHAR(7 ) NOT NULL, 
	"PLACINGWAYNAME" VARCHAR(500 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ALTGOODSGROUP
--------------------------------------------------------

  CREATE TABLE "ALTGOODSGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(500 ) NOT NULL, 
	"TYPE_ID" NUMERIC(15,0) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"OKP" VARCHAR(16 ), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table ALTGOODSGROUPLINK
--------------------------------------------------------

  CREATE TABLE "ALTGOODSGROUPLINK" 
   (	"TYPE_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"ALTGOODSGROUP_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ALTGOODSGROUPTYPE
--------------------------------------------------------

  CREATE TABLE "ALTGOODSGROUPTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ALTUNITFACTOR
--------------------------------------------------------

  CREATE TABLE "ALTUNITFACTOR" 
   (	"UNIT_ID" NUMERIC(15,0) NOT NULL, 
	"ALTGOODSGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"FACTOR" DOUBLE PRECISION NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ANYDATA
--------------------------------------------------------

  CREATE TABLE "ANYDATA" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DATA" BLOB, 
	"DATA_KEY" VARCHAR(120 ) NOT NULL, 
	"STORAGE" VARCHAR(25 ) NOT NULL, 
	"DEVICE" VARCHAR(25 ) NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table APPMODULE
--------------------------------------------------------

  CREATE TABLE "APPMODULE" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(32 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table APPMODULEDEPENDENCY
--------------------------------------------------------

  CREATE TABLE "APPMODULEDEPENDENCY" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"DEPENDID" NUMERIC(18,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table APPOBJ
--------------------------------------------------------

  CREATE TABLE "APPOBJ" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MODULEID" NUMERIC(18,0), 
	"PARENTNAME" VARCHAR(128 ), 
	"NAME" VARCHAR(128 ) NOT NULL, 
	"CAPTION" VARCHAR(128 ), 
	"DESCRIPTION" VARCHAR(256 ), 
	"ICON" VARCHAR(256 ), 
	"OPENICON" VARCHAR(256 ), 
	"STYPE" NUMERIC(18,0), 
	"SHOWORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table APPOBJPROP
--------------------------------------------------------

  CREATE TABLE "APPOBJPROP" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"APPOBJID" NUMERIC(18,0), 
	"NAME" VARCHAR(32 ) NOT NULL, 
	"VAL" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table APPOINTMENT
--------------------------------------------------------

  CREATE TABLE "APPOINTMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table ATTACHCATEGORIES
--------------------------------------------------------

  CREATE TABLE "ATTACHCATEGORIES" 
   (	"DOCATTACHEX_ID" NUMERIC(15,0) NOT NULL, 
	"DOCCATEGORY_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ATTACHEDPLANDOC
--------------------------------------------------------

  CREATE TABLE "ATTACHEDPLANDOC" 
   (	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEPLANDOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table AUCTIONBID
--------------------------------------------------------

  CREATE TABLE "AUCTIONBID" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"AMOUNT" NUMERIC(15,2) NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIPTTIME" DATE DEFAULT '1900-01-01' NOT NULL, 
	"AUCTIONSTEP" NUMERIC(15,2), 
	"COMPETITORPOS" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table AUCTIONLOG
--------------------------------------------------------

  CREATE TABLE "AUCTIONLOG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"EVENTTIME" DATE NOT NULL, 
	"STATE" NUMERIC(3,0) NOT NULL, 
	"DEADLINE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table BANK
--------------------------------------------------------

  CREATE TABLE "BANK" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BIC" VARCHAR(9 ) NOT NULL, 
	"CORACCOUNT" VARCHAR(20 ), 
	"BANK_TYPE" VARCHAR(10 ), 
	"CITY_TYPE" VARCHAR(10 ), 
	"CITY_NAME" VARCHAR(30 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table BANKGUARANTEEDOC
--------------------------------------------------------

  CREATE TABLE "BANKGUARANTEEDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"OOSKEY" VARCHAR(100 ) NOT NULL, 
	"VERSIONNUMBER" NUMERIC(15,0), 
	"REGNUMBER" VARCHAR(20 ), 
	"DOCPUBLISHDATE" DATE, 
	"BANKINN" VARCHAR(20 ), 
	"BANKFULLNAME" VARCHAR(2000 ), 
	"BANKFACTADDRESS" VARCHAR(2000 ), 
	"SUPPLIERINN" VARCHAR(20 ), 
	"SUPPLIERKPP" VARCHAR(20 ), 
	"SUPPLIEROGRN" VARCHAR(20 ), 
	"SUPPLIERORGANIZATIONNAME" VARCHAR(2000 ), 
	"SUPPLIERFIRMNAME" VARCHAR(2000 ), 
	"SUPPLIERFACTUALADDRESS" VARCHAR(2000 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERINN" VARCHAR(20 ), 
	"CUSTOMERKPP" VARCHAR(20 ), 
	"CUSTOMERFULLNAME" VARCHAR(2000 ), 
	"CUSTOMERSHORTNAME" VARCHAR(2000 ), 
	"CUSTOMERFACTADDRESS" VARCHAR(2000 ), 
	"PURCHASENUMBER" VARCHAR(100 ), 
	"LOTNUMBER" NUMERIC(15,0), 
	"REGNUM" VARCHAR(100 ), 
	"GUARANTEEDATE" DATE, 
	"GUARANTEENUMBER" VARCHAR(100 ), 
	"GUARANTEEAMOUNT" NUMERIC(15,2), 
	"EXPIREDATE" DATE, 
	"MODIFICATIONREASON" CHAR(1 ), 
	"MODIFICATIONINFO" VARCHAR(2000 ), 
	"HREF" VARCHAR(1024 ), 
	"PRINTFORMHREF" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table BANKGUARANTEEREFDOC
--------------------------------------------------------

  CREATE TABLE "BANKGUARANTEEREFDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"OOSKEY" VARCHAR(100 ) NOT NULL, 
	"REGNUMBER" VARCHAR(20 ), 
	"DOCPUBLISHDATE" DATE, 
	"HREF" VARCHAR(1024 ), 
	"PRINTFORMHREF" VARCHAR(1024 ), 
	"REFUSALINFODOCDATE" DATE, 
	"REFUSALINFODOCNAME" VARCHAR(250 ), 
	"REFUSALINFODOCNUMBER" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table BANKGUARANTEEREFDOCREASON
--------------------------------------------------------

  CREATE TABLE "BANKGUARANTEEREFDOCREASON" 
   (	"BANKGUARANTEEREF_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CODE" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table BANKGUARANTEEREFREASON
--------------------------------------------------------

  CREATE TABLE "BANKGUARANTEEREFREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table BUDGCODE
--------------------------------------------------------

  CREATE TABLE "BUDGCODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(2,0) NOT NULL, 
	"CODE" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"FINYEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table BUDGET
--------------------------------------------------------

  CREATE TABLE "BUDGET" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ) NOT NULL, 
	"ISLOCAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISRURALVILLAGE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISBUDGETINSTITUTION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FINSRC_ID" NUMERIC(15,0), 
	"TERRITORY_ID" NUMERIC(15,0), 
	"PARENT_ID" NUMERIC(15,0), 
	"RELATIONBUDGET_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table BUDGETLINE
--------------------------------------------------------

  CREATE TABLE "BUDGETLINE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"ASSIGN_AMT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"REST_ASSIGN_AMT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ASSIGN_AMT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"REST_ASSIGN_AMT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ASSIGN_AMT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"REST_ASSIGN_AMT3" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table BUDGETSTAGE
--------------------------------------------------------

  CREATE TABLE "BUDGETSTAGE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"STAGECODE" VARCHAR(2 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CACHELIST
--------------------------------------------------------

  CREATE TABLE "CACHELIST" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"STORAGE_NAME" VARCHAR(32 ) NOT NULL, 
	"USERSESSION_ID" NUMERIC(15,0) NOT NULL, 
	"CACHE_KEY" VARCHAR(64 ) NOT NULL, 
	"HASH_CODE" NUMERIC(15,0), 
	"VERSION" NUMERIC(15,0), 
	"INDEX_HASH_CODE" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CACHEMAN
--------------------------------------------------------

  CREATE TABLE "CACHEMAN" 
   (	"GUID" VARCHAR(38 ) NOT NULL, 
	"LAST_ACCESS" DATE, 
	"USERNAME" VARCHAR(30 ), 
	"CLIENT_HOST" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table CAVILDOC
--------------------------------------------------------

  CREATE TABLE "CAVILDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"PUBLISH_DATE" DATE, 
	"CMPORG_ID" NUMERIC(15,0), 
	"PURCHASENUMBER" VARCHAR(50 ), 
	"VIOLATION_DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"PORTALSTATUS" NUMERIC(2,0), 
	"RESPPERSON_ID" NUMERIC(15,0), 
	"EMAIL" VARCHAR(256 ), 
	"ANSWER" VARCHAR(2000 ), 
	"BUDGET_ID" NUMERIC(15,0), 
	"WEBLINK" VARCHAR(512 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table CAVILTYPE
--------------------------------------------------------

  CREATE TABLE "CAVILTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table CDCAVILTYPE
--------------------------------------------------------

  CREATE TABLE "CDCAVILTYPE" 
   (	"CAVILDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CAVILTYPE_ID" NUMERIC(15,0), 
	"COMMENTS" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CEEXECUTIONLINE
--------------------------------------------------------

  CREATE TABLE "CEEXECUTIONLINE" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCUMENT_NUM" VARCHAR(100 ), 
	"DOCUMENT_DATE" DATE, 
	"EXEC_DATE" DATE, 
	"PAIDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DOCUMENTNAME" VARCHAR(1000 ), 
	"PRODUCT" VARCHAR(4000 ), 
	"CONTRACTEXECDOCTYPE_ID" NUMERIC(15,0), 
	"CONTRACTEXECDOCTYPE_CODE" VARCHAR(4 ), 
	"FACTDOC_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CEPAYMENTPENALTY
--------------------------------------------------------

  CREATE TABLE "CEPAYMENTPENALTY" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"PENALTYPOS" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCNAME" VARCHAR(1000 ), 
	"DOCNUMBER" VARCHAR(100 ), 
	"DOCDATE" DATE, 
	"AMOUNT" NUMERIC(15,2)
   )  ;
--------------------------------------------------------
--  DDL for Table CEPENALTY
--------------------------------------------------------

  CREATE TABLE "CEPENALTY" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CLAIM_DOCUMENTCLASS_ID" NUMERIC(15,0), 
	"CLAIM_DOC_NUMBER" VARCHAR(20 ), 
	"CLAIM_DOC_DATE" DATE, 
	"CONTRACTPARTY" NUMERIC(1,0), 
	"PENALTYTYPE" NUMERIC(1,0), 
	"PENALTYREASON" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PAYMENT_DOCNAME" VARCHAR(1000 ), 
	"PAYMENT_DOCNUMBER" VARCHAR(100 ), 
	"PAYMENT_DOCDATE" DATE, 
	"PAYMENT_AMOUNT" NUMERIC(15,2), 
	"RETURN_DOCNAME" VARCHAR(1000 ), 
	"RETURN_DOCNUMBER" VARCHAR(100 ), 
	"RETURN_DOCDATE" DATE, 
	"RETURN_AMOUNT" NUMERIC(15,2)
   )  ;
--------------------------------------------------------
--  DDL for Table CEREPARATIONLINE
--------------------------------------------------------

  CREATE TABLE "CEREPARATIONLINE" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CONTRACTREPARATIONDOC_ID" NUMERIC(15,0), 
	"DOCUMENTNAME" VARCHAR(1000 ) NOT NULL, 
	"DOCUMENTDATE" DATE NOT NULL, 
	"DOCUMENTNUMBER" VARCHAR(100 ), 
	"REPARATIONAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CERETURNPENALTY
--------------------------------------------------------

  CREATE TABLE "CERETURNPENALTY" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"PENALTYPOS" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCNAME" VARCHAR(1000 ), 
	"DOCNUMBER" VARCHAR(100 ), 
	"DOCDATE" DATE, 
	"AMOUNT" NUMERIC(15,2)
   )  ;
--------------------------------------------------------
--  DDL for Table CERTINTERCHANGEREQUEST
--------------------------------------------------------

  CREATE TABLE "CERTINTERCHANGEREQUEST" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"REMARK" VARCHAR(255 ), 
	"USERCERT_ID" NUMERIC(15,0) NOT NULL, 
	"EXPORTABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"COMMENTS" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CERTREQUEST
--------------------------------------------------------

  CREATE TABLE "CERTREQUEST" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"REMARK" VARCHAR(255 ), 
	"COUNTRY" VARCHAR(2 ), 
	"CITY" VARCHAR(128 ), 
	"STATE" VARCHAR(128 ), 
	"USER_ORG" VARCHAR(255 ), 
	"USER_FIO" VARCHAR(64 ), 
	"USER_EMAIL" VARCHAR(128 ), 
	"INSURANCE_NUMBER" NUMERIC(11,0), 
	"JOB_POSITION" VARCHAR(128 ), 
	"STATUS_OWNER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ADDRESS" VARCHAR(128 ), 
	"USER_ORG_ID" NUMERIC(15,0), 
	"DEPARTMENT" VARCHAR(64 ), 
	"EXPORTABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"COMMENTS" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CERTREQUESTOID
--------------------------------------------------------

  CREATE TABLE "CERTREQUESTOID" 
   (	"CERTREQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"OIDREF_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CERTREVOKEREQUEST
--------------------------------------------------------

  CREATE TABLE "CERTREVOKEREQUEST" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"REMARK" VARCHAR(255 ), 
	"USERCERT_ID" NUMERIC(15,0) NOT NULL, 
	"COMMENTS" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CETERMINATIONLINE
--------------------------------------------------------

  CREATE TABLE "CETERMINATIONLINE" 
   (	"CONTRACTEXECDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"TERMINATION_DATE" DATE, 
	"PAIDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"REASON" VARCHAR(4000 ), 
	"TERMINATIONREASON_ID" NUMERIC(15,0), 
	"TERMINATIONREASONDOC_ID" NUMERIC(15,0), 
	"TERMINATIONREASONDOC_DATE" DATE, 
	"TERMINATIONREASONDOC_NUMBER" VARCHAR(100 ), 
	"TERMINATIONREASONDOC_REFDATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table CLAIMDOC
--------------------------------------------------------

  CREATE TABLE "CLAIMDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"SHORT_DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"COMPLETE_DATE" DATE, 
	"ANSWER" NUMERIC(1,0) DEFAULT 0, 
	"ANSWER_TEXT" BLOB SUB_TYPE TEXT, 
	"REMARK" VARCHAR(255 ), 
	"REASON" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARENT_CONTRACT_ID" NUMERIC(15,0), 
	"PENALTY_DATE" DATE, 
	"PENALTY_AMOUNT" NUMERIC(15,2), 
	"VIOLATION_NAME" BLOB SUB_TYPE TEXT, 
	"VIOLATION_DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"VIOLATION_REASON" BLOB SUB_TYPE TEXT, 
	"PENALTY_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PENALTY_CHANGE_DATE" DATE, 
	"PENALTY_CHANGE_TYPE" NUMERIC(1,0), 
	"OUTSTANDINGAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DELAYDAYS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"EXECUTIONDAYS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"PENALTY_DOCNAME" VARCHAR(1000 ), 
	"PENALTY_DOCNUMBER" VARCHAR(100 ), 
	"PENALTY_DOCDATE" DATE, 
	"PENALTY_RETURN_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table CLAIMPAYFACT
--------------------------------------------------------

  CREATE TABLE "CLAIMPAYFACT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CLAIM_ID" NUMERIC(15,0) NOT NULL, 
	"PAYDATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"NUM" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(500 ) NOT NULL, 
	"DOCDATE" DATE NOT NULL, 
	"DOCTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CLAIMPENALTYCHANGEDOCINFO
--------------------------------------------------------

  CREATE TABLE "CLAIMPENALTYCHANGEDOCINFO" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CLAIM_ID" NUMERIC(15,0) NOT NULL, 
	"DOCDATE" DATE NOT NULL, 
	"DOCNUMBER" VARCHAR(100 ), 
	"CAPTION" VARCHAR(200 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CLASSOPER
--------------------------------------------------------

  CREATE TABLE "CLASSOPER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CLIENTOBJECT
--------------------------------------------------------

  CREATE TABLE "CLIENTOBJECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"OBJ_TYPE" NUMERIC(1,0) NOT NULL, 
	"SYSTEM_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CLASS_GUID" VARCHAR(100 ), 
	"PARAMS" VARCHAR(300 ), 
	"CAPTION" VARCHAR(100 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"XML_PARAMS" BLOB SUB_TYPE TEXT, 
	"BUDGET_REQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"HELPFILE" VARCHAR(256 ), 
	"HELPKEYWORD" VARCHAR(256 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  CREATE TABLE "CLIENTOBJECTCOMMENTS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CLIENTOBJECT_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0), 
	"COMMENT_FIELD" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CLNDDAY
--------------------------------------------------------

  CREATE TABLE "CLNDDAY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CLNDTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CLNDDAYTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CLND_DAY" DATE NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CLNDDAYTYPE
--------------------------------------------------------

  CREATE TABLE "CLNDDAYTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CLNDTYPE
--------------------------------------------------------

  CREATE TABLE "CLNDTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL, 
	"CLND_YEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCOMMEMBER
--------------------------------------------------------

  CREATE TABLE "CMPCOMMEMBER" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"COMMEMBER_ID" NUMERIC(15,0), 
	"COMMEMBER_NAME" VARCHAR(255 ), 
	"COMMEMBER_ROLE" VARCHAR(255 ), 
	"COMROLE" NUMERIC(1,0), 
	"ABSENT" NUMERIC(1,0) NOT NULL, 
	"PRESIDENT_VACATION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NOTE" VARCHAR(100 ), 
	"PHASEPOS" NUMERIC(15,0), 
	"OOS_NUMBER" VARCHAR(100 ), 
	"ISACTINGFORSECRETARY" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCOMPETITOR
--------------------------------------------------------

  CREATE TABLE "CMPCOMPETITOR" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"VENDOR_ID" NUMERIC(15,0), 
	"TAXCODE" VARCHAR(20 ), 
	"KPP" VARCHAR(20 ), 
	"VENDORNAME" VARCHAR(2000 ), 
	"ORDINALNUMBER" NUMERIC(15,0), 
	"SCORE" NUMERIC(15,4), 
	"ISSATISFY" NUMERIC(1,0), 
	"ISQUALIFY" NUMERIC(1,0), 
	"VENDORCARDNUMBER" NUMERIC(15,0), 
	"AUCTIONCODE" VARCHAR(20 ), 
	"PREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PREV_SCORE" NUMERIC(15,4), 
	"PREV_ORDINALNUMBER" NUMERIC(15,0), 
	"DISCUSSION" VARCHAR(4000 ), 
	"ABSENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"EXPLANATION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCONDEALRESP
--------------------------------------------------------

  CREATE TABLE "CMPCONDEALRESP" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPCUSTOMERPOS" NUMERIC(15,0), 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_NAME" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCRITERION
--------------------------------------------------------

  CREATE TABLE "CMPCRITERION" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(512 ), 
	"CTYPE" NUMERIC(2,0), 
	"CALCMODE" NUMERIC(1,0), 
	"BESTPARAM" NUMERIC(1,0), 
	"WEIGHT" NUMERIC(15,2), 
	"ACTUAL_WEIGHT" NUMERIC(15,2), 
	"LOTPOS" NUMERIC(15,0), 
	"TENDERCRITERION_ID" NUMERIC(15,0), 
	"MINWEIGHT" NUMERIC(15,2), 
	"MAXWEIGHT" NUMERIC(15,2), 
	"VAL" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FORMULA" VARCHAR(2000 ), 
	"OOSCODE" VARCHAR(2 ) DEFAULT '0' NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCRITERIONLINE
--------------------------------------------------------

  CREATE TABLE "CMPCRITERIONLINE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPCRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(2000 ) NOT NULL, 
	"MINVALUE" NUMERIC(15,2), 
	"MAXVALUE" NUMERIC(15,2), 
	"WEIGHT" NUMERIC(15,2), 
	"LIMITDESCRIPTION" VARCHAR(2000 ), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCUSTOMER
--------------------------------------------------------

  CREATE TABLE "CMPCUSTOMER" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"REFCOUNT" NUMERIC(4,0), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CUSTOMERTAXCODE" VARCHAR(20 ), 
	"CUSTOMERKPP" VARCHAR(20 ), 
	"CUSTOMERFACTCOUNTRY_ID" NUMERIC(15,0), 
	"CUSTOMERFACTPOSTINDEX" VARCHAR(10 ), 
	"CUSTOMERFACTTERRITORYCODE" VARCHAR(20 ), 
	"CUSTOMERFACTADDRESS" VARCHAR(300 ), 
	"CUSTOMERPOSTCOUNTRY_ID" NUMERIC(15,0), 
	"CUSTOMERPOSTPOSTINDEX" VARCHAR(10 ), 
	"CUSTOMERPOSTTERRITORYCODE" VARCHAR(20 ), 
	"CUSTOMERPOSTADDRESS" VARCHAR(300 ), 
	"CUSTOMERFAX" VARCHAR(100 ), 
	"CUSTOMERPHONE" VARCHAR(100 ), 
	"CUSTOMEREMAIL" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPCUSTOMERLOT
--------------------------------------------------------

  CREATE TABLE "CMPCUSTOMERLOT" 
   (	"POS" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"QUANTITY" VARCHAR(4000 ), 
	"DELIVERYPLACE" VARCHAR(4000 ), 
	"DELIVERYTERM" VARCHAR(1024 ), 
	"PAYMENTCONDITION" VARCHAR(4000 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"ISGUARANTEEAPP" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEEAPPAMOUNT" NUMERIC(15,2), 
	"GUARAPPSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARAPPPERSONALACC_ID" NUMERIC(15,0), 
	"GUARAPPBIC" VARCHAR(15 ), 
	"GUARANTEEAPPPROCEDURE" VARCHAR(4000 ), 
	"ISGUARANTEECONTRACT" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEECONTRACTAMOUNT" NUMERIC(15,2), 
	"GUARCONTRSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARCONTRPERSONALACC_ID" NUMERIC(15,0), 
	"GUARANTEECONTRACTBIC" VARCHAR(15 ), 
	"GUARANTEECONTRACTPROCEDURE" VARCHAR(4000 ), 
	"GUARANTEECONTRACTISBAIL" NUMERIC(1,0) DEFAULT 0, 
	"FINANCESOURCE" VARCHAR(2000 ), 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"ADVANCE" NUMERIC(15,2), 
	"ISMAXINVITATIONDATE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONMNGRRESP_FULLNAME" VARCHAR(256 ), 
	"CUSTCANCHANGECONTERMS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CUSTCANREFUSE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONSERVICEINFO" VARCHAR(2000 ), 
	"CONMNGRRESP_ID" NUMERIC(15,0), 
	"VATAMOUNT" NUMERIC(15,2), 
	"GUARANTEEAPPPERCENT" NUMERIC(5,2), 
	"GUARANTEECONTRACTPERCENT" NUMERIC(5,2), 
	"CUSTCANREFUSEINFO" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CMPDECISION
--------------------------------------------------------

  CREATE TABLE "CMPDECISION" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PHASEPOS" NUMERIC(15,0), 
	"DECISION" BLOB SUB_TYPE TEXT, 
	"RESULT" NUMERIC(2,0), 
	"FOR_" NUMERIC(15,0), 
	"AGAINST" NUMERIC(15,0), 
	"ABSTAIN" NUMERIC(15,0), 
	"BYCALL" NUMERIC(1,0), 
	"COMPETITORPOS" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table CMPDISCUSSION
--------------------------------------------------------

  CREATE TABLE "CMPDISCUSSION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"PHASEPOS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"DISCUSSION" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CMPDOCREQ
--------------------------------------------------------

  CREATE TABLE "CMPDOCREQ" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"VENDOR_TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"ISCONTENTTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"ETPKEY" VARCHAR(100 ), 
	"OOSKEY" VARCHAR(100 ), 
	"DESCRIPTION" VARCHAR(4000 ), 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0), 
	"REQUIREMENTTYPE_NAME" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPEXPENSE
--------------------------------------------------------

  CREATE TABLE "CMPEXPENSE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"EXPDATE" DATE NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPFEATURE
--------------------------------------------------------

  CREATE TABLE "CMPFEATURE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTENT" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPGOODS
--------------------------------------------------------

  CREATE TABLE "CMPGOODS" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"OKVED_ID" NUMERIC(15,0), 
	"OKVED" VARCHAR(20 ), 
	"OKVED_NAME" VARCHAR(1000 ), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPGOODSPROP
--------------------------------------------------------

  CREATE TABLE "CMPGOODSPROP" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 ), 
	"OOSKEY" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPLOT
--------------------------------------------------------

  CREATE TABLE "CMPLOT" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"HASCONTRACTORWORK" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEP" NUMERIC(15,2), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTYPE_ID" NUMERIC(15,0), 
	"PRICE_GENERATION_ORDER" BLOB SUB_TYPE TEXT, 
	"MINSCORE" NUMERIC(10,4) DEFAULT 0 NOT NULL, 
	"MAXSCORE" NUMERIC(10,4) DEFAULT 0 NOT NULL, 
	"CMPDATE" DATE, 
	"FACT_CMPDATE" DATE, 
	"ISLOTDECLINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISLOTREREGISTERED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CHILD_ORDER_ID" NUMERIC(15,0), 
	"PLAN_DEALDATE" DATE, 
	"OOSKEY" VARCHAR(100 ), 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"ISAMOUNTPERCENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AMOUNTPERCENT" NUMERIC(3,2), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"CURRENCY_CODE" VARCHAR(3 ), 
	"LIMITCONDEFINITION" BLOB SUB_TYPE TEXT, 
	"GOODSLIMITS" BLOB SUB_TYPE TEXT, 
	"ENERGYTYPE" VARCHAR(3 ), 
	"NOPUBLICDISCUSSION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FIRSTPUBLICDISCUSSIONCOMPLETE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"STANDARDCONTRACTNUMBER" VARCHAR(16 ), 
	"ALLOWMULTIPLECONTRACTS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PUBLICDISCUSSIONLINK" BLOB SUB_TYPE TEXT, 
	"PRICEFORMULA" BLOB SUB_TYPE TEXT, 
	"VAT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VATRATE" NUMERIC(15,4), 
	"CONTRACT_SIGN_TERM" NUMERIC(15,0), 
	"CONTRACT_DEAL_TERM" NUMERIC(15,0), 
	"POTENTIALCONTRACTORSNUMBER" NUMERIC(15,0), 
	"BIDAFTERYOURSELF" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONWITHSTEP" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPVALUE" NUMERIC(15,4), 
	"AUCTIONBIDBYSTEP" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONMINSTEPLIMIT" NUMERIC(15,4), 
	"AUCTIONZEROBID" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONDIVISIBLEBID" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONAUTOSTEPDEC" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPDECVALUE" NUMERIC(15,4), 
	"AUCTIONSTEPDECLIMIT" NUMERIC(15,4), 
	"AUCTIONDECINTERVAL" NUMERIC(15,0), 
	"NAME" BLOB SUB_TYPE TEXT, 
	"RATIONALEPRICE" BLOB SUB_TYPE TEXT, 
	"SUBJECT" BLOB SUB_TYPE TEXT, 
	"ENERGYSERVICEECONOMY" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CMPOOSMODIFICATION
--------------------------------------------------------

  CREATE TABLE "CMPOOSMODIFICATION" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PHASEPOS" NUMERIC(15,0), 
	"MODIFICATIONNUMBER" NUMERIC(15,0), 
	"PUBLISHDATE" DATE, 
	"INFO" VARCHAR(2000 ), 
	"OOSKEY" VARCHAR(100 ), 
	"CHANGE_INITIATIVETYPE" VARCHAR(2 ), 
	"CHANGE_AUTHORITYTYPE" VARCHAR(2 ), 
	"CHANGE_AUTHORITYNAME" VARCHAR(2000 ), 
	"CHANGE_DATE" DATE, 
	"CHANGE_DESNUMBER" VARCHAR(350 ), 
	"CHECKRESULT_NUMBER" VARCHAR(30 ), 
	"PRESCRIPTION_NUMBER" VARCHAR(20 ), 
	"CHANGE_DOCNAME" BLOB SUB_TYPE TEXT, 
	"CHANGE_ADDITIONALINFO" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CMPPAYSHEDULE
--------------------------------------------------------

  CREATE TABLE "CMPPAYSHEDULE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"PAYDATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPPERSONAL
--------------------------------------------------------

  CREATE TABLE "CMPPERSONAL" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL, 
	"LASTNAME" VARCHAR(50 ) NOT NULL, 
	"FIRSTNAME" VARCHAR(50 ), 
	"PATRONYMIC" VARCHAR(50 ), 
	"ORG_ID" NUMERIC(15,0), 
	"PHONE" VARCHAR(100 ), 
	"FAX" VARCHAR(100 ), 
	"EMAIL" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPPERSONALRESP
--------------------------------------------------------

  CREATE TABLE "CMPPERSONALRESP" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL, 
	"RESPONSIBILITY_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPPHASE
--------------------------------------------------------

  CREATE TABLE "CMPPHASE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PHASECODE" NUMERIC(1,0), 
	"PHASEDATE" DATE, 
	"PHASEPLACE" VARCHAR(4000 ), 
	"COMMISSION_ID" NUMERIC(15,0), 
	"OOS_PROTOCOL_NUMBER" VARCHAR(30 ), 
	"OOS_SIGN_DATE" DATE, 
	"OOS_PUBLISH_DATE" DATE, 
	"OOS_ADDINFO" VARCHAR(2000 ), 
	"OOS_PROTOCOLPUBLISHED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OOS_PROTOCOL_ID" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPPLACE
--------------------------------------------------------

  CREATE TABLE "CMPPLACE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FINSRCNAME" VARCHAR(512 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 ), 
	"SUPPLYAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"USEAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CALCPRICE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CMPQUALREQ
--------------------------------------------------------

  CREATE TABLE "CMPQUALREQ" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"QTYPE" NUMERIC(2,0) NOT NULL, 
	"QMINVALUE" NUMERIC(15,4), 
	"QMAXVALUE" NUMERIC(15,4), 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0), 
	"CONTENT" VARCHAR(2000 ), 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0), 
	"REQUIREMENTTYPE_NAME" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CMPREPDOCUMENT
--------------------------------------------------------

  CREATE TABLE "CMPREPDOCUMENT" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"REPDOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CMPSUPPLYSHEDULE
--------------------------------------------------------

  CREATE TABLE "CMPSUPPLYSHEDULE" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"PLACEPOS" NUMERIC(15,0) NOT NULL, 
	"SUPPLYDATE" DATE NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LOTPOS" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CMPVENDOR
--------------------------------------------------------

  CREATE TABLE "CMPVENDOR" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"VENDOR_ID" NUMERIC(15,0), 
	"TAXCODE" VARCHAR(20 ), 
	"KPP" VARCHAR(20 ), 
	"VENDORNAME" VARCHAR(2000 ), 
	"REFCOUNT" NUMERIC(4,0), 
	"PROPFORM_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CMPVOTERESULT
--------------------------------------------------------

  CREATE TABLE "CMPVOTERESULT" 
   (	"DECISIONPOS" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CMPCOMMEMBERPOS" NUMERIC(15,0) NOT NULL, 
	"NOTE" VARCHAR(500 ), 
	"RESULT" NUMERIC(1,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CMPWORKGROUP
--------------------------------------------------------

  CREATE TABLE "CMPWORKGROUP" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(250 ), 
	"ETPKEY" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CODETYPE
--------------------------------------------------------

  CREATE TABLE "CODETYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DISPLAY_ORDER" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(2,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"MASK" VARCHAR(200 ), 
	"GROUPMASK" VARCHAR(100 ), 
	"DEFVALUE" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table COMMEMBER
--------------------------------------------------------

  CREATE TABLE "COMMEMBER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"COMMISSION_ID" NUMERIC(15,0) NOT NULL, 
	"COMMEMBER_ID" NUMERIC(15,0), 
	"COMROLE" NUMERIC(1,0), 
	"COMMEMBER_NAME" VARCHAR(255 ), 
	"COMMEMBER_ROLE" VARCHAR(255 ), 
	"OOSKEY" VARCHAR(100 ), 
	"ISACTINGFORSECRETARY" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table COMMISSION
--------------------------------------------------------

  CREATE TABLE "COMMISSION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(2000 ) NOT NULL, 
	"COMTYPE" NUMERIC(1,0) NOT NULL, 
	"OOSREGNUMBER" VARCHAR(100 ), 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"DATENUMORDERNAME" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table COMPLAINTDOC
--------------------------------------------------------

  CREATE TABLE "COMPLAINTDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"INFO_DATE" DATE, 
	"SUPERVISION_ORG" VARCHAR(2000 ), 
	"COMPLAINANT_ORG" VARCHAR(2000 ), 
	"COM_LAW_ADDRESS" VARCHAR(300 ), 
	"COM_FAC_ADDRESS" VARCHAR(300 ), 
	"COM_EMAIL" VARCHAR(256 ), 
	"COM_PHONE" VARCHAR(100 ), 
	"COM_FAX" VARCHAR(100 ), 
	"COM_CONTACT_PERSON" VARCHAR(300 ), 
	"DEFENDANT_ORG_TYPE" NUMERIC(2,0), 
	"DEF_ORG_NAME" VARCHAR(2000 ), 
	"DEF_LAW_ADDRESS" VARCHAR(300 ), 
	"DEF_FAC_ADDRESS" VARCHAR(300 ), 
	"DEF_PHONE" VARCHAR(100 ), 
	"ORDER_NUMBER" VARCHAR(300 ) NOT NULL, 
	"NOTICE_PUBLISH_DATE" DATE NOT NULL, 
	"PURCHASE_GOODS" BLOB SUB_TYPE TEXT, 
	"SITE_URL" VARCHAR(1000 ) NOT NULL, 
	"COMPLAINT_BODY" BLOB SUB_TYPE TEXT, 
	"COMPLAINT_DECISION" NUMERIC(2,0), 
	"DECISION_DIRECTIONS" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table CONAGREEMENTSDOCS
--------------------------------------------------------

  CREATE TABLE "CONAGREEMENTSDOCS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCNUMBER" VARCHAR(500 ), 
	"DOCDATE" DATE NOT NULL, 
	"DOCNAME" VARCHAR(2000 ), 
	"DOCINFO" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONBANKGUARANTEERETURN
--------------------------------------------------------

  CREATE TABLE "CONBANKGUARANTEERETURN" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"INFO" NUMERIC(1,0), 
	"BANKGUARANTEEREGNUMBERTYPE" VARCHAR(20 ), 
	"RETURNDATE" DATE NOT NULL, 
	"NOTICENUMBER" VARCHAR(100 ), 
	"REASON" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONBUDGETLINE
--------------------------------------------------------

  CREATE TABLE "CONBUDGETLINE" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACTORPOS" NUMERIC(15,0) NOT NULL, 
	"PLACEPOS" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"RECIPIENTACC_ID" NUMERIC(15,0), 
	"RECIPIENTACCOUNT" VARCHAR(35 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FINSRCNAME" VARCHAR(512 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"LIABILITYEXPENSE_ID" NUMERIC(15,0), 
	"ADVANCE_DATE" DATE, 
	"ADVANCE_AMOUNT" NUMERIC(15,2), 
	"REMARK" VARCHAR(2000 ), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONCONFIRMINGDOCS
--------------------------------------------------------

  CREATE TABLE "CONCONFIRMINGDOCS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCCODE" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"DOCNUMBER" VARCHAR(500 ), 
	"DOCDATE" DATE NOT NULL, 
	"PROTOCOLNAME" VARCHAR(2000 ), 
	"DOCINFO" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONCONTRACTOR
--------------------------------------------------------

  CREATE TABLE "CONCONTRACTOR" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"ORGNAME" VARCHAR(2000 ), 
	"ORGTAXCODE" VARCHAR(20 ), 
	"ORGKPP" VARCHAR(20 ), 
	"ORGACC_ID" NUMERIC(15,0), 
	"ORGACCOUNT" VARCHAR(35 ), 
	"ORGACCTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORGEXECUTERACC_ID" NUMERIC(15,0), 
	"ORGEXECUTERACC" VARCHAR(35 ), 
	"ORGEXECUTER_ID" NUMERIC(15,0), 
	"ORGEXECUTER" VARCHAR(2000 ), 
	"ORGCORACCOUNT" VARCHAR(35 ), 
	"ORGBIC" VARCHAR(9 ), 
	"ORGBANKNAME" VARCHAR(2000 ), 
	"ORGOKTMO" VARCHAR(11 ), 
	"ORGINCOME_CODE" VARCHAR(20 ), 
	"ORGOKTMO_ID" NUMERIC(15,0), 
	"ORGORGTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORGISTAXCODEFREE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORGTAXPAYERCODE" VARCHAR(100 ), 
	"ORGLASTNAME" VARCHAR(250 ), 
	"ORGFIRSTNAME" VARCHAR(250 ), 
	"ORGPATRONYMIC" VARCHAR(250 ), 
	"ORGISCULTURE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORGPROPFORM_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONDAMAGEPAYMENTS
--------------------------------------------------------

  CREATE TABLE "CONDAMAGEPAYMENTS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCNUMBER" VARCHAR(100 ) NOT NULL, 
	"DOCDATE" DATE NOT NULL, 
	"DOCNAME" VARCHAR(1000 ) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONEXECSTEP
--------------------------------------------------------

  CREATE TABLE "CONEXECSTEP" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACTORPOS" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"EXECDATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONEXECSTEP2
--------------------------------------------------------

  CREATE TABLE "CONEXECSTEP2" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"STEPNUMBER" NUMERIC(15,0) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FOREIGNAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"PLANSTARTDATE" DATE NOT NULL, 
	"PLANFINISHDATE" DATE NOT NULL, 
	"REMARKSTARTDATE" VARCHAR(1000 ), 
	"REMARKFINISHDATE" VARCHAR(1000 ), 
	"FACTSTARTDATE" DATE, 
	"FACTFINISHDATE" DATE, 
	"REPORTPRINTDATE" DATE, 
	"ISPAYIGNORED" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONFCONCLUSIONCONTRACT
--------------------------------------------------------

  CREATE TABLE "CONFCONCLUSIONCONTRACT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PLACINGWAY_ID" NUMERIC(15,0), 
	"DOCCODE" VARCHAR(6 ), 
	"DOCNAME" VARCHAR(1000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONGOODS
--------------------------------------------------------

  CREATE TABLE "CONGOODS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONGOODSPROP
--------------------------------------------------------

  CREATE TABLE "CONGOODSPROP" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONLOT
--------------------------------------------------------

  CREATE TABLE "CONLOT" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0) NOT NULL, 
	"LOTNAME" VARCHAR(2000 ), 
	"LOTNUMBER" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONORGSTATUS
--------------------------------------------------------

  CREATE TABLE "CONORGSTATUS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"ORGSTATUS_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONPAYFACT
--------------------------------------------------------

  CREATE TABLE "CONPAYFACT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACTORPOS" NUMERIC(15,0) NOT NULL, 
	"PAYDATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ISNOTFOREXPORTLINE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NUM" VARCHAR(100 ), 
	"CAPTION" VARCHAR(500 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"DOCDATE" DATE, 
	"ISPREPAYMENT" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONPAYSHEDULE
--------------------------------------------------------

  CREATE TABLE "CONPAYSHEDULE" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACTORPOS" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"PAYDATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONPLACE
--------------------------------------------------------

  CREATE TABLE "CONPLACE" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 ), 
	"SUPPLYAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"USEAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CALCPRICE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"EXECSTEP2POS" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONPRODUCTSCHANGEDOCS
--------------------------------------------------------

  CREATE TABLE "CONPRODUCTSCHANGEDOCS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"DOCNUMBER" VARCHAR(100 ), 
	"DOCDATE" DATE NOT NULL, 
	"DOCNAME" VARCHAR(1000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONREFUSALFACT
--------------------------------------------------------

  CREATE TABLE "CONREFUSALFACT" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"VOUCHERENTRY" VARCHAR(4000 ), 
	"EXPLANATION" VARCHAR(4000 ), 
	"REFUSALFACTFOUNDATION_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONSOLIDDOC
--------------------------------------------------------

  CREATE TABLE "CONSOLIDDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DOC_DATE" DATE, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CMPORG_ID" NUMERIC(15,0), 
	"CMPORGNAME" VARCHAR(2000 ), 
	"TERM_DATE" DATE, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"PRICECONTROL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SUBJECT" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONSTRUCTION
--------------------------------------------------------

  CREATE TABLE "CONSTRUCTION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ADDRESS" VARCHAR(255 ), 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONSUPPLYSHEDULE
--------------------------------------------------------

  CREATE TABLE "CONSUPPLYSHEDULE" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"PLACEPOS" NUMERIC(15,0) NOT NULL, 
	"SUPPLYDATE" DATE NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTCARDDOC
--------------------------------------------------------

  CREATE TABLE "CONTRACTCARDDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"SELECTIONDATE" DATE, 
	"DEALDATE" DATE, 
	"BIDDERDATE" DATE, 
	"ETP_ID" NUMERIC(15,0) NOT NULL, 
	"ETPKEY" VARCHAR(100 ), 
	"ETP_DOC_NUMBER" VARCHAR(50 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"CON_ID" NUMERIC(15,0), 
	"CONNAME" VARCHAR(2000 ), 
	"CONTAXCODE" VARCHAR(20 ), 
	"CONKPP" VARCHAR(20 ), 
	"CON_ETPKEY" VARCHAR(100 ), 
	"CMPNAME" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"AMOUNT" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"REJECTPLACE" VARCHAR(4000 ), 
	"REASONDOCUMENTS" VARCHAR(4000 ), 
	"REJECTREASONS" VARCHAR(4000 ), 
	"WEBLINK_CONTRACT" VARCHAR(2000 ), 
	"WEBLINK_REJECT" VARCHAR(2000 ), 
	"WEBLINK_REVISION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTDOC
--------------------------------------------------------

  CREATE TABLE "CONTRACTDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(30 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"CONTYPE_ID" NUMERIC(15,0), 
	"CONSTRUCTION_ID" NUMERIC(15,0), 
	"STARTDATE" DATE, 
	"FINISHDATE" DATE, 
	"INFODATE" DATE, 
	"EXECDATE" DATE, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"CMPORG_ID" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"CUSTOMERTAXCODE" VARCHAR(20 ), 
	"CUSTOMERKPP" VARCHAR(20 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"CON_ID" NUMERIC(15,0), 
	"CONNAME" VARCHAR(2000 ), 
	"CONTAXCODE" VARCHAR(20 ), 
	"CONKPP" VARCHAR(20 ), 
	"CONACC_ID" NUMERIC(15,0), 
	"CONACCOUNT" VARCHAR(35 ), 
	"CONACCTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONEXECUTERACC_ID" NUMERIC(15,0), 
	"CONEXECUTERACC" VARCHAR(35 ), 
	"CONEXECUTER_ID" NUMERIC(15,0), 
	"CONEXECUTER" VARCHAR(2000 ), 
	"CONCORACCOUNT" VARCHAR(35 ), 
	"CONBIC" VARCHAR(9 ), 
	"CONBANKNAME" VARCHAR(2000 ), 
	"CONCOUNTRY_ID" NUMERIC(15,0), 
	"CONTERRITORYCODE" VARCHAR(20 ), 
	"CONPOSTINDEX" VARCHAR(10 ), 
	"CONADDRESS" VARCHAR(300 ), 
	"CONPHONE" VARCHAR(100 ), 
	"CONFAX" VARCHAR(100 ), 
	"CONEMAIL" VARCHAR(256 ), 
	"CONPROPFORM_ID" NUMERIC(15,0), 
	"CONOKTMO" VARCHAR(11 ), 
	"CONINCOME_CODE" VARCHAR(20 ), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"PAYEDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LOTNAME" VARCHAR(512 ), 
	"CON_NUMBER" VARCHAR(50 ), 
	"CON_DATE" DATE, 
	"NOTICENUMBER" VARCHAR(20 ), 
	"CMPDATE" DATE, 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTROLFLAGS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CONTRACTTYPE_ID" NUMERIC(15,0), 
	"ACTUAL_YEAR" NUMERIC(4,0), 
	"DISSOLVE_DATE" DATE, 
	"REVISION_DATE" DATE, 
	"COMPLETE_DATE" DATE, 
	"DEALDATE" DATE, 
	"PROCESS_BEFORE_DATE" DATE, 
	"CONFIRMNOTE" VARCHAR(4000 ), 
	"CONFIRM_DOC_NUMBER" VARCHAR(100 ), 
	"CONFIRM_DOC_DATE" DATE, 
	"SUBJECT" VARCHAR(2000 ), 
	"CHANGETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SUPPLIEDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"REMARK_EXT" VARCHAR(2000 ), 
	"OOSKEY" VARCHAR(100 ), 
	"OOSFOUNDATIONPROTOCOLNUMBER" VARCHAR(100 ), 
	"OOSCHANGEDESCRIPTION" VARCHAR(2000 ), 
	"OOSCHANGEBASE" VARCHAR(2000 ), 
	"OOSCURRENTSTAGE" VARCHAR(2 ), 
	"OOSATTACHPACKETCNT" NUMERIC(15,0) DEFAULT -1 NOT NULL, 
	"STARTINGAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"OFFERNUMBER" VARCHAR(20 ), 
	"DOCKIND" NUMERIC(1,0) NOT NULL, 
	"GRNTAMOUNT" NUMERIC(15,2), 
	"GRNTFROM" DATE, 
	"GRNTTO" DATE, 
	"GRNTTYPE" NUMERIC(1,0) DEFAULT 0, 
	"GRNTGUARANTOR" VARCHAR(2000 ), 
	"GRNTRETURNAMT" NUMERIC(15,2), 
	"GRNTRETURNDATE" DATE, 
	"GRNTINFO" VARCHAR(2000 ), 
	"GRNTTERMAMOUNT" NUMERIC(15,2), 
	"GRNTTERMFROM" DATE, 
	"GRNTTERMTO" DATE, 
	"GRNTTERMTYPE" NUMERIC(1,0) DEFAULT 0, 
	"GRNTTERMGUARANTOR" VARCHAR(2000 ), 
	"GRNTTERMRETURNAMT" NUMERIC(15,2), 
	"GRNTTERMRETURNDATE" DATE, 
	"GRNTTERMINFO" VARCHAR(2000 ), 
	"PRICECHANGEREASON_ID" NUMERIC(15,0), 
	"PRICECHANGECOMMENTS" VARCHAR(4000 ), 
	"SINGLECUSTOMERREASON_ID" NUMERIC(15,0), 
	"OFRREQREASON_ID" NUMERIC(15,0), 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"INVITATION_DATE" DATE, 
	"PUBLIC_DATE" DATE, 
	"EVASIONPROTOCOLOOSKEY" NUMERIC(15,0), 
	"EVASIONPROTOCOLNUMBER" VARCHAR(30 ), 
	"EVASIONPROTOCOLDATE" DATE, 
	"EVASIONPROTOCOLSIGNDATE" DATE, 
	"EVASIONPROTOCOLPUBLISHDATE" DATE, 
	"EVASIONPROTOCOLPLACE" VARCHAR(4000 ), 
	"CURYEARAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FUTYEARAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CURRENCY_ID" NUMERIC(15,0), 
	"FORFEITAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OFFER_DOCDATE" DATE, 
	"SINGLECUSTOMERREASONDOC_ID" NUMERIC(15,0), 
	"SINGLECUSTOMERREASONDOC_NAME" VARCHAR(1000 ), 
	"REPORTBASE" VARCHAR(2000 ), 
	"GRNTREGNUMBER" VARCHAR(20 ), 
	"REGNUMIKU" VARCHAR(100 ), 
	"PRICETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PRICEFORMULA" VARCHAR(2000 ), 
	"SUBCONTRACTORSSUMINPERCENTS" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"SUBCONTRACTORSSUMINRUB" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENERGYSERVICECONTRACTINFO" VARCHAR(2000 ), 
	"MODIFICATIONREASON_ID" NUMERIC(15,0), 
	"MODIFICATIONREASON_NAME" VARCHAR(1250 ), 
	"MODIFICATIONREASON_CODE" VARCHAR(15 ), 
	"MODIFICATIONREASONDOC_ID" NUMERIC(15,0), 
	"MODIFICATIONREASONDOC_NAME" VARCHAR(1000 ), 
	"MODIFICATIONREASONDOC_CODE" VARCHAR(10 ), 
	"CONOKPO" VARCHAR(20 ), 
	"CONREGISTRATIONDATE" DATE, 
	"PRODUCTSCHANGEINFO" VARCHAR(2000 ), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(1000 ), 
	"GRNTREGNUMBER_ID" NUMERIC(15,0), 
	"CONFCONCCONTRACT_ID" NUMERIC(15,0), 
	"FOREIGN_STATUS" VARCHAR(100 ), 
	"SUBCONTRACTORSINFO" VARCHAR(2000 ), 
	"INFO_VERSION" NUMERIC(9,0), 
	"CONFIRMINFO_DATE" DATE, 
	"OOSPURCHASEORG_ID" NUMERIC(15,0), 
	"OOSPURCHASEORG_NAME" VARCHAR(2000 ), 
	"OOSPURCHASEORGOOSROLE" NUMERIC(1,0), 
	"ISCREDIT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONOKTMO_ID" NUMERIC(15,0), 
	"CONORGTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONISTAXCODEFREE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTAXPAYERCODE" VARCHAR(100 ), 
	"CONLASTNAME" VARCHAR(250 ), 
	"CONFIRSTNAME" VARCHAR(250 ), 
	"CONPATRONYMIC" VARCHAR(250 ), 
	"CONISCULTURE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTEXECDOC
--------------------------------------------------------

  CREATE TABLE "CONTRACTEXECDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"PUBLISH_DATE" DATE, 
	"TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"STAGE_NUMBER" NUMERIC(15,0), 
	"STAGE_DATE" DATE, 
	"ORDINALNUMBER" NUMERIC(15,0) NOT NULL, 
	"FINALSTAGEEXECUTION" NUMERIC(1,0), 
	"BANKGRNT_EXPORTFLAG" NUMERIC(1,0), 
	"BANKGRNT_IMPROPEREXECINFO" VARCHAR(2000 ), 
	"BANKGRNT_REQUIREMENTSDATE" DATE, 
	"BANKGRNT_PAYMENTAMOUNT" NUMERIC(15,2), 
	"BANKGRNT_NAME" VARCHAR(1000 ), 
	"BANKGRNT_DOCUMENTDATE" DATE, 
	"BANKGRNT_DOCUMENTNUM" VARCHAR(100 ), 
	"BANKGRNT_BANKPAID" NUMERIC(15,2), 
	"BANKGRNT_BANKCANCELDETAILS" VARCHAR(200 ), 
	"BANKGRNT_IMPROPERGRNTPAYMENT" VARCHAR(2000 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"CUSTOMERTAXCODE" VARCHAR(20 ), 
	"CUSTOMERKPP" VARCHAR(20 ), 
	"REASON" VARCHAR(4000 ), 
	"OOSKEY" VARCHAR(100 ), 
	"TERMINATIONFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"TERMINATIONDATE" DATE, 
	"TERMINATIONREASON" VARCHAR(2000 ), 
	"RESTRUCTUREFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"RESTRUCTUREDATE" DATE, 
	"RESTRUCTUREAMOUNT" NUMERIC(15,2), 
	"REPAYMENTSCHEDULE" VARCHAR(2000 ), 
	"DELAY_WRTOFFPNLTSFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"TOTALAMOUNT" NUMERIC(15,2), 
	"DELAY_PENALTIESFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DELAY_DATE" DATE, 
	"DELAY_AMOUNT" NUMERIC(15,2), 
	"DELAY_PERIOD" DATE, 
	"DELAY_NOTICEDOCNUM" VARCHAR(100 ), 
	"DELAY_NOTICEDOCDATE" DATE, 
	"WRITEOFF_PENALTIESFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"WRITEOFF_DATE" DATE, 
	"WRITEOFF_AMOUNT" NUMERIC(15,2), 
	"WRITEOFF_NOTICEDOCNUM" VARCHAR(100 ), 
	"WRITEOFF_NOTICEDOCDATE" DATE, 
	"HLDCASHENFRCMNT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"IMPROPERSUPPLIERINFO" VARCHAR(2000 ), 
	"HOLDAMOUNT" NUMERIC(15,2), 
	"HOLDDATE" DATE, 
	"BANKGRNT_REFUNDAMOUNT" NUMERIC(15,2), 
	"BANKGRNT_PENALTIESAMOUNT" NUMERIC(15,2), 
	"BANKGRNT_LOSSNOTCOVEREDAMOUNT" NUMERIC(15,2), 
	"BANKGRNT_WARRANTYAMOUNT" NUMERIC(15,2), 
	"BANKGRNT_OTHERAMOUNT" NUMERIC(15,2)
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTOR
--------------------------------------------------------

  CREATE TABLE "CONTRACTOR" 
   (	"INSPECTOR_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTREASON
--------------------------------------------------------

  CREATE TABLE "CONTRACTREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(15 ), 
	"NAME" VARCHAR(2000 ), 
	"OOSKEY" VARCHAR(100 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REFTYPE" NUMERIC(1,0), 
	"POINTLAW" VARCHAR(1000 ), 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTREASON_DOCLINES
--------------------------------------------------------

  CREATE TABLE "CONTRACTREASON_DOCLINES" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CONTRACTREASON_ID" NUMERIC(15,0), 
	"CODE" VARCHAR(10 ), 
	"NAME" VARCHAR(1000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CONTRACTTEMPLATEDOC
--------------------------------------------------------

  CREATE TABLE "CONTRACTTEMPLATEDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"CMPLOTPOS" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CONTYPE
--------------------------------------------------------

  CREATE TABLE "CONTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"TEMPLATENAME" VARCHAR(100 ), 
	"ISCONTRACT" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"CONTRACTTYPE" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table CONTYPEATTACH
--------------------------------------------------------

  CREATE TABLE "CONTYPEATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CONTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"DEVICE_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"ATTACH_TYPE" NUMERIC(1,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table COUNTRY
--------------------------------------------------------

  CREATE TABLE "COUNTRY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table CRLFILE
--------------------------------------------------------

  CREATE TABLE "CRLFILE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CRLFILE" BLOB, 
	"CRLPOINT_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table CRLPOINT
--------------------------------------------------------

  CREATE TABLE "CRLPOINT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"URL" VARCHAR(4000 ), 
	"THISUPDATE" DATE, 
	"NEXTUPDATE" DATE, 
	"DESCRIPTION" VARCHAR(4000 ), 
	"FULL_ISSUER" VARCHAR(1000 ), 
	"ISSUER" VARCHAR(1000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CSGOODS
--------------------------------------------------------

  CREATE TABLE "CSGOODS" 
   (	"CONSOLID_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CSGOODSPROP
--------------------------------------------------------

  CREATE TABLE "CSGOODSPROP" 
   (	"CONSOLID_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table CSRECIPIENT
--------------------------------------------------------

  CREATE TABLE "CSRECIPIENT" 
   (	"CONSOLID_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table CURHISTORY
--------------------------------------------------------

  CREATE TABLE "CURHISTORY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"CURRENCY_ID" NUMERIC(15,0) NOT NULL, 
	"DT" DATE NOT NULL, 
	"RATE" NUMERIC(10,4), 
	"DIVISOR" NUMERIC(10,0)
   )  ;
--------------------------------------------------------
--  DDL for Table CURRENCY
--------------------------------------------------------

  CREATE TABLE "CURRENCY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(3 ) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table DATAOBJECTCHANGELOG
--------------------------------------------------------

  CREATE TABLE "DATAOBJECTCHANGELOG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(18,0), 
	"CHANGE_TIME" DATE NOT NULL, 
	"USER_NAME" VARCHAR(255 ) NOT NULL, 
	"USER_REALNAME" VARCHAR(255 ) NOT NULL, 
	"UK" NUMERIC(1,0) NOT NULL, 
	"OBJ_NAME" VARCHAR(255 ) NOT NULL, 
	"OBJ_ID" NUMERIC(15,0) NOT NULL, 
	"OBJ_VERSION" NUMERIC(15,0) NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"DATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DATASOURCE
--------------------------------------------------------

  CREATE TABLE "DATASOURCE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(128 ) NOT NULL, 
	"CAPTION" VARCHAR(128 ), 
	"JAVACLASSNAME" VARCHAR(255 ), 
	"DECLARATION" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DAYVERSION
--------------------------------------------------------

  CREATE TABLE "DAYVERSION" 
   (	"DAY_DATE" DATE NOT NULL, 
	"DAY_VERSION" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DBCONNECT
--------------------------------------------------------

  CREATE TABLE "DBCONNECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(250 ) NOT NULL, 
	"URL" VARCHAR(250 ) NOT NULL, 
	"USERNAME" VARCHAR(50 ) NOT NULL, 
	"PSWD" VARCHAR(30 ) NOT NULL, 
	"SYSUSERNAME" VARCHAR(50 ), 
	"SYSPASSWORD" VARCHAR(30 ), 
	"STATUS" NUMERIC(15,0) DEFAULT 6 NOT NULL, 
	"DBCONNECT_TYPE" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"STATUS_DATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table DBCONSTRAINT
--------------------------------------------------------

  CREATE TABLE "DBCONSTRAINT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DBUPDATE
--------------------------------------------------------

  CREATE TABLE "DBUPDATE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"AUTHOR" VARCHAR(50 ), 
	"UPDATE_DATE" DATE, 
	"DESCRIPTION" VARCHAR(255 ), 
	"VERSIONS" BLOB 
   )  ;
--------------------------------------------------------
--  DDL for Table DECREASON
--------------------------------------------------------

  CREATE TABLE "DECREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(255 ), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DELIVERYBASIS
--------------------------------------------------------

  CREATE TABLE "DELIVERYBASIS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SYSTEM_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CODE" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table DESCGROUP
--------------------------------------------------------

  CREATE TABLE "DESCGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DESCRIPTION
--------------------------------------------------------

  CREATE TABLE "DESCRIPTION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"DESCGROUP_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DESCRIPTIONCACHE
--------------------------------------------------------

  CREATE TABLE "DESCRIPTIONCACHE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DEVIATIONFACTFOUNDATION
--------------------------------------------------------

  CREATE TABLE "DEVIATIONFACTFOUNDATION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(500 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DIGEST
--------------------------------------------------------

  CREATE TABLE "DIGEST" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"FGROUP_ID" NUMERIC(18,0), 
	"TRANSFORMVERSION" VARCHAR(32 ) NOT NULL, 
	"DIGESTDATA" BLOB SUB_TYPE TEXT, 
	"ISACTIVE" NUMERIC(1,0) DEFAULT 0, 
	"DOCCLENANERNOTIFY" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table DIGESTSIGN
--------------------------------------------------------

  CREATE TABLE "DIGESTSIGN" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DIGEST_ID" NUMERIC(18,0), 
	"SYSUSER_ID" NUMERIC(15,0), 
	"SIGNTIME" DATE NOT NULL, 
	"ISVALID" NUMERIC(1,0), 
	"CHECKTIME" DATE, 
	"REMARK" BLOB SUB_TYPE TEXT, 
	"SIGN" BLOB SUB_TYPE TEXT, 
	"CERTSERIALNUMBER" VARCHAR(64 ), 
	"CERTISSUERSERIALNUMBER" VARCHAR(64 ), 
	"USERROLE_ID" NUMERIC(15,0), 
	"DISPSTATUS_ID" NUMERIC(15,0), 
	"SIGNTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ALGORITHM" VARCHAR(30 ), 
	"SIGN_SEQ_CTRL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCATTACHEX_ID" NUMERIC(18,0), 
	"SIGNVERSION" NUMERIC(15,0) NOT NULL, 
	"ISIMPORTED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"IMPORTUSER_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table DISPSTATUS
--------------------------------------------------------

  CREATE TABLE "DISPSTATUS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCACTION
--------------------------------------------------------

  CREATE TABLE "DOCACTION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"SHOW_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"SHORTCUT_KEY" VARCHAR(30 ), 
	"CAPTION" VARCHAR(100 ), 
	"CONFIRM_TEXT" VARCHAR(255 ), 
	"CLIENTOBJECT_ID" NUMERIC(15,0), 
	"OBJECT_PARAMS" VARCHAR(300 ), 
	"DOCEVENT_NAME" VARCHAR(50 ), 
	"CLIENTOBJECT_NAME" VARCHAR(255 ), 
	"SHOW_MODE" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"USER_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCATTACH
--------------------------------------------------------

  CREATE TABLE "DOCATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_DATA" BLOB, 
	"AUTHOR" NUMERIC(15,0), 
	"ACTION_DATE" DATE
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCATTACHEX
--------------------------------------------------------

  CREATE TABLE "DOCATTACHEX" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(256 ) NOT NULL, 
	"DEVICE_NAME" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"GUID" VARCHAR(100 ), 
	"CONVERTER_ID" NUMERIC(15,0), 
	"AUTHOR" NUMERIC(15,0), 
	"ACTION_DATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table DOCATTACH_LINK
--------------------------------------------------------

  CREATE TABLE "DOCATTACH_LINK" 
   (	"DOCATTACH_ID" NUMERIC(18,0), 
	"STORAGE_NAME" VARCHAR(100 ), 
	"DEVICE_NAME" VARCHAR(100 ), 
	"REAL_FILENAME" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCCATEGORY
--------------------------------------------------------

  CREATE TABLE "DOCCATEGORY" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(18,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CODE" VARCHAR(15 ) NOT NULL, 
	"SYSTEM_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCCLASS_DISPSTATUS
--------------------------------------------------------

  CREATE TABLE "DOCCLASS_DISPSTATUS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"PARDISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"PARALLEL" NUMERIC(1,0) NOT NULL, 
	"CONTROL_TYPE" NUMERIC(1,0) DEFAULT 0, 
	"REMARK" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCCOMMENT
--------------------------------------------------------

  CREATE TABLE "DOCCOMMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"BODY" BLOB SUB_TYPE TEXT, 
	"DATE_CREATE" DATE NOT NULL, 
	"REALNAME" VARCHAR(100 ), 
	"USERNAME" VARCHAR(30 ) NOT NULL, 
	"USER_ID" NUMERIC(15,0), 
	"UPDATE_DATE" DATE
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCCUSTOMFIELDS
--------------------------------------------------------

  CREATE TABLE "DOCCUSTOMFIELDS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 ) NOT NULL, 
	"FIELDTYPE" NUMERIC(1,0) NOT NULL, 
	"REQUIRED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FIELDPOS" NUMERIC(15,0) NOT NULL, 
	"METADATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCCUSTOMFIELDVALUES
--------------------------------------------------------

  CREATE TABLE "DOCCUSTOMFIELDVALUES" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTFIELD_ID" NUMERIC(15,0) NOT NULL, 
	"FIELD_VALUE" VARCHAR(255 ), 
	"FIELD_DATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCDIGESTREQUISITES
--------------------------------------------------------

  CREATE TABLE "DOCDIGESTREQUISITES" 
   (	"DOCDIGESTRULE_ID" NUMERIC(18,0) NOT NULL, 
	"RULEREQUISITE_ID" NUMERIC(18,0) NOT NULL, 
	"ITEM_CONDITION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ITEM_VALUE" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCDIGESTROLES
--------------------------------------------------------

  CREATE TABLE "DOCDIGESTROLES" 
   (	"DOCDIGESTRULE_ID" NUMERIC(18,0) NOT NULL, 
	"USERROLE_ID" NUMERIC(18,0) NOT NULL, 
	"SIGN_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DOCACTION_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table DOCDIGESTRULE
--------------------------------------------------------

  CREATE TABLE "DOCDIGESTRULE" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DISPSTATUS_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(255 ), 
	"OIDREF_ID" NUMERIC(18,0), 
	"ROLE_SEQUENCE_CONTROL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FGROUPHEADER_ID" NUMERIC(18,0) NOT NULL, 
	"PARDISPSTATUS_ID" NUMERIC(15,0), 
	"RULESCRIPT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table DOCEVENT
--------------------------------------------------------

  CREATE TABLE "DOCEVENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"SHOW_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"EXTERNAL_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"PROCTREE_ID" NUMERIC(15,0), 
	"USERPROCTREE_ID" NUMERIC(15,0), 
	"AUTO_RPL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"ISOFFLINE" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"USER_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCEVERRLOG
--------------------------------------------------------

  CREATE TABLE "DOCEVERRLOG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"EVENT_BEGIN" DATE, 
	"EVENT_END" DATE, 
	"EVENT_MSG" BLOB
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCEXCHANGESCHEME
--------------------------------------------------------

  CREATE TABLE "DOCEXCHANGESCHEME" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCFLAG
--------------------------------------------------------

  CREATE TABLE "DOCFLAG" 
   (	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCFLAGTYPE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCFLAGCATEGORY
--------------------------------------------------------

  CREATE TABLE "DOCFLAGCATEGORY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCFLAGTYPE
--------------------------------------------------------

  CREATE TABLE "DOCFLAGTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(255 ), 
	"CATEGORY_ID" NUMERIC(15,0), 
	"READONLY" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"RADIO" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VISIBLE" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCGROUP
--------------------------------------------------------

  CREATE TABLE "DOCGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCJOURNAL
--------------------------------------------------------

  CREATE TABLE "DOCJOURNAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OLD_DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"ACTION_NAME" VARCHAR(64 ) NOT NULL, 
	"ACTION_DATA" BLOB SUB_TYPE TEXT, 
	"REMARK" BLOB SUB_TYPE TEXT, 
	"ATTACH_NAME" VARCHAR(270 ), 
	"TASKJOURNAL_ID" NUMERIC(15,0), 
	"WORK_DATE" DATE, 
	"PARDISPSTATUS_ID" NUMERIC(15,0), 
	"OLD_PARDISPSTATUS_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCREQ
--------------------------------------------------------

  CREATE TABLE "DOCREQ" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"VENDOR_TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"NAME" VARCHAR(1024 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCRETENTION
--------------------------------------------------------

  CREATE TABLE "DOCRETENTION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(200 ) NOT NULL, 
	"CONDITION" BLOB SUB_TYPE TEXT NOT NULL, 
	"MSG" BLOB SUB_TYPE TEXT, 
	"FONT" VARCHAR(200 ) NOT NULL, 
	"DOCACTION_ID" NUMERIC(15,0), 
	"DOCSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"ISACTIVE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCRETENTIONSTATITEMS
--------------------------------------------------------

  CREATE TABLE "DOCRETENTIONSTATITEMS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCRETENTION_ID" NUMERIC(15,0) NOT NULL, 
	"MSG" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCRETENTIONSTATUS
--------------------------------------------------------

  CREATE TABLE "DOCRETENTIONSTATUS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCRETENTION_ID" NUMERIC(15,0) NOT NULL, 
	"MSG" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCSELECT
--------------------------------------------------------

  CREATE TABLE "DOCSELECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"DOCREQPOS" NUMERIC(15,0) NOT NULL, 
	"COMPETITORPOS" NUMERIC(15,0) NOT NULL, 
	"VAL" NUMERIC(1,0) DEFAULT null, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"REMARK" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCSITELINK
--------------------------------------------------------

  CREATE TABLE "DOCSITELINK" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"SITE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table DOCSTATUS
--------------------------------------------------------

  CREATE TABLE "DOCSTATUS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"PROCTREE_ID" NUMERIC(15,0), 
	"USERPROCTREE_ID" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"PARENT_ID" NUMERIC(15,0), 
	"PARALLEL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INITIALL" NUMERIC(1,0) DEFAULT 0, 
	"CONTROL_TYPE" NUMERIC(1,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table DOCUMENT
--------------------------------------------------------

  CREATE TABLE "DOCUMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"PARDISPSTATUS_ID" NUMERIC(15,0), 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CREATE_DATE" DATE NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"NOTIFY_GROUP" NUMERIC(15,0), 
	"INSTANCE_LINK" NUMERIC(15,0), 
	"DOC_NUMBER" VARCHAR(100 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"REG_DATE" DATE, 
	"CARRY_DATE" DATE, 
	"LAST_SYS_DATE" DATE, 
	"LAST_OPER_DATE" DATE, 
	"ATTACH_CNT" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"AUTHOR_ID" NUMERIC(15,0), 
	"SIGN_CNT" NUMERIC(18,0) DEFAULT 0 NOT NULL, 
	"APP_TYPE" NUMERIC(2,0)
   )  ;
--------------------------------------------------------
--  DDL for Table DOCUMENTBLOCKINFO
--------------------------------------------------------

  CREATE TABLE "DOCUMENTBLOCKINFO" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"BLOCKTIME" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table DOCUMENTCLASS
--------------------------------------------------------

  CREATE TABLE "DOCUMENTCLASS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"SERVERPROCESSOR_ID" NUMERIC(15,0), 
	"CLIENTMODULE_ID" NUMERIC(15,0), 
	"CLIENTDOCUMENT_ID" NUMERIC(15,0), 
	"DOCPRINTER_ID" NUMERIC(15,0), 
	"PRINTER_ACTION" VARCHAR(50 ), 
	"TEMPLATE_NAME" VARCHAR(100 ), 
	"PARAMS_GUID" VARCHAR(100 ), 
	"PARAMS" BLOB SUB_TYPE TEXT, 
	"CLASSNAME" VARCHAR(255 ), 
	"FUNCAT_NAME" VARCHAR(50 ), 
	"CONTROLCLASSNAME" VARCHAR(255 ), 
	"NUMGENERATOR_ID" NUMERIC(15,0), 
	"PRINTPARAMS" BLOB SUB_TYPE TEXT, 
	"PRINTCLIENTOBJECT_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table DOCUMENTREPORTS
--------------------------------------------------------

  CREATE TABLE "DOCUMENTREPORTS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(255 ), 
	"DOCPRINTER_ID" NUMERIC(15,0), 
	"PRINTER_ACTION" VARCHAR(255 ), 
	"TEMPLATE_NAME" VARCHAR(255 ), 
	"NAME" VARCHAR(150 ) NOT NULL, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BIRT_OUTPUTFORMAT" VARCHAR(10 ), 
	"BIRT_EMITTER" VARCHAR(128 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOCWEBLINK
--------------------------------------------------------

  CREATE TABLE "DOCWEBLINK" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(255 ), 
	"WEBLINK" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table DOMEN
--------------------------------------------------------

  CREATE TABLE "DOMEN" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PARENT_ID" NUMERIC(15,0), 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table EQUALITY
--------------------------------------------------------

  CREATE TABLE "EQUALITY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(300 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table EQUALITYCODES
--------------------------------------------------------

  CREATE TABLE "EQUALITYCODES" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"EQUALITY_ID" NUMERIC(15,0) NOT NULL, 
	"CODE" VARCHAR(7 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ESCHECKRULE
--------------------------------------------------------

  CREATE TABLE "ESCHECKRULE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DISPSTATUS_ID" NUMERIC(15,0), 
	"ISACTIVE" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"FGROUPHEADER_ID" NUMERIC(18,0) NOT NULL, 
	"PARDISPSTATUS_ID" NUMERIC(15,0), 
	"RULESCRIPT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table ESCHECKRULEREQUISITES
--------------------------------------------------------

  CREATE TABLE "ESCHECKRULEREQUISITES" 
   (	"ESCHECKRULE_ID" NUMERIC(15,0) NOT NULL, 
	"RULEREQUISITE_ID" NUMERIC(18,0) NOT NULL, 
	"ITEM_CONDITION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ITEM_VALUE" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table ESCRROLE
--------------------------------------------------------

  CREATE TABLE "ESCRROLE" 
   (	"ESCHECKRULE_ID" NUMERIC(15,0) NOT NULL, 
	"USERROLE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ESTIMATE
--------------------------------------------------------

  CREATE TABLE "ESTIMATE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"FOREIGNKEY" VARCHAR(50 ), 
	"CAPTION" VARCHAR(255 ) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ETP
--------------------------------------------------------

  CREATE TABLE "ETP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"ADDRESS" VARCHAR(255 ), 
	"OOSETPCODE" VARCHAR(20 ), 
	"MSGSITE_ID" NUMERIC(15,0), 
	"CLASSNAME" VARCHAR(255 ), 
	"LINK_ADDRESS" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table ETPATTACH
--------------------------------------------------------

  CREATE TABLE "ETPATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ETP_ID" NUMERIC(15,0), 
	"DOCATTACHEX_ID" NUMERIC(15,0) NOT NULL, 
	"ETPKEY" VARCHAR(100 ), 
	"FILE_CRC" VARCHAR(100 ), 
	"URL" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table ETPTYPE
--------------------------------------------------------

  CREATE TABLE "ETPTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"ADDRESS" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table EXCHANGECLASSES
--------------------------------------------------------

  CREATE TABLE "EXCHANGECLASSES" 
   (	"DOCEXCHANGESCHEME_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table FACTDOC
--------------------------------------------------------

  CREATE TABLE "FACTDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(100 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"TYPENAME" VARCHAR(50 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"VENDOR_ID" NUMERIC(15,0), 
	"VENDORTAXCODE" VARCHAR(20 ), 
	"VENDORKPP" VARCHAR(20 ), 
	"VENDORNAME" VARCHAR(2000 ), 
	"VENDORCOUNTRY_ID" NUMERIC(15,0) DEFAULT 643 NOT NULL, 
	"VENDORTERRITORYCODE" VARCHAR(20 ), 
	"VENDORADDRESS" VARCHAR(300 ), 
	"VENDORPOSTINDEX" VARCHAR(10 ), 
	"VENDORPHONE" VARCHAR(100 ), 
	"VENDORFAX" VARCHAR(100 ), 
	"VENDOREMAIL" VARCHAR(256 ), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"SUPPLYADDRESS" VARCHAR(300 ), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"FACTTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"EXPORT_PARENT_ID" NUMERIC(15,0), 
	"PAYEDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ACTUAL_YEAR" NUMERIC(4,0)
   )  ;
--------------------------------------------------------
--  DDL for Table FACTDOCTYPE
--------------------------------------------------------

  CREATE TABLE "FACTDOCTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCTYPE" NUMERIC(1,0), 
	"NAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table FCTGOODS
--------------------------------------------------------

  CREATE TABLE "FCTGOODS" 
   (	"FACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"USEAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FCTGOODSPROP
--------------------------------------------------------

  CREATE TABLE "FCTGOODSPROP" 
   (	"FACT_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table FETCHMODE
--------------------------------------------------------

  CREATE TABLE "FETCHMODE" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(18,0), 
	"DOCUMENTCLASS_ID" NUMERIC(18,0), 
	"PACKET_SIZE" NUMERIC(18,0), 
	"MAX_SIZE" NUMERIC(18,0), 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table FGROUP
--------------------------------------------------------

  CREATE TABLE "FGROUP" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OBJECT_NAME" VARCHAR(255 ) NOT NULL, 
	"BODY" BLOB SUB_TYPE TEXT, 
	"ALGORITHM" VARCHAR(30 ), 
	"CLASSNAME" VARCHAR(255 ), 
	"FGROUPHEADER_ID" NUMERIC(18,0) NOT NULL, 
	"FG_VERSION" NUMERIC(18,0) NOT NULL, 
	"FG_DATE" TIMESTAMP  NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table FGROUPATTACH
--------------------------------------------------------

  CREATE TABLE "FGROUPATTACH" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCATTACH_ID" NUMERIC(15,0) NOT NULL, 
	"FGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"DATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table FGROUPHEADER
--------------------------------------------------------

  CREATE TABLE "FGROUPHEADER" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 ) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(18,0), 
	"GROUP_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(18,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FILEFOLDER
--------------------------------------------------------

  CREATE TABLE "FILEFOLDER" 
   (	"FILE_NAME" VARCHAR(255 ) NOT NULL, 
	"FOLDER" VARCHAR(32 ) NOT NULL, 
	"DEVICE_NAME" VARCHAR(25 ) DEFAULT 'defaultDevice' NOT NULL, 
	"STORAGE_NAME" VARCHAR(25 ) DEFAULT 'UNKNOWN' NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FINSRC
--------------------------------------------------------

  CREATE TABLE "FINSRC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(512 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"CODE" VARCHAR(16 ) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"ISCONINFONOTBUDGET" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISBUDGET" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OOSKEY" VARCHAR(100 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"OKTMO" VARCHAR(20 )
   )  ;
--------------------------------------------------------
--  DDL for Table FINSRCSATISFY
--------------------------------------------------------

  CREATE TABLE "FINSRCSATISFY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"FINSRCSELECTEDYEARID" NUMERIC(15,0), 
	"FINSRCNEXTYEARID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table FORMATCONVERTER
--------------------------------------------------------

  CREATE TABLE "FORMATCONVERTER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CLASSNAME" VARCHAR(100 ), 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCAT
--------------------------------------------------------

  CREATE TABLE "FUNCAT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCDOCUMENT
--------------------------------------------------------

  CREATE TABLE "FUNCDOCUMENT" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCMODULE
--------------------------------------------------------

  CREATE TABLE "FUNCMODULE" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"MODULENAME" VARCHAR(20 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCOBJECT
--------------------------------------------------------

  CREATE TABLE "FUNCOBJECT" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"CLIENTOBJECT_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCPROCESSOR
--------------------------------------------------------

  CREATE TABLE "FUNCPROCESSOR" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"SERVERPROCESSOR_NAME" VARCHAR(50 ) NOT NULL, 
	"ACCESS_MODE" NUMERIC(15,0) DEFAULT 3 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCPROVIDER
--------------------------------------------------------

  CREATE TABLE "FUNCPROVIDER" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"SERVERPROVIDER_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCREFERENCE
--------------------------------------------------------

  CREATE TABLE "FUNCREFERENCE" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"REF_NAME" VARCHAR(50 ) NOT NULL, 
	"ACCESS_MODE" NUMERIC(15,0) DEFAULT 3 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNCUNIT
--------------------------------------------------------

  CREATE TABLE "FUNCUNIT" 
   (	"FUNUNIT_ID" NUMERIC(15,0) NOT NULL, 
	"FUNUNIT_NAME" VARCHAR(50 ) NOT NULL, 
	"ACCESS_MODE" NUMERIC(15,0) DEFAULT 3 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table FUNUNIT
--------------------------------------------------------

  CREATE TABLE "FUNUNIT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"FUNCAT_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"SUBTYPE" NUMERIC(18,0) DEFAULT 0, 
	"APP_ID" NUMERIC(15,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table GCREGISTER
--------------------------------------------------------

  CREATE TABLE "GCREGISTER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_DATA" BLOB, 
	"CAPTION" VARCHAR(255 ) NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table GOODS
--------------------------------------------------------

  CREATE TABLE "GOODS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ), 
	"DESCRIPTION" VARCHAR(500 ), 
	"OKP_CODE" VARCHAR(16 ), 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSBAN
--------------------------------------------------------

  CREATE TABLE "GOODSBAN" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME_NPA" VARCHAR(1000 ) NOT NULL, 
	"BAN_FROMDATE" DATE NOT NULL, 
	"BAN_TODATE" DATE, 
	"BAN_DESCRIPTION" VARCHAR(1000 ), 
	"IS223FZ" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTROL_MODE" NUMERIC(1,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSBANGOODSOKPD
--------------------------------------------------------

  CREATE TABLE "GOODSBANGOODSOKPD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"GOODSOKPD_ID" NUMERIC(15,0), 
	"GOODSBAN_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSBANPURCHASEMODE
--------------------------------------------------------

  CREATE TABLE "GOODSBANPURCHASEMODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"GOODSBAN_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSBRANCH
--------------------------------------------------------

  CREATE TABLE "GOODSBRANCH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(512 ) NOT NULL, 
	"BRANCHTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSGROUP
--------------------------------------------------------

  CREATE TABLE "GOODSGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"CAPTION" VARCHAR(500 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISUNITFILTERED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"HAS_PREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKP_CODE" VARCHAR(16 ), 
	"OKDP_CODE" VARCHAR(7 ), 
	"OKPD_CODE" VARCHAR(20 ), 
	"IS_ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"IS_CONTROLPRICE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CATEGORY" NUMERIC(1,0) DEFAULT 1, 
	"NOTFORPLAN" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSGROUPDOCDETAIL
--------------------------------------------------------

  CREATE TABLE "GOODSGROUPDOCDETAIL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ), 
	"OKDP_CODE" VARCHAR(20 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  CREATE TABLE "GOODSGROUPPURCHASEMODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSGROUP_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSGROUP_TREE
--------------------------------------------------------

  CREATE TABLE "GOODSGROUP_TREE" 
   (	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"TREE" VARCHAR(252 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKDP
--------------------------------------------------------

  CREATE TABLE "GOODSOKDP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(7 ) NOT NULL, 
	"NAME" VARCHAR(512 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"CHAPTER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UNUSABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UUISPREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INVALIDPREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKVED_ID" NUMERIC(15,0), 
	"PARENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKDPCOUNTRYPREF
--------------------------------------------------------

  CREATE TABLE "GOODSOKDPCOUNTRYPREF" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSOKDP_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  CREATE TABLE "GOODSOKDPPURCHASEMODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSOKDP_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKPD
--------------------------------------------------------

  CREATE TABLE "GOODSOKPD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CHAPTER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UNUSABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UUISPREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INVALIDPREFERENCE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ONEVENDORUUIS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"CLASSIFIER" NUMERIC(1,0) DEFAULT 2 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKPDCOUNTRYPREF
--------------------------------------------------------

  CREATE TABLE "GOODSOKPDCOUNTRYPREF" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSOKPD_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  CREATE TABLE "GOODSOKPDPURCHASEMODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSOKPD_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSOKVED
--------------------------------------------------------

  CREATE TABLE "GOODSOKVED" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"CHAPTER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UNUSABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"CLASSIFIER" NUMERIC(1,0) DEFAULT 2 NOT NULL, 
	"OOSKEY" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSPRICE
--------------------------------------------------------

  CREATE TABLE "GOODSPRICE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"GOODS_ID" NUMERIC(15,0) NOT NULL, 
	"DT" DATE NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GOODSPROP
--------------------------------------------------------

  CREATE TABLE "GOODSPROP" 
   (	"GOODS_ID" NUMERIC(15,0) NOT NULL, 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(2,0) NOT NULL, 
	"PROPTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table GRANTINVESTMENT
--------------------------------------------------------

  CREATE TABLE "GRANTINVESTMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ), 
	"CAPTION" VARCHAR(2000 ), 
	"GRANTTYPE" NUMERIC(4,0) DEFAULT 0 NOT NULL, 
	"FOREIGNKEY" VARCHAR(50 ), 
	"FINYEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GROUPPROP
--------------------------------------------------------

  CREATE TABLE "GROUPPROP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(2,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISREQUIRED" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DEFVALUE" VARCHAR(1500 ), 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GROUPPROPVALUE
--------------------------------------------------------

  CREATE TABLE "GROUPPROPVALUE" 
   (	"GROUPPROP_ID" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(5,0) NOT NULL, 
	"CAPTION" VARCHAR(1500 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table GROUPUNIT
--------------------------------------------------------

  CREATE TABLE "GROUPUNIT" 
   (	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table HISTORYMODIFY
--------------------------------------------------------

  CREATE TABLE "HISTORYMODIFY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OBJ_NAME" VARCHAR(50 ), 
	"OBJ_ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"modify" DATE, 
	"REMARK" VARCHAR(255 ), 
	"DATA" BLOB
   )  
  ;
--------------------------------------------------------
--  DDL for Table INDUSTRYCODE
--------------------------------------------------------

  CREATE TABLE "INDUSTRYCODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"ORG_ID" NUMERIC(15,0), 
	"CODE" VARCHAR(17 ), 
	"CAPTION" VARCHAR(2000 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"FINYEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table INSTITUTIONLINE
--------------------------------------------------------

  CREATE TABLE "INSTITUTIONLINE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"KOSGU" VARCHAR(16 ), 
	"KIF" VARCHAR(16 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"PLANCHANGE_AMT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLANCHANGE_AMT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLANCHANGE_AMT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"KVR" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table INTERBUDGET
--------------------------------------------------------

  CREATE TABLE "INTERBUDGET" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MSGSITE_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"OUTERBUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"SYSTEMTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"LINK_ADDRESS" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table INVBUDGETLINE
--------------------------------------------------------

  CREATE TABLE "INVBUDGETLINE" 
   (	"INVOICE_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"RECIPIENTACC_ID" NUMERIC(15,0), 
	"RECIPIENTACCOUNT" VARCHAR(35 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FINSRCNAME" VARCHAR(512 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LIABILITYEXPENSE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table INVGOODS
--------------------------------------------------------

  CREATE TABLE "INVGOODS" 
   (	"INVOICE_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table INVGOODSPROP
--------------------------------------------------------

  CREATE TABLE "INVGOODSPROP" 
   (	"INVOICE_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table INVOICEDOC
--------------------------------------------------------

  CREATE TABLE "INVOICEDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(45 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"SINGLECUSTOMERREASON_ID" NUMERIC(15,0), 
	"STARTDATE" DATE, 
	"FINISHDATE" DATE, 
	"DEALDATE" DATE, 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"CON_ID" NUMERIC(15,0), 
	"CONNAME" VARCHAR(2000 ), 
	"CONTAXCODE" VARCHAR(20 ), 
	"CONKPP" VARCHAR(20 ), 
	"CONACC_ID" NUMERIC(15,0), 
	"CONACCOUNT" VARCHAR(35 ), 
	"CONACCTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONEXECUTERACC_ID" NUMERIC(15,0), 
	"CONEXECUTERACC" VARCHAR(35 ), 
	"CONEXECUTER" VARCHAR(2000 ), 
	"CONCORACCOUNT" VARCHAR(20 ), 
	"CONBIC" VARCHAR(9 ), 
	"CONBANKNAME" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"SUPPLYADDRESS" VARCHAR(300 ), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTROLFLAGS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"ACTUAL_YEAR" NUMERIC(4,0), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(1000 ), 
	"SUPPLIEDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"FOREIGN_STATUS" VARCHAR(100 ), 
	"CONEXECUTER_ID" NUMERIC(15,0), 
	"CONORGTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONISTAXCODEFREE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTAXPAYERCODE" VARCHAR(100 ), 
	"CONLASTNAME" VARCHAR(250 ), 
	"CONFIRSTNAME" VARCHAR(250 ), 
	"CONPATRONYMIC" VARCHAR(250 ), 
	"CONPROPFORM_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table JAVACLASS
--------------------------------------------------------

  CREATE TABLE "JAVACLASS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(250 ) NOT NULL, 
	"STATE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SOURCE" BLOB SUB_TYPE TEXT, 
	"DATA" BLOB
   )  
  ;
--------------------------------------------------------
--  DDL for Table KBKLINEFIT
--------------------------------------------------------

  CREATE TABLE "KBKLINEFIT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"FINYEAR_TO" NUMERIC(4,0) NOT NULL, 
	"ANAL_KIND" NUMERIC(18,0) NOT NULL, 
	"SEQ_ORDER" NUMERIC(15,0), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"CODE1_TO" VARCHAR(100 ), 
	"CODE2_TO" VARCHAR(100 ), 
	"CODE3_TO" VARCHAR(100 ), 
	"CODE4_TO" VARCHAR(100 ), 
	"CODE5_TO" VARCHAR(100 ), 
	"CODE6_TO" VARCHAR(100 ), 
	"CODE7_TO" VARCHAR(100 ), 
	"CODE8_TO" VARCHAR(100 ), 
	"CODE9_TO" VARCHAR(100 ), 
	"CODE10_TO" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table KLADR
--------------------------------------------------------

  CREATE TABLE "KLADR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PARENT_ID" NUMERIC(15,0), 
	"ACTUAL" NUMERIC(1,0), 
	"NAME" VARCHAR(40 ), 
	"SOCR" VARCHAR(10 ), 
	"CODE" VARCHAR(13 ), 
	"CHILDLEVEL" NUMERIC(1,0), 
	"CODE1" VARCHAR(2 ), 
	"CODE2" VARCHAR(3 ), 
	"CODE3" VARCHAR(3 ), 
	"CODE4" VARCHAR(3 ), 
	"CODE5" VARCHAR(2 )
   )  ;
--------------------------------------------------------
--  DDL for Table KLADRSTREET
--------------------------------------------------------

  CREATE TABLE "KLADRSTREET" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ACTUAL" NUMERIC(1,0), 
	"KLADR_ID" NUMERIC(15,0), 
	"NAME" VARCHAR(40 ), 
	"SOCR" VARCHAR(10 ), 
	"CODE" VARCHAR(17 ), 
	"CODE1" VARCHAR(2 ), 
	"CODE2" VARCHAR(3 ), 
	"CODE3" VARCHAR(3 ), 
	"CODE4" VARCHAR(3 ), 
	"CODE5" VARCHAR(4 ), 
	"CODE6" VARCHAR(2 )
   )  ;
--------------------------------------------------------
--  DDL for Table LEDGER
--------------------------------------------------------

  CREATE TABLE "LEDGER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2DOC_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"OKDP_ID" NUMERIC(15,0), 
	"GOODS_ID" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"ISENTERPRISE" NUMERIC(1,0), 
	"ISSMALL" NUMERIC(1,0) NOT NULL, 
	"DOCYEAR" NUMERIC(4,0) NOT NULL, 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"INVITATIONDATE" DATE, 
	"CMPDATE" DATE, 
	"DESCRIPTIONCACHE_ID" NUMERIC(15,0), 
	"CMPORG_ID" NUMERIC(15,0), 
	"CONTRACTOR_ID" NUMERIC(15,0), 
	"NECESSITY_ID" NUMERIC(15,0), 
	"PLAN_Q1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLAN_Q2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLAN_Q3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLAN_Q4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FACT_Q1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FACT_Q2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FACT_Q3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FACT_Q4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table LIABILITYCREDENTIAL
--------------------------------------------------------

  CREATE TABLE "LIABILITYCREDENTIAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"STAGECODE_ID" NUMERIC(15,0) NOT NULL, 
	"LIABILITYGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"CODE" VARCHAR(100 ), 
	"CAPTION" VARCHAR(4000 ), 
	"DESCRIPTION" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table LIABILITYEXPENSE
--------------------------------------------------------

  CREATE TABLE "LIABILITYEXPENSE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"CREDENTIAL_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table LIABILITYEXPENSE_DOCLINES
--------------------------------------------------------

  CREATE TABLE "LIABILITYEXPENSE_DOCLINES" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"LIABILITYEXPENSE_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table LIABILITYGROUP
--------------------------------------------------------

  CREATE TABLE "LIABILITYGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(5 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table LICTYPE
--------------------------------------------------------

  CREATE TABLE "LICTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISSUER" VARCHAR(255 ), 
	"ACTIVITYKIND" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table MAIL
--------------------------------------------------------

  CREATE TABLE "MAIL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIVER_ID" NUMERIC(15,0), 
	"SUBJECT" VARCHAR(255 ), 
	"BODY" BLOB SUB_TYPE TEXT, 
	"CREATE_DATE" DATE NOT NULL, 
	"ARCHIVE_DATE" DATE NOT NULL, 
	"READ_DATE" DATE NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table MAILATTACH
--------------------------------------------------------

  CREATE TABLE "MAILATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MAIL_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"DEVICE_NAME" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"AUTHOR" NUMERIC(15,0), 
	"ACTION_DATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table MAILRECEIVERGROUP
--------------------------------------------------------

  CREATE TABLE "MAILRECEIVERGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  CREATE TABLE "MAILRECEIVERGROUP_RECEIVER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MAILRECEIVERGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table MENU
--------------------------------------------------------

  CREATE TABLE "MENU" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table MENUITEM
--------------------------------------------------------

  CREATE TABLE "MENUITEM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MENU_ID" NUMERIC(15,0) NOT NULL, 
	"SHOW_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"HINT_MESSAGE" VARCHAR(255 ), 
	"SHORTCUT_KEY" VARCHAR(30 ), 
	"CLIENTOBJECT_ID" NUMERIC(15,0), 
	"OBJECT_PARAMS" VARCHAR(300 ), 
	"PARENT_ID" NUMERIC(15,0), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table MENUITEMWEB
--------------------------------------------------------

  CREATE TABLE "MENUITEMWEB" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MENU_ID" NUMERIC(15,0) NOT NULL, 
	"SHOW_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"HINT_MESSAGE" VARCHAR(255 ), 
	"SHORTCUT_KEY" VARCHAR(30 ), 
	"APPOBJNAME" VARCHAR(128 ), 
	"OBJECT_PARAMS" VARCHAR(300 ), 
	"PARENT_ID" NUMERIC(15,0), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table METACONSTRAINT
--------------------------------------------------------

  CREATE TABLE "METACONSTRAINT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"METAOBJECT_ID" NUMERIC(15,0), 
	"NAME" VARCHAR(128 ), 
	"CONSTRAINT_TYPE" NUMERIC(15,0), 
	"FOREIGNOBJECT_NAME" VARCHAR(250 ), 
	"EXPRESSION" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table METAOBJECT
--------------------------------------------------------

  CREATE TABLE "METAOBJECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(128 ), 
	"TABLE_NAME" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table MSG
--------------------------------------------------------

  CREATE TABLE "MSG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIVER_ID" NUMERIC(15,0) NOT NULL, 
	"SEQ_NUMBER" NUMERIC(9,0) DEFAULT 0 NOT NULL, 
	"QUEUE_NAME" VARCHAR(50 ) DEFAULT 'default' NOT NULL, 
	"RESET_QUEUE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REQUEST_DATA" BLOB SUB_TYPE TEXT, 
	"DIAGNOSIS" VARCHAR(2000 ), 
	"DISPSTATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CREATE_TIME" DATE, 
	"SEND_TIME" DATE, 
	"RECEIVE_TIME" DATE, 
	"PROCESS_TIME" DATE, 
	"DESCRIPTION" VARCHAR(255 ), 
	"PROCESS_PRIORITY" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REQUEST_DATA_CRC" NUMERIC(15,0), 
	"REQUEST_DATA_LEN" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0) DEFAULT -99999 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0), 
	"GUID" VARCHAR(100 ), 
	"RPL_OBJ_NAME" VARCHAR(255 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table MSGLINKTYPE
--------------------------------------------------------

  CREATE TABLE "MSGLINKTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"CLASSNAME" VARCHAR(100 ), 
	"EXAMPLE" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table MSGQUEUE
--------------------------------------------------------

  CREATE TABLE "MSGQUEUE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIVER_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"SENT_NUMBER" NUMERIC(9,0) DEFAULT 0 NOT NULL, 
	"PROCESSED_NUMBER" NUMERIC(9,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table MSGSITE
--------------------------------------------------------

  CREATE TABLE "MSGSITE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MSGLINKTYPE_ID" NUMERIC(15,0), 
	"LINK_ADDRESS" VARCHAR(255 ), 
	"SYSUSER_ID" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"REPLICATOR_VERSION" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"SPLIT_QUEUES_BY_OBJECT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SPLIT_QUEUES_BY_BUDGET" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table MSGSITEEXCHANGE
--------------------------------------------------------

  CREATE TABLE "MSGSITEEXCHANGE" 
   (	"MSGSITE_ID" NUMERIC(15,0) NOT NULL, 
	"DOCEXCHANGESCHEME_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table NECESSITY
--------------------------------------------------------

  CREATE TABLE "NECESSITY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"CODE2" VARCHAR(100 ), 
	"NECTYPE" NUMERIC(1,0)
   )  ;
--------------------------------------------------------
--  DDL for Table NOTICEDOC
--------------------------------------------------------

  CREATE TABLE "NOTICEDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOCGROUP_ID" NUMERIC(15,0), 
	"SYSDOCGROUP_ID" NUMERIC(15,0), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"VERSION" NUMERIC(15,0), 
	"BRIEF" BLOB SUB_TYPE TEXT, 
	"BODY" BLOB SUB_TYPE TEXT, 
	"SUBJECT" BLOB SUB_TYPE TEXT, 
	"DOC_DATE" DATE, 
	"ISPUBLIC" NUMERIC(1,0) NOT NULL, 
	"PUBLISHERORG_ID" NUMERIC(15,0) NOT NULL, 
	"AUTHORORG_ID" NUMERIC(15,0), 
	"AUTHORORGNAME" VARCHAR(2000 ), 
	"MCMPUBLISH_DATE" DATE, 
	"SENDEMAIL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FROMADDRESS" VARCHAR(100 ), 
	"ETPKEY" VARCHAR(100 ), 
	"ETP_ID" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"SEND_DATE" DATE
   )  
  ;
--------------------------------------------------------
--  DDL for Table NOTICEEMAILORG
--------------------------------------------------------

  CREATE TABLE "NOTICEEMAILORG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NOTICEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"ORGNAME" VARCHAR(2000 ), 
	"EMAIL" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table NOTICEORG
--------------------------------------------------------

  CREATE TABLE "NOTICEORG" 
   (	"NOTICEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSG
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CREATE_DATE" DATE DEFAULT '1970-01-01' NOT NULL, 
	"NOTIFYMSGGROUP_ID" NUMERIC(15,0), 
	"NOTIFYMSGEVENT_ID" NUMERIC(15,0), 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIVER_ID" NUMERIC(15,0) NOT NULL, 
	"MSG_BODY" BLOB SUB_TYPE TEXT, 
	"READ_DATE" DATE, 
	"EMAILSENDED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"TOEXEC" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"QUICKLY" NUMERIC(1,0) DEFAULT 0, 
	"READED" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSGDOC
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSGDOC" 
   (	"NOTIFYMSGRULE_ID" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"CREATETIME" DATE, 
	"NOTIFYMSGKIND" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"PARAMHASH" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSGEVENT
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSGEVENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSGGROUP
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSGGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSGRULE
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSGRULE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NOTIFYMSGGROUP_ID" NUMERIC(15,0), 
	"NOTIFYMSGEVENT_ID" NUMERIC(15,0), 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"START_DISPSTATUS_ID" VARCHAR(255 ), 
	"END_DISPSTATUS_ID" VARCHAR(255 ), 
	"MSG" BLOB SUB_TYPE TEXT, 
	"DELAY_TIME" DATE, 
	"DOCFILTER" VARCHAR(255 ), 
	"RECEIVERSFROMDOCFIELD" VARCHAR(255 ), 
	"QUICKLY" NUMERIC(1,0) DEFAULT 0
   )  
  ;
--------------------------------------------------------
--  DDL for Table NOTIFYMSGRULE_RECEIVER
--------------------------------------------------------

  CREATE TABLE "NOTIFYMSGRULE_RECEIVER" 
   (	"NOTIFYMSGRULE_ID" NUMERIC(15,0) NOT NULL, 
	"PERSON_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table NUMGENERATOR
--------------------------------------------------------

  CREATE TABLE "NUMGENERATOR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"JAVACLASS_NAME" VARCHAR(100 ), 
	"PARAMS" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table NUMPREFIX
--------------------------------------------------------

  CREATE TABLE "NUMPREFIX" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NUMGENERATOR_ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"PREFIX" VARCHAR(3 )
   )  ;
--------------------------------------------------------
--  DDL for Table NUMSEQUENCE
--------------------------------------------------------

  CREATE TABLE "NUMSEQUENCE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"NEXT_VALUE" NUMERIC(18,0) DEFAULT 1 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"TERM_KIND" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table NUMUSAGE
--------------------------------------------------------

  CREATE TABLE "NUMUSAGE" 
   (	"NUMSEQUENCE_ID" NUMERIC(15,0) NOT NULL, 
	"PERIOD_START" DATE NOT NULL, 
	"NUM_VALUE" NUMERIC(18,0) NOT NULL, 
	"USE_COUNT" NUMERIC(9,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFFERDOC
--------------------------------------------------------

  CREATE TABLE "OFFERDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"VENDOR_ID" NUMERIC(15,0), 
	"VENDORTAXCODE" VARCHAR(20 ), 
	"VENDORKPP" VARCHAR(20 ), 
	"VENDORNAME" VARCHAR(2000 ), 
	"VENDORADDRESS" VARCHAR(300 ), 
	"VENDORCOUNTRY_ID" NUMERIC(15,0), 
	"VENDORTERRITORYCODE" VARCHAR(20 ), 
	"VENDORPOSTINDEX" VARCHAR(10 ), 
	"VENDORPOSTADDRESS" VARCHAR(300 ), 
	"VENDORPOSTCOUNTRY_ID" NUMERIC(15,0), 
	"VENDORPOSTTERRITORYCODE" VARCHAR(20 ), 
	"VENDORPOSTPOSTINDEX" VARCHAR(10 ), 
	"VENDORPHONE" VARCHAR(100 ), 
	"VENDORFAX" VARCHAR(100 ), 
	"VENDOREMAIL" VARCHAR(256 ), 
	"VENDORPROPFORM_ID" NUMERIC(15,0), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"CMPORG_ID" NUMERIC(15,0), 
	"PROVIDINGAMOUNT" NUMERIC(15,2), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"EXTRA" BLOB SUB_TYPE TEXT, 
	"FROM_WEB" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISCORRECTED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PRICE_GENERATION_ORDER" BLOB SUB_TYPE TEXT, 
	"VENDORACCOUNT" VARCHAR(35 ), 
	"VENDORACC_ID" NUMERIC(15,0), 
	"VENDORACCTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VENDOREXECUTERACC_ID" NUMERIC(15,0), 
	"VENDOREXECUTERACC" VARCHAR(35 ), 
	"VENDOREXECUTER_ID" NUMERIC(15,0), 
	"VENDOREXECUTER" VARCHAR(2000 ), 
	"VENDORBIC" VARCHAR(9 ), 
	"VENDORCORACCOUNT" VARCHAR(35 ), 
	"VENDORBANKNAME" VARCHAR(2000 ), 
	"ETP_ID" NUMERIC(15,0), 
	"ETPKEY" VARCHAR(100 ), 
	"VENDOR_ETPKEY" VARCHAR(100 ), 
	"GOODS_INFO" BLOB SUB_TYPE TEXT, 
	"FINALOFFER_DATE" DATE, 
	"FINALOFFER_AMT" NUMERIC(15,2), 
	"PRICEINFO" BLOB SUB_TYPE TEXT, 
	"VENDORORGTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VENDORISTAXCODEFREE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VENDORTAXPAYERCODE" VARCHAR(100 ), 
	"VENDORLASTNAME" VARCHAR(250 ), 
	"VENDORFIRSTNAME" VARCHAR(250 ), 
	"VENDORPATRONYMIC" VARCHAR(250 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table OFRCRITERIONLINEVAL
--------------------------------------------------------

  CREATE TABLE "OFRCRITERIONLINEVAL" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPCRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(2000 ) NOT NULL, 
	"VAL" VARCHAR(2000 ), 
	"ISFINALOFFER" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRCRITERIONVAL
--------------------------------------------------------

  CREATE TABLE "OFRCRITERIONVAL" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPCRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"BESTPARAM" NUMERIC(1,0), 
	"NAME" VARCHAR(512 ), 
	"LOTPOS" NUMERIC(15,0), 
	"VAL" VARCHAR(255 ), 
	"WEIGHT" NUMERIC(15,2), 
	"CTYPE" NUMERIC(2,0), 
	"CALCMODE" NUMERIC(1,0), 
	"ISFINALOFFER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table OFRDECREASON
--------------------------------------------------------

  CREATE TABLE "OFRDECREASON" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(512 ), 
	"OFRRETREASONCODE" VARCHAR(20 ), 
	"OFRRETREASON_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table OFRDOCREQVAL
--------------------------------------------------------

  CREATE TABLE "OFRDOCREQVAL" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPDOCREQPOS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(1000 ) NOT NULL, 
	"VAL" NUMERIC(1,0), 
	"VENDOR_TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"REMARK" VARCHAR(2000 ), 
	"TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRGOODS
--------------------------------------------------------

  CREATE TABLE "OFRGOODS" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"OKDP_CODE" VARCHAR(20 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRGOODSPROP
--------------------------------------------------------

  CREATE TABLE "OFRGOODSPROP" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table OFRGROUPPROP
--------------------------------------------------------

  CREATE TABLE "OFRGROUPPROP" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"SEQORDER" NUMERIC(2,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DEFVALUE" VARCHAR(1500 ), 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"GROUPPROP_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OFRGROUPPROPVALUE
--------------------------------------------------------

  CREATE TABLE "OFRGROUPPROPVALUE" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"GROUPPROPPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(5,0) NOT NULL, 
	"CAPTION" VARCHAR(1500 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRLOT
--------------------------------------------------------

  CREATE TABLE "OFRLOT" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"PROVIDINGAMOUNT" NUMERIC(15,2), 
	"ISUTILIZED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISDECLINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"COMMENTS" VARCHAR(255 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0, 
	"ISLOTDECLINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISLOTREREGISTERED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OOS_DOC_NUMBER" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table OFRORGSTATUS
--------------------------------------------------------

  CREATE TABLE "OFRORGSTATUS" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"ORGSTATUS_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRPLACE
--------------------------------------------------------

  CREATE TABLE "OFRPLACE" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"POS" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 ), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"SUPPLYAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"USEAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CALCPRICE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRQUALREQVAL
--------------------------------------------------------

  CREATE TABLE "OFRQUALREQVAL" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPQUALREQPOS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"QTYPE" NUMERIC(2,0) NOT NULL, 
	"VAL" NUMERIC(15,4), 
	"QMINVALUE" NUMERIC(15,4), 
	"QMAXVALUE" NUMERIC(15,4), 
	"ISSATISFY" NUMERIC(1,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OFRREQREASON
--------------------------------------------------------

  CREATE TABLE "OFRREQREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OFRRETREASON
--------------------------------------------------------

  CREATE TABLE "OFRRETREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"CODE" VARCHAR(20 ), 
	"REASON" VARCHAR(512 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table OFRSUPPLYSHEDULE
--------------------------------------------------------

  CREATE TABLE "OFRSUPPLYSHEDULE" 
   (	"OFFER_ID" NUMERIC(15,0) NOT NULL, 
	"PLACEPOS" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SUPPLYDATE" DATE NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0, 
	"LOTPOS" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OIDREF
--------------------------------------------------------

  CREATE TABLE "OIDREF" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OID" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table OKTMO
--------------------------------------------------------

  CREATE TABLE "OKTMO" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"PARENT_CODE" VARCHAR(20 ), 
	"NAME" VARCHAR(500 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OLAPQUERY
--------------------------------------------------------

  CREATE TABLE "OLAPQUERY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSAPPLICATION
--------------------------------------------------------

  CREATE TABLE "OOSAPPLICATION" 
   (	"NOTIFICATIONNUMBER" VARCHAR(19 ) NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0) NOT NULL, 
	"JOURNALNUMBER" VARCHAR(20 ) NOT NULL, 
	"APPDATE" DATE, 
	"ADMITTEDFIRST" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"COMMONINFO" VARCHAR(2000 ), 
	"LASTPRICE" NUMERIC(15,2), 
	"LASTPRICEDATE" DATE, 
	"PARTICIPANTPRESENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARTICIPANTTYPE" VARCHAR(2 ), 
	"PARTICIPANTINN" VARCHAR(12 ), 
	"PARTICIPANTKPP" VARCHAR(9 ), 
	"PARTICIPANTORGANIZATIONFORM" VARCHAR(3 ), 
	"PARTICIPANTIDNUMBER" VARCHAR(20 ), 
	"PARTICIPANTIDNUMBEREXTENSION" VARCHAR(20 ), 
	"PARTICIPANTORGANIZATIONNAME" VARCHAR(4000 ), 
	"PARTICIPANTCOUNTRYCODE" VARCHAR(3 ), 
	"PARTICIPANTFACTUALADDRESS" VARCHAR(1024 ), 
	"PARTICIPANTPOSTADDRESS" VARCHAR(1024 ), 
	"PARTICIPANTLASTNAME" VARCHAR(50 ), 
	"PARTICIPANTFIRSTNAME" VARCHAR(50 ), 
	"PARTICIPANTMIDDLENAME" VARCHAR(50 ), 
	"PARTICIPANTCONTACTEMAIL" VARCHAR(256 ), 
	"PARTICIPANTCONTACTPHONE" VARCHAR(30 ), 
	"PARTICIPANTCONTACTFAX" VARCHAR(30 ), 
	"PARTICIPANTADDITIONALINFO" VARCHAR(4000 ), 
	"PARTICIPANTSTATUS" VARCHAR(2 ), 
	"PARTICIPANTSCOUNT" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"ADMITTEDSECOND" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"APPRATING" NUMERIC(15,0), 
	"APPFORMAT" VARCHAR(1 ), 
	"RESULTTYPE" VARCHAR(17 ), 
	"EVALRESULT" NUMERIC(15,2), 
	"PREFEXPL" VARCHAR(2000 ), 
	"GENERALPREFS" NUMERIC(15,2), 
	"GOODSDELIVERED" VARCHAR(4000 ), 
	"EXPENSESINFO" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table OOSCONTRACT
--------------------------------------------------------

  CREATE TABLE "OOSCONTRACT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"REGNUM" VARCHAR(30 ) NOT NULL, 
	"CONTRACTNUM" VARCHAR(100 ), 
	"PUBLISHDATE" DATE, 
	"SIGNDATE" DATE, 
	"VERSIONNUMBER" NUMERIC(15,0), 
	"NOTIFICATIONNUMBER" VARCHAR(100 ), 
	"LOTNUMBER" NUMERIC(15,0), 
	"PLACING" VARCHAR(5 ), 
	"SINGLECUSTOMER" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CUSTOMERREGNUM" VARCHAR(11 ), 
	"CUSTOMERFULLNAME" VARCHAR(2000 ), 
	"CUSTOMERINN" VARCHAR(12 ), 
	"CUSTOMERKPP" VARCHAR(9 ), 
	"CUSTOMERTOFK" VARCHAR(4 ), 
	"PROTOCOLDATE" DATE, 
	"DOCUMENTBASE" VARCHAR(4000 ), 
	"PRICE" NUMERIC(15,2), 
	"CURRENCYCODE" VARCHAR(3 ), 
	"EXECUTIONMONTH" NUMERIC(15,0), 
	"EXECUTIONYEAR" NUMERIC(15,0), 
	"SUPPLIERSCOUNT" NUMERIC(15,0), 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CURRENTCONTRACTSTAGE" VARCHAR(2 ), 
	"BUDGETNAME" VARCHAR(2000 ), 
	"BUDGETLEVEL" VARCHAR(2 ), 
	"PLACINGTYPE" NUMERIC(1,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OOSCONTRACTPRODUCTS
--------------------------------------------------------

  CREATE TABLE "OOSCONTRACTPRODUCTS" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"OKDPCODE" VARCHAR(20 ), 
	"OKDPNAME" VARCHAR(1024 ), 
	"COUNTRYCODE" VARCHAR(3 ), 
	"COUNTRYFULLNAME" VARCHAR(200 ), 
	"OKEICODE" VARCHAR(3 ), 
	"OKEINAME" VARCHAR(200 ), 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"QUANTITY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"NAME" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table OOSCONTRACTSUPPLIER
--------------------------------------------------------

  CREATE TABLE "OOSCONTRACTSUPPLIER" 
   (	"CONTRACT_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"SUPPLIERTYPE" VARCHAR(2 ), 
	"INN" VARCHAR(12 ), 
	"KPP" VARCHAR(9 ), 
	"ORGANIZATIONFORM" VARCHAR(3 ), 
	"IDNUMBER" VARCHAR(20 ), 
	"IDNUMBEREXTENSION" VARCHAR(20 ), 
	"ORGANIZATIONNAME" VARCHAR(4000 ), 
	"COUNTRYCODE" VARCHAR(3 ), 
	"POSTADDRESS" VARCHAR(1024 ), 
	"LASTNAME" VARCHAR(50 ), 
	"FIRSTNAME" VARCHAR(50 ), 
	"MIDDLENAME" VARCHAR(50 ), 
	"CONTACTEMAIL" VARCHAR(256 ), 
	"CONTACTPHONE" VARCHAR(30 ), 
	"CONTACTFAX" VARCHAR(30 ), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"STATUS" VARCHAR(2 ), 
	"FACTUALADDRESS" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table OOSCUSTOMERREQUIREMENT
--------------------------------------------------------

  CREATE TABLE "OOSCUSTOMERREQUIREMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"NOTIFICATION_ID" NUMERIC(15,0) NOT NULL, 
	"LOT_ID" NUMERIC(15,0) NOT NULL, 
	"QUANTITY" VARCHAR(4000 ), 
	"MAXPRICE" NUMERIC(15,2), 
	"CUSTOMERREGNUM" VARCHAR(11 ) NOT NULL, 
	"CUSTOMERFULLNAME" VARCHAR(2000 ), 
	"DELIVERYPLACE" VARCHAR(4000 ), 
	"DELIVERYTERM" VARCHAR(1024 ), 
	"GRNTAPPPROCEDURE" VARCHAR(4000 ), 
	"GRNTAPPSETTLEMENTACCOUNT" VARCHAR(20 ), 
	"GRNTAPPPERSONALACCOUNT" VARCHAR(30 ), 
	"GRNTAPPBIK" VARCHAR(9 ), 
	"GRNTAPPAMOUNT" NUMERIC(15,2), 
	"GRNTCONTRPROCEDURE" VARCHAR(4000 ), 
	"GRNTCONTRSETTLEMENTACCOUNT" VARCHAR(20 ), 
	"GRNTCONTRPERSONALACCOUNT" VARCHAR(30 ), 
	"GRNTCONTRBIK" VARCHAR(9 ), 
	"GRNTCONTRISBAIL" NUMERIC(1,0), 
	"GRNTCONTRAMOUNT" NUMERIC(15,2), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"FINANCESOURCE" VARCHAR(2000 ), 
	"PAYMENTCONDITION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table OOSNOTIFICATION
--------------------------------------------------------

  CREATE TABLE "OOSNOTIFICATION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"NOTIFICATIONNUMBER" VARCHAR(19 ) NOT NULL, 
	"VERSIONNUMBER" NUMERIC(15,0), 
	"CREATEDATE" DATE, 
	"PLACINGWAYCODE" VARCHAR(3 ), 
	"PLACINGWAYNAME" VARCHAR(500 ), 
	"ORDERNAME" VARCHAR(2000 ), 
	"INITIATORREGNUM" VARCHAR(11 ), 
	"INITIATORFULLNAME" VARCHAR(2000 ), 
	"INITIATORORGROLE" VARCHAR(1 ), 
	"PLACERREGNUM" VARCHAR(11 ), 
	"PLACERFULLNAME" VARCHAR(2000 ), 
	"PLACERORGROLE" VARCHAR(2 ), 
	"CONTACTORGNAME" VARCHAR(4000 ), 
	"PUBLISHDATE" DATE, 
	"MODIFICATIONINITIATIVETYPE" VARCHAR(2 ), 
	"MODIFICATIONDATE" DATE, 
	"MODIFICATIONINFO" VARCHAR(4000 ), 
	"P1DATE" DATE, 
	"P2DATE" DATE, 
	"P3DATE" DATE, 
	"EPCODE" VARCHAR(20 ), 
	"EPNAME" VARCHAR(20 ), 
	"EPURL" VARCHAR(50 ), 
	"LOTCOUNT" NUMERIC(15,0) NOT NULL, 
	"REGIONNAME" VARCHAR(2000 ), 
	"P1PLACE" VARCHAR(4000 ), 
	"P2PLACE" VARCHAR(4000 ), 
	"P3PLACE" VARCHAR(4000 ), 
	"PLACEMENTDELIVERYTERM" VARCHAR(1024 ), 
	"PLACEMENTDELIVERYPLACE" VARCHAR(1024 ), 
	"PLACEMENTADDITIONALINFO" VARCHAR(4000 ), 
	"GRNTAPPPROCEDURE" VARCHAR(4000 ), 
	"GRNTAPPSETTLEMENTACCOUNT" VARCHAR(20 ), 
	"GRNTAPPPERSONALACCOUNT" VARCHAR(30 ), 
	"GRNTAPPBIK" VARCHAR(9 ), 
	"GRNTCONTRPROCEDURE" VARCHAR(4000 ), 
	"GRNTCONTRSETTLEMENTACCOUNT" VARCHAR(20 ), 
	"GRNTCONTRPERSONALACCOUNT" VARCHAR(30 ), 
	"GRNTCONTRBIK" VARCHAR(9 ), 
	"GRNTCONTRISBAIL" NUMERIC(1,0), 
	"DOCDELIVERYTERM" DATE, 
	"DOCDELIVERYTERM2" DATE, 
	"DOCDELIVERYPLACE" VARCHAR(2000 ), 
	"DOCDELIVERYPROCEDURE" VARCHAR(1028 ), 
	"DOCWWW" VARCHAR(4000 ), 
	"DOCGRNTPROCEDURE" VARCHAR(4000 ), 
	"DOCGRNTSETTLEMENTACCOUNT" VARCHAR(20 ), 
	"DOCGRNTPERSONALACCOUNT" VARCHAR(30 ), 
	"DOCGRNTBIK" VARCHAR(9 ), 
	"DOCGRNTCONTRAMOUNT" NUMERIC(15,2), 
	"DOCGRNTCURRENCYCODE" VARCHAR(3 ), 
	"SIGNTERM" NUMERIC(15,0), 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NOTIFICATIONTYPE" VARCHAR(2 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSNOTIFICATIONLOT
--------------------------------------------------------

  CREATE TABLE "OOSNOTIFICATIONLOT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"NOTIFICATION_ID" NUMERIC(15,0) NOT NULL, 
	"ORDINALNUMBER" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERCOUNT" NUMERIC(15,0) NOT NULL, 
	"SUBJECT" VARCHAR(2000 ), 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSORGANIZATION
--------------------------------------------------------

  CREATE TABLE "OOSORGANIZATION" 
   (	"REGNUMBER" VARCHAR(11 ) NOT NULL, 
	"SHORTNAME" VARCHAR(2000 ), 
	"FULLNAME" VARCHAR(2000 ), 
	"FACTOKATO" VARCHAR(20 ), 
	"FACTADDRESSLINE" VARCHAR(2000 ), 
	"FACTAREAKLADRTYPE" VARCHAR(1 ), 
	"FACTAREAKLADRCODE" VARCHAR(20 ), 
	"FACTAREAFULLNAME" VARCHAR(200 ), 
	"FACTBUILDING" VARCHAR(200 ), 
	"FACTCOUNTRYCODE" VARCHAR(3 ), 
	"FACTCOUNTRYFULLNAME" VARCHAR(200 ), 
	"FACTFILLEDMANUALLY" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FACTOFFICE" VARCHAR(200 ), 
	"FACTREGIONKLADRTYPE" VARCHAR(1 ), 
	"FACTREGIONKLADRCODE" VARCHAR(20 ), 
	"FACTREGIONFULLNAME" VARCHAR(200 ), 
	"FACTSETTLEMENTKLADRTYPE" VARCHAR(1 ), 
	"FACTSETTLEMENTKLADRCODE" VARCHAR(20 ), 
	"FACTSETTLEMENTFULLNAME" VARCHAR(200 ), 
	"FACTCITYKLADRTYPE" VARCHAR(1 ), 
	"FACTCITYKLADRCODE" VARCHAR(20 ), 
	"FACTCITYFULLNAME" VARCHAR(200 ), 
	"FACTSHORTSTREET" VARCHAR(200 ), 
	"FACTSTREETKLADRTYPE" VARCHAR(1 ), 
	"FACTSTREETKLADRCODE" VARCHAR(20 ), 
	"FACTSTREETFULLNAME" VARCHAR(200 ), 
	"FACTZIP" VARCHAR(6 ), 
	"POSTALADDRESS" VARCHAR(200 ), 
	"EMAIL" VARCHAR(256 ), 
	"PHONE" VARCHAR(30 ), 
	"FAX" VARCHAR(30 ), 
	"CONTACTLASTNAME" VARCHAR(50 ), 
	"CONTACTFIRSTNAME" VARCHAR(50 ), 
	"CONTACTMIDDLENAME" VARCHAR(50 ), 
	"HEADAGENCYREGNUM" VARCHAR(11 ), 
	"HEADAGENCYFULLNAME" VARCHAR(2000 ), 
	"ORDERINGAGENCYREGNUM" VARCHAR(11 ), 
	"ORDERINGAGENCYFULLNAME" VARCHAR(2000 ), 
	"INN" VARCHAR(12 ), 
	"KPP" VARCHAR(9 ), 
	"OGRN" VARCHAR(13 ), 
	"OKOPFCODE" VARCHAR(2 ), 
	"OKOPFFULLNAME" VARCHAR(200 ), 
	"OKOPFASSEMBLYALGORITHM" VARCHAR(250 ), 
	"OKPO" VARCHAR(11 ), 
	"OKVED" VARCHAR(2000 ), 
	"ORGANIZATIONTYPEID" NUMERIC(15,0), 
	"ORGANIZATIONTYPENAME" VARCHAR(20 ), 
	"ORGANIZATIONTYPEDESCRIPTION" VARCHAR(200 ), 
	"SUBORDINATIONTYPEID" NUMERIC(15,0), 
	"SUBORDINATIONTYPEDESCRIPTION" VARCHAR(200 ), 
	"URL" VARCHAR(40 ), 
	"TIMEZONE" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OOSORGANIZATIONROLE
--------------------------------------------------------

  CREATE TABLE "OOSORGANIZATIONROLE" 
   (	"REGNUMBER" VARCHAR(11 ) NOT NULL, 
	"ORGROLE" VARCHAR(2 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSORGROLE
--------------------------------------------------------

  CREATE TABLE "OOSORGROLE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CODE" VARCHAR(10 ) NOT NULL, 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table OOSORGROLES
--------------------------------------------------------

  CREATE TABLE "OOSORGROLES" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ROLECODE" VARCHAR(10 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSPRODUCTS
--------------------------------------------------------

  CREATE TABLE "OOSPRODUCTS" 
   (	"NOTIFICATION_ID" NUMERIC(15,0) NOT NULL, 
	"LOT_ID" NUMERIC(15,0) NOT NULL, 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(1024 )
   )  ;
--------------------------------------------------------
--  DDL for Table OOSPROTOCOL
--------------------------------------------------------

  CREATE TABLE "OOSPROTOCOL" 
   (	"NOTIFICATIONNUMBER" VARCHAR(19 ) NOT NULL, 
	"PROTOCOLNUMBER" VARCHAR(25 ) NOT NULL, 
	"VERSIONNUMBER" NUMERIC(15,0) NOT NULL, 
	"PROTOCOLTYPE" VARCHAR(20 ) NOT NULL, 
	"FOUNDATIONPROTOCOLNUMBER" VARCHAR(24 ), 
	"PARENTPROTOCOLNUMBER" VARCHAR(24 ), 
	"PLACE" VARCHAR(4000 ), 
	"PROTOCOLDATE" DATE, 
	"SIGNDATE" DATE, 
	"PUBLISHDATE" DATE, 
	"COMMISSIONREGNUMBER" NUMERIC(15,0), 
	"COMMISSIONNAME" VARCHAR(2000 ), 
	"LOTCOUNT" NUMERIC(15,0) NOT NULL, 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table OOSPROTOCOLLOT
--------------------------------------------------------

  CREATE TABLE "OOSPROTOCOLLOT" 
   (	"NOTIFICATIONNUMBER" VARCHAR(19 ) NOT NULL, 
	"PROTOCOLNUMBER" VARCHAR(25 ) NOT NULL, 
	"PROTOCOLVERSIONNUMBER" NUMERIC(15,0) NOT NULL, 
	"PROTOCOLTYPE" VARCHAR(20 ) NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0) NOT NULL, 
	"APPLICATIONCOUNT" NUMERIC(15,0) NOT NULL, 
	"ALLABSENT" NUMERIC(1,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OOS223PURCHASENOTICEINFO
--------------------------------------------------------

  CREATE TABLE "OOS223PURCHASENOTICEINFO" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"GUID" VARCHAR(36 ), 
	"REGISTRATIONNUMBER" NUMERIC(11,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  CREATE TABLE "OOS223PURCHNOTICELOTINFO" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOS223PURCHASENOTICEINFO_ID" NUMERIC(15,0) NOT NULL, 
	"GUID" VARCHAR(36 ), 
	"ORDINALNUMBER" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table OPERTYPE
--------------------------------------------------------

  CREATE TABLE "OPERTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORDERDOC
--------------------------------------------------------

  CREATE TABLE "ORDERDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"VENDOR_ID" NUMERIC(15,0), 
	"VENDORTAXCODE" VARCHAR(20 ), 
	"VENDORKPP" VARCHAR(20 ), 
	"VENDORPROPFORM_ID" NUMERIC(15,0), 
	"MINSCORE" NUMERIC(10,4) DEFAULT 0 NOT NULL, 
	"MAXSCORE" NUMERIC(10,4) DEFAULT 0 NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"HASCONTRACTORWORK" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTROLFLAGS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEP" NUMERIC(15,2), 
	"STARTTIME" DATE, 
	"PROLONGCOUNT" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISASSIGNRELEASED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTYPE_ID" NUMERIC(15,0), 
	"AUCTIONEERPOS" NUMERIC(15,0), 
	"OPENINGDATE" DATE, 
	"SELECTDATE" DATE, 
	"PROCESS_DATE" DATE, 
	"REFUSE_DATE" DATE, 
	"PROCESS_BEFORE_DATE" DATE, 
	"PRICE_GENERATION_ORDER" BLOB SUB_TYPE TEXT, 
	"PLAN_DEALDATE" DATE, 
	"PLAN_INVITATIONDATE" DATE, 
	"OOSKEYREFUSE" VARCHAR(100 ), 
	"OOSKEY" VARCHAR(100 ), 
	"OOS_DOC_NUMBER" VARCHAR(50 ), 
	"LOTOOSKEY" VARCHAR(100 ), 
	"OOSATTACHPACKETCNT" NUMERIC(15,0) DEFAULT -1 NOT NULL, 
	"DOCDELIVERYTERMBEGIN" DATE, 
	"DOCDELIVERYTERMEND" DATE, 
	"DOCDELIVERYPROCEDURE" VARCHAR(1028 ), 
	"ISDOCFEEBAIL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCFEEPERSONALACC_ID" NUMERIC(15,0), 
	"DOCFEESETTLEMENTACC_ID" NUMERIC(15,0), 
	"DOCFEESETTLEMENTBIC" VARCHAR(15 ), 
	"DOCFEECURRENCY_ID" NUMERIC(15,0), 
	"DOCFEEAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OOSFOUNDATIONPROTOCOLNUMBER" VARCHAR(30 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"CMPORG_ID" NUMERIC(15,0), 
	"CMPDATE" DATE, 
	"ACCEPTDATE" DATE, 
	"EXTRA" BLOB SUB_TYPE TEXT, 
	"NOTICE" BLOB SUB_TYPE TEXT, 
	"ACCEPTSTARTDATE" DATE, 
	"PLACINGWAY_ID" NUMERIC(15,0), 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"DOCDEVELOPER_ID" NUMERIC(15,0), 
	"FINISHDATE" DATE, 
	"ISAMOUNTPERCENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AMOUNTPERCENT" NUMERIC(3,2), 
	"DOCLANGUAGE" VARCHAR(500 ), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"CURRENCY_CODE" VARCHAR(3 ), 
	"PURCHASEORG_ID" NUMERIC(15,0), 
	"PURCHASEORGNAMECACHE_ID" NUMERIC(15,0), 
	"CURYEARAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FUTYEARAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"SINGLECUSTOMERREASON_ID" NUMERIC(15,0), 
	"OFRREQREASON_ID" NUMERIC(15,0), 
	"DOCDELIVERYMODE" BLOB SUB_TYPE TEXT, 
	"AUCTIONREGPROCEDURE" BLOB SUB_TYPE TEXT, 
	"PRESELECTIONPLACE" BLOB SUB_TYPE TEXT, 
	"LIMITCONDEFINITION" BLOB SUB_TYPE TEXT, 
	"GOODSLIMITS" BLOB SUB_TYPE TEXT, 
	"COLLECTINGORDER" BLOB SUB_TYPE TEXT, 
	"CONTRACTINGTERM" BLOB SUB_TYPE TEXT, 
	"CANCEL_DATE" DATE, 
	"CANCEL_NUMBER" VARCHAR(100 ), 
	"CANCEL_PLANPUBLISHDATE" DATE, 
	"CANCEL_INITIATIVETYPE" VARCHAR(2 ), 
	"CANCEL_AUTHORITYTYPE" VARCHAR(2 ), 
	"CANCEL_AUTHORITYNAME" BLOB SUB_TYPE TEXT, 
	"CANCEL_DOCDATE" DATE, 
	"CANCEL_DOCNUMBER" VARCHAR(100 ), 
	"CANCEL_DOCNAME" BLOB SUB_TYPE TEXT, 
	"CANCEL_CHECKRESULT_NUMBER" VARCHAR(30 ), 
	"CANCEL_PRESCRIPTION_NUMBER" VARCHAR(30 ), 
	"CANCEL_ADDINFO" BLOB SUB_TYPE TEXT, 
	"SECONDPART_ACCEPTSTARTDATE" DATE, 
	"SECONDPART_ACCEPTPLACE" BLOB SUB_TYPE TEXT, 
	"SECONDPART_ACCEPTORDER" BLOB SUB_TYPE TEXT, 
	"SECONDPART_OPENINGDATE" DATE, 
	"SECONDPART_OPENINGPLACE" BLOB SUB_TYPE TEXT, 
	"SECONDPART_CMPDATE" DATE, 
	"SECONDPART_CMPPLACE" BLOB SUB_TYPE TEXT, 
	"CHANGE_DOCNAME" BLOB SUB_TYPE TEXT, 
	"CHANGE_ADDITIONALINFO" BLOB SUB_TYPE TEXT, 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(1000 ), 
	"REPNOTICE_ID" NUMERIC(15,0), 
	"ETP_ID" NUMERIC(15,0), 
	"OOSETPCODE" VARCHAR(20 ), 
	"ETPKEY" VARCHAR(100 ), 
	"CMPORGTAXCODE" VARCHAR(20 ), 
	"CMPORGKPP" VARCHAR(20 ), 
	"CMPORGFACTCOUNTRY_ID" NUMERIC(15,0), 
	"CMPORGFACTPOSTINDEX" VARCHAR(10 ), 
	"CMPORGFACTTERRITORYCODE" VARCHAR(20 ), 
	"CMPORGFACTADDRESS" VARCHAR(300 ), 
	"CMPORGPOSTCOUNTRY_ID" NUMERIC(15,0), 
	"CMPORGPOSTPOSTINDEX" VARCHAR(10 ), 
	"CMPORGPOSTTERRITORYCODE" VARCHAR(20 ), 
	"CMPORGPOSTADDRESS" VARCHAR(300 ), 
	"CMPORGFAX" VARCHAR(100 ), 
	"CMPORGPHONE" VARCHAR(100 ), 
	"CMPORGEMAIL" VARCHAR(256 ), 
	"CHANGE_INITIATIVETYPE" VARCHAR(2 ), 
	"CHANGE_AUTHORITYTYPE" VARCHAR(2 ), 
	"CHANGE_AUTHORITYNAME" VARCHAR(100 ), 
	"CHANGE_DATE" DATE, 
	"CHANGE_DESNUMBER" VARCHAR(350 ), 
	"ENERGYTYPE" VARCHAR(3 ), 
	"SIGNTERM" NUMERIC(15,0), 
	"FIRSTPARTETPKEY" VARCHAR(100 ), 
	"SECONDPARTETPKEY" VARCHAR(100 ), 
	"PRESCRIPTION_DATE" DATE, 
	"PRESCRIPTION_NUMBER" VARCHAR(30 ), 
	"CHECKRESULT_NUMBER" VARCHAR(30 ), 
	"COMMISSION_ID" NUMERIC(15,0), 
	"NOPUBLICDISCUSSION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FIRSTPUBLICDISCUSSIONCOMPLETE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PUBLICDISCUSSIONLINK" BLOB SUB_TYPE TEXT, 
	"PRICEFORMULA" BLOB SUB_TYPE TEXT, 
	"STANDARDCONTRACTNUMBER" VARCHAR(16 ), 
	"ALLOWMULTIPLECONTRACTS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OOSFACTSTARTDATE" DATE, 
	"CMPNAMEOFPURCHORDER" BLOB SUB_TYPE TEXT, 
	"CMPTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CMPPARTICIPATION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISVATAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CMPORG_NEGOTIATE_CONTRACT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OFFERS_OUTSIDE_ETP" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTION_FINISH_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTION_FINISH_DATE" DATE, 
	"AUCTION_PROLONGATION" NUMERIC(15,0), 
	"VAT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"VATRATE" NUMERIC(15,4), 
	"CONTRACT_SIGN_TERM" NUMERIC(15,0), 
	"CONTRACT_DEAL_TERM" NUMERIC(15,0), 
	"POTENTIALCONTRACTORSNUMBER" NUMERIC(15,0), 
	"BIDAFTERYOURSELF" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONWITHSTEP" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPVALUE" NUMERIC(15,4), 
	"AUCTIONBIDBYSTEP" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONMINSTEPLIMIT" NUMERIC(15,4), 
	"AUCTIONZEROBID" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONDIVISIBLEBID" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONAUTOSTEPDEC" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AUCTIONSTEPDECVALUE" NUMERIC(15,4), 
	"AUCTIONSTEPDECLIMIT" NUMERIC(15,4), 
	"AUCTIONDECINTERVAL" NUMERIC(15,0), 
	"DOCWEBADDRESS" BLOB SUB_TYPE TEXT, 
	"P1PLACE" BLOB SUB_TYPE TEXT, 
	"P2PLACE" BLOB SUB_TYPE TEXT, 
	"P3PLACE" BLOB SUB_TYPE TEXT, 
	"CHANGE_DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"P1PLACELTD" BLOB SUB_TYPE TEXT, 
	"P2PLACELTD" BLOB SUB_TYPE TEXT, 
	"EVADEDMEMBERCONDITION" BLOB SUB_TYPE TEXT, 
	"RATIONALEPRICE" BLOB SUB_TYPE TEXT, 
	"DOCFEEPAYPROCEDURE" BLOB SUB_TYPE TEXT, 
	"VENDORNAME" BLOB SUB_TYPE TEXT, 
	"DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"COMMISSION_ISSUE" BLOB SUB_TYPE TEXT, 
	"SUBJECT" BLOB SUB_TYPE TEXT, 
	"CMPORGNAME" BLOB SUB_TYPE TEXT, 
	"CMPNAME" BLOB SUB_TYPE TEXT, 
	"ENERGYSERVICEECONOMY" BLOB SUB_TYPE TEXT, 
	"DOCDELIVERYPLACE" BLOB SUB_TYPE TEXT, 
	"APPFORM" BLOB SUB_TYPE TEXT, 
	"SPECIALORG_ID" NUMERIC(15,0), 
	"SPECIALORG_NAME" BLOB SUB_TYPE TEXT, 
	"CMPORGOOSROLE" NUMERIC(1,0), 
	"PROCEDUREOOSVERSION" NUMERIC(15,0), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" BLOB SUB_TYPE TEXT, 
	"PARENTLOTNUMBER" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table ORDERSUMMARY
--------------------------------------------------------

  CREATE TABLE "ORDERSUMMARY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CMPLOTPOS" NUMERIC(15,0), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FIRSTCONTRACT_ID" NUMERIC(15,0), 
	"LASTCONTRACT_ID" NUMERIC(15,0), 
	"CMPBUDGETLINEPOS" NUMERIC(15,0), 
	"CMPGOODSPOS" NUMERIC(15,0), 
	"RESULT" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"LASTPHASECODE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"LASTPHASEDATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table ORG
--------------------------------------------------------

  CREATE TABLE "ORG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ), 
	"CAPTION" VARCHAR(255 ), 
	"TAXCODE" VARCHAR(20 ), 
	"KPP" VARCHAR(20 ), 
	"OKPO" VARCHAR(20 ), 
	"OKONH" VARCHAR(20 ), 
	"LAW_ADDRESS" VARCHAR(300 ), 
	"ADDRESS" VARCHAR(300 ), 
	"DIRECTOR_NAME" VARCHAR(100 ), 
	"ACCOUNTANT_NAME" VARCHAR(100 ), 
	"CLOSE_DATE" DATE, 
	"COMPEXTRA" BLOB SUB_TYPE TEXT, 
	"QUOTEXTRA" BLOB SUB_TYPE TEXT, 
	"CERT_ID" NUMERIC(15,0), 
	"AUCTIONEXTRA" BLOB SUB_TYPE TEXT, 
	"SELECTIONEXTRA" BLOB SUB_TYPE TEXT, 
	"CUSTOMERCODE" VARCHAR(5 ), 
	"ACTIONPLACE" VARCHAR(255 ), 
	"AUCTIONREGPROCEDURE" VARCHAR(255 ), 
	"OOSKEY" VARCHAR(100 ), 
	"DOCWEBADDRESS" BLOB SUB_TYPE TEXT, 
	"DOCDELIVERYPLACE" VARCHAR(255 ), 
	"DOCDELIVERYPROCEDURE" BLOB SUB_TYPE TEXT, 
	"ISDOCFEEBAIL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCFEEPERSONALACC_ID" NUMERIC(15,0), 
	"DOCFEESETTLEMENTACC_ID" NUMERIC(15,0), 
	"OOSUSERNAME" VARCHAR(100 ), 
	"OOSPASSWORD" VARCHAR(100 ), 
	"DEFACCEPTSTARTTIME" DATE, 
	"DEFACCEPTTIME" DATE, 
	"DEFQUOTREQFORM" BLOB SUB_TYPE TEXT, 
	"DEFDELIVERYTERM" BLOB SUB_TYPE TEXT, 
	"DEFPAYMENTCONDITION" BLOB SUB_TYPE TEXT, 
	"DEFEVADEDMEMBERCONDITION" BLOB SUB_TYPE TEXT, 
	"DEFOFRREQOFFERSREGLAMENT" BLOB SUB_TYPE TEXT, 
	"DOCLANGUAGE" VARCHAR(500 ), 
	"CONSERVICEINFO" BLOB SUB_TYPE TEXT, 
	"OKTMO" VARCHAR(20 ), 
	"DOCDELIVERYMODE" BLOB SUB_TYPE TEXT, 
	"CUSTCANREFUSEINFO" BLOB SUB_TYPE TEXT, 
	"COLLECTINGORDER" BLOB SUB_TYPE TEXT, 
	"CONTRACTINGTERM" BLOB SUB_TYPE TEXT, 
	"DEFQUOTREQUESTPLACE" BLOB SUB_TYPE TEXT, 
	"PUBLICENTITYNAME" BLOB SUB_TYPE TEXT, 
	"COUNTRY_ID" NUMERIC(15,0), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"TERRITORY_ID" NUMERIC(15,0), 
	"LAWTERRITORY_ID" NUMERIC(15,0), 
	"FACTERRITORY_ID" NUMERIC(15,0), 
	"FAC_ADDRESS" VARCHAR(300 ), 
	"FAC_POSTINDEX" VARCHAR(10 ), 
	"LAW_POSTINDEX" VARCHAR(10 ), 
	"PHONE" VARCHAR(100 ), 
	"FAX" VARCHAR(100 ), 
	"EMAIL" VARCHAR(256 ), 
	"REGDATE" DATE, 
	"REGPLACE" VARCHAR(255 ), 
	"REGYEAR" NUMERIC(4,0), 
	"ISTAXCODEFREE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"POSTINDEX" VARCHAR(10 ), 
	"PROPFORM_ID" NUMERIC(15,0), 
	"SERVEORG_ID" NUMERIC(15,0), 
	"OGRN" VARCHAR(13 ), 
	"ISCONTRACTOR" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"PROP_FORM" VARCHAR(2000 ), 
	"REQUESTORDERLTD" VARCHAR(4000 ), 
	"KLARD_REGION" VARCHAR(255 ), 
	"KLARD_REGIONCODE" VARCHAR(20 ), 
	"KLARD_DISTRICT" VARCHAR(255 ), 
	"KLARD_DISTRICTCODE" VARCHAR(20 ), 
	"KLARD_CITY" VARCHAR(255 ), 
	"KLARD_CITYCODE" VARCHAR(20 ), 
	"KLARD_LOCALITY" VARCHAR(255 ), 
	"KLARD_LOCALITYCODE" VARCHAR(20 ), 
	"KLARD_STREET" VARCHAR(255 ), 
	"KLARD_STREETCODE" VARCHAR(20 ), 
	"KLARD_HOUSE" VARCHAR(200 ), 
	"KLARD_APPARTMENT" VARCHAR(200 ), 
	"STARTPLDATE" DATE, 
	"EXPIREPLDATE" DATE, 
	"ISPLPUBLIC" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INTERNAL_CUSTOMERCODE" VARCHAR(20 ), 
	"OOS223FZKEY" VARCHAR(100 ), 
	"OOS223FZOFRREQCODE" NUMERIC(15,0), 
	"OKTMO_ID" NUMERIC(15,0), 
	"IKU" VARCHAR(20 ), 
	"ORGTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"LASTNAME" VARCHAR(250 ), 
	"FIRSTNAME" VARCHAR(250 ), 
	"PATRONYMIC" VARCHAR(250 ), 
	"SHORTNAME" VARCHAR(2000 ), 
	"COMPANYNAME" VARCHAR(2000 ), 
	"TAXPAYERCODE" VARCHAR(100 ), 
	"OKOGU" VARCHAR(20 ), 
	"DIRECTOR_ID" NUMERIC(15,0), 
	"ACCOUNTANT_ID" NUMERIC(15,0), 
	"WEBSITE" VARCHAR(2000 ), 
	"KLARD_REGIONSOCR" VARCHAR(10 ), 
	"KLARD_DISTRICTSOCR" VARCHAR(10 ), 
	"KLARD_CITYSOCR" VARCHAR(10 ), 
	"KLARD_LOCALITYSOCR" VARCHAR(10 ), 
	"KLARD_STREETSOCR" VARCHAR(10 ), 
	"OKVED_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table ORGACCOUNT
--------------------------------------------------------

  CREATE TABLE "ORGACCOUNT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORGACCTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"BANK_ID" NUMERIC(15,0), 
	"KEEPER_ID" NUMERIC(15,0), 
	"CURRENCY_NAME" VARCHAR(50 ), 
	"ACCOUNT_NUMBER" VARCHAR(35 ) NOT NULL, 
	"OPEN_DATE" DATE, 
	"CLOSE_DATE" DATE, 
	"DESCRIPTION" VARCHAR(255 ), 
	"DISTRIBUTIVE_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FOREIGNKEY" VARCHAR(50 ), 
	"EXECUTER_ID" NUMERIC(15,0), 
	"EXECUTERACC_ID" NUMERIC(15,0), 
	"KEEPERACC_ID" NUMERIC(15,0), 
	"OOSFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"RECIPIENT_DESCRIPTION" VARCHAR(2000 ), 
	"ISCONTRACTOR" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGACCTYPE
--------------------------------------------------------

  CREATE TABLE "ORGACCTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGADDKPP
--------------------------------------------------------

  CREATE TABLE "ORGADDKPP" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"KPP" VARCHAR(20 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"PROPFORM_ID" NUMERIC(15,0), 
	"EXCLUDE_DATE" DATE, 
	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table ORGATTACH
--------------------------------------------------------

  CREATE TABLE "ORGATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_DATA" BLOB
   )  
  ;
--------------------------------------------------------
--  DDL for Table ORGCHILD
--------------------------------------------------------

  CREATE TABLE "ORGCHILD" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"CHILD_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGCONCCONT
--------------------------------------------------------

  CREATE TABLE "ORGCONCCONT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"CONTRACT_YEAR" NUMERIC(4,0) NOT NULL, 
	"CONTRACT_COUNT" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGETP
--------------------------------------------------------

  CREATE TABLE "ORGETP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ETP_ID" NUMERIC(15,0) NOT NULL, 
	"ETPKEY" VARCHAR(100 ), 
	"REMARK" VARCHAR(2000 ), 
	"STATUS" NUMERIC(1,0) NOT NULL, 
	"ORGROLE_ID" NUMERIC(15,0), 
	"ETPUSERNAME" VARCHAR(100 ), 
	"ETPPASSWORD" VARCHAR(100 ), 
	"SYSUSER_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table ORGFORM
--------------------------------------------------------

  CREATE TABLE "ORGFORM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(200 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ) NOT NULL, 
	"OOSCODE" VARCHAR(10 ), 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGGOODSGROUP
--------------------------------------------------------

  CREATE TABLE "ORGGOODSGROUP" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"ISSUPPLYING" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SELECTION_DATE" DATE, 
	"SELECTION_RESULT" NUMERIC(1,0), 
	"FIRST_IGNORED" NUMERIC(1,0), 
	"FIRST_DOC_NUMBER" VARCHAR(20 ), 
	"FIRST_DATE" DATE, 
	"SECOND_IGNORED" NUMERIC(1,0), 
	"SECOND_DOC_NUMBER" VARCHAR(20 ), 
	"SECOND_DATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table ORGHEARING
--------------------------------------------------------

  CREATE TABLE "ORGHEARING" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(3,0) NOT NULL, 
	"YR" NUMERIC(4,0) NOT NULL, 
	"DECISION" VARCHAR(255 ), 
	"CLIENT" VARCHAR(255 ), 
	"CAUSE" VARCHAR(255 ), 
	"SUBJECT" VARCHAR(255 ), 
	"AMOUNT" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGLICENCE
--------------------------------------------------------

  CREATE TABLE "ORGLICENCE" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"LICTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"ISSUER_NAME" VARCHAR(255 ), 
	"ISSUE_DATE" DATE, 
	"EXPIRE_DATE" DATE, 
	"LICENCE_NUMBER" VARCHAR(30 ) NOT NULL, 
	"HASHARDCOPY" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGOOS223FZUSER
--------------------------------------------------------

  CREATE TABLE "ORGOOS223FZUSER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"LOGIN" VARCHAR(100 ) NOT NULL, 
	"PSWD" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGPERSONAL
--------------------------------------------------------

  CREATE TABLE "ORGPERSONAL" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGPERSONALRESP
--------------------------------------------------------

  CREATE TABLE "ORGPERSONALRESP" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL, 
	"RESPONSIBILITY_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGROLE
--------------------------------------------------------

  CREATE TABLE "ORGROLE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGROLES
--------------------------------------------------------

  CREATE TABLE "ORGROLES" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ORGROLE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGSELSTATUS
--------------------------------------------------------

  CREATE TABLE "ORGSELSTATUS" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ORGSTATUS_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGSTATUS
--------------------------------------------------------

  CREATE TABLE "ORGSTATUS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(300 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGTITLE
--------------------------------------------------------

  CREATE TABLE "ORGTITLE" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"DTBEGIN" DATE NOT NULL, 
	"DTEND" DATE, 
	"DESCRIPTION" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table ORGTURNOVER
--------------------------------------------------------

  CREATE TABLE "ORGTURNOVER" 
   (	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"YR" NUMERIC(4,0) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CURRENCY_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ORGUNFAIR
--------------------------------------------------------

  CREATE TABLE "ORGUNFAIR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"DT" DATE NOT NULL, 
	"MARK" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"PURCHASEDATE" DATE, 
	"CONTRACTDESCRIPTION" VARCHAR(500 ), 
	"CONTRACTAMOUNT" NUMERIC(15,2), 
	"CONTRACTEXECUTIONDATE" DATE, 
	"CONTRACTDISSOLVEDATE" DATE, 
	"CONTRACTDISSOLVEREASON" VARCHAR(255 ), 
	"ISUNFAIR" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"UNFAIRDATE" DATE, 
	"CONTRACTDOCNUMBER" VARCHAR(30 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table PACKTYPE
--------------------------------------------------------

  CREATE TABLE "PACKTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PANEL
--------------------------------------------------------

  CREATE TABLE "PANEL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table PANELITEM
--------------------------------------------------------

  CREATE TABLE "PANELITEM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PANEL_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"SHOW_ORDER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"HINT_MESSAGE" VARCHAR(255 ), 
	"SHORTCUT_KEY" VARCHAR(30 ), 
	"CLIENTOBJECT_ID" NUMERIC(15,0), 
	"OBJECT_PARAMS" VARCHAR(300 ), 
	"IMAGE" BLOB, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table PAYCONDITION
--------------------------------------------------------

  CREATE TABLE "PAYCONDITION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"SYSTEM_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PERSON
--------------------------------------------------------

  CREATE TABLE "PERSON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"FIO" VARCHAR(255 ), 
	"PHONE" VARCHAR(255 ), 
	"EMAIL" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table PERSONAL
--------------------------------------------------------

  CREATE TABLE "PERSONAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"LASTNAME" VARCHAR(50 ) NOT NULL, 
	"FIRSTNAME" VARCHAR(50 ), 
	"PATRONYMIC" VARCHAR(50 ), 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"APPOINTMENT" VARCHAR(255 ), 
	"PHONE" VARCHAR(100 ), 
	"PHONECOUNTRYCODE" VARCHAR(15 ), 
	"PHONECITYCODE" VARCHAR(15 ), 
	"PHONEEXTENSION" VARCHAR(15 ), 
	"EMAIL" VARCHAR(256 ), 
	"FAX" VARCHAR(100 ), 
	"FAXCOUNTRYCODE" VARCHAR(15 ), 
	"FAXCITYCODE" VARCHAR(15 ), 
	"FAXEXTENSION" VARCHAR(15 ), 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLACEMENTFEATURE
--------------------------------------------------------

  CREATE TABLE "PLACEMENTFEATURE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"FOREIGNKEY" VARCHAR(50 ), 
	"NAME" VARCHAR(512 ) NOT NULL, 
	"SHORTNAME" VARCHAR(100 ), 
	"TYPE" VARCHAR(100 ) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"USETENDERPLANS" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLACEMENTFEATUREPM
--------------------------------------------------------

  CREATE TABLE "PLACEMENTFEATUREPM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLACINGWAY
--------------------------------------------------------

  CREATE TABLE "PLACINGWAY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ) NOT NULL, 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"CODE" VARCHAR(50 ) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLANDOC
--------------------------------------------------------

  CREATE TABLE "PLANDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"PLANYEARBEGIN" NUMERIC(4,0), 
	"PLANYEAREND" NUMERIC(4,0), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENT_NAME" VARCHAR(2000 ), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLANPOSITIONCHANGEREASON
--------------------------------------------------------

  CREATE TABLE "PLANPOSITIONCHANGEREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OOSKEY" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLANPOSITIONNUMBERERROR
--------------------------------------------------------

  CREATE TABLE "PLANPOSITIONNUMBERERROR" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"TEXT" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table PLANREQUEST
--------------------------------------------------------

  CREATE TABLE "PLANREQUEST" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2ARRANGEMENT
--------------------------------------------------------

  CREATE TABLE "PLAN2ARRANGEMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2GOODS_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"AMOUNT" NUMERIC(15,4), 
	"PAYAMOUNT" NUMERIC(15,4), 
	"PAYAMOUNTPROLONG" NUMERIC(15,4), 
	"INVITATIONDATE" DATE, 
	"CMPDATE" DATE, 
	"DEALDATE" DATE, 
	"CMPORG_ID" NUMERIC(15,0), 
	"CONTRACTOR_ID" NUMERIC(15,0), 
	"LOTNAMECACHE_ID" NUMERIC(15,0), 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0, 
	"ISSMALL" NUMERIC(1,0) DEFAULT 0, 
	"PARENTID" NUMERIC(15,0), 
	"CONTRACTEXECDATE" DATE, 
	"CHANGEDESCRIPTIONCACHE_ID" NUMERIC(15,0), 
	"LOTNUMBERCACHE_ID" NUMERIC(15,0), 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"CONTRACTPROVIDINGCACHE_ID" NUMERIC(15,0), 
	"ORDERNUMBER" VARCHAR(30 ), 
	"ADVANCE" NUMERIC(15,2), 
	"ORDERNAMECACHE_ID" NUMERIC(15,0), 
	"OPENINGDATE" DATE, 
	"SELECTDATE" DATE, 
	"FINISHDATE" DATE, 
	"EXPLANATIONCACHE_ID" NUMERIC(15,0), 
	"EFORM" NUMERIC(1,0), 
	"COUNTRY_ID" NUMERIC(15,0), 
	"TERRITORYCODE" VARCHAR(20 ), 
	"DELIVERYADDRESS_ID" NUMERIC(15,0), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"ORDERFORM" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTRACTPAYORDERCACHE_ID" NUMERIC(15,0), 
	"GUARANTEEAMOUNT" NUMERIC(15,2), 
	"GUARANTEEREQUESTAMOUNT" NUMERIC(15,2), 
	"CHANGEREASON_ID" NUMERIC(15,0), 
	"CONEXECSTAGESCACHE_ID" NUMERIC(15,0), 
	"PERIODICITYCACHE_ID" NUMERIC(15,0), 
	"PROHIBITIONSCACHE_ID" NUMERIC(15,0), 
	"QUANTITYUNDEFINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PUBLICDISCUSSCACHE_ID" NUMERIC(15,0), 
	"PREFERENCEGROUP_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2CHANGEREASON
--------------------------------------------------------

  CREATE TABLE "PLAN2CHANGEREASON" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ), 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2DAILYTOTALS
--------------------------------------------------------

  CREATE TABLE "PLAN2DAILYTOTALS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"RUNDATE" DATE, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"AMOUNT" NUMERIC(15,4), 
	"INVITATIONDATE" DATE, 
	"CMPDATE" DATE, 
	"DEALDATE" DATE, 
	"CONTRACTEXECDATE" DATE, 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0, 
	"ISSMALL" NUMERIC(1,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2DOC
--------------------------------------------------------

  CREATE TABLE "PLAN2DOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"DESCRIPTION_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(500 ), 
	"REMARK" VARCHAR(255 ), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"OOSPLANNUMBER" VARCHAR(100 ), 
	"OOSKEY" VARCHAR(100 ), 
	"CHANGE_OOSKEY" VARCHAR(100 ), 
	"FULLDESCRIPTION" VARCHAR(4000 ), 
	"OOSDISPSTATUS_ID" NUMERIC(15,0), 
	"CONFIRMDATE" DATE, 
	"OWNER_ID" NUMERIC(15,0), 
	"OWNERNAME" VARCHAR(2000 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RESPPERSONAL_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2DOCCHILD
--------------------------------------------------------

  CREATE TABLE "PLAN2DOCCHILD" 
   (	"PLAN2DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2GOODS
--------------------------------------------------------

  CREATE TABLE "PLAN2GOODS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2DOC_ID" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"OKDP_CODE" VARCHAR(20 ), 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKVED" VARCHAR(20 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNTARRANGED" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FINSRC_ID" NUMERIC(15,0), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"DELIVERYDATEFROM" DATE, 
	"DELIVERYDATETO" DATE, 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"PAYDATE" DATE, 
	"PAYDATEFROM" DATE, 
	"PAYDATETO" DATE, 
	"PAYAMOUNT" NUMERIC(15,2), 
	"PAYAMOUNTPROLONG" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"GOODSFLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CHANGE_PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CHANGE_QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"CHANGE_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"RESULT_PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"RESULT_QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"RESULT_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FROMPARENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"GOODSBRANCH_ID" NUMERIC(15,0), 
	"SUBJECTREQUIREMENTS" VARCHAR(2000 ), 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"OLDPLAN2GOODS_ID" NUMERIC(15,0), 
	"MEDICINEPROPVALUECACHE_ID" NUMERIC(15,0), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKVED_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"OKVED_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2LEDGER
--------------------------------------------------------

  CREATE TABLE "PLAN2LEDGER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2DOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUP_ID" NUMERIC(15,0) NOT NULL, 
	"OKDP_ID" NUMERIC(15,0), 
	"GOODS_ID" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"ISENTERPRISE" NUMERIC(1,0), 
	"ISSMALL" NUMERIC(1,0) NOT NULL, 
	"CMPORG_ID" NUMERIC(15,0), 
	"FINSRC_ID" NUMERIC(15,0), 
	"NECESSITY_ID" NUMERIC(15,0), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"INVITATIONDATE" DATE, 
	"CMPDATE" DATE, 
	"DESCRIPTIONCACHE_ID" NUMERIC(15,0), 
	"IDENTIFICCODECACHE_ID" NUMERIC(15,0), 
	"CONTRACTOR_ID" NUMERIC(15,0), 
	"AMOUNT_Q1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_Q2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_Q3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_Q4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSEXTNUMBER
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSEXTNUMBER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"YEARPLANOWNER" VARCHAR(104 ) NOT NULL, 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"POSITIONNUMBER" VARCHAR(30 ), 
	"EXTNUMBER" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSFEATURE
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSFEATURE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2OOSPOSITION_ID" NUMERIC(15,0) NOT NULL, 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(50 ), 
	"NAME" VARCHAR(450 ), 
	"TYPE" VARCHAR(1 ) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTENT" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSKBK
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSKBK" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2OOSPOSITION_ID" NUMERIC(15,0) NOT NULL, 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FUTUREAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSKBKYEAR
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSKBKYEAR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2OOSKBK_ID" NUMERIC(15,0) NOT NULL, 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSOKVED
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSOKVED" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2OOSPOSITION_ID" NUMERIC(15,0) NOT NULL, 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(1000 ), 
	"OKVED_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSPOSITION
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSPOSITION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"POSITIONNUMBER" VARCHAR(30 ) NOT NULL, 
	"CONTRACTSUBJECTNAME" VARCHAR(2000 ), 
	"CONTRACTMAXPRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTRACTCURRENCY_ID" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"ORDERFORM" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"CONTRACTPAYORDER" VARCHAR(4000 ), 
	"CONTRACTGUARANTEEPROCEDURE" VARCHAR(4000 ), 
	"CONTRACTGUARANTEEPART" NUMERIC(15,2), 
	"CONTRACTGUARANTEEAMOUNT" NUMERIC(15,2), 
	"ORDERPLACINGTERM" DATE, 
	"CONTRACTEXECUTIONTERM" DATE, 
	"CHANGEREASON_ID" NUMERIC(15,0), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"PUBLISHDATE" DATE, 
	"CONFIRMDATE" DATE, 
	"POSITIONPUBLISHDATE" DATE, 
	"VERSIONNUMBER" NUMERIC(15,0), 
	"DIAGNOSIS" BLOB SUB_TYPE TEXT, 
	"PAYMENTS" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PUBLICDISCUSSCACHE_ID" NUMERIC(15,0), 
	"PURCHASEFINPROCEDURECACHE_ID" NUMERIC(15,0), 
	"PURCHASEFINAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ADVANCECACHE_ID" NUMERIC(15,0), 
	"CONEXECSTAGESCACHE_ID" NUMERIC(15,0), 
	"PERIODICITYCACHE_ID" NUMERIC(15,0), 
	"PROHIBITIONSCACHE_ID" NUMERIC(15,0), 
	"PURCHASETYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"CMPORG_ID" NUMERIC(15,0), 
	"PURCHASEMETHOD_ID" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"OKATO" VARCHAR(20 ), 
	"EFORM" NUMERIC(1,0), 
	"MODIFICATIONDESCRIPTION" VARCHAR(2000 ), 
	"LEGALACTREQUISITES" VARCHAR(2000 ), 
	"CONTRACTPRICEFEATURES" VARCHAR(2000 ), 
	"FEATURES111" NUMERIC(1,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table PLAN2OOSPRODUCT
--------------------------------------------------------

  CREATE TABLE "PLAN2OOSPRODUCT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PLAN2OOSPOSITION_ID" NUMERIC(15,0) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"NAME" VARCHAR(4000 ), 
	"MINREQUIREMENT" VARCHAR(4000 ), 
	"QUANTITYUNDEFINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"QUANTITY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"INTERNATIONALNAME" VARCHAR(4000 ), 
	"QUANTITYCURRENTYEAR" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"OKPD_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 ), 
	"OKVED" VARCHAR(20 ), 
	"OKVED_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3DOC
--------------------------------------------------------

  CREATE TABLE "PLAN3DOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(30 ), 
	"DOC_DATE" DATE, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"SGOZAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"SGOZENTERPRISEAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"RESPORG_ID" NUMERIC(15,0) NOT NULL, 
	"RESPORGNAME" VARCHAR(2000 ), 
	"CONFIRMDATE" DATE, 
	"REGNUMBER" VARCHAR(100 ), 
	"VERSIONNUMBER" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"PLANINFO" VARCHAR(4000 ), 
	"CUSTOMERTAXCODE" VARCHAR(20 ), 
	"CUSTOMERKPP" VARCHAR(20 ), 
	"CUSTOMERPROPFORM_ID" NUMERIC(15,0), 
	"CUSTOMERPROPFORMCAPTION" VARCHAR(2000 ), 
	"CUSTOMERPROPFORMOOSCODE" VARCHAR(10 ), 
	"CUSTOMEROKTMO" VARCHAR(20 ), 
	"CUSTOMERPUBLICENTITYNAME" VARCHAR(2000 ), 
	"CUSTOMERCOUNTRY_ID" NUMERIC(15,0), 
	"CUSTOMERINDEX" VARCHAR(10 ), 
	"CUSTOMERADDRESS" VARCHAR(300 ), 
	"CUSTOMERPHONE" VARCHAR(100 ), 
	"CUSTOMERFAX" VARCHAR(100 ), 
	"CUSTOMEREMAIL" VARCHAR(256 ), 
	"RESPEXECUTER_ID" NUMERIC(15,0), 
	"RESPEXECUTERLASTNAME" VARCHAR(50 ), 
	"RESPEXECUTERFIRSTNAME" VARCHAR(50 ), 
	"RESPEXECUTERPATRONYMIC" VARCHAR(50 ), 
	"CONFIRMPERSON_ID" NUMERIC(15,0), 
	"CONFIRMPERSONLASTNAME" VARCHAR(50 ), 
	"CONFIRMPERSONFIRSTNAME" VARCHAR(50 ), 
	"CONFIRMPERSONPATRONYMIC" VARCHAR(50 ), 
	"CONFIRMPERSONAPPOINTMENT" VARCHAR(255 ), 
	"OOSKEY" VARCHAR(100 ), 
	"CUSTOMEROKPO" VARCHAR(20 ), 
	"CREDENTIALSPASSED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"RESPONSIBLEORGLOCATION" VARCHAR(2000 ), 
	"RESPONSIBLEORGPHONE" VARCHAR(100 ), 
	"RESPONSIBLEORGEMAIL" VARCHAR(256 ), 
	"RESPONSIBLEORGOKPO" VARCHAR(20 ), 
	"RESPONSIBLEORGOKTMO" VARCHAR(20 ), 
	"RESPONSIBLEORGTAXCODE" VARCHAR(20 ), 
	"RESPONSIBLEORGKPP" VARCHAR(20 ), 
	"RESPORGOOSROLE" NUMERIC(1,0), 
	"PLANTYPE" NUMERIC(1,0), 
	"PERIODSTART" DATE, 
	"PERIODEND" DATE, 
	"ADDITIONALINFO" VARCHAR(2000 ), 
	"CUSTOMERFACTTERRITORY_ID" NUMERIC(15,0), 
	"MODIFICATIONDESCRIPTION" VARCHAR(2000 ), 
	"SGOZEXCLUDEAMOUNT" NUMERIC(15,2) DEFAULT NULL, 
	"SGOZENTERPRISEPERCENT" NUMERIC(15,2) DEFAULT NULL, 
	"SGOZENTMANUALAMOUNT" NUMERIC(15,2), 
	"SGOZQUOTMANUALAMOUNT" NUMERIC(15,2)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3DOCCHILD
--------------------------------------------------------

  CREATE TABLE "PLAN3DOCCHILD" 
   (	"PLAN3DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASEDOC
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASEDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"REMARK" VARCHAR(255 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"PURCHASECODE" VARCHAR(100 ), 
	"PLANPOSITION" VARCHAR(100 ), 
	"DESCRIPTION_ID" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"PURCHASETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(1000 ), 
	"NECESSITY_ADVANCED" VARCHAR(1000 ), 
	"STATEPROGDOC_RSLT" VARCHAR(2000 ), 
	"STATEPROGDOC_PERIOD" VARCHAR(2000 ), 
	"STATEPROGDOC_PROCURE" VARCHAR(2000 ), 
	"PUBLICDISCUSSION" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"CURRENCY_CODE" VARCHAR(3 ), 
	"ORDERFORM" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORDERNAMECACHE_ID" NUMERIC(15,0), 
	"INVITATIONDATE" DATE, 
	"DEALDATE" DATE, 
	"CONTRACTEXECDATE" DATE, 
	"CONEXECSTAGESCACHE_ID" NUMERIC(15,0), 
	"PERIODICITYCACHE_ID" NUMERIC(15,0), 
	"PROHIBITIONSCACHE_ID" NUMERIC(15,0), 
	"SINGLECUSTOMERREASON_ID" NUMERIC(15,0), 
	"OFRREQREASON_ID" NUMERIC(15,0), 
	"CMPORG_ID" NUMERIC(15,0), 
	"CMPORGNAME" VARCHAR(2000 ), 
	"CONBANKSUPPORTCACHE_ID" NUMERIC(15,0), 
	"PUBLICDISCUSSCACHE_ID" NUMERIC(15,0), 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ADVANCE" NUMERIC(15,2), 
	"ADVANCEPERCENTS" NUMERIC(15,2), 
	"ADVANCEINFO" VARCHAR(2000 ), 
	"ISGUARANTEEAPP" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEEAPPAMOUNT" NUMERIC(15,2), 
	"GUARANTEEAPPPERCENT" NUMERIC(15,2), 
	"PURCHASEFINCONDITION" VARCHAR(2000 ), 
	"ISGUARANTEECONTRACT" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEECONTRACTAMOUNT" NUMERIC(15,2), 
	"GUARANTEECONTRACTPERCENT" NUMERIC(15,2), 
	"CONTRACTFINCONDITION" VARCHAR(2000 ), 
	"EFORM" NUMERIC(1,0), 
	"ORDERNUMBER" VARCHAR(30 ), 
	"SUMPUSHASESMALLBUSINESS" NUMERIC(15,2), 
	"PRCPUSHASESMALLBUSINESS" NUMERIC(15,2), 
	"CONTRACTPAYORDERCACHE_ID" NUMERIC(15,0), 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"CONTRACTOR_ID" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0), 
	"TERRITORYCODE" VARCHAR(20 ), 
	"DELIVERYADDRESS_ID" NUMERIC(15,0), 
	"CHANGEREASONDATE" DATE, 
	"PLANCHANGEREASON_ID" NUMERIC(15,0), 
	"CHANGEREASON_ID" NUMERIC(15,0), 
	"CHANGEREASON" VARCHAR(2000 ), 
	"CHANGEREASONINFO" VARCHAR(2000 ), 
	"FINAMOUNT" NUMERIC(15,2), 
	"FINAMOUNT_2YEAR" NUMERIC(15,2), 
	"FINAMOUNT_3YEAR" NUMERIC(15,2), 
	"FINAMOUNT_FUTURE" NUMERIC(15,2), 
	"PLAN_INVITATIONYEAR" NUMERIC(4,0), 
	"INFO_7_2_17_44_FZ" NUMERIC(1,0), 
	"DELIVERYDATEFROM" DATE, 
	"DELIVERYDATETO" DATE, 
	"PAYDATEFROM" DATE, 
	"PAYDATETO" DATE, 
	"OOSPUBLISHDATE" DATE, 
	"PURCHASEMETHOD_ID" NUMERIC(15,0), 
	"MODIFICATIONDESCRIPTION" VARCHAR(2000 ), 
	"IDENTIFICATION_CODE" VARCHAR(50 ), 
	"IKOKPD_ID" NUMERIC(15,0), 
	"LEGALACTREQUISITES" VARCHAR(2000 ), 
	"CONTRACTPRICEFEATURES" VARCHAR(2000 ), 
	"PARENT_PURCHASECODE" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASEFEATURE
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASEFEATURE" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTENT" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASEGOODS
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASEGOODS" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PLAN3PURCHASELINEPOS" NUMERIC(15,0), 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"OKDP_CODE" VARCHAR(20 ), 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKVED" VARCHAR(20 ), 
	"OKEI" VARCHAR(4 ), 
	"PRICE" NUMERIC(15,2), 
	"MINREQUIREMENT" VARCHAR(2000 ), 
	"QUANTITYUNDEFINED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY_2YEAR" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY_3YEAR" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY_FUTURE" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_2YEAR" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_3YEAR" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_FUTURE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKVED_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"OKVED_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASEGOODSOKVED
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASEGOODSOKVED" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"OKVED" VARCHAR(20 ) NOT NULL, 
	"OKVED_NAME" VARCHAR(1000 ), 
	"OKVED_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASEGOODSPROP
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASEGOODSPROP" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASELINE
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASELINE" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"FINSRC_ID" NUMERIC(15,0), 
	"FINSRCNAME" VARCHAR(512 ), 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE" VARCHAR(17 ), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"GRANTINVESTMENTCODE" VARCHAR(20 ), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_2YEAR" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_3YEAR" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_FUTURE" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLAN3PURCHASELINESHEDULE
--------------------------------------------------------

  CREATE TABLE "PLAN3PURCHASELINESHEDULE" 
   (	"PLAN3PURCHASEDOC_ID" NUMERIC(15,0) NOT NULL, 
	"PLAN3PURCHASELINEPOS" NUMERIC(15,0) NOT NULL, 
	"FINYEAR" NUMERIC(4,0) NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLGOODS
--------------------------------------------------------

  CREATE TABLE "PLGOODS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"MAXQUANTITY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"UNIT" VARCHAR(20 ) NOT NULL, 
	"NAME" VARCHAR(512 ) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"ORGID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PLGOODSPROP
--------------------------------------------------------

  CREATE TABLE "PLGOODSPROP" 
   (	"GOODSID" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLNBUDGETLINE
--------------------------------------------------------

  CREATE TABLE "PLNBUDGETLINE" 
   (	"PLANDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"FINSRCNAME" VARCHAR(512 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"AMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PLNGOODS
--------------------------------------------------------

  CREATE TABLE "PLNGOODS" 
   (	"PLANDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY1" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY2" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY3" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY4" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTYENABLEDMASK" NUMERIC(4,0) DEFAULT 15 NOT NULL, 
	"PRICE1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PRICE2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PRICE3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"PRICE4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"OKDP_CODE" VARCHAR(7 ), 
	"OKVED" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKVED_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"OKVED_ID" NUMERIC(15,0), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table PLNSHEDULE
--------------------------------------------------------

  CREATE TABLE "PLNSHEDULE" 
   (	"PLANDOC_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"QTY1" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY2" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY3" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"QTY4" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PREFERENCEGROUP
--------------------------------------------------------

  CREATE TABLE "PREFERENCEGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(1000 ) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGETTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PREFERENCEGROUPFEATURE
--------------------------------------------------------

  CREATE TABLE "PREFERENCEGROUPFEATURE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PREFERENCEGROUP_ID" NUMERIC(15,0) NOT NULL, 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTENT" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table PROCTREE
--------------------------------------------------------

  CREATE TABLE "PROCTREE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"COND_VALUE" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"SEQ_ORDER" NUMERIC(15,0), 
	"SCHEMA_ACT" VARCHAR(30 ), 
	"PARAMS" VARCHAR(300 ), 
	"PARAMS_ONLY" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PROCUREMENT
--------------------------------------------------------

  CREATE TABLE "PROCUREMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REQUEST_ID" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0), 
	"CMPDATE" DATE, 
	"FINISHDATE" DATE, 
	"ISARCHIVE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REMARKS" VARCHAR(1000 ), 
	"RESPPERSONAL_ID" NUMERIC(15,0), 
	"COMMISSION_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PROPTYPE
--------------------------------------------------------

  CREATE TABLE "PROPTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(512 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PURCHASECARRY
--------------------------------------------------------

  CREATE TABLE "PURCHASECARRY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"CARRYSTATUS" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"PLANYEAR" NUMERIC(4,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"CMPORG_ID" NUMERIC(15,0), 
	"FINSRC_ID" NUMERIC(15,0), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"AMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ECONOMYAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ECONOMYFINALAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"EXECUTEAMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"EXECUTEAMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"EXECUTEAMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"EXECUTEAMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"GOODSCODE" VARCHAR(20 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"INVITATIONDATE" DATE, 
	"CMPDATE" DATE, 
	"DESCRIPTIONCACHE_ID" NUMERIC(15,0), 
	"CONTRACTOR_ID" NUMERIC(15,0), 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISSMALL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PLANVERSION" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table PURCHASEMETHOD
--------------------------------------------------------

  CREATE TABLE "PURCHASEMETHOD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) NOT NULL, 
	"CODE" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(3000 ) NOT NULL, 
	"ELECTRONIC" NUMERIC(1,0) NOT NULL, 
	"CREATORORG_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table PURCHASEMODE
--------------------------------------------------------

  CREATE TABLE "PURCHASEMODE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(500 ), 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISPUBLIC" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"KIND" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISPRIOR" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CODE_PPRF_807" NUMERIC(2,0), 
	"CODE" NUMERIC(2,0), 
	"CODE_MINFIN_142N" NUMERIC(2,0), 
	"OOS_CODE" VARCHAR(15 ), 
	"OOS_TYPE" VARCHAR(15 )
   )  ;
--------------------------------------------------------
--  DDL for Table PURCHASEPLAN
--------------------------------------------------------

  CREATE TABLE "PURCHASEPLAN" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"CMPORG_ID" NUMERIC(15,0), 
	"DESC_ID" NUMERIC(15,0), 
	"PURCHASEPLANDOC_ID" NUMERIC(15,0) NOT NULL, 
	"FINSRC_ID" NUMERIC(15,0), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"AMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT5" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT6" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT7" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT8" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT9" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT10" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT11" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT12" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DATEBEGIN" DATE, 
	"DATEEND" DATE, 
	"ENTAMOUNT1" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT2" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT3" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT4" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT5" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT6" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT7" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT8" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT9" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT10" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT11" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTAMOUNT12" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table PURCHASEPLANDOC
--------------------------------------------------------

  CREATE TABLE "PURCHASEPLANDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"PLANYEAR" NUMERIC(4,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table QUALIFYSELECT
--------------------------------------------------------

  CREATE TABLE "QUALIFYSELECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"QUALIFYREQPOS" NUMERIC(15,0) NOT NULL, 
	"COMPETITORPOS" NUMERIC(15,0) NOT NULL, 
	"SCORE" NUMERIC(15,4)
   )  ;
--------------------------------------------------------
--  DDL for Table QUALREQ
--------------------------------------------------------

  CREATE TABLE "QUALREQ" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(1000 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RECOILDOC
--------------------------------------------------------

  CREATE TABLE "RECOILDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"REMARK" VARCHAR(255 ), 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"CMPORG_ID" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"CON_ID" NUMERIC(15,0), 
	"ISSMALL" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INVITATIONDATE" DATE, 
	"DEALDATE" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table RECOILLINES
--------------------------------------------------------

  CREATE TABLE "RECOILLINES" 
   (	"RECOILDOC_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"OKDP_CODE" VARCHAR(20 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"GOODSCODE" VARCHAR(20 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"DELIVERYBASIS_ID" NUMERIC(15,0), 
	"PAYCONDITIONCACHE_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0), 
	"CMPDATE" DATE, 
	"ISENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"RESERVEDAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table REFATTACH
--------------------------------------------------------

  CREATE TABLE "REFATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"TABLENAME" VARCHAR(50 ) NOT NULL, 
	"RECORD_ID" NUMERIC(15,0) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_DATA" BLOB, 
	"AUTHOR" NUMERIC(15,0), 
	"ACTION_DATE" DATE
   )  
  ;
--------------------------------------------------------
--  DDL for Table REFDOC
--------------------------------------------------------

  CREATE TABLE "REFDOC" 
   (	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"REF_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REFERENCECLASS
--------------------------------------------------------

  CREATE TABLE "REFERENCECLASS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ), 
	"CAPTION" VARCHAR(255 ), 
	"PROCESSOR_NAME" VARCHAR(255 ), 
	"OBJECT_CLASS_NAME" VARCHAR(255 ), 
	"TABLE_NAME" VARCHAR(255 ), 
	"CONTROL_CLASS_NAME" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REFINANCINGRATE
--------------------------------------------------------

  CREATE TABLE "REFINANCINGRATE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"START_DATE" DATE NOT NULL, 
	"RATE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LAW_ACT" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table REFJOURNAL
--------------------------------------------------------

  CREATE TABLE "REFJOURNAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"REF_ID" NUMERIC(15,0) NOT NULL, 
	"REF_OBJ_ID" NUMERIC(15,0) NOT NULL, 
	"ACTION_NAME" VARCHAR(64 ) NOT NULL, 
	"TASKJOURNAL_ID" NUMERIC(15,0), 
	"ACTION_DATA" BLOB SUB_TYPE TEXT, 
	"WORK_DATE" DATE
   )  
  ;
--------------------------------------------------------
--  DDL for Table REFUSALFACTFOUNDATION
--------------------------------------------------------

  CREATE TABLE "REFUSALFACTFOUNDATION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"OOSKEY" VARCHAR(100 ), 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REPDOCFRAGMENT
--------------------------------------------------------

  CREATE TABLE "REPDOCFRAGMENT" 
   (	"REPDOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"REPFRAGMENT_ID" NUMERIC(15,0) NOT NULL, 
	"BOOKMARK" VARCHAR(100 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REPDOCUMENT
--------------------------------------------------------

  CREATE TABLE "REPDOCUMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table REPFIELD
--------------------------------------------------------

  CREATE TABLE "REPFIELD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REPFORM_ID" NUMERIC(15,0) NOT NULL, 
	"SEQ_ORDER" NUMERIC(4,0) DEFAULT 0 NOT NULL, 
	"FIELD_NAME" VARCHAR(50 ) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"REQUIRED_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REFERENCE_FLAG" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"FIELD_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"EDIT_MASK" VARCHAR(100 ), 
	"MAX_LENGTH" NUMERIC(3,0), 
	"REF_NAME" VARCHAR(50 ), 
	"REF_KEYFIELDS" VARCHAR(100 ), 
	"REF_RESULTFIELD" VARCHAR(100 ), 
	"REF_PARAMS" VARCHAR(100 ), 
	"CTRL_WIDTH" NUMERIC(4,0) DEFAULT 0 NOT NULL, 
	"CTRL_HEIGHT" NUMERIC(4,0) DEFAULT 0 NOT NULL, 
	"LINES_COUNT" NUMERIC(4,0) DEFAULT 1 NOT NULL, 
	"NEWLINE_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DEF_VALUE" BLOB SUB_TYPE TEXT, 
	"PARAMS" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table REPFORM
--------------------------------------------------------

  CREATE TABLE "REPFORM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"PARENT_FORM" VARCHAR(50 ), 
	"CAPTION" VARCHAR(100 ), 
	"SERVERPROCESSOR_ID" NUMERIC(15,0), 
	"SERVERACTION_NAME" VARCHAR(50 ), 
	"XLT_FILENAME" VARCHAR(100 ), 
	"REPORT_CODE" NUMERIC(4,0) DEFAULT 0 NOT NULL, 
	"SUBSYSTEM" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table REPFRAGMENT
--------------------------------------------------------

  CREATE TABLE "REPFRAGMENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"FRAGMENTTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REPSOURCE_ID" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 ), 
	"DIVIDER" VARCHAR(255 ), 
	"ISNOTICE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"BODY" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table REPFRAGMENTCHILD
--------------------------------------------------------

  CREATE TABLE "REPFRAGMENTCHILD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REPFRAGMENT_ID" NUMERIC(15,0) NOT NULL, 
	"CHILD_ID" NUMERIC(15,0) NOT NULL, 
	"SOURCEFIELDNAME" VARCHAR(255 ), 
	"SOURCEFIELDVALUE" VARCHAR(1000 )
   )  ;
--------------------------------------------------------
--  DDL for Table REPORT
--------------------------------------------------------

  CREATE TABLE "REPORT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(128 ) NOT NULL, 
	"CAPTION" VARCHAR(128 ), 
	"DECLARATION" BLOB SUB_TYPE TEXT, 
	"EXCELTEMPLATENAME" VARCHAR(255 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table REPPROFILE
--------------------------------------------------------

  CREATE TABLE "REPPROFILE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"FORM_NAME" VARCHAR(100 ) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0), 
	"LOCAL_FLAG" NUMERIC(18,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"PROFILE_DATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table REPSOURCE
--------------------------------------------------------

  CREATE TABLE "REPSOURCE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SOURCETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 ), 
	"CLASSNAME" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table REPTEMPLATEATTACH
--------------------------------------------------------

  CREATE TABLE "REPTEMPLATEATTACH" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REPDOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"DEVICE_NAME" VARCHAR(100 ) NOT NULL, 
	"ATTACH_NAME" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table REQUESTDOC
--------------------------------------------------------

  CREATE TABLE "REQUESTDOC" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(2000 ), 
	"OFRREQREASON_ID" NUMERIC(15,0), 
	"SINGLECUSTOMERREASON_ID" NUMERIC(15,0), 
	"CUSTOMER_ID" NUMERIC(15,0), 
	"CUSTOMERNAME" VARCHAR(2000 ), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0), 
	"PURCHASEMODE_CAPTION" VARCHAR(500 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"CMPORG_ID" NUMERIC(15,0), 
	"REMARK" VARCHAR(255 ), 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"YEARAMT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ASSIGNEDAMT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"IGNASSIGN" NUMERIC(1,0), 
	"ISGROUPSMOREONE" NUMERIC(1,0), 
	"EXPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTROLFLAGS" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"RESPPERSONAL_NAME" VARCHAR(255 ), 
	"RESPPERSONAL_DATE" DATE, 
	"RESPPERSONAL_PHONE" VARCHAR(100 ), 
	"INCOME_NUMBER" VARCHAR(20 ), 
	"INCOME_DATE" DATE, 
	"STATCHANGE_DATE" DATE, 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENT_NAME" VARCHAR(2000 ), 
	"ACTUAL_YEAR" NUMERIC(4,0), 
	"CONTYPE_ID" NUMERIC(15,0), 
	"CMPDATE" DATE, 
	"FUTUREAMT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PLAN_DEALDATE" DATE, 
	"PLAN_INVITATIONDATE" DATE, 
	"SUBJECT" VARCHAR(2000 ), 
	"PRICE_GENERATION_ORDER" BLOB SUB_TYPE TEXT, 
	"RATIONALEPRICE" VARCHAR(4000 ), 
	"PLACINGWAY_ID" NUMERIC(15,0), 
	"QUANTITY" VARCHAR(4000 ), 
	"DELIVERYTERM" VARCHAR(1024 ), 
	"DELIVERYPLACE" VARCHAR(4000 ), 
	"PAYMENTCONDITION" VARCHAR(2000 ), 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"ISGUARANTEEAPP" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEEAPPAMOUNT" NUMERIC(15,2), 
	"GUARAPPSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARAPPPERSONALACC_ID" NUMERIC(15,0), 
	"GUARAPPBIC" VARCHAR(15 ), 
	"GUARANTEEAPPPROCEDURE" BLOB SUB_TYPE TEXT, 
	"ISGUARANTEECONTRACT" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEECONTRACTAMOUNT" NUMERIC(15,2), 
	"GUARCONTRSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARCONTRPERSONALACC_ID" NUMERIC(15,0), 
	"GUARANTEECONTRACTBIC" VARCHAR(15 ), 
	"GUARANTEECONTRACTPROCEDURE" BLOB SUB_TYPE TEXT, 
	"GUARANTEECONTRACTISBAIL" NUMERIC(1,0) DEFAULT 0, 
	"ENERGYTYPE" VARCHAR(3 ), 
	"ENERGYSERVICEECONOMY" VARCHAR(2000 ), 
	"SIGNTERM" NUMERIC(15,0), 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"PARENTREQUESTDOC_ID" NUMERIC(15,0), 
	"ADVANCE" NUMERIC(15,2), 
	"RESERVETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISAMOUNTPERCENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AMOUNTPERCENT" NUMERIC(3,2), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"CURRENCY_CODE" VARCHAR(3 ), 
	"CONMNGRRESP_FULLNAME" VARCHAR(256 ), 
	"CUSTCANCHANGECONTERMS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CUSTCANREFUSE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONSERVICEINFO" VARCHAR(2000 ), 
	"CURYEARAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CUSTCANREFUSEINFO" BLOB SUB_TYPE TEXT, 
	"LIMITCONDEFINITION" BLOB SUB_TYPE TEXT, 
	"GOODSLIMITS" BLOB SUB_TYPE TEXT, 
	"NECESSITY_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NECESSITY_DESCRIPTION" VARCHAR(1000 ), 
	"REPNOTICE_ID" NUMERIC(15,0), 
	"ETP_ID" NUMERIC(15,0), 
	"RESPPERSONAL_ID" NUMERIC(15,0), 
	"COMMISSION_ID" NUMERIC(15,0), 
	"CONMNGRRESP_ID" NUMERIC(15,0), 
	"CONSOLIDDOC_ID" NUMERIC(15,0), 
	"PRICEFORMULA" VARCHAR(2000 ), 
	"STANDARDCONTRACTNUMBER" VARCHAR(16 ), 
	"ALLOWMULTIPLECONTRACTS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"GUARANTEEAPPPERCENT" NUMERIC(5,2), 
	"GUARANTEECONTRACTPERCENT" NUMERIC(5,2), 
	"DATENUMORDERNAME" VARCHAR(2000 ), 
	"ETPKEY" VARCHAR(100 ), 
	"DECLINECOUNTER" NUMERIC(15,0) DEFAULT 0
   )  
  ;
--------------------------------------------------------
--  DDL for Table REQUESTORDER
--------------------------------------------------------

  CREATE TABLE "REQUESTORDER" 
   (	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REQUIREMENTTYPE
--------------------------------------------------------

  CREATE TABLE "REQUIREMENTTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REFTYPE" NUMERIC(1,0) NOT NULL, 
	"QTYPE" NUMERIC(2,0) NOT NULL, 
	"NAME" VARCHAR(500 ) NOT NULL, 
	"IS_ACTUAL" NUMERIC(1,0) NOT NULL, 
	"VISIBLE" NUMERIC(1,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table REQUIREMENTTYPEPM
--------------------------------------------------------

  CREATE TABLE "REQUIREMENTTYPEPM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RESERVEDBUDGETLINE
--------------------------------------------------------

  CREATE TABLE "RESERVEDBUDGETLINE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CUSTOMER_ID" NUMERIC(15,0) NOT NULL, 
	"RECIPIENT_ID" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"RESERVED_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"EXPENDED_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"ERRORCAUSE" VARCHAR(2000 ), 
	"RELEASED_AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT_FOR_RELEASE" NUMERIC(15,2) DEFAULT 0, 
	"AMOUNT_FOR_RETURN" NUMERIC(15,2) DEFAULT 0, 
	"FINYEAR" NUMERIC(4,0), 
	"PARENT_ID" NUMERIC(15,0), 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RESPONSIBILITY
--------------------------------------------------------

  CREATE TABLE "RESPONSIBILITY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table RNP
--------------------------------------------------------

  CREATE TABLE "RNP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"REGISTRY_NUMBER" VARCHAR(100 ), 
	"INCLUSIONDATE" DATE, 
	"AUTHORIZED_UNIT" VARCHAR(2000 ), 
	"VENDOR_NAME" VARCHAR(2000 ), 
	"VENDOR_TAXCODE" VARCHAR(20 ), 
	"VENDOR_POSTINDEX" VARCHAR(20 ), 
	"VENDOR_CITY" VARCHAR(300 ), 
	"VENDOR_ADDRESS" VARCHAR(1000 ), 
	"CMPDATE" DATE, 
	"CONFIRMING_DOCUMENT_DETAILS" VARCHAR(2000 ), 
	"CONTRACT_DEALDATE" DATE, 
	"CONTRACT_REGISTRY_NUMBER" VARCHAR(100 ), 
	"CONTRACT_SUBJECT" BLOB SUB_TYPE TEXT, 
	"CONTRACT_AMOUNT" NUMERIC(18,2) DEFAULT 0 NOT NULL, 
	"CONTRACT_COMPLETEDATE" DATE, 
	"CONTRACT_DISSOLVE_REASON" BLOB SUB_TYPE TEXT, 
	"CONTRACT_DISSOLVEDATE" DATE, 
	"STATE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONTRACT_EXCLUDEDATE" DATE, 
	"REGISTRY_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table ROLEAPPOBJ
--------------------------------------------------------

  CREATE TABLE "ROLEAPPOBJ" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"APPOBJNAME" VARCHAR(128 ) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEATTACH
--------------------------------------------------------

  CREATE TABLE "ROLEATTACH" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"CATEGORY_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEBUDGET
--------------------------------------------------------

  CREATE TABLE "ROLEBUDGET" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLECLASS
--------------------------------------------------------

  CREATE TABLE "ROLECLASS" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEEVENT
--------------------------------------------------------

  CREATE TABLE "ROLEEVENT" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"EVENT_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEFUNC
--------------------------------------------------------

  CREATE TABLE "ROLEFUNC" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"FUNUNIT_NAME" VARCHAR(50 ) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEORG
--------------------------------------------------------

  CREATE TABLE "ROLEORG" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEREFCLASS
--------------------------------------------------------

  CREATE TABLE "ROLEREFCLASS" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"REF_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table ROLEREGISTER
--------------------------------------------------------

  CREATE TABLE "ROLEREGISTER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_NUMBER" VARCHAR(20 ), 
	"DOC_DATE" DATE, 
	"GRANTEDROLE_ID" NUMERIC(15,0) NOT NULL, 
	"GRANTINGUSER_ID" NUMERIC(15,0) NOT NULL, 
	"USER_ID" NUMERIC(15,0) NOT NULL, 
	"GRANTDATE" TIMESTAMP  NOT NULL, 
	"FROMDATE" DATE NOT NULL, 
	"TODATE" DATE NOT NULL, 
	"DESCRIPTION" BLOB SUB_TYPE TEXT, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"OPERTYPE_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"FOREIGN_KEY" VARCHAR(50 ), 
	"OPERATION" NUMERIC(2,0) NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table ROLERIGHT
--------------------------------------------------------

  CREATE TABLE "ROLERIGHT" 
   (	"USERROLE_ID" NUMERIC(15,0) NOT NULL, 
	"SYSRIGHT_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPL
--------------------------------------------------------

  CREATE TABLE "RPL" 
   (	"MASTER_ID" NUMERIC(15,0) NOT NULL, 
	"CLIENT_ID" NUMERIC(15,0) NOT NULL, 
	"RPLOBJECT_ID" NUMERIC(15,0), 
	"RPL_ACTIVE" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"SENT_VERSION" NUMERIC(18,0) DEFAULT 0 NOT NULL, 
	"RECEIVED_VERSION" NUMERIC(18,0) DEFAULT 0 NOT NULL, 
	"FLTR" VARCHAR(255 ), 
	"RPLTYPE" NUMERIC(18,0), 
	"EXEC_ORDER" NUMERIC(18,0), 
	"NAME" VARCHAR(50 ), 
	"TABLE_NAME" VARCHAR(50 ), 
	"SERVERPROCESSOR_NAME" VARCHAR(50 ), 
	"FIELD1_VALUE" NUMERIC(15,0), 
	"FIELD2_VALUE" NUMERIC(15,0), 
	"FIELD3_VALUE" NUMERIC(15,0), 
	"FIELD4_VALUE" NUMERIC(15,0), 
	"FIELD5_VALUE" NUMERIC(15,0), 
	"FILTER_CONDITION" VARCHAR(2000 ), 
	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RPL$CONSTRAINTFIELDS
--------------------------------------------------------

  CREATE TABLE "RPL$CONSTRAINTFIELDS" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"RPL$CONSTRAINTS_ID" NUMERIC(18,0) NOT NULL, 
	"ENUM_ORDER" NUMERIC(18,0) NOT NULL, 
	"FIELDNAME" VARCHAR(50 ) NOT NULL, 
	"TARGET_FIELDNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPL$CONSTRAINTS
--------------------------------------------------------

  CREATE TABLE "RPL$CONSTRAINTS" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"TRIGGERNAME" VARCHAR(20 ) NOT NULL, 
	"TABLENAME" VARCHAR(50 ) NOT NULL, 
	"TARGET_TABLENAME" VARCHAR(50 ) NOT NULL, 
	"UPDATE_RULE" VARCHAR(11 ) DEFAULT 'RESTRICT', 
	"DELETE_RULE" VARCHAR(11 ) DEFAULT 'RESTRICT', 
	"DEFFERABLE" NUMERIC(18,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table RPLLOG
--------------------------------------------------------

  CREATE TABLE "RPLLOG" 
   (	"RPLTABLE_ID" NUMERIC(15,0) NOT NULL, 
	"GENERATION" NUMERIC(15,0) NOT NULL, 
	"RECORD_ID" NUMERIC(15,0) NOT NULL, 
	"FIELD1_VALUE" NUMERIC(15,0), 
	"FIELD2_VALUE" NUMERIC(15,0), 
	"FIELD3_VALUE" NUMERIC(15,0), 
	"FIELD4_VALUE" NUMERIC(15,0), 
	"FIELD5_VALUE" NUMERIC(15,0), 
	"TRANSACTION_ID" VARCHAR(16 )
   )  ;
--------------------------------------------------------
--  DDL for Table RPLOBJECT
--------------------------------------------------------

  CREATE TABLE "RPLOBJECT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"FLTR" VARCHAR(255 ), 
	"CLASSNAME" VARCHAR(255 ) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLRULE
--------------------------------------------------------

  CREATE TABLE "RPLRULE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLRULEOBJ
--------------------------------------------------------

  CREATE TABLE "RPLRULEOBJ" 
   (	"RPLRULE_ID" NUMERIC(15,0) NOT NULL, 
	"RPLOBJECT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLSITE
--------------------------------------------------------

  CREATE TABLE "RPLSITE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MASTER_ID" NUMERIC(15,0) NOT NULL, 
	"CLIENT_ID" NUMERIC(15,0) NOT NULL, 
	"RPLRULE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLTABLE
--------------------------------------------------------

  CREATE TABLE "RPLTABLE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"ISLOG_FLAG" NUMERIC(1,0) DEFAULT 0, 
	"RPLFIELD1" VARCHAR(50 ), 
	"RPLFIELD2" VARCHAR(50 ), 
	"RPLFIELD3" VARCHAR(50 ), 
	"RPLFIELD4" VARCHAR(50 ), 
	"RPLFIELD5" VARCHAR(50 ), 
	"ISPLUGIN" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OLD_VALUE" NUMERIC(18,0), 
	"GENERATION_GROUP" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLTABLEPLUGIN
--------------------------------------------------------

  CREATE TABLE "RPLTABLEPLUGIN" 
   (	"ID" NUMERIC(15,0), 
	"VERSION" NUMERIC(15,0), 
	"RPLTABLE_ID" NUMERIC(15,0), 
	"PLUGIN_RPLTABLE_ID" NUMERIC(15,0), 
	"JOIN_FRAGMENT" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table RPLTABLINK
--------------------------------------------------------

  CREATE TABLE "RPLTABLINK" 
   (	"RPLTABLE_ID" NUMERIC(15,0) NOT NULL, 
	"FIELD_NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RPLTRANSACTMODE
--------------------------------------------------------

  CREATE TABLE "RPLTRANSACTMODE" 
   (	"NUM_TRANSACTION" VARCHAR(50 ) NOT NULL, 
	"RPL_MODE" NUMERIC(18,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table RPLVERSIONLOG
--------------------------------------------------------

  CREATE TABLE "RPLVERSIONLOG" 
   (	"VER" NUMERIC(15,0) NOT NULL, 
	"NUM_TRANSACTION" VARCHAR(50 ) NOT NULL, 
	"RPLTABLE_ID" NUMERIC(15,0) NOT NULL, 
	"TASKJOURNAL_ID" NUMERIC(15,0) NOT NULL, 
	"RECORD_ID" NUMERIC(15,0), 
	"RECORD_ACTION" NUMERIC(1,0) DEFAULT 0
   )  ;
--------------------------------------------------------
--  DDL for Table RQBUDGETLINE
--------------------------------------------------------

  CREATE TABLE "RQBUDGETLINE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"ESTIMATE_ID" NUMERIC(15,0), 
	"ESTIMATENAME" VARCHAR(255 ), 
	"RECIPIENT_ID" NUMERIC(15,0), 
	"RECIPIENTNAME" VARCHAR(2000 ), 
	"CODE1" VARCHAR(100 ), 
	"CODE2" VARCHAR(100 ), 
	"CODE3" VARCHAR(100 ), 
	"CODE4" VARCHAR(100 ), 
	"CODE5" VARCHAR(100 ), 
	"CODE6" VARCHAR(100 ), 
	"CODE7" VARCHAR(100 ), 
	"CODE8" VARCHAR(100 ), 
	"CODE9" VARCHAR(100 ), 
	"CODE10" VARCHAR(100 ), 
	"FINSRCNAME" VARCHAR(512 ), 
	"FINSRC_ID" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 ), 
	"SUPPLYAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"USEAMOUNT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CALCPRICE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"INDUSTRYCODE_ID" NUMERIC(15,0), 
	"GRANTINVESTMENT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RQCOMMEMBER
--------------------------------------------------------

  CREATE TABLE "RQCOMMEMBER" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"COMMEMBER_ID" NUMERIC(15,0), 
	"COMMEMBER_ROLE" VARCHAR(255 ), 
	"COMMEMBER_NAME" VARCHAR(255 ), 
	"COMROLE" NUMERIC(1,0), 
	"ABSENT" NUMERIC(1,0) NOT NULL, 
	"NOTE" VARCHAR(100 ), 
	"ISACTINGFORSECRETARY" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RQCONDEALRESP
--------------------------------------------------------

  CREATE TABLE "RQCONDEALRESP" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"PERSONAL_ID" NUMERIC(15,0) NOT NULL, 
	"PERSONAL_NAME" VARCHAR(256 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQCRITERION
--------------------------------------------------------

  CREATE TABLE "RQCRITERION" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(512 ), 
	"CTYPE" NUMERIC(2,0), 
	"CALCMODE" NUMERIC(1,0), 
	"BESTPARAM" NUMERIC(1,0), 
	"WEIGHT" NUMERIC(15,2), 
	"LOTPOS" NUMERIC(15,0), 
	"TENDERCRITERION_ID" NUMERIC(15,0), 
	"MINWEIGHT" NUMERIC(15,2), 
	"MAXWEIGHT" NUMERIC(15,2), 
	"VAL" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FORMULA" VARCHAR(2000 ), 
	"OOSCODE" VARCHAR(2 ) DEFAULT '0' NOT NULL, 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQCRITERIONLINE
--------------------------------------------------------

  CREATE TABLE "RQCRITERIONLINE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"RQCRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(2000 ) NOT NULL, 
	"MINVALUE" NUMERIC(15,2), 
	"MAXVALUE" NUMERIC(15,2), 
	"WEIGHT" NUMERIC(15,2), 
	"LIMITDESCRIPTION" VARCHAR(2000 ), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQDOCCHILD
--------------------------------------------------------

  CREATE TABLE "RQDOCCHILD" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"DOC_ID" NUMERIC(15,0) NOT NULL, 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RQDOCREQ
--------------------------------------------------------

  CREATE TABLE "RQDOCREQ" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"NAME" VARCHAR(1000 ) NOT NULL, 
	"VENDOR_TYPE" VARCHAR(2 ) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"ISCONTENTTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 ), 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0), 
	"REQUIREMENTTYPE_NAME" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQFEATURE
--------------------------------------------------------

  CREATE TABLE "RQFEATURE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0) NOT NULL, 
	"PREFVALUE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CONTENT" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQGOODS
--------------------------------------------------------

  CREATE TABLE "RQGOODS" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"GROUPCODE" VARCHAR(20 ) NOT NULL, 
	"GROUPCAPTION" VARCHAR(500 ), 
	"OKDP_CODE" VARCHAR(20 ), 
	"GOODSCODE" VARCHAR(20 ), 
	"GOODSCAPTION" VARCHAR(512 ), 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"PRICE" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"STATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"OKPD_CODE" VARCHAR(20 ), 
	"OKPD_NAME" VARCHAR(1000 ), 
	"OKPD_ID" NUMERIC(15,0), 
	"OKVED_ID" NUMERIC(15,0), 
	"OKVED" VARCHAR(20 ), 
	"OKVED_NAME" VARCHAR(1000 ), 
	"UNITNAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RQGOODSPROP
--------------------------------------------------------

  CREATE TABLE "RQGOODSPROP" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"PROPTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(512 ) NOT NULL, 
	"PROPVALUE" VARCHAR(1500 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQLOT
--------------------------------------------------------

  CREATE TABLE "RQLOT" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTNUMBER" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ), 
	"DELIVERYBASISCODE" VARCHAR(50 ), 
	"PAYCONDITIONNAME" VARCHAR(255 ), 
	"CONTYPE_ID" NUMERIC(15,0), 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"CMPDATE" DATE, 
	"ENTERPRISE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PLAN_DEALDATE" DATE, 
	"SUBJECT" VARCHAR(2000 ), 
	"PRICE_GENERATION_ORDER" BLOB SUB_TYPE TEXT, 
	"RATIONALEPRICE" VARCHAR(4000 ), 
	"QUANTITY" VARCHAR(4000 ), 
	"DELIVERYTERM" VARCHAR(1024 ), 
	"DELIVERYPLACE" VARCHAR(4000 ), 
	"PAYMENTCONDITION" VARCHAR(2000 ), 
	"QUANTITYCONTRACTSPNIR" NUMERIC(15,0), 
	"ADDITIONALINFO" VARCHAR(4000 ), 
	"ISGUARANTEEAPP" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEEAPPAMOUNT" NUMERIC(15,2), 
	"GUARAPPSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARAPPPERSONALACC_ID" NUMERIC(15,0), 
	"GUARAPPBIC" VARCHAR(15 ), 
	"GUARANTEEAPPPROCEDURE" BLOB SUB_TYPE TEXT, 
	"ISGUARANTEECONTRACT" NUMERIC(1,0) DEFAULT 0, 
	"GUARANTEECONTRACTAMOUNT" NUMERIC(15,2), 
	"GUARCONTRSETTLEMENTACC_ID" NUMERIC(15,0), 
	"GUARCONTRPERSONALACC_ID" NUMERIC(15,0), 
	"GUARANTEECONTRACTBIC" VARCHAR(15 ), 
	"GUARANTEECONTRACTPROCEDURE" BLOB SUB_TYPE TEXT, 
	"GUARANTEECONTRACTISBAIL" NUMERIC(1,0) DEFAULT 0, 
	"ENERGYTYPE" VARCHAR(3 ), 
	"ENERGYSERVICEECONOMY" VARCHAR(2000 ), 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"ADVANCE" NUMERIC(15,2), 
	"ISAMOUNTPERCENT" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"AMOUNTPERCENT" NUMERIC(3,2), 
	"CURRENCY_ID" NUMERIC(15,0), 
	"CURRENCY_CODE" VARCHAR(3 ), 
	"CONMNGRRESP_FULLNAME" VARCHAR(256 ), 
	"CUSTCANCHANGECONTERMS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CUSTCANREFUSE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CONSERVICEINFO" VARCHAR(2000 ), 
	"CUSTCANREFUSEINFO" BLOB SUB_TYPE TEXT, 
	"LIMITCONDEFINITION" BLOB SUB_TYPE TEXT, 
	"GOODSLIMITS" BLOB SUB_TYPE TEXT, 
	"CONMNGRRESP_ID" NUMERIC(15,0), 
	"PRICEFORMULA" VARCHAR(2000 ), 
	"STANDARDCONTRACTNUMBER" VARCHAR(16 ), 
	"ALLOWMULTIPLECONTRACTS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"GUARANTEEAPPPERCENT" NUMERIC(5,2), 
	"GUARANTEECONTRACTPERCENT" NUMERIC(5,2)
   )  
  ;
--------------------------------------------------------
--  DDL for Table RQOPTIMIZEDPRICE
--------------------------------------------------------

  CREATE TABLE "RQOPTIMIZEDPRICE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"PLANPOSITIONNUMBER" VARCHAR(100 ), 
	"PERCENT" NUMERIC(5,2) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RQPAYSHEDULE
--------------------------------------------------------

  CREATE TABLE "RQPAYSHEDULE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"PAYDATE" DATE NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table RQQUALREQ
--------------------------------------------------------

  CREATE TABLE "RQQUALREQ" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"LOTPOS" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"QTYPE" NUMERIC(2,0) NOT NULL, 
	"QMINVALUE" NUMERIC(15,4), 
	"QMAXVALUE" NUMERIC(15,4), 
	"PLACEMENTFEATURE_ID" NUMERIC(15,0), 
	"CONTENT" VARCHAR(2000 ), 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0), 
	"REQUIREMENTTYPE_NAME" VARCHAR(500 )
   )  ;
--------------------------------------------------------
--  DDL for Table RQSUPPLYSHEDULE
--------------------------------------------------------

  CREATE TABLE "RQSUPPLYSHEDULE" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGETLINEPOS" NUMERIC(15,0) NOT NULL, 
	"GOODSPOS" NUMERIC(15,0) NOT NULL, 
	"SUPPLYDATE" DATE NOT NULL, 
	"QTY" NUMERIC(15,4) DEFAULT 0 NOT NULL, 
	"AMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL, 
	"LOTPOS" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RQVENDOR
--------------------------------------------------------

  CREATE TABLE "RQVENDOR" 
   (	"REQUEST_ID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"VENDOR_ID" NUMERIC(15,0), 
	"TAXCODE" VARCHAR(20 ), 
	"KPP" VARCHAR(20 ), 
	"VENDORNAME" VARCHAR(2000 ), 
	"REFCOUNT" NUMERIC(4,0), 
	"PROPFORM_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table RULEREQUISITE
--------------------------------------------------------

  CREATE TABLE "RULEREQUISITE" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENTCLASS_ID" NUMERIC(18,0), 
	"CAPTION" VARCHAR(255 ) NOT NULL, 
	"FIELD_NAME" VARCHAR(50 ) NOT NULL, 
	"REF_PARAM" VARCHAR(255 ), 
	"EXPR" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table RULESCRIPT
--------------------------------------------------------

  CREATE TABLE "RULESCRIPT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"BODY" BLOB SUB_TYPE TEXT, 
	"CAPTION" VARCHAR(256 ), 
	"LANG" VARCHAR(50 ) NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table SCHEXPDOCS
--------------------------------------------------------

  CREATE TABLE "SCHEXPDOCS" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCCLASS_ID" NUMERIC(15,0) NOT NULL, 
	"STATUSES" VARCHAR(255 ) NOT NULL, 
	"ROLES" VARCHAR(255 ) NOT NULL, 
	"REMARK" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table SCHPLAN
--------------------------------------------------------

  CREATE TABLE "SCHPLAN" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SCHTASK_ID" NUMERIC(15,0) NOT NULL, 
	"MODEL" NUMERIC(1,0) NOT NULL, 
	"DAYS" VARCHAR(7 ), 
	"START_DATE" DATE NOT NULL, 
	"ISACTIVE" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"INSTANCE" VARCHAR(255 ), 
	"LAST_RUNNING_TIME" DATE, 
	"LAST_START" DATE, 
	"PARAMS" VARCHAR(255 ), 
	"LAST_FINISH_TIME" DATE, 
	"LAST_RESULT" BLOB SUB_TYPE TEXT, 
	"RUN_AFTER_SYS_START" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table SCHTASK
--------------------------------------------------------

  CREATE TABLE "SCHTASK" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"ALONE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"EXAMPLE" BLOB SUB_TYPE TEXT, 
	"PROCESSOR_XML" VARCHAR(255 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table SERVERACTION
--------------------------------------------------------

  CREATE TABLE "SERVERACTION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SERVERPROCESSOR_ID" NUMERIC(15,0) NOT NULL, 
	"ACTION_NAME" VARCHAR(50 ) NOT NULL, 
	"EXTERNAL_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"READONLY_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"JAVACLASS_NAME" VARCHAR(100 ), 
	"SERIALIZABLE_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SERVERERROR
--------------------------------------------------------

  CREATE TABLE "SERVERERROR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DESCRIPTION" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SERVERPROCESSOR
--------------------------------------------------------

  CREATE TABLE "SERVERPROCESSOR" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CLASSNAME" VARCHAR(100 ), 
	"CAPTION" VARCHAR(100 ), 
	"SYSTEM_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PUBLIC_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DATA_CLASSNAME" VARCHAR(100 ), 
	"PARAMS" VARCHAR(255 ), 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SERVERPROVIDER
--------------------------------------------------------

  CREATE TABLE "SERVERPROVIDER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"CLASSNAME" VARCHAR(100 ), 
	"PUBLIC_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"REPORT_FLAG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"PARAMS" BLOB SUB_TYPE TEXT, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  
  ;
--------------------------------------------------------
--  DDL for Table SIGNEXPORTLOG
--------------------------------------------------------

  CREATE TABLE "SIGNEXPORTLOG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DIGEST_ID" NUMERIC(15,0), 
	"EXPORT_TIME" DATE NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS_ID" NUMERIC(15,0) NOT NULL, 
	"SIGNTYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DOCATTACHEX_ID" NUMERIC(18,0)
   )  ;
--------------------------------------------------------
--  DDL for Table SIGNFORMAT
--------------------------------------------------------

  CREATE TABLE "SIGNFORMAT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SIGNTYPE
--------------------------------------------------------

  CREATE TABLE "SIGNTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL, 
	"SIGNFORMAT_ID" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table STATISTICSSOURCE
--------------------------------------------------------

  CREATE TABLE "STATISTICSSOURCE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"CAPTION" VARCHAR(255 ), 
	"CLASSNAME" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table STOREDDOCUMENTS
--------------------------------------------------------

  CREATE TABLE "STOREDDOCUMENTS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"DOCUMENT_ID" NUMERIC(15,0) NOT NULL, 
	"STORE_DATE" DATE, 
	"DATA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table STOREPLACE
--------------------------------------------------------

  CREATE TABLE "STOREPLACE" 
   (	"GOODSID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"QUANTITY" NUMERIC(15,4), 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 )
   )  ;
--------------------------------------------------------
--  DDL for Table SUPPLYPLACE
--------------------------------------------------------

  CREATE TABLE "SUPPLYPLACE" 
   (	"GOODSID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"QUANTITY" NUMERIC(15,4), 
	"SUPPLYPRICE" NUMERIC(15,2), 
	"TERRITORYCODE" VARCHAR(20 ) NOT NULL, 
	"ADDRESS" VARCHAR(300 ), 
	"REMARK" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table SUPPORTCRYPTOLIB
--------------------------------------------------------

  CREATE TABLE "SUPPORTCRYPTOLIB" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(100 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"LIBTYPE" VARCHAR(20 ) DEFAULT 'WIN_CSP' NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  CREATE TABLE "SUPPORTCRYPTOLIBFORMAT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SUPPORTCRYPTOLIB_ID" NUMERIC(15,0) NOT NULL, 
	"SIGNFORMAT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  CREATE TABLE "SUPPORTCRYPTOLIBPARAM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SUPPORTCRYPTOLIB_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"VAL" VARCHAR(255 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SYSEVENT
--------------------------------------------------------

  CREATE TABLE "SYSEVENT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CREATETIME" DATE NOT NULL, 
	"MSGTYPE" NUMERIC(1,0) NOT NULL, 
	"SRC" VARCHAR(50 ) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0), 
	"SERVERNAME" VARCHAR(50 ) NOT NULL, 
	"REPORT" VARCHAR(2000 ) NOT NULL, 
	"OBJECTID" NUMERIC(15,0), 
	"EXTRA" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table SYSPARAM
--------------------------------------------------------

  CREATE TABLE "SYSPARAM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(255 ) NOT NULL, 
	"CAPTION" VARCHAR(100 ), 
	"PARAM_VALUE" BLOB SUB_TYPE TEXT, 
	"SYSUSER_ID" NUMERIC(15,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table SYSRIGHT
--------------------------------------------------------

  CREATE TABLE "SYSRIGHT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"FUNCAT_NAME" VARCHAR(50 ), 
	"DESCRIPTION" VARCHAR(255 )
   )  ;
--------------------------------------------------------
--  DDL for Table SYSTEMSITE
--------------------------------------------------------

  CREATE TABLE "SYSTEMSITE" 
   (	"SITE_ID" NUMERIC(15,0) NOT NULL, 
	"SUBSYSTEM" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"SITETYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CLEAN_GENERATION_1" NUMERIC(15,0), 
	"CLEAN_GENERATION_2" NUMERIC(15,0), 
	"CLEAN_GENERATION_3" NUMERIC(15,0), 
	"AS" NUMERIC(18,0), 
	"LAST_GENERATION" NUMERIC(15,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table SYSUSER
--------------------------------------------------------

  CREATE TABLE "SYSUSER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"MENU_ID" NUMERIC(15,0), 
	"USERNAME" VARCHAR(30 ) NOT NULL, 
	"PSWD" VARCHAR(50 ), 
	"REALNAME" VARCHAR(100 ), 
	"ORG_ROLES" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SIGNDEMAND" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"REMARK" VARCHAR(255 ), 
	"USER_LOCKED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FORCE_CP_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"LAST_CP_TIME" DATE, 
	"EMAIL" VARCHAR(255 ), 
	"SSL_CERT" BLOB SUB_TYPE TEXT, 
	"COMMENTARY" VARCHAR(2000 ), 
	"USER_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ARCHIVED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ORG_ID" NUMERIC(15,0), 
	"PANEL_ID" NUMERIC(15,0), 
	"PERSON_ID" NUMERIC(15,0), 
	"DOMEN_ID" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"NO_PASSWORD_EXPIRY_CHECK" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"USER_LOCK_REASON" VARCHAR(255 ), 
	"OOS_LOGIN" VARCHAR(100 ), 
	"OOS_PASSWORD" VARCHAR(100 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table SYSUSEREXT
--------------------------------------------------------

  CREATE TABLE "SYSUSEREXT" 
   (	"ID" NUMERIC(18,0) NOT NULL, 
	"BADATTEMPT_COUNT" NUMERIC(5,0), 
	"LAST_BADATTEMPT_TIME" DATE, 
	"LAST_LOGIN_TIME" DATE
   )  ;
--------------------------------------------------------
--  DDL for Table TASKJOURNAL
--------------------------------------------------------

  CREATE TABLE "TASKJOURNAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ACTION_DATE" DATE, 
	"URL" VARCHAR(255 ), 
	"TASK_TIME" NUMERIC(15,0), 
	"PROCESSOR_NAME" VARCHAR(255 ), 
	"SPECIFICATION" VARCHAR(255 ), 
	"ACTION_NAME" VARCHAR(255 ), 
	"COMPLETED" NUMERIC(1,0), 
	"EVENT_TYPE" NUMERIC(15,0), 
	"VERSION" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0), 
	"SERVER_HOST" VARCHAR(100 ), 
	"SERVER_PORT" NUMERIC(5,0), 
	"CLIENT_HOST" VARCHAR(100 ), 
	"CLIENT_PORT" NUMERIC(5,0)
   )  ;
--------------------------------------------------------
--  DDL for Table TENDER
--------------------------------------------------------

  CREATE TABLE "TENDER" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"CRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"COMPETITORPOS" NUMERIC(15,0) NOT NULL, 
	"RATE" NUMERIC(17,4), 
	"SCORE" NUMERIC(10,4), 
	"OFFERVAL" VARCHAR(255 ), 
	"TENDERCRITERION_ID" NUMERIC(15,0), 
	"ISFINALOFFER" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table TENDERCRITERION
--------------------------------------------------------

  CREATE TABLE "TENDERCRITERION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(512 ), 
	"CTYPE" NUMERIC(2,0), 
	"CALCMODE" NUMERIC(1,0), 
	"BESTPARAM" NUMERIC(1,0), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"MINWEIGHT" NUMERIC(15,2), 
	"MAXWEIGHT" NUMERIC(15,2), 
	"DEFWEIGHT" NUMERIC(15,2), 
	"CHILDWEIGHT" NUMERIC(15,2), 
	"DIFFERENCE" NUMERIC(15,2), 
	"ROUNDVALUE" NUMERIC(15,2), 
	"ISACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"ISUNIQUE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"ISCANCELLABLE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"FORMULA" VARCHAR(2000 ), 
	"OOSCODE" VARCHAR(2 ) DEFAULT '0' NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table TENDERCRITERIONCHILD
--------------------------------------------------------

  CREATE TABLE "TENDERCRITERIONCHILD" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"TENDERCRITERION_ID" NUMERIC(15,0) NOT NULL, 
	"CHILD_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table TENDERCRITERIONPM
--------------------------------------------------------

  CREATE TABLE "TENDERCRITERIONPM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"TENDERCRITERION_ID" NUMERIC(15,0) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table TENDERLINE
--------------------------------------------------------

  CREATE TABLE "TENDERLINE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"TENDER_ID" NUMERIC(15,0) NOT NULL, 
	"CRITERIONLINESEQORDER" NUMERIC(15,0) NOT NULL, 
	"CRITERIONPOS" NUMERIC(15,0) NOT NULL, 
	"RATE" NUMERIC(17,4), 
	"SCORE" NUMERIC(10,4), 
	"OFFERVAL" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table TENDERLINECOMM
--------------------------------------------------------

  CREATE TABLE "TENDERLINECOMM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"ORDER_ID" NUMERIC(15,0) NOT NULL, 
	"TENDERLINE_ID" NUMERIC(15,0) NOT NULL, 
	"COMMEMBERPOS" NUMERIC(15,0) NOT NULL, 
	"SCORE" NUMERIC(10,4)
   )  ;
--------------------------------------------------------
--  DDL for Table TERRITORY
--------------------------------------------------------

  CREATE TABLE "TERRITORY" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"COUNTRY_ID" NUMERIC(15,0) NOT NULL, 
	"PARENT_ID" NUMERIC(15,0), 
	"CODE" VARCHAR(20 ) NOT NULL, 
	"TERTYPE_ID" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table TER_TREE
--------------------------------------------------------

  CREATE TABLE "TER_TREE" 
   (	"TER_ID" NUMERIC(15,0) NOT NULL, 
	"TREE" VARCHAR(252 ) NOT NULL, 
	"PATH" VARCHAR(512 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table TERTYPE
--------------------------------------------------------

  CREATE TABLE "TERTYPE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(20 ) NOT NULL, 
	"CAPTION" VARCHAR(100 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPECRIT
--------------------------------------------------------

  CREATE TABLE "TYPECRIT" 
   (	"TYPEREQCRITID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"CTYPE" NUMERIC(2,0) NOT NULL, 
	"CALCMODE" NUMERIC(1,0), 
	"BESTPARAM" NUMERIC(1,0), 
	"WEIGHT" NUMERIC(15,2), 
	"TENDERCRITERION_ID" NUMERIC(15,0), 
	"MINWEIGHT" NUMERIC(15,2), 
	"MAXWEIGHT" NUMERIC(15,2), 
	"VAL" NUMERIC(15,2), 
	"DESCRIPTION" VARCHAR(2000 ), 
	"FORMULA" VARCHAR(2000 ), 
	"UNITNAME" VARCHAR(50 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPECRITLINE
--------------------------------------------------------

  CREATE TABLE "TYPECRITLINE" 
   (	"TYPEREQCRIT_ID" NUMERIC(15,0) NOT NULL, 
	"TYPECRITPOS" NUMERIC(15,0) NOT NULL, 
	"SEQORDER" NUMERIC(15,0) NOT NULL, 
	"CAPTION" VARCHAR(2000 ) NOT NULL, 
	"MINVALUE" NUMERIC(15,2), 
	"MAXVALUE" NUMERIC(15,2), 
	"WEIGHT" NUMERIC(15,2), 
	"LIMITDESCRIPTION" VARCHAR(2000 ), 
	"DESCRIPTION" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPEDOCREQ
--------------------------------------------------------

  CREATE TABLE "TYPEDOCREQ" 
   (	"TYPEDOCREQGROUPID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"VENDOR_TYPE" NUMERIC(2,0) DEFAULT 0 NOT NULL, 
	"ISREQUIRED" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"NAME" VARCHAR(1024 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPEDOCREQGROUP
--------------------------------------------------------

  CREATE TABLE "TYPEDOCREQGROUP" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"NAME" VARCHAR(1024 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(4000 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPEREQ
--------------------------------------------------------

  CREATE TABLE "TYPEREQ" 
   (	"TYPEREQCRITID" NUMERIC(15,0) NOT NULL, 
	"POS" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"REQUIREMENTTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"DESCRIPTION" VARCHAR(1000 )
   )  ;
--------------------------------------------------------
--  DDL for Table TYPEREQCRIT
--------------------------------------------------------

  CREATE TABLE "TYPEREQCRIT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(2000 ) NOT NULL, 
	"DESCRIPTION" VARCHAR(500 ), 
	"PURCHASEMODE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table UNIT
--------------------------------------------------------

  CREATE TABLE "UNIT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"CAPTION" VARCHAR(100 ), 
	"OKEI" VARCHAR(4 ), 
	"IS_ACTUAL" NUMERIC(1,0) DEFAULT 1 NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table UPDPACKAGE
--------------------------------------------------------

  CREATE TABLE "UPDPACKAGE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0) NOT NULL, 
	"RECEIVE_TIME" DATE, 
	"PROCESS_TIME" DATE, 
	"SOURCE_BUILD" VARCHAR(50 ) NOT NULL, 
	"TARGET_BUILD" VARCHAR(50 ) NOT NULL, 
	"MODEL" VARCHAR(100 ) NOT NULL, 
	"SENDER_ID" NUMERIC(15,0) NOT NULL, 
	"RECEIVER_ID" NUMERIC(15,0) NOT NULL, 
	"DISPSTATUS" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"BUNDLE_PATH" VARCHAR(512 ), 
	"UPDATE_LOG" BLOB SUB_TYPE TEXT, 
	"DESCRIPTION" VARCHAR(1024 ), 
	"UPDATE_STARTUP_FILE" NUMERIC(1,0)
   )  
  ;
--------------------------------------------------------
--  DDL for Table USERBUDGET
--------------------------------------------------------

  CREATE TABLE "USERBUDGET" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USERCERT
--------------------------------------------------------

  CREATE TABLE "USERCERT" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0), 
	"SERIALNUMBER" VARCHAR(64 ) NOT NULL, 
	"SUBJECT" VARCHAR(255 ) NOT NULL, 
	"ISSUERSERIALNUMBER" VARCHAR(64 ) NOT NULL, 
	"ISSUER" VARCHAR(255 ) NOT NULL, 
	"VALIDFROM" DATE NOT NULL, 
	"VALIDBY" DATE NOT NULL, 
	"REVOKEDDATE" DATE DEFAULT '4000-01-01' NOT NULL, 
	"REMARK" VARCHAR(1000 ), 
	"CERTENCODED" BLOB SUB_TYPE TEXT, 
	"CHECKOID" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"SUBJECT_STATUS" NUMERIC(1,0) DEFAULT 0, 
	"ASSIGNEE" VARCHAR(100 ), 
	"SUBJECT_ORG" VARCHAR(255 ), 
	"SUBJECT_TITLE" VARCHAR(255 ), 
	"FULL_ISSUER" VARCHAR(255 ), 
	"SIGNTYPE_ID" NUMERIC(15,0) DEFAULT 1 NOT NULL, 
	"ISNOTNOTIFY" NUMERIC(1,0) DEFAULT 0, 
	"SUBJECT_OGRN" VARCHAR(20 ), 
	"SUBJECT_INN" VARCHAR(13 ), 
	"SUBJECT_LOCATION" VARCHAR(300 ), 
	"BLOCKED" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"CRLPOINT_ID" NUMERIC(15,0), 
	"SUBJECT_EMAIL" VARCHAR(255 ), 
	"SUBJECT_SNILS" VARCHAR(100 ), 
	"CA_NAME" VARCHAR(255 ), 
	"CA_CONTACT_INFO" VARCHAR(1024 )
   )  
  ;
--------------------------------------------------------
--  DDL for Table USERCERTSYSUSER
--------------------------------------------------------

  CREATE TABLE "USERCERTSYSUSER" 
   (	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"USERCERT_ID" NUMERIC(15,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USERORG
--------------------------------------------------------

  CREATE TABLE "USERORG" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"ORG_ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_MODE" NUMERIC(1,0) DEFAULT 1 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USERPROFILE
--------------------------------------------------------

  CREATE TABLE "USERPROFILE" 
   (	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"PVALUE" BLOB SUB_TYPE TEXT
   )  
  ;
--------------------------------------------------------
--  DDL for Table USERROLE
--------------------------------------------------------

  CREATE TABLE "USERROLE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"ROLE_TYPE" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"ISSIGNROLE" NUMERIC(1,0), 
	"ISBLOCKED" NUMERIC(1,0) DEFAULT 0, 
	"ISPRIVATEORG" NUMERIC(1,0) DEFAULT 0 NOT NULL, 
	"HASCHILDORGS" NUMERIC(1,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USERSESSION
--------------------------------------------------------

  CREATE TABLE "USERSESSION" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"SYSUSER_ID" NUMERIC(15,0) NOT NULL, 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"WORK_DATE" DATE NOT NULL, 
	"SERVER_HOST" VARCHAR(100 ), 
	"SERVER_PORT" NUMERIC(5,0), 
	"CLIENT_HOST" VARCHAR(100 ), 
	"CLIENT_PORT" NUMERIC(5,0), 
	"OPEN_TIME" DATE NOT NULL, 
	"CLOSE_TIME" DATE, 
	"VERSION" NUMERIC(15,0)
   )  ;
--------------------------------------------------------
--  DDL for Table USERSESSIONACCESS
--------------------------------------------------------

  CREATE TABLE "USERSESSIONACCESS" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"ACCESS_TIME" DATE, 
	"REQUEST_COUNT" NUMERIC(9,0) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USESCRYPTOLIB
--------------------------------------------------------

  CREATE TABLE "USESCRYPTOLIB" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"SUPPORTCRYPTOLIB_ID" NUMERIC(15,0) NOT NULL, 
	"DESCRIPTION" VARCHAR(255 ), 
	"REQUESTERTYPE" NUMERIC(1,0) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table USESCRYPTOLIBPARAM
--------------------------------------------------------

  CREATE TABLE "USESCRYPTOLIBPARAM" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"USESCRYPTOLIB_ID" NUMERIC(15,0) NOT NULL, 
	"NAME" VARCHAR(50 ) NOT NULL, 
	"VAL" VARCHAR(255 ) NOT NULL
   )  ;
--------------------------------------------------------
--  DDL for Table WEBSTATCACHE
--------------------------------------------------------

  CREATE TABLE "WEBSTATCACHE" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"BUDGET_ID" NUMERIC(15,0) NOT NULL, 
	"YEAR_NUM" NUMERIC(18,0), 
	"STATISTICSSOURCE_ID" NUMERIC(15,0) NOT NULL, 
	"PURNAME" VARCHAR(100 ), 
	"KEYTYPE" VARCHAR(100 ), 
	"INSTANCE" VARCHAR(2000 )
   )  ;
--------------------------------------------------------
--  DDL for Table WEBSTATCACHEVAL
--------------------------------------------------------

  CREATE TABLE "WEBSTATCACHEVAL" 
   (	"ID" NUMERIC(15,0) NOT NULL, 
	"VERSION" NUMERIC(15,0), 
	"KEYNAME" VARCHAR(100 ), 
	"WEBSTAT_ID" NUMERIC(15,0) NOT NULL, 
	"PURCOUNT" NUMERIC(15,0) DEFAULT 0 NOT NULL, 
	"PURAMOUNT" NUMERIC(15,2) DEFAULT 0 NOT NULL
   )  ;
--------------------------------------------------------
--  Constraints for Table GROUPUNIT
--------------------------------------------------------

  ALTER TABLE "GROUPUNIT" ADD CONSTRAINT "PK_GROUPUNIT" PRIMARY KEY ("GROUP_ID", "UNITNAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table EXCHANGECLASSES
--------------------------------------------------------

  ALTER TABLE "EXCHANGECLASSES" ADD CONSTRAINT "UQ_EXCHANGECLASSES" UNIQUE ("DOCEXCHANGESCHEME_ID", "DOCUMENTCLASS_ID")
  ;
--------------------------------------------------------
--  Constraints for Table MAILRECEIVERGROUP
--------------------------------------------------------

  ALTER TABLE "MAILRECEIVERGROUP" ADD CONSTRAINT "PK_MAILRECEIVERGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "MAILRECEIVERGROUP" ADD CONSTRAINT "UQ_MAILRECEIVERGROUP" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table LIABILITYEXPENSE_DOCLINES
--------------------------------------------------------

  ALTER TABLE "LIABILITYEXPENSE_DOCLINES" ADD CONSTRAINT "PK_LIABILITY_LINES" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPDECISION
--------------------------------------------------------

  ALTER TABLE "CMPDECISION" ADD CONSTRAINT "CHK_CMPDECISION_RESULT" CHECK (RESULT in (0,1,2)) ;
 
  ALTER TABLE "CMPDECISION" ADD CONSTRAINT "PK_CMPDECISION" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DESCRIPTIONCACHE
--------------------------------------------------------

  ALTER TABLE "DESCRIPTIONCACHE" ADD CONSTRAINT "PK_DESCRIPTION_CACHE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table CAVILTYPE
--------------------------------------------------------

  ALTER TABLE "CAVILTYPE" ADD CONSTRAINT "PK_CAVILTYPE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table NOTICEEMAILORG
--------------------------------------------------------

  ALTER TABLE "NOTICEEMAILORG" ADD CONSTRAINT "PK_NOTICEEMAILORG" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCPROCESSOR
--------------------------------------------------------

  ALTER TABLE "FUNCPROCESSOR" ADD CONSTRAINT "PK_FUNCPROCESSOR" PRIMARY KEY ("FUNUNIT_ID", "SERVERPROCESSOR_NAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGLICENCE
--------------------------------------------------------

  ALTER TABLE "ORGLICENCE" ADD CONSTRAINT "CK_ORGLICENCE_HASHARDCOPY" CHECK (hasHardcopy in (0,1)) ;
 
  ALTER TABLE "ORGLICENCE" ADD CONSTRAINT "PK_ORGLICENCE" PRIMARY KEY ("ORG_ID", "LICTYPE_ID", "LICENCE_NUMBER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTIFYMSGDOC
--------------------------------------------------------

  
 
  ALTER TABLE "NOTIFYMSGDOC" ADD CONSTRAINT "UQ_NOTIFYMSGDOC" UNIQUE ("NOTIFYMSGRULE_ID", "DOCUMENT_ID", "NOTIFYMSGKIND")
  ;
--------------------------------------------------------
--  Constraints for Table RQCRITERION
--------------------------------------------------------

  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "CK_RQCRITERION_BESTPARAM" CHECK (BestParam in (0, 1)) ;
 
  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "CK_RQCRITERION_CALCMODE" CHECK (CalcMode in (0, 1)) ;
 
  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "CK_RQCRITERION_CTYPE" CHECK (CType in (0,1,2,3,4,5,6,7,8,9,10,11,12)) ;
 
  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "PK_RQCRITERION" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGADDKPP
--------------------------------------------------------

  ALTER TABLE "ORGADDKPP" ADD CONSTRAINT "PK_ORGADDKPP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PANEL
--------------------------------------------------------

  ALTER TABLE "PANEL" ADD CONSTRAINT "PK_PANEL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "PANEL" ADD CONSTRAINT "UQ_PANEL_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table USERSESSIONACCESS
--------------------------------------------------------

  ALTER TABLE "USERSESSIONACCESS" ADD CONSTRAINT "PK_USERSESSIONACESS" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSORGROLES
--------------------------------------------------------

  ALTER TABLE "OOSORGROLES" ADD CONSTRAINT "PK_OOSORGROLES" PRIMARY KEY ("ORG_ID", "ROLECODE")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RNP
--------------------------------------------------------

  ALTER TABLE "RNP" ADD CONSTRAINT "CHK_RNP_REGISTRY_FLAG" CHECK (REGISTRY_FLAG in (0, 1)) ;
 
  ALTER TABLE "RNP" ADD CONSTRAINT "CHK_RNP_STATE" CHECK (STATE in (0, 1, 2, 3, 4)) ;
 
  ALTER TABLE "RNP" ADD CONSTRAINT "PK_RNP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRLOT
--------------------------------------------------------

  ALTER TABLE "OFRLOT" ADD CONSTRAINT "CK_OFRLOT_ISDECLINED" CHECK (IsDeclined in (0,1)) ;
 
  ALTER TABLE "OFRLOT" ADD CONSTRAINT "CK_OFRLOT_ISUTILIZED" CHECK (IsUtilized in (0,1)) ;
 
  ALTER TABLE "OFRLOT" ADD CONSTRAINT "CK_OFRLOT_LOTDECLINED" CHECK (IsLotDeclined in (0,1)) ;
 
  ALTER TABLE "OFRLOT" ADD CONSTRAINT "CK_OFRLOT_LOTREREGISTERED" CHECK (IsLotReregistered in (0,1)) ;
 
  ALTER TABLE "OFRLOT" ADD CONSTRAINT "PK_OFRLOT" PRIMARY KEY ("OFFER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONSTRUCTION
--------------------------------------------------------

  ALTER TABLE "CONSTRUCTION" ADD CONSTRAINT "PK_CONSTRUCTION" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table DOCGROUP
--------------------------------------------------------

  ALTER TABLE "DOCGROUP" ADD CONSTRAINT "PK_DOCGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "DOCGROUP" ADD CONSTRAINT "UQ_DOCGROUP" UNIQUE ("DOCUMENTCLASS_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table OFRGROUPPROPVALUE
--------------------------------------------------------

  ALTER TABLE "OFRGROUPPROPVALUE" ADD CONSTRAINT "PK_OFRGROUPPROPVALUE" PRIMARY KEY ("OFFER_ID", "GROUPPROPPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPGOODS
--------------------------------------------------------

  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "CK_CMPGOODS_STATUS" CHECK (Status in (0,1)) ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "PK_CMPGOODS" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DEVIATIONFACTFOUNDATION
--------------------------------------------------------

  ALTER TABLE "DEVIATIONFACTFOUNDATION" ADD CONSTRAINT "CK_DEVFACTFOUNDATION_ACTUAL" CHECK (Actual IN (0,1)) ;
 
  ALTER TABLE "DEVIATIONFACTFOUNDATION" ADD CONSTRAINT "PK_DEVFACTFOUNDATION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table INVGOODS
--------------------------------------------------------

  ALTER TABLE "INVGOODS" ADD CONSTRAINT "CK_INVGOODS_STATUS" CHECK (status in (0,1)) ;
 
  ALTER TABLE "INVGOODS" ADD CONSTRAINT "PK_INVGOODS" PRIMARY KEY ("INVOICE_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2OOSFEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSFEATURE" ADD CONSTRAINT "CHK_PLAN2OOSFEATURE_TYPE" CHECK (Type in ('P','F')) ;
 
  ALTER TABLE "PLAN2OOSFEATURE" ADD CONSTRAINT "PK_PLAN2OOSFEATURE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLNSHEDULE
--------------------------------------------------------

  ALTER TABLE "PLNSHEDULE" ADD CONSTRAINT "PK_PLNSHEDULE" PRIMARY KEY ("PLANDOC_ID", "GOODSPOS", "BUDGETLINEPOS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPPROFILE
--------------------------------------------------------

  ALTER TABLE "REPPROFILE" ADD CONSTRAINT "PK_REPPROFILE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MSGQUEUE
--------------------------------------------------------

  ALTER TABLE "MSGQUEUE" ADD CONSTRAINT "PK_MSGQUEUE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "MSGQUEUE" ADD CONSTRAINT "UQ_MSGQUEUE" UNIQUE ("SENDER_ID", "RECEIVER_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table DOCFLAGTYPE
--------------------------------------------------------

  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "CK_DOCFLAGTYPE_RADIO" CHECK (radio in (0,1)) ;
 
  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "CK_DOCFLAGTYPE_READONLY" CHECK (readOnly in (0,1)) ;
 
  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "CK_DOCFLAGTYPE_VISIBLE" CHECK (visible in (0,1)) ;
 
  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "PK_DOCFLAGTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ETPTYPE
--------------------------------------------------------

  ALTER TABLE "ETPTYPE" ADD CONSTRAINT "PK_ETPTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "ETPTYPE" ADD CONSTRAINT "UQ_ETPTYPE_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table PERSONAL
--------------------------------------------------------

  ALTER TABLE "PERSONAL" ADD CONSTRAINT "CK_PESONAL_IS_ACTUAL" CHECK (IS_ACTUAL IN (0, 1)) ;
 
  ALTER TABLE "PERSONAL" ADD CONSTRAINT "PK_PERSONAL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2DAILYTOTALS
--------------------------------------------------------

  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "CHK_PLAN2DAILYTOTALS_ENTRPRS" CHECK (IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "CHK_PLAN2DAILYTOTALS_SMALL" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "PK_PLAN2DAILYTOTALS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGPERSONALRESP
--------------------------------------------------------

  ALTER TABLE "ORGPERSONALRESP" ADD CONSTRAINT "PK_ORGPERSONALRESP" PRIMARY KEY ("ORG_ID", "PERSONAL_ID", "RESPONSIBILITY_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RULEREQUISITE
--------------------------------------------------------

  ALTER TABLE "RULEREQUISITE" ADD CONSTRAINT "PK_RULEREQUISITE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPVENDOR
--------------------------------------------------------

  ALTER TABLE "CMPVENDOR" ADD CONSTRAINT "PK_CMPVENDOR" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOMEN
--------------------------------------------------------

  ALTER TABLE "DOMEN" ADD CONSTRAINT "PK_DOMEN" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3DOC
--------------------------------------------------------

  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "CK_PLAN3DOC_CREDENTIALSPASSED" CHECK (CredentialsPassed in (0, 1)) ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "CK_PLAN3DOC_PLANTYPE" CHECK (PlanType IN (1,2)) ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "CK_PLAN3DOC_RESPORGOOSROLE" CHECK (RespOrgOosRole in (0,1,2,3)) ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "PK_PLAN3DOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLANPOSITIONCHANGEREASON
--------------------------------------------------------

  ALTER TABLE "PLANPOSITIONCHANGEREASON" ADD CONSTRAINT "CK_PLANPOSITIONCHANGE_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "PLANPOSITIONCHANGEREASON" ADD CONSTRAINT "PK_PLANPOSITIONCHANGEREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REFUSALFACTFOUNDATION
--------------------------------------------------------

  ALTER TABLE "REFUSALFACTFOUNDATION" ADD CONSTRAINT "CK_REFUSALFACTFNDTN_ACTUAL" CHECK (Actual in (0,1)) ;
 
  ALTER TABLE "REFUSALFACTFOUNDATION" ADD CONSTRAINT "PK_REFUSALFACTFOUNDATION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSAPPLICATION
--------------------------------------------------------

  ALTER TABLE "OOSAPPLICATION" ADD CONSTRAINT "CHK_ADMITTEDFIRST" CHECK (admittedFirst in (0,1)) ;
 
  ALTER TABLE "OOSAPPLICATION" ADD CONSTRAINT "CHK_ADMITTEDSECOND" CHECK (admittedSecond in (0,1)) ;
 
  ALTER TABLE "OOSAPPLICATION" ADD CONSTRAINT "CHK_PARTICIPANTPRESENT" CHECK (participantPresent in (0,1)) ;
 
  ALTER TABLE "OOSAPPLICATION" ADD CONSTRAINT "PK_OOSAPPLICATION" PRIMARY KEY ("NOTIFICATIONNUMBER", "LOTNUMBER", "JOURNALNUMBER")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPVOTERESULT
--------------------------------------------------------

  ALTER TABLE "CMPVOTERESULT" ADD CONSTRAINT "CHK_CMPVOTERESULT_RESULT" CHECK ((result is null) or result in (0, 1, 2)) ;
 
  ALTER TABLE "CMPVOTERESULT" ADD CONSTRAINT "PK_CMPVOTERESULT" PRIMARY KEY ("DECISIONPOS", "ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRGROUPPROP
--------------------------------------------------------

  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "CK_OFRGROUPPROP_ISREQUIRED" CHECK (IsRequired in (0,1)) ;
 
  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "PK_OFRGROUPPROP" PRIMARY KEY ("OFFER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "UQ_OFRGROUPPROP" UNIQUE ("OFFER_ID", "GROUPCODE", "SEQORDER")
  ;
--------------------------------------------------------
--  Constraints for Table CONGOODS
--------------------------------------------------------

  ALTER TABLE "CONGOODS" ADD CONSTRAINT "CK_CONGOODS_STATUS" CHECK (status in (0,1)) ;
 
  ALTER TABLE "CONGOODS" ADD CONSTRAINT "PK_CONGOODS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTREASON_DOCLINES
--------------------------------------------------------

  ALTER TABLE "CONTRACTREASON_DOCLINES" ADD CONSTRAINT "CK_CONREASONLINE_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "CONTRACTREASON_DOCLINES" ADD CONSTRAINT "PK_CONREASONLINE" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCSITELINK
--------------------------------------------------------

  ALTER TABLE "DOCSITELINK" ADD CONSTRAINT "PK_DOCSITELINK" PRIMARY KEY ("DOCUMENT_ID", "SITE_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERPROFILE
--------------------------------------------------------

  ALTER TABLE "USERPROFILE" ADD CONSTRAINT "PK_USERPROFILE" PRIMARY KEY ("SYSUSER_ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table GOODSBAN
--------------------------------------------------------

  ALTER TABLE "GOODSBAN" ADD CONSTRAINT "PK_GOODSBAN" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSBAN" ADD CONSTRAINT "UQ_GOODSBAN_NAME_NPA" UNIQUE ("NAME_NPA")
  ;
--------------------------------------------------------
--  Constraints for Table DOCEVENT
--------------------------------------------------------

  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "CK_DOCEVENT_AUTO_RPL" CHECK (auto_rpl in (0,1)) ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "CK_DOCEVENT_EXTERNAL" CHECK (external_flag in (0,1)) ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "CK_DOCEVENT_ISOFFLINE" CHECK (isoffline in (0,1)) ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "PK_DOCEVENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "UQ_DOCEVENT" UNIQUE ("DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME", "USER_TYPE")
  ;
--------------------------------------------------------
--  Constraints for Table OOSCONTRACT
--------------------------------------------------------

  ALTER TABLE "OOSCONTRACT" ADD CONSTRAINT "CHK_SINGLECUSTOMER" CHECK (singleCustomer in (0,1)) ;
 
  ALTER TABLE "OOSCONTRACT" ADD CONSTRAINT "CK_OOSCONTRACT_ISACTUAL" CHECK (isActual in (0,1)) ;
 
  ALTER TABLE "OOSCONTRACT" ADD CONSTRAINT "PK_OOSCONTRACT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ATTACHEDPLANDOC
--------------------------------------------------------

  ALTER TABLE "ATTACHEDPLANDOC" ADD CONSTRAINT "PK_ATTACHEDPLANDOC" PRIMARY KEY ("PURCHASEPLANDOC_ID", "DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQGOODS
--------------------------------------------------------

  ALTER TABLE "RQGOODS" ADD CONSTRAINT "CK_RQGOODS_STATUS" CHECK (Status in (0,1)) ;
 
  ALTER TABLE "RQGOODS" ADD CONSTRAINT "PK_RQGOODS" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RULESCRIPT
--------------------------------------------------------

  ALTER TABLE "RULESCRIPT" ADD CONSTRAINT "PK_RULESCRIPT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERROLE
--------------------------------------------------------

  ALTER TABLE "USERROLE" ADD CONSTRAINT "CK_USERROLE_HASCHILDORGS" CHECK (hasChildOrgs in (0,1)) ;
 
  ALTER TABLE "USERROLE" ADD CONSTRAINT "CK_USERROLE_ISBLOCKED" CHECK (isblocked in (0,1)) ;
 
  ALTER TABLE "USERROLE" ADD CONSTRAINT "CK_USERROLE_ISPRIVATEORG" CHECK (isPrivateOrg in (0,1)) ;
 
  ALTER TABLE "USERROLE" ADD CONSTRAINT "CK_USERROLE_TYPE" CHECK (role_type in (0,1)) ;
 
  ALTER TABLE "USERROLE" ADD CONSTRAINT "PK_USERROLE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "USERROLE" ADD CONSTRAINT "UQ_USERROLE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CMPQUALREQ
--------------------------------------------------------

  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "CK_CMPQUALREQ_QTYPE" CHECK (qType BETWEEN 0 AND 13) ;
 
  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "PK_CMPQUALREQ" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTEXECDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONEXECDOC_DELAYPNLTSFLAG" CHECK (delay_PenaltiesFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONEXECDOC_WRTOFFPNLTSFLAG" CHECK (writeOff_PenaltiesFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTRACTEXECDOC_BGEXPFLAG" CHECK (BankGrnt_ExportFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTRACTEXECDOC_DELAYFLAG" CHECK (delay_WrtOffPnltsFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTRACTEXECDOC_HCEFLAG" CHECK (HldCashEnfrcmnt_Flag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTRACTEXECDOC_RESTRFLAG" CHECK (RestructureFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTRACTEXECDOC_TERMFLAG" CHECK (TerminationFlag IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTREXECDOC_FINALSTAGEEXEC" CHECK (FinalStageExecution IN (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "CK_CONTREXECDOC_TYPE" CHECK (type in (0,1)) ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "PK_CONTREXECDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSCONTRACTPRODUCTS
--------------------------------------------------------

  ALTER TABLE "OOSCONTRACTPRODUCTS" ADD CONSTRAINT "PK_OOSCONTRACTPRODUCTS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table COMPLAINTDOC
--------------------------------------------------------

  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "PK_COMPLAINTDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPDISCUSSION
--------------------------------------------------------

  ALTER TABLE "CMPDISCUSSION" ADD CONSTRAINT "PK_CMPDISCUSSION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGCHILD
--------------------------------------------------------

  ALTER TABLE "ORGCHILD" ADD CONSTRAINT "PK_ORGCHILD" PRIMARY KEY ("ORG_ID", "CHILD_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCFLAG
--------------------------------------------------------

  
 
  ALTER TABLE "DOCFLAG" ADD CONSTRAINT "UQ_DOCFLAG_DOC_FLAGTYPE" UNIQUE ("DOCUMENT_ID", "DOCFLAGTYPE_ID")
  ;
--------------------------------------------------------
--  Constraints for Table REPDOCFRAGMENT
--------------------------------------------------------

  ALTER TABLE "REPDOCFRAGMENT" ADD CONSTRAINT "PK_REPDOCFRAGMENT" PRIMARY KEY ("REPDOCUMENT_ID", "REPFRAGMENT_ID", "BOOKMARK")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSOKDPPURCHASEMODE" ADD CONSTRAINT "PK_GOODSOKDPPURCHASEMODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLNBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "PK_PLNBUDGETLINE" PRIMARY KEY ("PLANDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2DOC
--------------------------------------------------------

  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "PK_PLAN2DOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPCRITERION
--------------------------------------------------------

  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "CK_CMPCRITERION_BESTPARAM" CHECK (BestParam in (0, 1)) ;
 
  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "CK_CMPCRITERION_CALCMODE" CHECK (CalcMode in (0, 1)) ;
 
  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "CK_CMPCRITERION_CTYPE" CHECK (CType in (0,1,2,3,4,5,6,7,8,9,10,11,12)) ;
 
  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "PK_CMPCRITERION" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table APPMODULE
--------------------------------------------------------

  ALTER TABLE "APPMODULE" ADD CONSTRAINT "PK_APPMODULE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "APPMODULE" ADD CONSTRAINT "UQ_APPMODULE" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CMPDOCREQ
--------------------------------------------------------

  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "CHK_CMPDOCREQ_ISCONTENTTYPE" CHECK (isContentType in (0,1)) ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "CHK_CMPDOCREQ_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "CK_CMPDOCREQ_TYPE" CHECK (Type in (0,1,2,3,4,5,6,7,8,9,10,11)) ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "CK_CMPDOCREQ_VENDOR_TYPE" CHECK (vendor_type in (0,1,2)) ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "PK_CMPDOCREQ" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FILEFOLDER
--------------------------------------------------------

  ALTER TABLE "FILEFOLDER" ADD CONSTRAINT "PK_FILEFOLDER" PRIMARY KEY ("STORAGE_NAME", "DEVICE_NAME", "FILE_NAME")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGACCTYPE
--------------------------------------------------------

  ALTER TABLE "ORGACCTYPE" ADD CONSTRAINT "PK_ORGACCTYPE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table OFRGOODSPROP
--------------------------------------------------------

  ALTER TABLE "OFRGOODSPROP" ADD CONSTRAINT "PK_OFRGOODSPROP" PRIMARY KEY ("OFFER_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPCOMMEMBER
--------------------------------------------------------

  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "CK_CMPCOMMEMBER_COMROLE" CHECK (comRole in (0,1,2,3,4)) ;
 
  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "CK_CMPCOMMEMBER_ISACTSECR" CHECK (ISACTINGFORSECRETARY IN (0,1)) ;
 
  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "CK_CMPCOMMEMBER_PRESIDENT" CHECK (president_vacation in (0, 1)) ;
 
  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "PK_CMPCOMMEMBER" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CMPCOMMEMBER" ADD CHECK (absent in (0, 1)) ;
--------------------------------------------------------
--  Constraints for Table CLIENTOBJECT
--------------------------------------------------------

  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "CK_CLIENTOBJECT_BUDGET" CHECK (budget_required in (0,1)) ;
 
  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "CK_CLIENTOBJECT_SYSTEM" CHECK (system_flag in (0,1)) ;
 
  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "CK_CLIENTOBJECT_TYPE" CHECK (obj_type in (0,1,2,3,4)) ;
 
  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "CK_CO_REPORT_FLAG" CHECK (report_flag in (0,1,2)) ;
 
  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "PK_CLIENTOBJECT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CLIENTOBJECT" ADD CONSTRAINT "UQ_CLIENTOBJECT" UNIQUE ("OBJ_TYPE", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table RQFEATURE
--------------------------------------------------------

  ALTER TABLE "RQFEATURE" ADD CONSTRAINT "PK_RQFEATURE" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTCARDDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "PK_CONTRACTCARDDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REFATTACH
--------------------------------------------------------

  ALTER TABLE "REFATTACH" ADD CONSTRAINT "PK_REFATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "REFATTACH" ADD CONSTRAINT "UQ_REFATTACH" UNIQUE ("TABLENAME", "RECORD_ID", "ATTACH_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CONAGREEMENTSDOCS
--------------------------------------------------------

  ALTER TABLE "CONAGREEMENTSDOCS" ADD CONSTRAINT "PK_CONAGREEMENTSDOCS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table BUDGCODE
--------------------------------------------------------

  ALTER TABLE "BUDGCODE" ADD CONSTRAINT "PK_BUDGCODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "BUDGCODE" ADD CONSTRAINT "UQ_BUDGCODE" UNIQUE ("BUDGET_ID", "SEQORDER", "CODE", "FINYEAR")
  ;
--------------------------------------------------------
--  Constraints for Table RPLLOG
--------------------------------------------------------

  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FORMATCONVERTER
--------------------------------------------------------

  ALTER TABLE "FORMATCONVERTER" ADD CONSTRAINT "PK_FORMATCONVERTER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "FORMATCONVERTER" ADD CONSTRAINT "UQ_FORMATCONVERTER_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table SERVERPROVIDER
--------------------------------------------------------

  ALTER TABLE "SERVERPROVIDER" ADD CONSTRAINT "CK_SERVERPROVIDER_PUBLIC" CHECK (public_flag in (0,1)) ;
 
  ALTER TABLE "SERVERPROVIDER" ADD CONSTRAINT "CK_SP_REPORT_FLAG" CHECK (report_flag in (0,1,2)) ;
 
  ALTER TABLE "SERVERPROVIDER" ADD CONSTRAINT "PK_SERVERPROVIDER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SERVERPROVIDER" ADD CONSTRAINT "UQ_SERVERPROVIDER" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table ORDERSUMMARY
--------------------------------------------------------

  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "CHK_ORDERSUMMARY_RESULT" CHECK (Result in (0,1,2,3,4,5,6,7,8,9,10,41,42)) ;
 
  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "PK_ORDERSUMMARY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2OOSPRODUCT
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSPRODUCT" ADD CONSTRAINT "PK_PLAN2OOSPRODUCT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASEGOODS
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "CK_P3GOODS_QUANTITYUNDEFINED" CHECK (QuantityUndefined in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "CK_P3GOODS_STATUS" CHECK (Status in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "PK_P3GOODS" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRCRITERIONLINEVAL
--------------------------------------------------------

  ALTER TABLE "OFRCRITERIONLINEVAL" ADD CONSTRAINT "CK_OCLINEVAL_ISFINALFFER" CHECK (IsFinalOffer in (0,1)) ;
 
  ALTER TABLE "OFRCRITERIONLINEVAL" ADD CONSTRAINT "PK_OFRCRITERIONLINEVAL" PRIMARY KEY ("OFFER_ID", "CMPCRITERIONPOS", "SEQORDER", "ISFINALOFFER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TYPEREQ
--------------------------------------------------------

  ALTER TABLE "TYPEREQ" ADD CONSTRAINT "PK_TYPEREQ" PRIMARY KEY ("TYPEREQCRITID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TENDERCRITERIONCHILD
--------------------------------------------------------

  ALTER TABLE "TENDERCRITERIONCHILD" ADD CONSTRAINT "PK_TENDERCRITERIONCHILD" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "TENDERCRITERIONCHILD" ADD CONSTRAINT "UQ_TENDERCRITERIONCHILD" UNIQUE ("TENDERCRITERION_ID", "CHILD_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CMPWORKGROUP
--------------------------------------------------------

  ALTER TABLE "CMPWORKGROUP" ADD CONSTRAINT "PK_CMPWORKGROUP" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRCRITERIONVAL
--------------------------------------------------------

  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "CHK_WEIGHT" CHECK (Weight > 0) ;
 
  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "CK_OCV_ISFINALFFER" CHECK (IsFinalOffer in (0,1)) ;
 
  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "CK_OFRCRITERIONVAL_CTYPE" CHECK (CType in (0,1,2,3,4,5,6,7,8,9,10,11,12)) ;
 
  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "PK_OFRCRITERIONVAL" PRIMARY KEY ("OFFER_ID", "CMPCRITERIONPOS", "ISFINALOFFER")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTYPE
--------------------------------------------------------

  ALTER TABLE "CONTYPE" ADD CONSTRAINT "PK_CONTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table AUCTIONLOG
--------------------------------------------------------

  ALTER TABLE "AUCTIONLOG" ADD CONSTRAINT "CK_AUCTIONLOG_STATE" CHECK (State in (0,1,2,3,4,5,6,11,12,13)) ;
 
  ALTER TABLE "AUCTIONLOG" ADD CONSTRAINT "PK_AUCTIONLOG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NUMGENERATOR
--------------------------------------------------------

  ALTER TABLE "NUMGENERATOR" ADD CONSTRAINT "PK_NUMGENERATOR" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "NUMGENERATOR" ADD CONSTRAINT "UQ_NUMGENERATOR_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BANKGUARANTEEREFDOC
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEREFDOC" ADD CONSTRAINT "PK_BANKGUARANTEEREFDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  ALTER TABLE "SUPPORTCRYPTOLIBFORMAT" ADD CONSTRAINT "PK_SUPPORTCRYPTOLIBFORMAT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "SUPPORTCRYPTOLIBFORMAT" ADD CONSTRAINT "UQ_SUPPORTCRYPTOLIBFORMAT" UNIQUE ("SUPPORTCRYPTOLIB_ID", "SIGNFORMAT_ID")
  ;
--------------------------------------------------------
--  Constraints for Table GOODSOKVED
--------------------------------------------------------

  ALTER TABLE "GOODSOKVED" ADD CONSTRAINT "CK_GOODSOKVED_CLASSIFIER" CHECK (classifier in (1,2)) ;
 
  ALTER TABLE "GOODSOKVED" ADD CONSTRAINT "PK_GOODSOKVED" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSOKVED" ADD CONSTRAINT "UQ_GOODSOKVED_CODE" UNIQUE ("CODE", "CLASSIFIER")
  ;
--------------------------------------------------------
--  Constraints for Table DOCRETENTIONSTATITEMS
--------------------------------------------------------

  ALTER TABLE "DOCRETENTIONSTATITEMS" ADD CONSTRAINT "PK_DOCRETSTATITEMS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "DOCRETENTIONSTATITEMS" ADD CONSTRAINT "UQ_DOCRESTATITMS" UNIQUE ("DOCUMENT_ID", "DOCRETENTION_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CERTREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "CK_CERTREQUEST_STATUS_OWNER" CHECK (STATUS_OWNER in(0,1,2)) ;
 
  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "PK_CERTREQ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (USER_EMAIL <> '') ;
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (USER_FIO <> '') ;
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (USER_ORG <> '') ;
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (STATE <> '') ;
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (CITY <> '') ;
 
  ALTER TABLE "CERTREQUEST" ADD CHECK (COUNTRY <> '') ;
--------------------------------------------------------
--  Constraints for Table FCTGOODSPROP
--------------------------------------------------------

  ALTER TABLE "FCTGOODSPROP" ADD CONSTRAINT "PK_FCTGOODSPROP" PRIMARY KEY ("FACT_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSOKDPCOUNTRYPREF
--------------------------------------------------------

  ALTER TABLE "GOODSOKDPCOUNTRYPREF" ADD CONSTRAINT "PK_GOODSOKDPPREFCOUNTRY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGACCOUNT
--------------------------------------------------------

  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "CK_ORGACCOUNT_BUDGET" CHECK (budget_flag in (0,1)) ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "CK_ORGACCOUNT_DISTRIBUTIVE" CHECK (distributive_flag in (0,1)) ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "CK_ORGACCOUNT_ISCONTRACTOR" CHECK (IsContractor in (0,1)) ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "CK_ORGACCOUNT_OOSFLAG" CHECK (OosFlag in (0,1)) ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "PK_ORGACCOUNT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPPHASE
--------------------------------------------------------

  ALTER TABLE "CMPPHASE" ADD CONSTRAINT "CK_CMPPHASE_PROTOCOLPUB" CHECK ((Oos_ProtocolPublished in (0,1))) ;
 
  ALTER TABLE "CMPPHASE" ADD CONSTRAINT "PK_CMPPHASE" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASELINESHEDULE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASELINESHEDULE" ADD CONSTRAINT "PK_P3SHED" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "PLAN3PURCHASELINEPOS", "FINYEAR")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "PURCHASEMODE" ADD CONSTRAINT "CK_PURCHASEMODE_ISACTUAL" CHECK (IsActual IN (0,1)) ;
 
  ALTER TABLE "PURCHASEMODE" ADD CONSTRAINT "CK_PURCHASEMODE_ISPRIOR" CHECK (IsPrior in (0,1)) ;
 
  ALTER TABLE "PURCHASEMODE" ADD CONSTRAINT "CK_PURCHASEMODE_ISPUBLIC" CHECK (IsPublic in (0,1)) ;
 
  ALTER TABLE "PURCHASEMODE" ADD CONSTRAINT "CK_PURCHASEMODE_KIND" CHECK (Kind in (0,1,2,3,4,5)) ;
 
  ALTER TABLE "PURCHASEMODE" ADD CONSTRAINT "PK_PURCHASEMODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RECOILLINES
--------------------------------------------------------

  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "CHK_RECOILLINES_ISENTERPRISE" CHECK (IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "PK_RECOILLINES" PRIMARY KEY ("RECOILDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODS
--------------------------------------------------------

  ALTER TABLE "GOODS" ADD CONSTRAINT "PK_GOODS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONFCONCLUSIONCONTRACT
--------------------------------------------------------

  ALTER TABLE "CONFCONCLUSIONCONTRACT" ADD CONSTRAINT "CK_CCCONTRACT_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "CONFCONCLUSIONCONTRACT" ADD CONSTRAINT "PK_CONFCONCCONTRACT" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPCRITERIONLINE
--------------------------------------------------------

  ALTER TABLE "CMPCRITERIONLINE" ADD CONSTRAINT "PK_CMPCRITERIONLINE" PRIMARY KEY ("ORDER_ID", "CMPCRITERIONPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPPERSONAL
--------------------------------------------------------

  ALTER TABLE "CMPPERSONAL" ADD CONSTRAINT "PK_CMPPERSONAL" PRIMARY KEY ("ORDER_ID", "PERSONAL_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLGOODS
--------------------------------------------------------

  ALTER TABLE "PLGOODS" ADD CONSTRAINT "PK_PLGOODS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ESTIMATE
--------------------------------------------------------

  ALTER TABLE "ESTIMATE" ADD CONSTRAINT "PK_ESTIMATE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGETP
--------------------------------------------------------

  ALTER TABLE "ORGETP" ADD CONSTRAINT "CK_ORGETP_STATUS" CHECK (Status in (0,1)) ;
 
  ALTER TABLE "ORGETP" ADD CONSTRAINT "PK_ORGETP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "ORGETP" ADD CONSTRAINT "UQ_ORGETP" UNIQUE ("ORG_ID", "ETP_ID", "ORGROLE_ID", "SYSUSER_ID")
  ;
--------------------------------------------------------
--  Constraints for Table DOCUMENT
--------------------------------------------------------

  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "PK_DOCUMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSORGANIZATIONROLE
--------------------------------------------------------

  ALTER TABLE "OOSORGANIZATIONROLE" ADD CONSTRAINT "PK_OOSORGANIZATIONROLE" PRIMARY KEY ("REGNUMBER", "ORGROLE")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSOKPD
--------------------------------------------------------

  ALTER TABLE "GOODSOKPD" ADD CONSTRAINT "CK_GOODSOKPD_CLASSIFIER" CHECK (classifier in (1,2)) ;
 
  ALTER TABLE "GOODSOKPD" ADD CONSTRAINT "PK_GOODSOKPD" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSOKPD" ADD CONSTRAINT "UQ_GOODSOKPD_CODE" UNIQUE ("CODE", "CLASSIFIER")
  ;
--------------------------------------------------------
--  Constraints for Table CEEXECUTIONLINE
--------------------------------------------------------

  ALTER TABLE "CEEXECUTIONLINE" ADD CONSTRAINT "CK_CEEXECUTIONLINE_TYPE" CHECK (type in (0,1)) ;
 
  ALTER TABLE "CEEXECUTIONLINE" ADD CONSTRAINT "PK_CEEXECUTIONLINE" PRIMARY KEY ("CONTRACTEXECDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table LEDGER
--------------------------------------------------------

  ALTER TABLE "LEDGER" ADD CONSTRAINT "CHK_LEDGER_ISENTERPRISE_YN" CHECK (IsEnterprise is null or IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "CHK_LEDGER_ISSMALL_YN" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "PK_LEDGER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "LEDGER" ADD CHECK (Fact_Q4 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Fact_Q3 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Fact_Q2 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Fact_Q1 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Plan_Q4 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Plan_Q3 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Plan_Q2 >= 0) ;
 
  ALTER TABLE "LEDGER" ADD CHECK (Plan_Q1 >= 0) ;
--------------------------------------------------------
--  Constraints for Table RPLSITE
--------------------------------------------------------

  ALTER TABLE "RPLSITE" ADD CONSTRAINT "PK_RPLSITE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "RPLSITE" ADD CONSTRAINT "UQ_RPLSITE_MASTER_ID_CLIENT_ID" UNIQUE ("MASTER_ID", "CLIENT_ID")
  ;
--------------------------------------------------------
--  Constraints for Table ETP
--------------------------------------------------------

  ALTER TABLE "ETP" ADD CONSTRAINT "PK_ETP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "ETP" ADD CONSTRAINT "UQ_ETP_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table RQSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "RQSUPPLYSHEDULE" ADD CONSTRAINT "PK_RQSUPPLYSHEDULE" PRIMARY KEY ("REQUEST_ID", "GOODSPOS", "BUDGETLINEPOS", "SUPPLYDATE")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLAIMPAYFACT
--------------------------------------------------------

  ALTER TABLE "CLAIMPAYFACT" ADD CONSTRAINT "CK_CLAIMPAYFACT_DOCTYPE" CHECK (DocType in (0,1)) ;
 
  ALTER TABLE "CLAIMPAYFACT" ADD CONSTRAINT "PK_CLAIMPAYFACT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MENUITEM
--------------------------------------------------------

  ALTER TABLE "MENUITEM" ADD CONSTRAINT "PK_MENUITEM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SYSUSEREXT
--------------------------------------------------------

  ALTER TABLE "SYSUSEREXT" ADD CONSTRAINT "PK_SYSUSEREXT" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table DISPSTATUS
--------------------------------------------------------

  ALTER TABLE "DISPSTATUS" ADD CONSTRAINT "PK_DISPSTATUS" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLACEMENTFEATUREPM
--------------------------------------------------------

  ALTER TABLE "PLACEMENTFEATUREPM" ADD CONSTRAINT "PK_PLACEMENTFEATUREPM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2OOSEXTNUMBER
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSEXTNUMBER" ADD CONSTRAINT "PK_PLAN2OOSEXTNUMBER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "PLAN2OOSEXTNUMBER" ADD CONSTRAINT "UQ_PLAN2OOSEXTNUMBER" UNIQUE ("YEARPLANOWNER", "PLANPOSITIONNUMBER", "POSITIONNUMBER", "EXTNUMBER")
  ;
--------------------------------------------------------
--  Constraints for Table DOCCUSTOMFIELDS
--------------------------------------------------------

  ALTER TABLE "DOCCUSTOMFIELDS" ADD CONSTRAINT "CK_DOCCUSTOMFIELDS_REQ" CHECK (required in (0,1)) ;
 
  ALTER TABLE "DOCCUSTOMFIELDS" ADD CONSTRAINT "PK_DOCCUSTOMFIELDS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCCUSTOMFIELDS" ADD CONSTRAINT "UQ_DOCCUSTOMFIELDS" UNIQUE ("DOCUMENTCLASS_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table ESCRROLE
--------------------------------------------------------

  ALTER TABLE "ESCRROLE" ADD CONSTRAINT "PK_ESCRROLE" PRIMARY KEY ("ESCHECKRULE_ID", "USERROLE_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REQUESTORDER
--------------------------------------------------------

  ALTER TABLE "REQUESTORDER" ADD CONSTRAINT "PK_REQUESTORDER" PRIMARY KEY ("ORDER_ID", "DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table COMMISSION
--------------------------------------------------------

  ALTER TABLE "COMMISSION" ADD CONSTRAINT "CK_COMMISSION_COMTYPE" CHECK (comType in (0,1,2,3,4,5)) ;
 
  ALTER TABLE "COMMISSION" ADD CONSTRAINT "CK_COMMISSION_ISACTUAL" CHECK (isActual in (0,1)) ;
 
  ALTER TABLE "COMMISSION" ADD CONSTRAINT "PK_COMMISSION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLECLASS
--------------------------------------------------------

  ALTER TABLE "ROLECLASS" ADD CONSTRAINT "CK_ROLECLASS_ACCESS" CHECK (access_mode in (0,1,2,3)) ;
 
  ALTER TABLE "ROLECLASS" ADD CONSTRAINT "PK_ROLECLASS" PRIMARY KEY ("USERROLE_ID", "DOCUMENTCLASS_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCUNIT
--------------------------------------------------------

  ALTER TABLE "FUNCUNIT" ADD CONSTRAINT "PK_FUNCUNIT" PRIMARY KEY ("FUNUNIT_ID", "FUNUNIT_NAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLTABLE
--------------------------------------------------------

  ALTER TABLE "RPLTABLE" ADD CONSTRAINT "CK_RPLTABLE_GENGRP" CHECK (generation_group in (0,1,2)) ;
 
  ALTER TABLE "RPLTABLE" ADD CONSTRAINT "PK_RPLTABLE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "RPLTABLE" ADD CONSTRAINT "UQ_RPLTABLE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table GOODSBANGOODSOKPD
--------------------------------------------------------

  ALTER TABLE "GOODSBANGOODSOKPD" ADD CONSTRAINT "PK_GBGO" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table GOODSPROP
--------------------------------------------------------

  ALTER TABLE "GOODSPROP" ADD CONSTRAINT "CK_GOODSPROP_PROPTYPE" CHECK (propType in (0,1)) ;
 
  ALTER TABLE "GOODSPROP" ADD CONSTRAINT "PK_GOODSPROP" PRIMARY KEY ("GOODS_ID", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPPLACE
--------------------------------------------------------

  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "CK_CMPPLACE_CALCPRICE" CHECK (calcprice in (0,1)) ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "CK_CMPPLACE_USEAMOUNT" CHECK (useamount in (0,1)) ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "PK_CMPPLACE" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCCUSTOMFIELDVALUES
--------------------------------------------------------

  
 
  
 
  ALTER TABLE "DOCCUSTOMFIELDVALUES" ADD CONSTRAINT "UQ_DOCCUSTOMFIELDVALUES" UNIQUE ("DOCUMENT_ID", "CUSTFIELD_ID")
  ;
--------------------------------------------------------
--  Constraints for Table REFDOC
--------------------------------------------------------

  ALTER TABLE "REFDOC" ADD CONSTRAINT "PK_REFDOC" PRIMARY KEY ("DOCUMENT_ID", "REF_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USESCRYPTOLIBPARAM
--------------------------------------------------------

  ALTER TABLE "USESCRYPTOLIBPARAM" ADD CONSTRAINT "PK_USESCRYPTOLIBPARAM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "USESCRYPTOLIBPARAM" ADD CONSTRAINT "UQ_USESCRYPTOLIBPARAM" UNIQUE ("USESCRYPTOLIB_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table OOSCONTRACTSUPPLIER
--------------------------------------------------------

  ALTER TABLE "OOSCONTRACTSUPPLIER" ADD CONSTRAINT "PK_OOSCONTRACTSUPPLIER" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RECOILDOC
--------------------------------------------------------

  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "CHK_RECOILDOC_ISSMALL" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "PK_RECOILDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PURCHASEPLANDOC
--------------------------------------------------------

  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNUNIT
--------------------------------------------------------

  ALTER TABLE "FUNUNIT" ADD CONSTRAINT "PK_FUNUNIT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "FUNUNIT" ADD CONSTRAINT "UQ_FUNUNIT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table COUNTRY
--------------------------------------------------------

  ALTER TABLE "COUNTRY" ADD CONSTRAINT "PK_COUNTRY" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table ORGSELSTATUS
--------------------------------------------------------

  ALTER TABLE "ORGSELSTATUS" ADD CONSTRAINT "PK_ORGSELSTATUS" PRIMARY KEY ("ORG_ID", "ORGSTATUS_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TYPECRITLINE
--------------------------------------------------------

  ALTER TABLE "TYPECRITLINE" ADD CONSTRAINT "PK_TYPECRITLINE" PRIMARY KEY ("TYPEREQCRIT_ID", "TYPECRITPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCUMENTBLOCKINFO
--------------------------------------------------------

  ALTER TABLE "DOCUMENTBLOCKINFO" ADD CONSTRAINT "PK_DOCUMENTBLOCKINFO" PRIMARY KEY ("DOCUMENT_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RESERVEDBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "PK_RESERVEDLINE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USESCRYPTOLIB
--------------------------------------------------------

  ALTER TABLE "USESCRYPTOLIB" ADD CONSTRAINT "CK_USESCRYPTOLIB_REQUESTER" CHECK (RequesterType in (0,1,2,3)) ;
 
  ALTER TABLE "USESCRYPTOLIB" ADD CONSTRAINT "PK_USESCRYPTOLIB" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OIDREF
--------------------------------------------------------

  ALTER TABLE "OIDREF" ADD CONSTRAINT "PK_OIDREF" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "OIDREF" ADD CONSTRAINT "UQ_OIDREF_OID" UNIQUE ("OID")
  ;
--------------------------------------------------------
--  Constraints for Table FACTDOCTYPE
--------------------------------------------------------

  ALTER TABLE "FACTDOCTYPE" ADD CONSTRAINT "CK_FACTDOCTYPE_DOCTYPE" CHECK (docType in (0, 1, 2, 3)) ;
 
  ALTER TABLE "FACTDOCTYPE" ADD CONSTRAINT "PK_FACTDOCTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "FACTDOCTYPE" ADD CONSTRAINT "UQ_FACTDOCTYPE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table SYSTEMSITE
--------------------------------------------------------

  ALTER TABLE "SYSTEMSITE" ADD CONSTRAINT "CK_SYSTEMSITE_TYPE" CHECK (SiteType in (0,1)) ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLOBJECT
--------------------------------------------------------

  ALTER TABLE "RPLOBJECT" ADD CONSTRAINT "PK_RPLOBJECT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "RPLOBJECT" ADD CONSTRAINT "UQ_RPLOBJECT_NAME" UNIQUE ("NAME")
  ;
 
  ALTER TABLE "RPLOBJECT" ADD CONSTRAINT "UQ_RPLOBJECT_SEQORDER" UNIQUE ("SEQORDER")
  ;
--------------------------------------------------------
--  Constraints for Table CONPRODUCTSCHANGEDOCS
--------------------------------------------------------

  ALTER TABLE "CONPRODUCTSCHANGEDOCS" ADD CONSTRAINT "PK_CONPRODUCTSCHANGEDOCS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FGROUPHEADER
--------------------------------------------------------

  ALTER TABLE "FGROUPHEADER" ADD CONSTRAINT "CK_FGROUPHEADER_TYPE" CHECK (group_type IN (0, 1)) ;
 
  ALTER TABLE "FGROUPHEADER" ADD CONSTRAINT "PK_FGROUPHEADER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "FGROUPHEADER" ADD CONSTRAINT "UQ_FGROUPHEADER_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table DELIVERYBASIS
--------------------------------------------------------

  ALTER TABLE "DELIVERYBASIS" ADD CONSTRAINT "CK_DELIVERYBASIS_SYSTEM_FLAG" CHECK (System_Flag in (0,1)) ;
 
  ALTER TABLE "DELIVERYBASIS" ADD CONSTRAINT "PK_DELIVERYBASIS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "DELIVERYBASIS" ADD CONSTRAINT "UQ_DELIVERYBASIS_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table RQPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "RQPAYSHEDULE" ADD CONSTRAINT "PK_RQPAYSHEDULE" PRIMARY KEY ("REQUEST_ID", "BUDGETLINEPOS", "PAYDATE")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCWEBLINK
--------------------------------------------------------

  ALTER TABLE "DOCWEBLINK" ADD CONSTRAINT "PK_DOCWEBLINK" PRIMARY KEY ("DOCUMENT_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCOBJECT
--------------------------------------------------------

  ALTER TABLE "FUNCOBJECT" ADD CONSTRAINT "PK_FUNCOBJECT" PRIMARY KEY ("FUNUNIT_ID", "CLIENTOBJECT_NAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSOKPDCOUNTRYPREF
--------------------------------------------------------

  ALTER TABLE "GOODSOKPDCOUNTRYPREF" ADD CONSTRAINT "PK_GOODSOKPDPREFCOUNTRY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table LIABILITYGROUP
--------------------------------------------------------

  ALTER TABLE "LIABILITYGROUP" ADD CONSTRAINT "PK_LIABILITYGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERCERTSYSUSER
--------------------------------------------------------

  
 
  
 
  ALTER TABLE "USERCERTSYSUSER" ADD CONSTRAINT "UQ_USSU" UNIQUE ("SYSUSER_ID", "USERCERT_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CMPREPDOCUMENT
--------------------------------------------------------

  ALTER TABLE "CMPREPDOCUMENT" ADD CONSTRAINT "PK_CMPREPDOCUMENT" PRIMARY KEY ("ORDER_ID", "REPDOCUMENT_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table HISTORYMODIFY
--------------------------------------------------------

  ALTER TABLE "HISTORYMODIFY" ADD CONSTRAINT "PK_HISTORYMODIFY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table COMMEMBER
--------------------------------------------------------

  ALTER TABLE "COMMEMBER" ADD CONSTRAINT "CK_COMMEMBER_COMROLE" CHECK (comRole in (0,1,2,3,4)) ;
 
  ALTER TABLE "COMMEMBER" ADD CONSTRAINT "CK_COMMEMBER_ISACTSECR" CHECK (ISACTINGFORSECRETARY IN (0,1)) ;
 
  ALTER TABLE "COMMEMBER" ADD CONSTRAINT "PK_COMMEMBER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CMPSUPPLYSHEDULE" ADD CONSTRAINT "PK_CMPSUPPLYSHEDULE" PRIMARY KEY ("ORDER_ID", "GOODSPOS", "PLACEPOS", "SUPPLYDATE")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLERIGHT
--------------------------------------------------------

  ALTER TABLE "ROLERIGHT" ADD CONSTRAINT "PK_ROLERIGHT" PRIMARY KEY ("USERROLE_ID", "SYSRIGHT_NAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CETERMINATIONLINE
--------------------------------------------------------

  ALTER TABLE "CETERMINATIONLINE" ADD CONSTRAINT "PK_CETERMINATIONLINE" PRIMARY KEY ("CONTRACTEXECDOC_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQGOODSPROP
--------------------------------------------------------

  ALTER TABLE "RQGOODSPROP" ADD CONSTRAINT "PK_RQGOODSPROP" PRIMARY KEY ("REQUEST_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCFLAGCATEGORY
--------------------------------------------------------

  ALTER TABLE "DOCFLAGCATEGORY" ADD CONSTRAINT "PK_DOCFLAGCATEGORY" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table SYSRIGHT
--------------------------------------------------------

  ALTER TABLE "SYSRIGHT" ADD CONSTRAINT "PK_SYSRIGHT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "SYSRIGHT" ADD CONSTRAINT "UQ_SYSRIGHT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table MENU
--------------------------------------------------------

  ALTER TABLE "MENU" ADD CONSTRAINT "PK_MENU" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "MENU" ADD CONSTRAINT "UQ_MENU_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table TASKJOURNAL
--------------------------------------------------------

  ALTER TABLE "TASKJOURNAL" ADD CONSTRAINT "PK_TASKJOURNAL" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table FUNCREFERENCE
--------------------------------------------------------

  ALTER TABLE "FUNCREFERENCE" ADD CONSTRAINT "PK_FUNCREFERENCE" PRIMARY KEY ("FUNUNIT_ID", "REF_NAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSOKDP
--------------------------------------------------------

  ALTER TABLE "GOODSOKDP" ADD CONSTRAINT "PK_GOODSOKDP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSOKDP" ADD CONSTRAINT "UQ_GOODSOKDP_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table REFERENCECLASS
--------------------------------------------------------

  ALTER TABLE "REFERENCECLASS" ADD CONSTRAINT "PK_REFERENCECLASS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "REFERENCECLASS" ADD CONSTRAINT "UQ_REFCLASS" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table ORGPERSONAL
--------------------------------------------------------

  ALTER TABLE "ORGPERSONAL" ADD CONSTRAINT "PK_ORGPERSONAL" PRIMARY KEY ("ORG_ID", "PERSONAL_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCDOCUMENT
--------------------------------------------------------

  ALTER TABLE "FUNCDOCUMENT" ADD CONSTRAINT "PK_FUNCDOCUMENT" PRIMARY KEY ("FUNUNIT_ID", "DOCUMENTCLASS_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CERTINTERCHANGEREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTINTERCHANGEREQUEST" ADD CONSTRAINT "PK_CERTICREQ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRDOCREQVAL
--------------------------------------------------------

  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "CHK_OFRDOCREQVAL_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "CK_OFRDOCREQVAL_TYPE" CHECK (Type in (0,1,2,3,4,5,6,7,8,9,10,11)) ;
 
  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "CK_OFRDOCREQVAL_VAL" CHECK (val in (-1,0,1,null)) ;
 
  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "CK_OFRDOCREQVAL_VENDOR_TYPE" CHECK (vendor_type in (0,1,2)) ;
 
  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "PK_OFRDOCREQVAL" PRIMARY KEY ("OFFER_ID", "CMPDOCREQPOS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSPRICE
--------------------------------------------------------

  ALTER TABLE "GOODSPRICE" ADD CONSTRAINT "PK_GOODSPRICE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSPRICE" ADD CONSTRAINT "UQ_GOODSPRICE" UNIQUE ("GOODS_ID", "DT")
  ;
--------------------------------------------------------
--  Constraints for Table REFINANCINGRATE
--------------------------------------------------------

  ALTER TABLE "REFINANCINGRATE" ADD CONSTRAINT "PK_REFINANCINGRATE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "REFINANCINGRATE" ADD CONSTRAINT "UQ_REFINANCINGRATE" UNIQUE ("START_DATE")
  ;
--------------------------------------------------------
--  Constraints for Table RPLRULE
--------------------------------------------------------

  ALTER TABLE "RPLRULE" ADD CONSTRAINT "PK_RPLRULE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "RPLRULE" ADD CONSTRAINT "UQ_RPLRULE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table DESCGROUP
--------------------------------------------------------

  ALTER TABLE "DESCGROUP" ADD CONSTRAINT "PK_DESCGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "DESCGROUP" ADD CONSTRAINT "UQ_DESCGROUP" UNIQUE ("CAPTION")
  ;
--------------------------------------------------------
--  Constraints for Table MSG
--------------------------------------------------------

  ALTER TABLE "MSG" ADD CONSTRAINT "CK_MSG_DISPSTATUS" CHECK (dispstatus in(0,1,2,3)) ;
 
  ALTER TABLE "MSG" ADD CONSTRAINT "CK_MSG_RESET" CHECK (reset_queue in (0,1)) ;
 
  ALTER TABLE "MSG" ADD CONSTRAINT "PK_MSG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "MSG" ADD CONSTRAINT "UQ_MSG" UNIQUE ("SENDER_ID", "RECEIVER_ID", "QUEUE_NAME", "SEQ_NUMBER")
  ;
--------------------------------------------------------
--  Constraints for Table DOCREQ
--------------------------------------------------------

  ALTER TABLE "DOCREQ" ADD CONSTRAINT "CHK_DOCREQ_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "DOCREQ" ADD CONSTRAINT "CHK_DOCREQ_VENDOR_TYPE" CHECK (vendor_type in (0,1,2)) ;
 
  ALTER TABLE "DOCREQ" ADD CONSTRAINT "PK_DOCREQ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CEPAYMENTPENALTY
--------------------------------------------------------

  ALTER TABLE "CEPAYMENTPENALTY" ADD CONSTRAINT "PK_CEPAYPENALTY" PRIMARY KEY ("CONTRACTEXECDOC_ID", "PENALTYPOS", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTOR
--------------------------------------------------------

  ALTER TABLE "CONTRACTOR" ADD CONSTRAINT "PK_CONTRACTOR" PRIMARY KEY ("INSPECTOR_ID", "ORG_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPTEMPLATEATTACH
--------------------------------------------------------

  ALTER TABLE "REPTEMPLATEATTACH" ADD CONSTRAINT "PK_REPTEMPLATEATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REQUESTDOC
--------------------------------------------------------

  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_ALLWMLTCONTRS" CHECK (AllowMultipleContracts IN (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_ENTERPRISE" CHECK (Enterprise in (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_G_APP_P" CHECK (GUARANTEEAPPPERCENT BETWEEN  0 AND 100) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_G_CNTR_P" CHECK (GUARANTEECONTRACTPERCENT BETWEEN 0 AND 100) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_ISAMOUNTPERCENT" CHECK (IsAmountPercent in (0, 1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CHK_REQUESTDOC_RESERVETYPE" CHECK (ReserveType in (0, 1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_ENERGYTYPE" CHECK (EnergyType is null or EnergyType in ('FV','FP','MIN','1','2','3')) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_EXPORT_FLAG" CHECK (Export_Flag in (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_GUARANTEEAPP" CHECK (IsGuaranteeApp in (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_GUARANTEECON" CHECK (IsGuaranteeContract in (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_GUARCONBAIL" CHECK (GuaranteeContractIsBail in (0,1)) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_IGNASSIGN" CHECK (IgnAssign IS NULL OR IgnAssign=1) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "CK_REQUESTDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne IS NULL OR IsGroupsMoreOne=1) ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "PK_REQUESTDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CODETYPE
--------------------------------------------------------

  ALTER TABLE "CODETYPE" ADD CONSTRAINT "CK_CODETYPE_DISPLAY" CHECK (display_order>0) ;
 
  ALTER TABLE "CODETYPE" ADD CONSTRAINT "CK_CODETYPE_PUBLIC" CHECK (seqorder in (1,2,3,4,5,6,7,8,9,10)) ;
 
  ALTER TABLE "CODETYPE" ADD CONSTRAINT "PK_CODETYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CODETYPE" ADD CONSTRAINT "UQ_CODETYPE_DISPLAY_ORDER" UNIQUE ("BUDGET_ID", "DISPLAY_ORDER")
  ;
 
  ALTER TABLE "CODETYPE" ADD CONSTRAINT "UQ_CODETYPE_NAME" UNIQUE ("BUDGET_ID", "NAME")
  ;
 
  ALTER TABLE "CODETYPE" ADD CONSTRAINT "UQ_CODETYPE_SEQORDER" UNIQUE ("BUDGET_ID", "SEQORDER")
  ;
--------------------------------------------------------
--  Constraints for Table PLAN2OOSKBKYEAR
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSKBKYEAR" ADD CONSTRAINT "PK_PLAN2OOSKBKYEAR" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table INSTITUTIONLINE
--------------------------------------------------------

  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "PK_INSTITUTIONLINE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "UQ_INSTITUTIONLINE" UNIQUE ("BUDGET_ID", "FINYEAR", "RECIPIENT_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "KOSGU", "KIF", "KVR")
  ;
--------------------------------------------------------
--  Constraints for Table NECESSITY
--------------------------------------------------------

  ALTER TABLE "NECESSITY" ADD CONSTRAINT "CK_NECESSITYTYPE_NECTYPE" CHECK (necType is null or necType in (0, 1)) ;
 
  ALTER TABLE "NECESSITY" ADD CONSTRAINT "CK_NECESSITY_ACTUAL" CHECK (actual in (0, 1)) ;
 
  ALTER TABLE "NECESSITY" ADD CONSTRAINT "PK_NECESSITY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "NECESSITY" ADD CONSTRAINT "UQ_NECESSITY_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table TYPEDOCREQGROUP
--------------------------------------------------------

  ALTER TABLE "TYPEDOCREQGROUP" ADD CONSTRAINT "PK_TYPEDOCREQGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQLOT
--------------------------------------------------------

  ALTER TABLE "RQLOT" ADD CONSTRAINT "CHK_RQLOT_ALLWMULTICONTRACTS" CHECK (AllowMultipleContracts IN (0,1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CHK_RQLOT_ENTERPRISE" CHECK (Enterprise in (0,1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CHK_RQLOT_G_APP_P" CHECK (GUARANTEEAPPPERCENT BETWEEN 0 AND 100) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CHK_RQLOT_G_CNTR_P" CHECK (GUARANTEECONTRACTPERCENT BETWEEN 0 AND 100) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CHK_RQLOT_ISAMOUNTPERCENT" CHECK (IsAmountPercent in (0, 1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CK_RQLOT_ENERGYTYPE" CHECK (EnergyType is null or EnergyType in ('FV','FP','MIN','1','2','3')) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CK_RQLOT_GUARANTEEAPP" CHECK (IsGuaranteeApp in (0,1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CK_RQLOT_GUARANTEECON" CHECK (IsGuaranteeContract in (0,1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "CK_RQLOT_GUARCONBAIL" CHECK (GuaranteeContractIsBail in (0,1)) ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "PK_RQLOT" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERSESSION
--------------------------------------------------------

  ALTER TABLE "USERSESSION" ADD CONSTRAINT "PK_USERSESSION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCDIGESTRULE
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "PK_DOCDIGESTRULE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table INVBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "PK_INVBUDGETLINE" PRIMARY KEY ("INVOICE_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLEREFCLASS
--------------------------------------------------------

  ALTER TABLE "ROLEREFCLASS" ADD CONSTRAINT "PK_ROLEREFNAME" PRIMARY KEY ("USERROLE_ID", "REF_NAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3DOCCHILD
--------------------------------------------------------

  ALTER TABLE "PLAN3DOCCHILD" ADD CONSTRAINT "PK_PLAN3DOCCHILD" PRIMARY KEY ("DOC_ID", "PLAN3DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table STOREPLACE
--------------------------------------------------------

  ALTER TABLE "STOREPLACE" ADD CONSTRAINT "PK_STOREPLACE" PRIMARY KEY ("GOODSID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OLAPQUERY
--------------------------------------------------------

  ALTER TABLE "OLAPQUERY" ADD CONSTRAINT "PK_OLAPQUERY" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ALTUNITFACTOR
--------------------------------------------------------

  ALTER TABLE "ALTUNITFACTOR" ADD CONSTRAINT "PK_ALTUNIT" PRIMARY KEY ("UNIT_ID", "ALTGOODSGROUP_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLACEMENTFEATURE
--------------------------------------------------------

  ALTER TABLE "PLACEMENTFEATURE" ADD CONSTRAINT "PK_PLACEMENTFEATURE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FACTDOC
--------------------------------------------------------

  ALTER TABLE "FACTDOC" ADD CONSTRAINT "CHK_FACTDOC_FACTTYPE" CHECK (facttype in (0,-1,-2,-3,-4)) ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "CK_FACTDOC_EXPORT_FLAG" CHECK (Export_Flag in (0,1)) ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "CK_FACTDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "PK_FACTDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MAILATTACH
--------------------------------------------------------

  ALTER TABLE "MAILATTACH" ADD CONSTRAINT "PK_MAILATTACH" PRIMARY KEY ("MAIL_ID", "ATTACH_NAME")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPFIELD
--------------------------------------------------------

  ALTER TABLE "REPFIELD" ADD CONSTRAINT "CK_REFERENCE_FLAG" CHECK (reference_flag in (0,1)) ;
 
  ALTER TABLE "REPFIELD" ADD CONSTRAINT "CK_REPFIELD_REQUIRED" CHECK (required_flag in (0,1)) ;
 
  ALTER TABLE "REPFIELD" ADD CONSTRAINT "CK_REPFIELD_TYPE" CHECK (field_type in (0,1,2,3,4,5,6,7)) ;
 
  ALTER TABLE "REPFIELD" ADD CONSTRAINT "PK_REPFIELD" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "REPFIELD" ADD CONSTRAINT "UQ_REPFIELD" UNIQUE ("REPFORM_ID", "FIELD_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BANKGUARANTEEREFDOCREASON
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEREFDOCREASON" ADD CONSTRAINT "PK_BANKGUARANTEEREFDOCREASON" PRIMARY KEY ("BANKGUARANTEEREF_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGROLE
--------------------------------------------------------

  ALTER TABLE "ORGROLE" ADD CONSTRAINT "PK_ORGROLE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table MENUITEMWEB
--------------------------------------------------------

  ALTER TABLE "MENUITEMWEB" ADD CONSTRAINT "PK_MENUITEMWEB" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TENDERCRITERIONPM
--------------------------------------------------------

  ALTER TABLE "TENDERCRITERIONPM" ADD CONSTRAINT "PK_TENDERCRITERIONPM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SIGNFORMAT
--------------------------------------------------------

  ALTER TABLE "SIGNFORMAT" ADD CONSTRAINT "PK_SIGNFORMAT" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPDOCUMENT
--------------------------------------------------------

  ALTER TABLE "REPDOCUMENT" ADD CONSTRAINT "CK_REPDOCUMENT_TYPE" CHECK (DocumentType in (0,1)) ;
 
  ALTER TABLE "REPDOCUMENT" ADD CONSTRAINT "PK_REPDOCUMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "REPDOCUMENT" ADD CONSTRAINT "UQ_REPDOCUMENT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table DOCACTION
--------------------------------------------------------

  ALTER TABLE "DOCACTION" ADD CONSTRAINT "PK_DOCACTION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCACTION" ADD CONSTRAINT "UQ_DOCACTION" UNIQUE ("DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME", "USER_TYPE")
  ;
--------------------------------------------------------
--  Constraints for Table EQUALITYCODES
--------------------------------------------------------

  ALTER TABLE "EQUALITYCODES" ADD CONSTRAINT "CHK_EQUALITYCODES_CODE" CHECK (replace (Code, ' ', '') is not null) ;
 
  ALTER TABLE "EQUALITYCODES" ADD CONSTRAINT "PK_EQUALITYCODES" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "EQUALITYCODES" ADD CONSTRAINT "UQ_EQUALITYCODES_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table DATASOURCE
--------------------------------------------------------

  ALTER TABLE "DATASOURCE" ADD CONSTRAINT "PK_DATASOURCE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "DATASOURCE" ADD CONSTRAINT "UQ_DATASOURCE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table REQUIREMENTTYPEPM
--------------------------------------------------------

  ALTER TABLE "REQUIREMENTTYPEPM" ADD CONSTRAINT "PK_REQUIREMENTTYPEPM" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CACHEMAN
--------------------------------------------------------

  ALTER TABLE "CACHEMAN" ADD CONSTRAINT "PK_CACHEMAN" PRIMARY KEY ("GUID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table RQBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "CK_RQBUDGETLINE_CALCPRICE" CHECK (calcprice in (0,1)) ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "CK_RQBUDGETLINE_USEAMOUNT" CHECK (useamount in (0,1)) ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "PK_RQBUDGETLINE" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTICEDOC
--------------------------------------------------------

  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "CK_NOTICEDOC_SENDEMAIL" CHECK (SendEmail in (0,1)) ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "PK_NOTICEDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "NOTICEDOC" ADD CHECK (isPublic in (0,1)) ;
--------------------------------------------------------
--  Constraints for Table OOSPROTOCOL
--------------------------------------------------------

  ALTER TABLE "OOSPROTOCOL" ADD CONSTRAINT "CK_OOSPROTOCOL_ISACTUAL" CHECK (isActual in (0,1)) ;
 
  ALTER TABLE "OOSPROTOCOL" ADD CONSTRAINT "PK_OOSPROTOCOL" PRIMARY KEY ("NOTIFICATIONNUMBER", "PROTOCOLNUMBER", "VERSIONNUMBER")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CMPPAYSHEDULE" ADD CONSTRAINT "PK_CMPPAYSHEDULE" PRIMARY KEY ("ORDER_ID", "BUDGETLINEPOS", "PAYDATE")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSNOTIFICATION
--------------------------------------------------------

  ALTER TABLE "OOSNOTIFICATION" ADD CONSTRAINT "CHK_NTFGRNTCONTRISBAIL" CHECK (grntContrIsBail is null or grntContrIsBail in (0,1)) ;
 
  ALTER TABLE "OOSNOTIFICATION" ADD CONSTRAINT "CK_OOSNOTIFICATION_ISACTUAL" CHECK (isActual in (0,1)) ;
 
  ALTER TABLE "OOSNOTIFICATION" ADD CONSTRAINT "PK_OOSNOTIFICATION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PROCUREMENT
--------------------------------------------------------

  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "CK_PROCUREMENT_ISARCHIVE" CHECK (IsArchive in (0,1)) ;
 
  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "PK_PROCUREMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DBCONSTRAINT
--------------------------------------------------------

  ALTER TABLE "DBCONSTRAINT" ADD CONSTRAINT "PK_CONSTRAINTS" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCUMENTCLASS
--------------------------------------------------------

  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "PK_DOCUMENTCLASS" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table CONEXECSTEP
--------------------------------------------------------

  ALTER TABLE "CONEXECSTEP" ADD CONSTRAINT "PK_CONEXECSTEP" PRIMARY KEY ("CONTRACT_ID", "CONTRACTORPOS", "BUDGETLINEPOS", "EXECDATE")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CEREPARATIONLINE
--------------------------------------------------------

  ALTER TABLE "CEREPARATIONLINE" ADD CONSTRAINT "PK_CEREPARATIONLINE" PRIMARY KEY ("CONTRACTEXECDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table QUALREQ
--------------------------------------------------------

  ALTER TABLE "QUALREQ" ADD CONSTRAINT "PK_QUALREQ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table AUCTIONBID
--------------------------------------------------------

  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "PK_AUCTIONBID" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table APPMODULEDEPENDENCY
--------------------------------------------------------

  
 
  
--------------------------------------------------------
--  Constraints for Table SERVERPROCESSOR
--------------------------------------------------------

  ALTER TABLE "SERVERPROCESSOR" ADD CONSTRAINT "CK_SERVERPROCESSOR_PUBLIC" CHECK (public_flag in (0,1)) ;
 
  ALTER TABLE "SERVERPROCESSOR" ADD CONSTRAINT "CK_SERVERPROCESSOR_SYSTEM" CHECK (system_flag in (0,1)) ;
 
  ALTER TABLE "SERVERPROCESSOR" ADD CONSTRAINT "PK_SERVERPROCESSOR" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SERVERPROCESSOR" ADD CONSTRAINT "UQ_SERVERPROCESSOR_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table DOCRETENTION
--------------------------------------------------------

  ALTER TABLE "DOCRETENTION" ADD CONSTRAINT "CHECK_ISACTIVE" CHECK (ISACTIVE IN (0, 1)) ;
 
  ALTER TABLE "DOCRETENTION" ADD CONSTRAINT "PK_DOCRETENTION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTIFYMSGRULE
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGRULE" ADD CONSTRAINT "PK_NMSGRULE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPCONDEALRESP
--------------------------------------------------------

  
 
  
 
  ALTER TABLE "CMPCONDEALRESP" ADD CONSTRAINT "UQ_CMPCONDEALRESP" UNIQUE ("ORDER_ID", "CMPCUSTOMERPOS", "PERSONAL_ID")
  ;
--------------------------------------------------------
--  Constraints for Table INVGOODSPROP
--------------------------------------------------------

  ALTER TABLE "INVGOODSPROP" ADD CONSTRAINT "PK_INVGOODSPROP" PRIMARY KEY ("INVOICE_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FINSRC
--------------------------------------------------------

  ALTER TABLE "FINSRC" ADD CONSTRAINT "CHK_ISBUDGET" CHECK (isbudget in (0,1,2)) ;
 
  ALTER TABLE "FINSRC" ADD CONSTRAINT "CHK_ISCONINFONOTBUDGET" CHECK (isConInfoNotBudget in (0,1)) ;
 
  ALTER TABLE "FINSRC" ADD CONSTRAINT "CK_FINSRC_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "FINSRC" ADD CONSTRAINT "PK_FINSRC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLRULEOBJ
--------------------------------------------------------

  ALTER TABLE "RPLRULEOBJ" ADD CONSTRAINT "PK_RPLRULEOBJ" PRIMARY KEY ("RPLRULE_ID", "RPLOBJECT_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRDECREASON
--------------------------------------------------------

  ALTER TABLE "OFRDECREASON" ADD CONSTRAINT "PK_OFRDECREASON" PRIMARY KEY ("OFFER_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SCHPLAN
--------------------------------------------------------

  ALTER TABLE "SCHPLAN" ADD CONSTRAINT "PK_SCHPLAN" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SCHPLAN" ADD CONSTRAINT "UQ_SCHPLAN_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table GCREGISTER
--------------------------------------------------------

  ALTER TABLE "GCREGISTER" ADD CONSTRAINT "PK_GCREGISTER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GCREGISTER" ADD CONSTRAINT "UQ_GCREGISTER" UNIQUE ("BUDGET_ID", "ATTACH_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table SERVERACTION
--------------------------------------------------------

  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "CK_SERIALIZABLE_FLAG" CHECK (serializable_flag in (0,1)) ;
 
  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "CK_SERVERACTION_EXTERNAL" CHECK (external_flag in (0,1)) ;
 
  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "CK_SERVERACTION_READONLY" CHECK (readonly_flag in (0,1)) ;
 
  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "PK_SERVERACTION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "UQ_SERVERACTION" UNIQUE ("SERVERPROCESSOR_ID", "ACTION_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table PLAN2OOSKBK
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSKBK" ADD CONSTRAINT "PK_PLAN2OOSKBK" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TYPEDOCREQ
--------------------------------------------------------

  ALTER TABLE "TYPEDOCREQ" ADD CONSTRAINT "CHK_TYPEDOCREQ_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "TYPEDOCREQ" ADD CONSTRAINT "CHK_TYPEDOCREQ_VENDOR_TYPE" CHECK (vendor_type in (0,1,2)) ;
 
  ALTER TABLE "TYPEDOCREQ" ADD CONSTRAINT "PK_TYPEDOCREQ" PRIMARY KEY ("TYPEDOCREQGROUPID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCAT
--------------------------------------------------------

  ALTER TABLE "FUNCAT" ADD CONSTRAINT "PK_FUNCAT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "FUNCAT" ADD CONSTRAINT "UQ_FUNCAT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table OOSCUSTOMERREQUIREMENT
--------------------------------------------------------

  ALTER TABLE "OOSCUSTOMERREQUIREMENT" ADD CONSTRAINT "CHK_GRNTCONTRISBAIL" CHECK (grntContrIsBail is null or grntContrIsBail in (0,1)) ;
 
  ALTER TABLE "OOSCUSTOMERREQUIREMENT" ADD CONSTRAINT "PK_OOSCUSTOMERREQ" PRIMARY KEY ("ID", "NOTIFICATION_ID", "LOT_ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CERTREQUESTOID
--------------------------------------------------------

  
 
  
 
  ALTER TABLE "CERTREQUESTOID" ADD CONSTRAINT "UQ_CERTREQUESTOID" UNIQUE ("CERTREQUEST_ID", "OIDREF_ID")
  ;
--------------------------------------------------------
--  Constraints for Table PLAN2OOSPOSITION
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "CHK_PLAN2OOSPOSITION_ORDERFORM" CHECK (OrderForm in (1, 2)) ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "CHK_PLAN2OOSPOS_PURCHASETYPE" CHECK (PurchaseType in (0,1,2,3,4,5,6,7,8,9,10,11)) ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_EFORM" CHECK (Eform in (0,1)) ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "PK_PLAN2OOSPOSITION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table KLADRSTREET
--------------------------------------------------------

  ALTER TABLE "KLADRSTREET" ADD CONSTRAINT "CK_KLADRSTREET_ACTUAL" CHECK (Actual in (0,1)) ;
 
  ALTER TABLE "KLADRSTREET" ADD CONSTRAINT "PK_KLADRSTREET" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "KLADRSTREET" ADD CONSTRAINT "UQ_KLADRSTREET_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table DATAOBJECTCHANGELOG
--------------------------------------------------------

  ALTER TABLE "DATAOBJECTCHANGELOG" ADD CONSTRAINT "PK_DATAOBJECTCHANGELOG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GROUPPROPVALUE
--------------------------------------------------------

  ALTER TABLE "GROUPPROPVALUE" ADD CONSTRAINT "PK_GROUPPROPVALUE" PRIMARY KEY ("GROUPPROP_ID", "SEQORDER")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table QUALIFYSELECT
--------------------------------------------------------

  ALTER TABLE "QUALIFYSELECT" ADD CONSTRAINT "PK_QUALIFYSELECT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CERTREVOKEREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTREVOKEREQUEST" ADD CONSTRAINT "PK_CERTREVOKEREQ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REQUIREMENTTYPE
--------------------------------------------------------

  ALTER TABLE "REQUIREMENTTYPE" ADD CONSTRAINT "CK_REQUIREMENTTYPE_ISACTUAL" CHECK (Is_Actual IN (0,1)) ;
 
  ALTER TABLE "REQUIREMENTTYPE" ADD CONSTRAINT "CK_REQUIREMENTTYPE_REFTYPE" CHECK (RefType IN (1,2)) ;
 
  ALTER TABLE "REQUIREMENTTYPE" ADD CONSTRAINT "CK_REQUIREMENTTYPE_VISIBLE" CHECK (Visible IN (0,1,2)) ;
 
  ALTER TABLE "REQUIREMENTTYPE" ADD CONSTRAINT "PK_REQUIREMENTTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQVENDOR
--------------------------------------------------------

  ALTER TABLE "RQVENDOR" ADD CONSTRAINT "PK_RQVENDOR" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table INVOICEDOC
--------------------------------------------------------

  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "CK_INVOICEDOC_CONACCTYPE" CHECK (conAccType in (0,1)) ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "CK_INVOICEDOC_EXPORT_FLAG" CHECK (Export_Flag in (0,1)) ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "CK_INVOICEDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "CK_INV_IS_TAXCODE_FREE" CHECK (ConIsTaxCodeFree in (0,1)) ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "CK_INV_ORGTYPE" CHECK (ConOrgType IN (0, 1, 2, 3)) ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "PK_INVOICEDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRREQREASON
--------------------------------------------------------

  ALTER TABLE "OFRREQREASON" ADD CONSTRAINT "CK_OFRREQREASON_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "OFRREQREASON" ADD CONSTRAINT "PK_OFRREQREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2LEDGER
--------------------------------------------------------

  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "CHK_PLAN2LEDGER_ISENTERPRISE" CHECK (IsEnterprise is null or IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "CHK_PLAN2LEDGER_ISSMALL" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "PK_PLAN2LEDGER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "UQ_PLAN2LEDGER" UNIQUE ("PLAN2DOC_ID", "POS")
  ;
--------------------------------------------------------
--  Constraints for Table CMPCUSTOMERLOT
--------------------------------------------------------

  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "CHK_CMPCUSTOMERLOT_G_APP_P" CHECK (GUARANTEEAPPPERCENT BETWEEN 0 AND 100) ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "CHK_CMPCUSTOMERLOT_G_CNTR_P" CHECK (GUARANTEECONTRACTPERCENT BETWEEN 0 AND 100) ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "CK_CMPCUSTOMERLOT_GUARANTEEAPP" CHECK (IsGuaranteeApp in (0,1)) ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "CK_CMPCUSTOMERLOT_GUARANTEECON" CHECK (IsGuaranteeContract in (0,1)) ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "CK_CMPCUSTOMERLOT_GUARCONBAIL" CHECK (GuaranteeContractIsBail in (0,1)) ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "PK_CMPCUSTOMERLOT" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERCERT
--------------------------------------------------------

  ALTER TABLE "USERCERT" ADD CONSTRAINT "PK_USERCERT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "USERCERT" ADD CONSTRAINT "UQ_USERCERT" UNIQUE ("SERIALNUMBER", "ISSUERSERIALNUMBER")
  ;
--------------------------------------------------------
--  Constraints for Table DIGEST
--------------------------------------------------------

  ALTER TABLE "DIGEST" ADD CONSTRAINT "CK_DIGEST_ISACTIVE" CHECK (isactive in (0,1)) ;
 
  ALTER TABLE "DIGEST" ADD CONSTRAINT "PK_DIGEST" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CHK_CONTARCTDOC_CHANGETYPE" CHECK (ChangeType in (0,1,2)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CHK_CONTRACTDOC_KIND" CHECK (DocKind in (0,1,2)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CHK_CONTRACTDOC_PRICETYPE" CHECK (PriceType in (0,1,2)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CONDOC_OOSPURCHORGOOSROLE" CHECK (OosPurchaseOrgOosRole in (0,1,2,3)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CONTRACTDOC_CONACCTYPE" CHECK (conAccType in (0,1)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CONTRACTDOC_EXPORT_FLAG" CHECK (Export_Flag in (0,1)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CONTRACTDOC_ISCREDIT" CHECK (IsCredit IN (0,1)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CONTRACTDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CON_ISCULTURE" CHECK (ConIsCulture IN (0, 1)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CON_IS_TAXCODE_FREE" CHECK (ConIsTaxCodeFree in (0,1)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "CK_CON_ORGTYPE" CHECK (ConOrgType IN (0, 1, 2, 3)) ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "PK_CONTRACTDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCCOMMENT
--------------------------------------------------------

  ALTER TABLE "DOCCOMMENT" ADD CONSTRAINT "PK_DOCCOMMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLEAPPOBJ
--------------------------------------------------------

  ALTER TABLE "ROLEAPPOBJ" ADD CONSTRAINT "CK_ROLEAPPOBJ_ACCESS" CHECK (access_mode in (0,1,2,3)) ;
 
  ALTER TABLE "ROLEAPPOBJ" ADD CONSTRAINT "PK_ROLEAPPOBJ" PRIMARY KEY ("USERROLE_ID", "APPOBJNAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FETCHMODE
--------------------------------------------------------

  ALTER TABLE "FETCHMODE" ADD CONSTRAINT "PK_FETCHMODE" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "FETCHMODE" ADD CONSTRAINT "UQ_FETCHMODE" UNIQUE ("DOCUMENTCLASS_ID")
  ;
--------------------------------------------------------
--  Constraints for Table MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  ALTER TABLE "MAILRECEIVERGROUP_RECEIVER" ADD CONSTRAINT "PK_MAILRECEIVERGROUP_RECEIVER" PRIMARY KEY ("MAILRECEIVERGROUP_ID", "SYSUSER_ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "MAILRECEIVERGROUP_RECEIVER" ADD CONSTRAINT "UQ_MAILRECEIVERGROUP_RECEIVER" UNIQUE ("ID")
  ;
--------------------------------------------------------
--  Constraints for Table KLADR
--------------------------------------------------------

  ALTER TABLE "KLADR" ADD CONSTRAINT "CK_KLADR_ACTUAL" CHECK (Actual in (0,1)) ;
 
  ALTER TABLE "KLADR" ADD CONSTRAINT "PK_KLADR" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "KLADR" ADD CONSTRAINT "UQ_KLADR_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table REFJOURNAL
--------------------------------------------------------

  ALTER TABLE "REFJOURNAL" ADD CONSTRAINT "PK_REFJOURNAL_ID" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOS223PURCHASENOTICEINFO
--------------------------------------------------------

  ALTER TABLE "OOS223PURCHASENOTICEINFO" ADD CONSTRAINT "PK_OOS223PURCHASENOTICEINFO" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table FINSRCSATISFY
--------------------------------------------------------

  ALTER TABLE "FINSRCSATISFY" ADD CONSTRAINT "PK_FINSRCSATISFY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "FINSRCSATISFY" ADD CONSTRAINT "UQ_FINSRCSATISFY" UNIQUE ("FINSRCSELECTEDYEARID", "FINSRCNEXTYEARID", "FINYEAR")
  ;
--------------------------------------------------------
--  Constraints for Table ALTGOODSGROUPTYPE
--------------------------------------------------------

  ALTER TABLE "ALTGOODSGROUPTYPE" ADD CONSTRAINT "PK_ALTGOODSGROUPTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "ALTGOODSGROUPTYPE" ADD CONSTRAINT "UQ_ALTGOODSGROUPTYPE" UNIQUE ("CAPTION")
  ;
--------------------------------------------------------
--  Constraints for Table UPDPACKAGE
--------------------------------------------------------

  ALTER TABLE "UPDPACKAGE" ADD CONSTRAINT "CK_UPDPACKAGE_BUNDLEPATH" CHECK ((dispstatus <> 0) or (bundle_path is not null)) ;
 
  ALTER TABLE "UPDPACKAGE" ADD CONSTRAINT "CK_UPDPACKAGE_DISPSTATUS" CHECK (dispstatus in (0,1,2,3,4)) ;
 
  ALTER TABLE "UPDPACKAGE" ADD CONSTRAINT "PK_UPDPACKAGE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTIFYMSGEVENT
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGEVENT" ADD CONSTRAINT "PK_NOTIFYMSGEVENT" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "NOTIFYMSGEVENT" ADD CONSTRAINT "UQ_NOTIFYMSGEVENT" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table PLANREQUEST
--------------------------------------------------------

  ALTER TABLE "PLANREQUEST" ADD CONSTRAINT "PK_PLANREQUEST" PRIMARY KEY ("REQUEST_ID", "DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CRLPOINT
--------------------------------------------------------

  ALTER TABLE "CRLPOINT" ADD CONSTRAINT "CK_CRLPOINT_ACTIVE" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "CRLPOINT" ADD CONSTRAINT "PK_CRLPOINT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OKTMO
--------------------------------------------------------

  ALTER TABLE "OKTMO" ADD CONSTRAINT "PK_OKTMO" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "OKTMO" ADD CONSTRAINT "UQ_OKTMO_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table CONDAMAGEPAYMENTS
--------------------------------------------------------

  ALTER TABLE "CONDAMAGEPAYMENTS" ADD CONSTRAINT "PK_CONDAMAGEPAYMENTS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSBRANCH
--------------------------------------------------------

  ALTER TABLE "GOODSBRANCH" ADD CONSTRAINT "CHK_BRANCHTYPE" CHECK (BranchType in (0,1,2,3,4)) ;
 
  ALTER TABLE "GOODSBRANCH" ADD CONSTRAINT "PK_GOODSBRANCH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "GOODSBRANCH" ADD CONSTRAINT "UQ_GOODSBRANCH_NAME_TYPE" UNIQUE ("NAME", "BRANCHTYPE")
  ;
--------------------------------------------------------
--  Constraints for Table CACHELIST
--------------------------------------------------------

  ALTER TABLE "CACHELIST" ADD CONSTRAINT "PK_CACHELIST" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLEREGISTER
--------------------------------------------------------

  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "PK_ROLEREGISTER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTIFYMSGRULE_RECEIVER
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGRULE_RECEIVER" ADD CONSTRAINT "PK_NOTIFYMSGRULE_RECEIVER" PRIMARY KEY ("NOTIFYMSGRULE_ID", "PERSON_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSPROTOCOLLOT
--------------------------------------------------------

  ALTER TABLE "OOSPROTOCOLLOT" ADD CONSTRAINT "CHK_ALLABSENT" CHECK (allAbsent is null or allAbsent in (0,1)) ;
 
  ALTER TABLE "OOSPROTOCOLLOT" ADD CONSTRAINT "PK_OOSPROTOCOLLOT" PRIMARY KEY ("NOTIFICATIONNUMBER", "PROTOCOLNUMBER", "PROTOCOLVERSIONNUMBER", "LOTNUMBER")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SCHTASK
--------------------------------------------------------

  ALTER TABLE "SCHTASK" ADD CONSTRAINT "CK_SCHTASK_ALONE" CHECK (alone in (0,1)) ;
 
  ALTER TABLE "SCHTASK" ADD CONSTRAINT "PK_SCHTASK" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SCHTASK" ADD CONSTRAINT "UQ_SCHTASK_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table PLGOODSPROP
--------------------------------------------------------

  ALTER TABLE "PLGOODSPROP" ADD CONSTRAINT "PK_PLGOODSPROP" PRIMARY KEY ("GOODSID", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCPROVIDER
--------------------------------------------------------

  ALTER TABLE "FUNCPROVIDER" ADD CONSTRAINT "PK_FUNCPROVIDER" PRIMARY KEY ("FUNUNIT_ID", "SERVERPROVIDER_NAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2OOSOKVED
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSOKVED" ADD CONSTRAINT "PK_PLAN2OOSOKVED" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PURCHASECARRY
--------------------------------------------------------

  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "CHK_PURCHASECARRY_ISENTERPRISE" CHECK (IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "CHK_PURCHASECARRY_ISSMALL" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "CHK_PURCHASECARRY_VERSION" CHECK (PlanVersion in (1, 2)) ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "CK_PURCHCARRY_CARRYSTATUS" CHECK (CarryStatus in (0,1,2)) ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "PK_PURCHCARRY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLNDDAYTYPE
--------------------------------------------------------

  ALTER TABLE "CLNDDAYTYPE" ADD CONSTRAINT "PK_CLNDDAYTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PREFERENCEGROUPFEATURE
--------------------------------------------------------

  ALTER TABLE "PREFERENCEGROUPFEATURE" ADD CONSTRAINT "PK_PREFERENCEGROUPFEATURE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "PREFERENCEGROUPFEATURE" ADD CONSTRAINT "UQ_PREFERENCEGROUPFEATURE" UNIQUE ("PREFERENCEGROUP_ID", "PLACEMENTFEATURE_ID")
  ;
--------------------------------------------------------
--  Constraints for Table ORGHEARING
--------------------------------------------------------

  ALTER TABLE "ORGHEARING" ADD CONSTRAINT "PK_ORGHEARING" PRIMARY KEY ("ORG_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MSGSITE
--------------------------------------------------------

  ALTER TABLE "MSGSITE" ADD CONSTRAINT "PK_MSGSITE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table METACONSTRAINT
--------------------------------------------------------

  ALTER TABLE "METACONSTRAINT" ADD CONSTRAINT "PK_METACONSTRAINT" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "METACONSTRAINT" ADD CONSTRAINT "UQ_METACONSTRAINT" UNIQUE ("METAOBJECT_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CONTYPEATTACH
--------------------------------------------------------

  ALTER TABLE "CONTYPEATTACH" ADD CONSTRAINT "CK_CONTYPEATTACH_ATTACHTYPE" CHECK (Attach_Type IN (0,1,2,3,4)) ;
 
  ALTER TABLE "CONTYPEATTACH" ADD CONSTRAINT "PK_CONTYPEATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "OFRSUPPLYSHEDULE" ADD CONSTRAINT "PK_OFRSUPPLYSHEDULE" PRIMARY KEY ("OFFER_ID", "PLACEPOS", "GOODSPOS", "SUPPLYDATE")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table METAOBJECT
--------------------------------------------------------

  ALTER TABLE "METAOBJECT" ADD CONSTRAINT "PK_METAOBJECT" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "METAOBJECT" ADD CONSTRAINT "UQ_METAOBJECT" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BUDGETSTAGE
--------------------------------------------------------

  ALTER TABLE "BUDGETSTAGE" ADD CONSTRAINT "PK_BUDGETSTAGE" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPFRAGMENT
--------------------------------------------------------

  ALTER TABLE "REPFRAGMENT" ADD CONSTRAINT "CK_REPFRAGMENT_ISNOTICE" CHECK (isNotice in (0,1)) ;
 
  ALTER TABLE "REPFRAGMENT" ADD CONSTRAINT "CK_REPFRAGMENT_TYPE" CHECK (FragmentType in (0,1)) ;
 
  ALTER TABLE "REPFRAGMENT" ADD CONSTRAINT "PK_REPFRAGMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "REPFRAGMENT" ADD CONSTRAINT "UQ_REPFRAGMENT" UNIQUE ("NAME", "ISNOTICE")
  ;
--------------------------------------------------------
--  Constraints for Table DOCSTATUS
--------------------------------------------------------

  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "PK_DOCSTATUS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "UQ_DOCSTATUS" UNIQUE ("DOCUMENTCLASS_ID", "DISPSTATUS_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CONLOT
--------------------------------------------------------

  
 
  
--------------------------------------------------------
--  Constraints for Table RESPONSIBILITY
--------------------------------------------------------

  ALTER TABLE "RESPONSIBILITY" ADD CONSTRAINT "PK_RESPONSIBILITY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "RESPONSIBILITY" ADD CONSTRAINT "UQ_RESPONSIBILITY_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table REPFRAGMENTCHILD
--------------------------------------------------------

  ALTER TABLE "REPFRAGMENTCHILD" ADD CONSTRAINT "PK_REPFRAGMENTCHILD" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "PK_CONBUDGETLINE" PRIMARY KEY ("CONTRACT_ID", "CONTRACTORPOS", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MAIL
--------------------------------------------------------

  ALTER TABLE "MAIL" ADD CONSTRAINT "PK_MAIL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NUMPREFIX
--------------------------------------------------------

  ALTER TABLE "NUMPREFIX" ADD CONSTRAINT "PK_NUMPREFIX" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "NUMPREFIX" ADD CONSTRAINT "UQ_NUMPREFIX" UNIQUE ("NUMGENERATOR_ID", "SYSUSER_ID")
  ;
--------------------------------------------------------
--  Constraints for Table NOTIFYMSGGROUP
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGGROUP" ADD CONSTRAINT "PK_NOTIFYMSGGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  ALTER TABLE "NOTIFYMSGGROUP" ADD CONSTRAINT "UQ_NOTIFYMSGGROUP" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table TERRITORY
--------------------------------------------------------

  ALTER TABLE "TERRITORY" ADD CONSTRAINT "PK_TERRITORY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "TERRITORY" ADD CONSTRAINT "UQ_TERRITORY" UNIQUE ("COUNTRY_ID", "CODE")
  ;
--------------------------------------------------------
--  Constraints for Table SERVERERROR
--------------------------------------------------------

  ALTER TABLE "SERVERERROR" ADD CONSTRAINT "PK_SERVERERROR" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLANDOC
--------------------------------------------------------

  ALTER TABLE "PLANDOC" ADD CONSTRAINT "CK_PLANDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CRLFILE
--------------------------------------------------------

  ALTER TABLE "CRLFILE" ADD CONSTRAINT "PK_CRLFILE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table FGROUPATTACH
--------------------------------------------------------

  ALTER TABLE "FGROUPATTACH" ADD CONSTRAINT "PK_FGROUPATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GROUPPROP
--------------------------------------------------------

  ALTER TABLE "GROUPPROP" ADD CONSTRAINT "PK_GROUPPROP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GROUPPROP" ADD CONSTRAINT "UQ_GROUPPROP" UNIQUE ("GROUP_ID", "SEQORDER")
  ;
--------------------------------------------------------
--  Constraints for Table ALTGOODSGROUP
--------------------------------------------------------

  ALTER TABLE "ALTGOODSGROUP" ADD CONSTRAINT "PK_ALTGOODSGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSGROUP
--------------------------------------------------------

  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "CK_GOODSGROUP_CATEGORY" CHECK (CATEGORY in (1,2,3)) ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "CK_GOODSGROUP_ISUNITFILTERED" CHECK (IsUnitFiltered in (0,1)) ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "CK_GOODSGROUP_IS_ACTUAL" CHECK (Is_Actual in (0,1)) ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "CK_GOODSGROUP_IS_CONTROLPRICE" CHECK (Is_ControlPrice in (0,1)) ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "PK_GOODSGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "UQ_GOODSGROUP_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table ORGGOODSGROUP
--------------------------------------------------------

  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "CK_ORGGOODSGROUP_FIRST_IGN" CHECK (first_ignored in (0,1) or first_ignored is null) ;
 
  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "CK_ORGGOODSGROUP_ISSUPP" CHECK (issupplying in (0,1)) ;
 
  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "CK_ORGGOODSGROUP_SEC_IGN" CHECK (second_ignored in (0,1) or second_ignored is null) ;
 
  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "CK_ORGGOODSGROUP_SEL_RES" CHECK (selection_result in (0,1) or selection_result is null) ;
 
  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "PK_ORGGOODSGROUP" UNIQUE ("ORG_ID", "GROUP_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CSRECIPIENT
--------------------------------------------------------

  ALTER TABLE "CSRECIPIENT" ADD CONSTRAINT "PK_CSRECIPIENT" PRIMARY KEY ("CONSOLID_ID", "ORG_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CONPAYSHEDULE" ADD CONSTRAINT "PK_CONPAYSHEDULE" PRIMARY KEY ("CONTRACT_ID", "CONTRACTORPOS", "BUDGETLINEPOS", "PAYDATE")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table LICTYPE
--------------------------------------------------------

  ALTER TABLE "LICTYPE" ADD CONSTRAINT "PK_LICTYPE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table ORGCONCCONT
--------------------------------------------------------

  ALTER TABLE "ORGCONCCONT" ADD CONSTRAINT "PK_ORGCONCCONT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TERTYPE
--------------------------------------------------------

  ALTER TABLE "TERTYPE" ADD CONSTRAINT "PK_TERTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "TERTYPE" ADD CONSTRAINT "UQ_TERTYPE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table OPERTYPE
--------------------------------------------------------

  ALTER TABLE "OPERTYPE" ADD CONSTRAINT "PK_OPERTYPE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table RQCRITERIONLINE
--------------------------------------------------------

  ALTER TABLE "RQCRITERIONLINE" ADD CONSTRAINT "PK_RQCRITERIONLINE" PRIMARY KEY ("REQUEST_ID", "RQCRITERIONPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRRETREASON
--------------------------------------------------------

  ALTER TABLE "OFRRETREASON" ADD CONSTRAINT "CK_OFRRETREASON" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "OFRRETREASON" ADD CONSTRAINT "PK_OFRRETREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "OFRRETREASON" ADD CONSTRAINT "UQ_OFRRETREASON_REASON" UNIQUE ("REASON")
  ;
--------------------------------------------------------
--  Constraints for Table CONSOLIDDOC
--------------------------------------------------------

  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "PK_CONSOLIDDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SYSPARAM
--------------------------------------------------------

  ALTER TABLE "SYSPARAM" ADD CONSTRAINT "PK_SYSPARAM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "SYSPARAM" ADD CONSTRAINT "UQ_SYSPARAM" UNIQUE ("NAME", "SYSUSER_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CMPEXPENSE
--------------------------------------------------------

  ALTER TABLE "CMPEXPENSE" ADD CONSTRAINT "PK_CMPEXPENSE" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DIGESTSIGN
--------------------------------------------------------

  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "CK_DIGESTSIGN_SIGNTYPE" CHECK (SignType in (0,1)) ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "PK_DIGESTSIGN" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2CHANGEREASON
--------------------------------------------------------

  ALTER TABLE "PLAN2CHANGEREASON" ADD CONSTRAINT "CK_PLAN2CHANGEREASON_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "PLAN2CHANGEREASON" ADD CONSTRAINT "PK_PLAN2CHANGEREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRORGSTATUS
--------------------------------------------------------

  ALTER TABLE "OFRORGSTATUS" ADD CONSTRAINT "PK_OFRORGSTATUS" PRIMARY KEY ("OFFER_ID", "ORGSTATUS_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TYPECRIT
--------------------------------------------------------

  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "CK_TYPEREQ_BESTPARAM" CHECK (BestParam is null or BestParam in (0, 1)) ;
 
  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "CK_TYPEREQ_CALCMODE" CHECK (CalcMode is null or CalcMode in (0, 1)) ;
 
  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "CK_TYPEREQ_CTYPE" CHECK (cType in (0,1,2,3,4,5,6,7,8,9,10,11,12)) ;
 
  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "PK_TYPECRIT" PRIMARY KEY ("TYPEREQCRITID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCUMENTREPORTS
--------------------------------------------------------

  ALTER TABLE "DOCUMENTREPORTS" ADD CONSTRAINT "PK_DOCUMENTREPORTS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCUMENTREPORTS" ADD CONSTRAINT "UQ_DOCREP_NAME" UNIQUE ("DISPSTATUS_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table JAVACLASS
--------------------------------------------------------

  ALTER TABLE "JAVACLASS" ADD CONSTRAINT "CK_JAVACLASS_STATE" CHECK (state in(0,1)) ;
 
  ALTER TABLE "JAVACLASS" ADD CONSTRAINT "PK_JAVACLASS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table USERBUDGET
--------------------------------------------------------

  ALTER TABLE "USERBUDGET" ADD CONSTRAINT "CK_USERBUDGET_ACCESS" CHECK (access_mode in (0,1,3)) ;
 
  ALTER TABLE "USERBUDGET" ADD CONSTRAINT "PK_USERBUDGET" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "USERBUDGET" ADD CONSTRAINT "UQ_USERBUDGET" UNIQUE ("SYSUSER_ID", "BUDGET_ID")
  ;
--------------------------------------------------------
--  Constraints for Table STATISTICSSOURCE
--------------------------------------------------------

  ALTER TABLE "STATISTICSSOURCE" ADD CONSTRAINT "PK_STATISTICSSOURCE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "STATISTICSSOURCE" ADD CONSTRAINT "UQ_STATISTICSSOURCE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table RQDOCCHILD
--------------------------------------------------------

  ALTER TABLE "RQDOCCHILD" ADD CONSTRAINT "PK_RQDOCCHILD" PRIMARY KEY ("REQUEST_ID", "DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGFORM
--------------------------------------------------------

  ALTER TABLE "ORGFORM" ADD CONSTRAINT "CHK_ORGFORM_ISACTUAL" CHECK (IsActual in (0, 1)) ;
 
  ALTER TABLE "ORGFORM" ADD CONSTRAINT "PK_ORGFORM_ID" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "ORGFORM" ADD CONSTRAINT "UQ_ORGFORM" UNIQUE ("CAPTION", "OOSCODE", "ISACTUAL")
  ;
--------------------------------------------------------
--  Constraints for Table REPORT
--------------------------------------------------------

  ALTER TABLE "REPORT" ADD CONSTRAINT "PK_REPORT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "REPORT" ADD CONSTRAINT "UQ_REPORT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BANKGUARANTEEREFREASON
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEREFREASON" ADD CONSTRAINT "CK_BANKGUARANTEEREFRS_ACTUAL" CHECK (Actual IN (0,1)) ;
 
  ALTER TABLE "BANKGUARANTEEREFREASON" ADD CONSTRAINT "PK_BANKGUARANTEEREFREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTICEORG
--------------------------------------------------------

  ALTER TABLE "NOTICEORG" ADD CONSTRAINT "PK_NOTICEORG" PRIMARY KEY ("NOTICEDOC_ID", "ORG_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPCUSTOMER
--------------------------------------------------------

  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "PK_CMPCUSTOMER" PRIMARY KEY ("ORDER_ID", "CUSTOMER_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORDERDOC
--------------------------------------------------------

  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CHK_ENTERPRISE" CHECK (Enterprise in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CHK_ORDERDOC_ALLWMULTICONTRS" CHECK (AllowMultipleContracts IN (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CHK_ORDERDOC_ISAMOUNTPERCENT" CHECK (IsAmountPercent in (0, 1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ISDOCFEEBAIL" CHECK (isDocFeeBail in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONAUTOSTEPDEC" CHECK (AuctionAutoStepDec in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONBIDBYSTEP" CHECK (AuctionBidByStep in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONDIVBID" CHECK (AuctionDivisibleBid in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONFINISHTYPE" CHECK (Auction_Finish_Type in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONSTEPTYPE" CHECK (AuctionStepType in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONWITHSTEP" CHECK (AuctionWithStep in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUCTIONZEROBID" CHECK (AuctionZeroBid in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_AUTHORITYTYPE" CHECK (Change_AuthorityType in ('FA','FO','S','M')) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_BIDAFTERYOURSELF" CHECK (BidAfterYourself in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CANCEL_AUTHORITY" CHECK (Cancel_AuthorityType IS NULL OR Cancel_AuthorityType IN ('FA','FO','S','M')) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CANCEL_INITIATIVE" CHECK (Cancel_InitiativeType IS NULL OR Cancel_InitiativeType IN ('U','Z','US','S','D')) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CMPORGNEGCONTR" CHECK (CmpOrg_Negotiate_Contract in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CMPORGOOSROLE" CHECK (CmpOrgOosRole in (0,1,2,3)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CMPPARTICIPATION" CHECK (CmpParticipation in (0,1,2)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_CMPTYPE" CHECK (CmpType in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_ENERGYTYPE" CHECK (EnergyType in ('FV','FP','MIN','1','2','3')) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_FIRSTPUBLIC" CHECK (FirstPublicDiscussionComplete in (0, 1, 2)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_HASCONTRACTORWORK" CHECK (HasContractorWork in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_INITIATIVETYPE" CHECK (Change_InitiativeType is null or Change_InitiativeType in ('U','Z','US','S','D')) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_ISVATAMOUNT" CHECK (IsVatAmount in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_OFFERS_OUTSIDE_ETP" CHECK (Offers_Outside_Etp in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "CK_ORDERDOC_VAT" CHECK (Vat in (0,1)) ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "PK_ORDERDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CMPGOODSPROP" ADD CONSTRAINT "PK_CMPGOODSPROP" PRIMARY KEY ("ORDER_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MSGLINKTYPE
--------------------------------------------------------

  ALTER TABLE "MSGLINKTYPE" ADD CONSTRAINT "PK_MSGLINKTYPE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table USERORG
--------------------------------------------------------

  ALTER TABLE "USERORG" ADD CONSTRAINT "CK_USERORG_ACCESS" CHECK (access_mode in (1,3)) ;
 
  ALTER TABLE "USERORG" ADD CONSTRAINT "PK_USERORG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "USERORG" ADD CONSTRAINT "UQ_USERORG" UNIQUE ("SYSUSER_ID", "ORG_ID")
  ;
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASEGOODSPROP
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODSPROP" ADD CONSTRAINT "PK_P3GOODSPROP" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SIGNTYPE
--------------------------------------------------------

  ALTER TABLE "SIGNTYPE" ADD CONSTRAINT "PK_SIGNTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGUNFAIR
--------------------------------------------------------

  ALTER TABLE "ORGUNFAIR" ADD CONSTRAINT "CK_ORGUNFAIR_ISUNFAIR" CHECK (isUnfair in (0,1)) ;
 
  ALTER TABLE "ORGUNFAIR" ADD CONSTRAINT "CK_ORGUNFAIR_MARK" CHECK (mark in (0,1)) ;
 
  ALTER TABLE "ORGUNFAIR" ADD CONSTRAINT "PK_ORGUNFAIR" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGATTACH
--------------------------------------------------------

  ALTER TABLE "ORGATTACH" ADD CONSTRAINT "PK_ORGATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "ORGATTACH" ADD CONSTRAINT "UQ_ORGATTACH" UNIQUE ("ORG_ID", "ATTACH_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table APPOBJPROP
--------------------------------------------------------

  ALTER TABLE "APPOBJPROP" ADD CONSTRAINT "PK_APPOBJPROP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "APPOBJPROP" ADD CONSTRAINT "UQ_APPOBJPROPS" UNIQUE ("APPOBJID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table PAYCONDITION
--------------------------------------------------------

  ALTER TABLE "PAYCONDITION" ADD CONSTRAINT "CK_PAYCONDITION_ACTUAL" CHECK (Actual IN (0,1)) ;
 
  ALTER TABLE "PAYCONDITION" ADD CONSTRAINT "CK_PAYCONDITION_SYSTEM_FLAG" CHECK (System_Flag in (0,1)) ;
 
  ALTER TABLE "PAYCONDITION" ADD CONSTRAINT "PK_PAYCONDITION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCEVERRLOG
--------------------------------------------------------

  ALTER TABLE "DOCEVERRLOG" ADD CONSTRAINT "PK_DOCEVERRLOG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table REPFORM
--------------------------------------------------------

  ALTER TABLE "REPFORM" ADD CONSTRAINT "PK_REPFORM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "REPFORM" ADD CONSTRAINT "UQ_REPFORM" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BUDGET
--------------------------------------------------------

  ALTER TABLE "BUDGET" ADD CONSTRAINT "PK_BUDGET" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "BUDGET" ADD CHECK ((IsBudgetInstitution in (0,1))) ;
 
  ALTER TABLE "BUDGET" ADD CHECK ((IsRuralVillage in (0,1))) ;
 
  ALTER TABLE "BUDGET" ADD CHECK ((ISLOCAL in (0,1))) ;
 
  ALTER TABLE "BUDGET" ADD CONSTRAINT "UQ_BUDGET" UNIQUE ("CAPTION")
  ;
--------------------------------------------------------
--  Constraints for Table CMPPERSONALRESP
--------------------------------------------------------

  ALTER TABLE "CMPPERSONALRESP" ADD CONSTRAINT "PK_CMPPERSONALRESP" PRIMARY KEY ("ORDER_ID", "PERSONAL_ID", "RESPONSIBILITY_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGTITLE
--------------------------------------------------------

  ALTER TABLE "ORGTITLE" ADD CONSTRAINT "PK_ORGTITLE" PRIMARY KEY ("ORG_ID", "DTBEGIN")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASEDOC
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_DISCUSSION" CHECK (PublicDiscussion in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_EFORM" CHECK (EForm in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_GUARANTEEAPP" CHECK (IsGuaranteeApp in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_GUARANTEECON" CHECK (IsGuaranteeContract in (0,1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_IDENT_CODE" CHECK (CHAR_LENGTH(identification_code) = 36) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_ISENTERPRISE" CHECK (IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_ORDERFORM" CHECK (OrderForm in (0, 1)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "CK_P3PURCHASEDOC_TYPE" CHECK (PurchaseType in (0,1,2,3,4,5,6,7,8,9)) ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "PK_PLAN3PURCHASEDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPLOT
--------------------------------------------------------

  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CHK_CMPLOT_ALLWMULTCONTRACTS" CHECK (AllowMultipleContracts IN (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CHK_CMPLOT_ENTERPRISE" CHECK (Enterprise in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CHK_CMPLOT_ISAMOUNTPERCENT" CHECK (IsAmountPercent in (0, 1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONAUTOSTEPDEC" CHECK (AuctionAutoStepDec in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONBIDBYSTEP" CHECK (AuctionBidByStep in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONDIVISIBLEBID" CHECK (AuctionDivisibleBid in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONSTEPTYPE" CHECK (AuctionStepType in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONWITHSTEP" CHECK (AuctionWithStep in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_AUCTIONZEROBID" CHECK (AuctionZeroBid in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_BIDAFTERYOURSELF" CHECK (BidAfterYourself in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_ENERGYTYPE" CHECK (EnergyType in ('FV','FP','MIN','1','2','3')) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_FIRSTPUBLIC" CHECK (FirstPublicDiscussionComplete in (0, 1, 2)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_HASCONTRACTORWORK" CHECK (HasContractorWork in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_LOTDECLINED" CHECK (IsLotDeclined in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_LOTREREGISTERED" CHECK (islotreregistered in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "CK_CMPLOT_VAT" CHECK (Vat in (0,1)) ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "PK_CMPLOT" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLASSOPER
--------------------------------------------------------

  ALTER TABLE "CLASSOPER" ADD CONSTRAINT "PK_CLASSOPER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CLASSOPER" ADD CONSTRAINT "UQ_CLASSOPER" UNIQUE ("DOCUMENTCLASS_ID", "OPERTYPE_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CONGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CONGOODSPROP" ADD CONSTRAINT "PK_CONGOODSPROP" PRIMARY KEY ("CONTRACT_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NOTIFYMSG
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "CK_NMSG_EMAILSENDED" CHECK (emailSended in (0,1)) ;
 
  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "CK_NMSG_TOEXEC" CHECK (toexec in (0,1)) ;
 
  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "PK_NMSG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLNGOODS
--------------------------------------------------------

  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "PK_PLNGOODS" PRIMARY KEY ("PLANDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQCOMMEMBER
--------------------------------------------------------

  ALTER TABLE "RQCOMMEMBER" ADD CONSTRAINT "CK_RQCOMMEMBER_COMROLE" CHECK (comRole in (0,1,2,3,4)) ;
 
  ALTER TABLE "RQCOMMEMBER" ADD CONSTRAINT "CK_RQCOMMEMBER_ISACTSECR" CHECK (ISACTINGFORSECRETARY IN (0,1)) ;
 
  ALTER TABLE "RQCOMMEMBER" ADD CONSTRAINT "PK_RQCOMMEMBER" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "RQCOMMEMBER" ADD CHECK (absent in (0, 1)) ;
--------------------------------------------------------
--  Constraints for Table TENDER
--------------------------------------------------------

  ALTER TABLE "TENDER" ADD CONSTRAINT "CK_TENDER_ISFINALFFER" CHECK (IsFinalOffer in (0,1)) ;
 
  ALTER TABLE "TENDER" ADD CONSTRAINT "PK_TENDER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "TENDER" ADD CONSTRAINT "UQ_TENDER_COMPETITOR" UNIQUE ("ORDER_ID", "COMPETITORPOS", "CRITERIONPOS", "ISFINALOFFER")
  ;
--------------------------------------------------------
--  Constraints for Table WEBSTATCACHE
--------------------------------------------------------

  ALTER TABLE "WEBSTATCACHE" ADD CONSTRAINT "PK_WEBSTATCACHE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NUMSEQUENCE
--------------------------------------------------------

  ALTER TABLE "NUMSEQUENCE" ADD CONSTRAINT "CK_NUMSEQUENCE_TERM" CHECK (term_kind in (0,1,2,3,4)) ;
 
  ALTER TABLE "NUMSEQUENCE" ADD CONSTRAINT "PK_NUMSEQUENCE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "NUMSEQUENCE" ADD CONSTRAINT "UQ_NUMSEQUENCE_NAME" UNIQUE ("NAME", "BUDGET_ID")
  ;
--------------------------------------------------------
--  Constraints for Table RQDOCREQ
--------------------------------------------------------

  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "CHK_RQDOCREQ_ISCONTENTTYPE" CHECK (isContentType in (0,1)) ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "CHK_RQDOCREQ_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "CK_RQDOCREQ_TYPE" CHECK (Type in (0,1,2,3,4,5,6,7,8,9,10,11)) ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "CK_RQDOCREQ_VENDOR_TYPE" CHECK (vendor_type in (0,1,2)) ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "PK_RQDOCREQ" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CSGOODS
--------------------------------------------------------

  ALTER TABLE "CSGOODS" ADD CONSTRAINT "PK_CSGOODS" PRIMARY KEY ("CONSOLID_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table MSGSITEEXCHANGE
--------------------------------------------------------

  
 
  
 
  ALTER TABLE "MSGSITEEXCHANGE" ADD CONSTRAINT "UQ_MSGSITEEXCHANGE" UNIQUE ("MSGSITE_ID", "DOCEXCHANGESCHEME_ID")
  ;
--------------------------------------------------------
--  Constraints for Table GRANTINVESTMENT
--------------------------------------------------------

  ALTER TABLE "GRANTINVESTMENT" ADD CONSTRAINT "PK_GRANTINVESTMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GRANTINVESTMENT" ADD CONSTRAINT "UQ_GRANTINVESTMENT" UNIQUE ("BUDGET_ID", "FINYEAR", "ORG_ID", "CODE", "FOREIGNKEY")
  ;
--------------------------------------------------------
--  Constraints for Table WEBSTATCACHEVAL
--------------------------------------------------------

  ALTER TABLE "WEBSTATCACHEVAL" ADD CONSTRAINT "PK_STATISTICSSOURCEVALUES" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCSELECT
--------------------------------------------------------

  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "CHK_DOCSELECT_ISREQUIRED" CHECK (isRequired in (0,1)) ;
 
  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "CK_DOCSELECT_TYPE" CHECK (Type in (0,1,2,3,4,5,6,7,8,9,10,11)) ;
 
  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "CK_DOCSELECT_VAL" CHECK (Val in (-1,0,1,null)) ;
 
  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "PK_DOCSELECT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLTABLINK
--------------------------------------------------------

  ALTER TABLE "RPLTABLINK" ADD CONSTRAINT "PK_RPLTABLINK" PRIMARY KEY ("RPLTABLE_ID", "FIELD_NAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLTRANSACTMODE
--------------------------------------------------------

  ALTER TABLE "RPLTRANSACTMODE" ADD CONSTRAINT "PK_RPLTRANSACTMODE" PRIMARY KEY ("NUM_TRANSACTION")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table DAYVERSION
--------------------------------------------------------

  ALTER TABLE "DAYVERSION" ADD CONSTRAINT "PK_DAYVERSION" PRIMARY KEY ("DAY_DATE")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLACINGWAY
--------------------------------------------------------

  ALTER TABLE "PLACINGWAY" ADD CONSTRAINT "PK_PLACINGWAY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCATTACH
--------------------------------------------------------

  ALTER TABLE "DOCATTACH" ADD CONSTRAINT "PK_DOCATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "DOCATTACH" ADD CONSTRAINT "UQ_DOCATTACH" UNIQUE ("DOCUMENT_ID", "ATTACH_NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BUDGETLINE
--------------------------------------------------------

  ALTER TABLE "BUDGETLINE" ADD CONSTRAINT "PK_BUDGETLINE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "BUDGETLINE" ADD CONSTRAINT "UQ_BUDGETLINE" UNIQUE ("ESTIMATE_ID", "RECIPIENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "FINYEAR")
  ;
--------------------------------------------------------
--  Constraints for Table RPL$CONSTRAINTFIELDS
--------------------------------------------------------

  ALTER TABLE "RPL$CONSTRAINTFIELDS" ADD CONSTRAINT "PK_RPL$CONSTRAINTFIELDS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SUPPORTCRYPTOLIB
--------------------------------------------------------

  ALTER TABLE "SUPPORTCRYPTOLIB" ADD CONSTRAINT "CK_SUPPORTCRYPTOLIB_LIBTYPE" CHECK (LibType in ('WIN_CSP', 'XMLDSIG', 'XADES', 'JCA')) ;
 
  ALTER TABLE "SUPPORTCRYPTOLIB" ADD CONSTRAINT "PK_SUPPORTCRYPTOLIB" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SUPPLYPLACE
--------------------------------------------------------

  ALTER TABLE "SUPPLYPLACE" ADD CONSTRAINT "PK_SUPPLYPLACE" PRIMARY KEY ("GOODSID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSGROUPDOCDETAIL
--------------------------------------------------------

  ALTER TABLE "GOODSGROUPDOCDETAIL" ADD CONSTRAINT "PK_GOODSDOCDETAIL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "GOODSGROUPDOCDETAIL" ADD CONSTRAINT "UK_GOODSDOCDETAIL" UNIQUE ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE")
  ;
--------------------------------------------------------
--  Constraints for Table CSGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CSGOODSPROP" ADD CONSTRAINT "PK_CSGOODSPROP" PRIMARY KEY ("CONSOLID_ID", "GOODSPOS", "SEQORDER")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table APPOINTMENT
--------------------------------------------------------

  ALTER TABLE "APPOINTMENT" ADD CONSTRAINT "PK_APPOINTMENT" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table ROLEEVENT
--------------------------------------------------------

  ALTER TABLE "ROLEEVENT" ADD CONSTRAINT "PK_ROLEEVENT" PRIMARY KEY ("USERROLE_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "EVENT_NAME")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCCATEGORY
--------------------------------------------------------

  ALTER TABLE "DOCCATEGORY" ADD CONSTRAINT "PK_DOCCATEGORY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCCATEGORY" ADD CONSTRAINT "UQ_DOCCATEGORY_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSGROUPPURCHASEMODE" ADD CONSTRAINT "PK_GOODSGROUPPURCHASEMODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FGROUP
--------------------------------------------------------

  ALTER TABLE "FGROUP" ADD CONSTRAINT "PK_FGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "FGROUP" ADD CONSTRAINT "UQ_FGROUP" UNIQUE ("FGROUPHEADER_ID", "FG_VERSION")
  ;
--------------------------------------------------------
--  Constraints for Table DBUPDATE
--------------------------------------------------------

  ALTER TABLE "DBUPDATE" ADD CONSTRAINT "PK_DBUPDATE" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table TENDERLINE
--------------------------------------------------------

  ALTER TABLE "TENDERLINE" ADD CONSTRAINT "PK_TENDERLINE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "TENDERLINE" ADD CONSTRAINT "UQ_TENDERLINETENDERLI" UNIQUE ("TENDER_ID", "CRITERIONLINESEQORDER")
  ;
--------------------------------------------------------
--  Constraints for Table DOCRETENTIONSTATUS
--------------------------------------------------------

  ALTER TABLE "DOCRETENTIONSTATUS" ADD CONSTRAINT "DOCRETENTIONSTATUS" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCATTACHEX
--------------------------------------------------------

  ALTER TABLE "DOCATTACHEX" ADD CONSTRAINT "PK_DOCATTACHEX" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ESCHECKRULEREQUISITES
--------------------------------------------------------

  ALTER TABLE "ESCHECKRULEREQUISITES" ADD CONSTRAINT "CK_ECHKRULREQS_ITEM_CONDITION" CHECK (item_condition in (0,1)) ;
 
  ALTER TABLE "ESCHECKRULEREQUISITES" ADD CONSTRAINT "PK_ESCHECKRULEREQUISITES" PRIMARY KEY ("ESCHECKRULE_ID", "RULEREQUISITE_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table APPOBJ
--------------------------------------------------------

  ALTER TABLE "APPOBJ" ADD CONSTRAINT "PK_APPOBJ" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "APPOBJ" ADD CONSTRAINT "UQ_APPOBJ_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CLAIMPENALTYCHANGEDOCINFO
--------------------------------------------------------

  ALTER TABLE "CLAIMPENALTYCHANGEDOCINFO" ADD CONSTRAINT "PK_PENALTYCHANGEDOCINFO" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORG
--------------------------------------------------------

  ALTER TABLE "ORG" ADD CONSTRAINT "CK_ORG_IKU" CHECK (CHAR_LENGTH(IKU) = 20) ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "CK_ORG_ISCONTRACTOR" CHECK (IsContractor in (0,1)) ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "CK_ORG_ISDOCFEEBAIL" CHECK (isDocFeeBail in (0,1)) ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "CK_ORG_IS_TAXCODE_FREE" CHECK (isTaxCodeFree in (0,1)) ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "CK_ORG_ORGTYPE" CHECK (OrgType IN (0, 1, 2, 3)) ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "PK_ORG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "ORG" ADD CHECK (isPlPublic in (0,1)) ;
--------------------------------------------------------
--  Constraints for Table BANK
--------------------------------------------------------

  ALTER TABLE "BANK" ADD CONSTRAINT "CK_BANK_IS_ACTUAL" CHECK (IS_ACTUAL IN (0, 1)) ;
 
  ALTER TABLE "BANK" ADD CONSTRAINT "PK_BANK" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "BANK" ADD CONSTRAINT "UQ_BANK_BIC" UNIQUE ("BIC")
  ;
--------------------------------------------------------
--  Constraints for Table DOCJOURNAL
--------------------------------------------------------

  ALTER TABLE "DOCJOURNAL" ADD CONSTRAINT "PK_DOCJOURNAL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PERSON
--------------------------------------------------------

  ALTER TABLE "PERSON" ADD CONSTRAINT "PK_PERSON" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASEGOODSOKVED
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODSOKVED" ADD CONSTRAINT "PK_P3GOODSOKVED" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "GOODSPOS", "OKVED")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FCTGOODS
--------------------------------------------------------

  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "CK_FCTGOODS_STATUS" CHECK (Status in (0,1)) ;
 
  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "PK_FCTGOODS" PRIMARY KEY ("FACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ABANDONEDREASON
--------------------------------------------------------

  ALTER TABLE "ABANDONEDREASON" ADD CONSTRAINT "CHK_ABANDONEDREASON_ACTUAL" CHECK (Actual in (0, 1)) ;
 
  ALTER TABLE "ABANDONEDREASON" ADD CONSTRAINT "PK_ABANDONEDREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFFERDOC
--------------------------------------------------------

  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFERDOC_FROM_WEB" CHECK (from_web in (0,1,2,3)) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFERDOC_ISCORRECTED" CHECK (iscorrected in (0,1)) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFERDOC_ISGROUPSMOREONE" CHECK (IsGroupsMoreOne is null or IsGroupsMoreOne=1) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFERDOC_VENDORACCTYPE" CHECK (VendorAccType in (0,1)) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFER_IS_TAXCODE_FREE" CHECK (VendorIsTaxCodeFree in (0,1)) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "CK_OFFER_ORGTYPE" CHECK (VendorOrgType IN (0, 1, 2, 3)) ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "PK_OFFERDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLNDTYPE
--------------------------------------------------------

  ALTER TABLE "CLNDTYPE" ADD CONSTRAINT "PK_CLNDTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "CLNDTYPE" ADD CONSTRAINT "UQ_CLNDTYPE" UNIQUE ("CLND_YEAR")
  ;
--------------------------------------------------------
--  Constraints for Table CURHISTORY
--------------------------------------------------------

  ALTER TABLE "CURHISTORY" ADD CONSTRAINT "PK_CURHISTORY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CURHISTORY" ADD CONSTRAINT "UQ_CURHISTORY" UNIQUE ("BUDGET_ID", "CURRENCY_ID", "DT")
  ;
--------------------------------------------------------
--  Constraints for Table ALTGOODSGROUPLINK
--------------------------------------------------------

  ALTER TABLE "ALTGOODSGROUPLINK" ADD CONSTRAINT "PK_ALTGOODSGROUPLINK" PRIMARY KEY ("TYPE_ID", "GOODSGROUP_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONPLACE
--------------------------------------------------------

  ALTER TABLE "CONPLACE" ADD CONSTRAINT "CK_CONPLACE_CALCPRICE" CHECK (calcprice in (0,1)) ;
 
  ALTER TABLE "CONPLACE" ADD CONSTRAINT "CK_CONPLACE_USEAMOUNT" CHECK (useamount in (0,1)) ;
 
  ALTER TABLE "CONPLACE" ADD CONSTRAINT "PK_CONPLACE" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PACKTYPE
--------------------------------------------------------

  ALTER TABLE "PACKTYPE" ADD CONSTRAINT "PK_PACKTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "PACKTYPE" ADD CONSTRAINT "UQ_PACKTYPE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table CMPFEATURE
--------------------------------------------------------

  ALTER TABLE "CMPFEATURE" ADD CONSTRAINT "PK_CMPFEATURE" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLNDDAY
--------------------------------------------------------

  ALTER TABLE "CLNDDAY" ADD CONSTRAINT "PK_CLNDDAY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CLNDDAY" ADD CONSTRAINT "UQ_CLNDDAY" UNIQUE ("CLNDTYPE_ID", "CLND_DAY")
  ;
--------------------------------------------------------
--  Constraints for Table CURRENCY
--------------------------------------------------------

  ALTER TABLE "CURRENCY" ADD CONSTRAINT "PK_CURRENCY" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "CURRENCY" ADD CONSTRAINT "UQ_CURRENCY_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table ORGROLES
--------------------------------------------------------

  ALTER TABLE "ORGROLES" ADD CONSTRAINT "PK_ORGROLES" PRIMARY KEY ("ORG_ID", "ORGROLE_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCDIGESTREQUISITES
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTREQUISITES" ADD CONSTRAINT "CK_DOCDIGREQS_ITEM_CONDITION" CHECK (item_condition in (0,1)) ;
 
  ALTER TABLE "DOCDIGESTREQUISITES" ADD CONSTRAINT "PK_DOCDIGESREQUISITES" PRIMARY KEY ("DOCDIGESTRULE_ID", "RULEREQUISITE_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TER_TREE
--------------------------------------------------------

  ALTER TABLE "TER_TREE" ADD CONSTRAINT "PK_TER_TREE" PRIMARY KEY ("TER_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CEPENALTY
--------------------------------------------------------

  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "CK_CEPENALTY_CONPARTY" CHECK (contractParty in (0,1)) ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "CK_CEPENALTY_PENTYPE" CHECK (penaltyType in (1,2)) ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "CK_CEPENALTY_REASON" CHECK (penaltyReason in (0,1,2,4,5)) ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "PK_CEPENALTY" PRIMARY KEY ("CONTRACTEXECDOC_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONCONFIRMINGDOCS
--------------------------------------------------------

  ALTER TABLE "CONCONFIRMINGDOCS" ADD CONSTRAINT "CK_CONCONFIRMINGDOCS_DOCCODE" CHECK (DocCode in (1,2)) ;
 
  ALTER TABLE "CONCONFIRMINGDOCS" ADD CONSTRAINT "PK_CONCONFIRMINGDOCS" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PANELITEM
--------------------------------------------------------

  ALTER TABLE "PANELITEM" ADD CONSTRAINT "PK_PANELITEM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONBANKGUARANTEERETURN
--------------------------------------------------------

  ALTER TABLE "CONBANKGUARANTEERETURN" ADD CONSTRAINT "CK_CNBNKGRNTRTRN_INF" CHECK (Info is null or Info in (0,1)) ;
 
  ALTER TABLE "CONBANKGUARANTEERETURN" ADD CONSTRAINT "PK_CNBNKGRNTRTRN" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table UNIT
--------------------------------------------------------

  ALTER TABLE "UNIT" ADD CONSTRAINT "PK_UNIT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "UNIT" ADD CONSTRAINT "UQ_UNIT_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table PLAN2ARRANGEMENT
--------------------------------------------------------

  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CHK_P2ARRANGEMENT_ENTERPRISE" CHECK (IsEnterprise in (0, 1)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CHK_P2ARRANGEMENT_ORDERFORM" CHECK (OrderForm in (0, 1)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CHK_P2ARRANGEMENT_QUANTITYUDF" CHECK (QuantityUndefined in (0,1)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CHK_P2ARRANGEMENT_SMALL" CHECK (IsSmall in (0, 1, 2)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CHK_P2ARRANGEMENT_STATUS" CHECK (Status in (0,1,2,3,4,5)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "CK_P2ARRANGEMENT_EFORM" CHECK (EForm in (0,1)) ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "PK_PLAN2ARRANGEMENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSGROUP_TREE
--------------------------------------------------------

  ALTER TABLE "GOODSGROUP_TREE" ADD CONSTRAINT "PK_GOODSGROUP_TREE" PRIMARY KEY ("GROUP_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQOPTIMIZEDPRICE
--------------------------------------------------------

  ALTER TABLE "RQOPTIMIZEDPRICE" ADD CONSTRAINT "CK_RQOPTIMIZEDPRICE_PERCENT" CHECK (Percent BETWEEN 0 AND 100) ;
 
  ALTER TABLE "RQOPTIMIZEDPRICE" ADD CONSTRAINT "PK_RQOPTIMIZEDPRICE" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CERETURNPENALTY
--------------------------------------------------------

  ALTER TABLE "CERETURNPENALTY" ADD CONSTRAINT "PK_CERETPENALTY" PRIMARY KEY ("CONTRACTEXECDOC_ID", "PENALTYPOS", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGOOS223FZUSER
--------------------------------------------------------

  ALTER TABLE "ORGOOS223FZUSER" ADD CONSTRAINT "PK_ORGOOS223FZUSER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "ORGOOS223FZUSER" ADD CONSTRAINT "UQ_ORGOOS223FZUSER" UNIQUE ("ORG_ID", "SYSUSER_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CONTRACTTEMPLATEDOC
--------------------------------------------------------

  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PURCHASEMETHOD
--------------------------------------------------------

  ALTER TABLE "PURCHASEMETHOD" ADD CONSTRAINT "CK_PURCHASEMETHOD_ACTUAL" CHECK (Actual IN (0,1)) ;
 
  ALTER TABLE "PURCHASEMETHOD" ADD CONSTRAINT "CK_PURCHASEMETHOD_ELECTRO" CHECK (Electronic IN (0,1)) ;
 
  ALTER TABLE "PURCHASEMETHOD" ADD CONSTRAINT "PK_PURCHASEMETHOD" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "PURCHASEMETHOD" ADD CONSTRAINT "UQ_PURCHASEMETHOD_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table PROCTREE
--------------------------------------------------------

  ALTER TABLE "PROCTREE" ADD CONSTRAINT "CK_PROCTREE_PARAMS_ONLY" CHECK (params_only in (0,1)) ;
 
  ALTER TABLE "PROCTREE" ADD CONSTRAINT "PK_PROCTREE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SYSUSER
--------------------------------------------------------

  ALTER TABLE "SYSUSER" ADD CONSTRAINT "CK_SYSUSER_ARCHIVED" CHECK (archived in (0,1)) ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "CK_SYSUSER_FORCE_CP_MODE" CHECK (force_cp_mode in (0,1)) ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "CK_SYSUSER_ROLES" CHECK (org_roles in (0,1)) ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "CK_SYSUSER_SIGNDEMAND" CHECK (SignDemand in (0,1)) ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "CK_SYSUSER_USER_LOCKED" CHECK (user_locked in (0,1)) ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "PK_SYSUSER" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "UQ_SYSUSER" UNIQUE ("USERNAME")
  ;
--------------------------------------------------------
--  Constraints for Table CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  ALTER TABLE "CLIENTOBJECTCOMMENTS" ADD CONSTRAINT "PK_CLIENTOBJECTCOMMENTS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "CLIENTOBJECTCOMMENTS" ADD CONSTRAINT "UQ_CLIENTOBJECTCOMMENTS" UNIQUE ("CLIENTOBJECT_ID", "BUDGET_ID")
  ;
--------------------------------------------------------
--  Constraints for Table CMPCOMPETITOR
--------------------------------------------------------

  ALTER TABLE "CMPCOMPETITOR" ADD CONSTRAINT "CHK_CMPCOMPETITOR_ISQUALIFY" CHECK (ISQUALIFY is null or ISQUALIFY in (0,1)) ;
 
  ALTER TABLE "CMPCOMPETITOR" ADD CONSTRAINT "CHK_CMPCOMPETITOR_ISSATISFY" CHECK (ISSATISFY is null or ISSATISFY in (0,1)) ;
 
  ALTER TABLE "CMPCOMPETITOR" ADD CONSTRAINT "CHK_CMPCOMPETITOR_PREFERENCE" CHECK (PREFERENCE in (0,1,2,3)) ;
 
  ALTER TABLE "CMPCOMPETITOR" ADD CONSTRAINT "PK_CMPCOMPETITOR" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "CMPCOMPETITOR" ADD CHECK (Absent in (0,1,2)) ;
--------------------------------------------------------
--  Constraints for Table OOSNOTIFICATIONLOT
--------------------------------------------------------

  ALTER TABLE "OOSNOTIFICATIONLOT" ADD CONSTRAINT "CK_OOSNOTIFICATIONLOT_ISENT" CHECK (IsEnterprise in (0,1)) ;
 
  ALTER TABLE "OOSNOTIFICATIONLOT" ADD CONSTRAINT "PK_OOSNOTIFICATIONLOT" PRIMARY KEY ("ID", "NOTIFICATION_ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CAVILDOC
--------------------------------------------------------

  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "PK_CAVILDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table EQUALITY
--------------------------------------------------------

  ALTER TABLE "EQUALITY" ADD CONSTRAINT "PK_EQUALITY" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ATTACHCATEGORIES
--------------------------------------------------------

  ALTER TABLE "ATTACHCATEGORIES" ADD CONSTRAINT "PK_ATTACHCATEGORIES" PRIMARY KEY ("DOCATTACHEX_ID", "DOCCATEGORY_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PROPTYPE
--------------------------------------------------------

  ALTER TABLE "PROPTYPE" ADD CONSTRAINT "PK_PROPTYPE" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CLAIMDOC
--------------------------------------------------------

  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "CK_CLAIMDOC_PENALTYCHANGETYPE" CHECK (Penalty_Change_Type is null or Penalty_Change_Type in (0,1)) ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "CK_CLAIMDOC_PENTYPE" CHECK (penalty_type in (0,1,2)) ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "CK_CLAIMDOC_REASON" CHECK (reason in (0,1,2,3,4,5)) ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "PK_CLAIMDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLANPOSITIONNUMBERERROR
--------------------------------------------------------

  ALTER TABLE "PLANPOSITIONNUMBERERROR" ADD CONSTRAINT "PK_PLANPOSITIONNUMBERERR" PRIMARY KEY ("DOCUMENT_ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table ESCHECKRULE
--------------------------------------------------------

  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "CK_ESCHECKRULE_ISACTIVE" CHECK (isActive in (0,1)) ;
 
  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "PK_ESCHECKRULE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQCONDEALRESP
--------------------------------------------------------

  ALTER TABLE "RQCONDEALRESP" ADD CONSTRAINT "PK_RQCONDEALRESP" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SYSEVENT
--------------------------------------------------------

  ALTER TABLE "SYSEVENT" ADD CONSTRAINT "CK_SYSMSG_MSGTYPE" CHECK (msgtype in (0,1,2)) ;
 
  ALTER TABLE "SYSEVENT" ADD CONSTRAINT "PK_SYSEVENT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table LIABILITYEXPENSE
--------------------------------------------------------

  ALTER TABLE "LIABILITYEXPENSE" ADD CONSTRAINT "CK_LIABILITYEXPENSE_ACTUAL" CHECK (IS_ACTUAL in (0,1)) ;
 
  ALTER TABLE "LIABILITYEXPENSE" ADD CONSTRAINT "PK_LIABILITYEXPENSE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RQQUALREQ
--------------------------------------------------------

  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "CK_RQQUALREQ_QTYPE" CHECK (qType BETWEEN 0 AND 13) ;
 
  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "PK_RQQUALREQ" PRIMARY KEY ("REQUEST_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPLVERSIONLOG
--------------------------------------------------------

  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ANYDATA
--------------------------------------------------------

  ALTER TABLE "ANYDATA" ADD CONSTRAINT "PK_ANYDATA" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "ANYDATA" ADD CONSTRAINT "UQ_ANYDATA" UNIQUE ("STORAGE", "DEVICE", "DATA_KEY")
  ;
--------------------------------------------------------
--  Constraints for Table CONREFUSALFACT
--------------------------------------------------------

  ALTER TABLE "CONREFUSALFACT" ADD CONSTRAINT "PK_CONREFUSALFACT" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRQUALREQVAL
--------------------------------------------------------

  ALTER TABLE "OFRQUALREQVAL" ADD CONSTRAINT "PK_OFRQUALREQVAL" PRIMARY KEY ("OFFER_ID", "CMPQUALREQPOS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLEFUNC
--------------------------------------------------------

  ALTER TABLE "ROLEFUNC" ADD CONSTRAINT "CK_ROLEOBJECT_ACCESS" CHECK (access_mode in (0,1,2,3)) ;
 
  ALTER TABLE "ROLEFUNC" ADD CONSTRAINT "PK_ROLEFUNC" PRIMARY KEY ("USERROLE_ID", "FUNUNIT_NAME")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TYPEREQCRIT
--------------------------------------------------------

  ALTER TABLE "TYPEREQCRIT" ADD CONSTRAINT "PK_TYPEREQCRIT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCDIGESTROLES
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTROLES" ADD CONSTRAINT "PK_DOCDIGESTROLES" PRIMARY KEY ("DOCDIGESTRULE_ID", "USERROLE_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONCONTRACTOR
--------------------------------------------------------

  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "CK_CONCONTRACTOR_ISCULTURE" CHECK (OrgIsCulture IN (0, 1)) ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "CK_CONCONTRACTOR_ORGACCTYPE" CHECK (orgAccType in (0,1)) ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "CK_CONCONTRACTOR_ORGTYPE" CHECK (OrgOrgType IN (0, 1, 2, 3)) ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "CK_CONTR_IS_TAXCODE_FREE" CHECK (OrgIsTaxCodeFree in (0,1)) ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "PK_CONCONTRACTOR" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ETPATTACH
--------------------------------------------------------

  ALTER TABLE "ETPATTACH" ADD CONSTRAINT "PK_ETPATTACH" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "ETPATTACH" ADD CONSTRAINT "UQ_ETPATTACH" UNIQUE ("DOCATTACHEX_ID", "ETP_ID")
  ;
--------------------------------------------------------
--  Constraints for Table DBCONNECT
--------------------------------------------------------

  ALTER TABLE "DBCONNECT" ADD CONSTRAINT "PK_DBCONNECT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DBCONNECT" ADD CONSTRAINT "UQ_DBCONNECT" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table BANKGUARANTEEDOC
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "CK_BANKGUARANTEEDOC_MODIFRSN" CHECK (ModificationReason IS NULL OR ModificationReason in ('M', 'C')) ;
 
  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "PK_BANKGUARANTEEDOC" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGTURNOVER
--------------------------------------------------------

  ALTER TABLE "ORGTURNOVER" ADD CONSTRAINT "PK_ORGTURNOVER" PRIMARY KEY ("ORG_ID", "YR")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  ALTER TABLE "OOS223PURCHNOTICELOTINFO" ADD CONSTRAINT "PK_OOS223PURCHNOTICELOTINFO" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table RPL$CONSTRAINTS
--------------------------------------------------------

  ALTER TABLE "RPL$CONSTRAINTS" ADD CONSTRAINT "PK_RPL$CONSTRAINTS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "RPL$CONSTRAINTS" ADD CONSTRAINT "UQ_RPL$CONSTRAINTS" UNIQUE ("NAME")
  ;
 
  ALTER TABLE "RPL$CONSTRAINTS" ADD CONSTRAINT "UQ_RPL$CONSTRAINTS_TRIG" UNIQUE ("TRIGGERNAME")
  ;
--------------------------------------------------------
--  Constraints for Table CONORGSTATUS
--------------------------------------------------------

  ALTER TABLE "CONORGSTATUS" ADD CONSTRAINT "PK_CONORGSTATUS" PRIMARY KEY ("CONTRACT_ID", "ORGSTATUS_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SCHEXPDOCS
--------------------------------------------------------

  ALTER TABLE "SCHEXPDOCS" ADD CONSTRAINT "PK_SCHEXPDOCS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CONSUPPLYSHEDULE" ADD CONSTRAINT "PK_CONSUPPLYSHEDULE" PRIMARY KEY ("CONTRACT_ID", "GOODSPOS", "PLACEPOS", "SUPPLYDATE")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ROLEORG
--------------------------------------------------------

  ALTER TABLE "ROLEORG" ADD CONSTRAINT "CK_ROLEORG_ACCESS" CHECK (access_mode in (0,1,3)) ;
 
  ALTER TABLE "ROLEORG" ADD CONSTRAINT "PK_ROLEORG" PRIMARY KEY ("USERROLE_ID", "ORG_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASEFEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEFEATURE" ADD CONSTRAINT "PK_P3PURFEATURE" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSORGANIZATION
--------------------------------------------------------

  ALTER TABLE "OOSORGANIZATION" ADD CONSTRAINT "CHK_FACTFILLEDMANUALLY" CHECK (factFilledManually in (0,1)) ;
 
  ALTER TABLE "OOSORGANIZATION" ADD CONSTRAINT "PK_OOSORGANIZATION" PRIMARY KEY ("REGNUMBER")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2DOCCHILD
--------------------------------------------------------

  ALTER TABLE "PLAN2DOCCHILD" ADD CONSTRAINT "PK_PLAN2DOCCHILD" PRIMARY KEY ("DOC_ID", "PLAN2DOC_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  ALTER TABLE "SUPPORTCRYPTOLIBPARAM" ADD CONSTRAINT "PK_SUPPORTCRYPTOLIBPARAM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "SUPPORTCRYPTOLIBPARAM" ADD CONSTRAINT "UQ_SUPPORTCRYPTOLIBPARAM" UNIQUE ("SUPPORTCRYPTOLIB_ID", "NAME")
  ;
--------------------------------------------------------
--  Constraints for Table TENDERLINECOMM
--------------------------------------------------------

  ALTER TABLE "TENDERLINECOMM" ADD CONSTRAINT "PK_TENDERLINECOMM" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  ALTER TABLE "TENDERLINECOMM" ADD CONSTRAINT "UQ_TENDERLINECOMM" UNIQUE ("TENDERLINE_ID", "COMMEMBERPOS")
  ;
--------------------------------------------------------
--  Constraints for Table GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSOKPDPURCHASEMODE" ADD CONSTRAINT "PK_GOODSOKPDPURCHASEMODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DECREASON
--------------------------------------------------------

  ALTER TABLE "DECREASON" ADD CONSTRAINT "PK_DECREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN2GOODS
--------------------------------------------------------

  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "CHECK_PLAN2GOODS" CHECK (goodsflag in (0,1,2,3,4)) ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "PK_PLAN2GOODS" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONPAYFACT
--------------------------------------------------------

  ALTER TABLE "CONPAYFACT" ADD CONSTRAINT "CK_CONPAYFACT_ISPREPAYMENT" CHECK (IsPrepayment in (0,1)) ;
 
  ALTER TABLE "CONPAYFACT" ADD CONSTRAINT "PK_CONPAYFACT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CDCAVILTYPE
--------------------------------------------------------

  ALTER TABLE "CDCAVILTYPE" ADD CONSTRAINT "PK_CDCAVILTYPE" PRIMARY KEY ("CAVILDOC_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DESCRIPTION
--------------------------------------------------------

  ALTER TABLE "DESCRIPTION" ADD CONSTRAINT "PK_DESCRIPTION" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table REPSOURCE
--------------------------------------------------------

  ALTER TABLE "REPSOURCE" ADD CONSTRAINT "CK_REPSOURCE_TYPE" CHECK (SourceType in (0,1)) ;
 
  ALTER TABLE "REPSOURCE" ADD CONSTRAINT "PK_REPSOURCE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "REPSOURCE" ADD CONSTRAINT "UQ_REPSOURCE_NAME" UNIQUE ("NAME")
  ;
--------------------------------------------------------
--  Constraints for Table ROLEBUDGET
--------------------------------------------------------

  ALTER TABLE "ROLEBUDGET" ADD CONSTRAINT "CK_ROLEBUDGET_ACCESS" CHECK (access_mode in (0,1,3)) ;
 
  ALTER TABLE "ROLEBUDGET" ADD CONSTRAINT "PK_ROLEBUDGET" PRIMARY KEY ("USERROLE_ID", "BUDGET_ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCCLASS_DISPSTATUS
--------------------------------------------------------

  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "DOCCLASS_DISPSTATUS" ADD CONSTRAINT "UQ_DOCCLASS_DISPSTATUS" UNIQUE ("DOCUMENTCLASS_ID", "DISPSTATUS_ID", "PARDISPSTATUS_ID", "PARALLEL")
  ;
 
  ALTER TABLE "DOCCLASS_DISPSTATUS" ADD CONSTRAINT "UQ_DOCCLASS_DISPSTATUS_ID" UNIQUE ("ID")
  ;
--------------------------------------------------------
--  Constraints for Table LIABILITYCREDENTIAL
--------------------------------------------------------

  ALTER TABLE "LIABILITYCREDENTIAL" ADD CONSTRAINT "PK_LIABILITYCREDENTIAL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRGOODS
--------------------------------------------------------

  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "PK_OFRGOODS" PRIMARY KEY ("OFFER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table INDUSTRYCODE
--------------------------------------------------------

  ALTER TABLE "INDUSTRYCODE" ADD CONSTRAINT "PK_INDUSTRYCODE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  ALTER TABLE "INDUSTRYCODE" ADD CONSTRAINT "UQ_INDUSTRYCODE" UNIQUE ("BUDGET_ID", "FINYEAR", "ORG_ID", "CODE", "FOREIGNKEY")
  ;
--------------------------------------------------------
--  Constraints for Table KBKLINEFIT
--------------------------------------------------------

  ALTER TABLE "KBKLINEFIT" ADD CONSTRAINT "PK_KBKLINEFIT" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PREFERENCEGROUP
--------------------------------------------------------

  ALTER TABLE "PREFERENCEGROUP" ADD CONSTRAINT "PK_PREFERENCEGROUP" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "PREFERENCEGROUP" ADD CONSTRAINT "UQ_PREFERENCEGROUP" UNIQUE ("CUSTOMER_ID", "CAPTION")
  ;
--------------------------------------------------------
--  Constraints for Table OOSPRODUCTS
--------------------------------------------------------

  ALTER TABLE "OOSPRODUCTS" ADD CONSTRAINT "PK_OOSPRODUCTS" PRIMARY KEY ("CODE", "NOTIFICATION_ID", "LOT_ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table TENDERCRITERION
--------------------------------------------------------

  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_BESTPARAM" CHECK (BestParam in (0, 1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_CALCMODE" CHECK (CalcMode in (0, 1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_CTYPE" CHECK (CType in (0,1,2,3,4,5,6,7,8,9,10,11,12)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_ISACTUAL" CHECK (ISACTUAL in (0,1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_ISCANCEL" CHECK (ISCANCELLABLE in (0,1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_ISREQUIRED" CHECK (ISREQUIRED in (0,1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "CK_TENDERCRITERION_ISUNIQUE" CHECK (ISUNIQUE in (0,1)) ;
 
  ALTER TABLE "TENDERCRITERION" ADD CONSTRAINT "PK_TENDERCRITERION" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table GOODSBANPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSBANPURCHASEMODE" ADD CONSTRAINT "PK_GBPM" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table ROLEATTACH
--------------------------------------------------------

  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "CK_ROLEATTACH_ACCESS" CHECK (access_mode in (0,1,2,3)) ;
 
  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "PK_ROLEATTACH" PRIMARY KEY ("USERROLE_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "CATEGORY_ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONTRACTREASON
--------------------------------------------------------

  ALTER TABLE "CONTRACTREASON" ADD CONSTRAINT "CK_CONTRACTREASON_ACTUAL" CHECK (actual in (0,1)) ;
 
  ALTER TABLE "CONTRACTREASON" ADD CONSTRAINT "PK_CONTRACTREASON" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table FUNCMODULE
--------------------------------------------------------

  ALTER TABLE "FUNCMODULE" ADD CONSTRAINT "PK_FUNCMODULE" PRIMARY KEY ("FUNUNIT_ID", "MODULENAME")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table SIGNEXPORTLOG
--------------------------------------------------------

  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "CK_SIGNEXPORTLOG_SIGNTYPE" CHECK (SignType in (0,1)) ;
 
  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "PK_SIGNEXPORTLOG" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CONEXECSTEP2
--------------------------------------------------------

  ALTER TABLE "CONEXECSTEP2" ADD CONSTRAINT "CK_CONEXECSTEP2_ISPAYIGNORED" CHECK (IsPayIgnored in (0,1)) ;
 
  ALTER TABLE "CONEXECSTEP2" ADD CONSTRAINT "PK_CONEXECSTEP2" PRIMARY KEY ("CONTRACT_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table NUMUSAGE
--------------------------------------------------------

  ALTER TABLE "NUMUSAGE" ADD CONSTRAINT "PK_NUMUSAGE" PRIMARY KEY ("NUMSEQUENCE_ID", "PERIOD_START", "NUM_VALUE")
  ;
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table CMPOOSMODIFICATION
--------------------------------------------------------

  ALTER TABLE "CMPOOSMODIFICATION" ADD CONSTRAINT "CK_CMPOOSMODIF_AUTHORITYTYPE" CHECK (Change_AuthorityType in ('FA','FO','S','M')) ;
 
  ALTER TABLE "CMPOOSMODIFICATION" ADD CONSTRAINT "CK_CMPOOSMODIF_INITIATIVETYPE" CHECK (Change_InitiativeType is null or Change_InitiativeType in ('U','Z','US','S')) ;
 
  ALTER TABLE "CMPOOSMODIFICATION" ADD CONSTRAINT "PK_CMPOOSMODIF" PRIMARY KEY ("ORDER_ID", "POS")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table ORGSTATUS
--------------------------------------------------------

  ALTER TABLE "ORGSTATUS" ADD CONSTRAINT "PK_ORGSTATUS" PRIMARY KEY ("ID")
  ;
 
  
--------------------------------------------------------
--  Constraints for Table RPL
--------------------------------------------------------

  ALTER TABLE "RPL" ADD CONSTRAINT "CK_RPL_ACTIVE" CHECK (rpl_active in (0,1)) ;
 
  ALTER TABLE "RPL" ADD CONSTRAINT "PK_RPL" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table DOCEXCHANGESCHEME
--------------------------------------------------------

  ALTER TABLE "DOCEXCHANGESCHEME" ADD CONSTRAINT "PK_DOCEXCHANGESCHEME" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OFRPLACE
--------------------------------------------------------

  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "CK_OFRPLACE_CALCPRICE" CHECK (calcprice in (0,1)) ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "CK_OFRPLACE_USEAMOUNT" CHECK (useamount in (0,1)) ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "PK_OFRPLACE" PRIMARY KEY ("OFFER_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table PLAN3PURCHASELINE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "PK_P3LINE" PRIMARY KEY ("PLAN3PURCHASEDOC_ID", "POS")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
--------------------------------------------------------
--  Constraints for Table STOREDDOCUMENTS
--------------------------------------------------------

  ALTER TABLE "STOREDDOCUMENTS" ADD CONSTRAINT "PK_STOREDDOCUMENTS" PRIMARY KEY ("ID")
  ;
 
  
 
  
--------------------------------------------------------
--  Constraints for Table OOSORGROLE
--------------------------------------------------------

  ALTER TABLE "OOSORGROLE" ADD CONSTRAINT "PK_OOSORGROLE" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  ALTER TABLE "OOSORGROLE" ADD CONSTRAINT "UQ_OOSORGROLE_CODE" UNIQUE ("CODE")
  ;
--------------------------------------------------------
--  Constraints for Table PURCHASEPLAN
--------------------------------------------------------

  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PLAN" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "UQ_PLAN" UNIQUE ("GROUPCODE", "CUSTOMER_ID", "CMPORG_ID", "PURCHASEMODE_ID", "PURCHASEPLANDOC_ID", "FINSRC_ID", "NECESSITY_ID")
  ;
--------------------------------------------------------
--  Constraints for Table INTERBUDGET
--------------------------------------------------------

  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "CK_INTERBUDGETSYSTEMTYPE" CHECK (SystemType in (0,1)) ;
 
  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "PK_INTERBUDGET" PRIMARY KEY ("ID")
  ;
 
  
 
  
 
  
 
  
 
  
 
  
 
  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "UQ_INTERBUDGET_BUDGET" UNIQUE ("BUDGET_ID", "FINYEAR", "SYSTEMTYPE")
  ;
 
  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "UQ_INTERBUDGET_OUTERBUDGET" UNIQUE ("MSGSITE_ID", "OUTERBUDGET_ID")
  ;
--------------------------------------------------------
--  Ref Constraints for Table ABANDONEDREASON
--------------------------------------------------------

  ALTER TABLE "ABANDONEDREASON" ADD CONSTRAINT "FK_ABANDONEDREASON_PM" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ALTGOODSGROUP
--------------------------------------------------------

  ALTER TABLE "ALTGOODSGROUP" ADD CONSTRAINT "FK_ALTGOODSGROUP_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "ALTGOODSGROUP" ("ID") ;
 
  ALTER TABLE "ALTGOODSGROUP" ADD CONSTRAINT "FK_ALTGOODSGROUP_TYPE" FOREIGN KEY ("TYPE_ID")
	  REFERENCES "ALTGOODSGROUPTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ALTGOODSGROUPLINK
--------------------------------------------------------

  ALTER TABLE "ALTGOODSGROUPLINK" ADD CONSTRAINT "FK_ALTGGLINK_ALTGOODSGROUP" FOREIGN KEY ("ALTGOODSGROUP_ID")
	  REFERENCES "ALTGOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ALTGOODSGROUPLINK" ADD CONSTRAINT "FK_ALTGGLINK_GOODSGROUP" FOREIGN KEY ("GOODSGROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ALTGOODSGROUPLINK" ADD CONSTRAINT "FK_ALTGGLINK_TYPE" FOREIGN KEY ("TYPE_ID")
	  REFERENCES "ALTGOODSGROUPTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ALTUNITFACTOR
--------------------------------------------------------

  ALTER TABLE "ALTUNITFACTOR" ADD CONSTRAINT "FK_ALTUNIT_ALTGOODSGROUP" FOREIGN KEY ("ALTGOODSGROUP_ID")
	  REFERENCES "ALTGOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ALTUNITFACTOR" ADD CONSTRAINT "FK_ALTUNIT_UNIT" FOREIGN KEY ("UNIT_ID")
	  REFERENCES "UNIT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table APPMODULEDEPENDENCY
--------------------------------------------------------

  ALTER TABLE "APPMODULEDEPENDENCY" ADD CONSTRAINT "FK_APPOBJ_APPMODULE1" FOREIGN KEY ("ID")
	  REFERENCES "APPMODULE" ("ID") ;
 
  ALTER TABLE "APPMODULEDEPENDENCY" ADD CONSTRAINT "FK_APPOBJ_APPMODULE2" FOREIGN KEY ("DEPENDID")
	  REFERENCES "APPMODULE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table APPOBJ
--------------------------------------------------------

  ALTER TABLE "APPOBJ" ADD CONSTRAINT "FK_APPOBJ_APPMODULE" FOREIGN KEY ("MODULEID")
	  REFERENCES "APPMODULE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table APPOBJPROP
--------------------------------------------------------

  ALTER TABLE "APPOBJPROP" ADD CONSTRAINT "FK_APPOBJPROP_APPOBJ" FOREIGN KEY ("APPOBJID")
	  REFERENCES "APPOBJ" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ATTACHCATEGORIES
--------------------------------------------------------

  ALTER TABLE "ATTACHCATEGORIES" ADD CONSTRAINT "FK_ATTACHCATEGORIES_CATEGORY" FOREIGN KEY ("DOCCATEGORY_ID")
	  REFERENCES "DOCCATEGORY" ("ID") ;
 
  ALTER TABLE "ATTACHCATEGORIES" ADD CONSTRAINT "FK_ATTACHCATEGORIES_DOCATTACH" FOREIGN KEY ("DOCATTACHEX_ID")
	  REFERENCES "DOCATTACHEX" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ATTACHEDPLANDOC
--------------------------------------------------------

  ALTER TABLE "ATTACHEDPLANDOC" ADD CONSTRAINT "FK_ATTACHEDPLANDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "ATTACHEDPLANDOC" ADD CONSTRAINT "FK_ATTACHEDPLANDOC_PLANDOC" FOREIGN KEY ("DOC_ID")
	  REFERENCES "PLANDOC" ("ID") ;
 
  ALTER TABLE "ATTACHEDPLANDOC" ADD CONSTRAINT "FK_ATTACHPLANDOC_PURCHPLANDOC" FOREIGN KEY ("PURCHASEPLANDOC_ID")
	  REFERENCES "PURCHASEPLANDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table AUCTIONBID
--------------------------------------------------------

  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_COMPETITOR" FOREIGN KEY ("ORDER_ID", "COMPETITORPOS")
	  REFERENCES "CMPCOMPETITOR" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "AUCTIONBID" ADD CONSTRAINT "FK_AUCTIONBID_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table AUCTIONLOG
--------------------------------------------------------

  ALTER TABLE "AUCTIONLOG" ADD CONSTRAINT "FK_AUCTIONLOG_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "AUCTIONLOG" ADD CONSTRAINT "FK_AUCTIONLOG_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table BANKGUARANTEEDOC
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "FK_BANKGUARANTEEDOC_CUSTORG" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "FK_BANKGUARANTEEDOC_DISPSTAT" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "FK_BANKGUARANTEEDOC_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "BANKGUARANTEEDOC" ADD CONSTRAINT "FK_BANKGUARANTEEDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table BANKGUARANTEEREFDOC
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEREFDOC" ADD CONSTRAINT "FK_BANKGUARANTEEREFDOC_CLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "BANKGUARANTEEREFDOC" ADD CONSTRAINT "FK_BANKGUARANTEEREFDOC_DOCUM" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "BANKGUARANTEEREFDOC" ADD CONSTRAINT "FK_BANKGUARANTEEREFDOC_STAT" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table BANKGUARANTEEREFDOCREASON
--------------------------------------------------------

  ALTER TABLE "BANKGUARANTEEREFDOCREASON" ADD CONSTRAINT "FK_BANKGUARANTEEREFDOCRS_REF" FOREIGN KEY ("BANKGUARANTEEREF_ID")
	  REFERENCES "BANKGUARANTEEREFDOC" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table BUDGCODE
--------------------------------------------------------

  ALTER TABLE "BUDGCODE" ADD CONSTRAINT "FK_BUDGCODE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "BUDGCODE" ADD CONSTRAINT "FK_BUDGCODE_CODETYPE" FOREIGN KEY ("BUDGET_ID", "SEQORDER")
	  REFERENCES "CODETYPE" ("BUDGET_ID", "SEQORDER") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table BUDGET
--------------------------------------------------------

  ALTER TABLE "BUDGET" ADD CONSTRAINT "FK_BUDGET_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "BUDGET" ADD CONSTRAINT "FK_BUDGET_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "BUDGET" ADD CONSTRAINT "FK_BUDGET_RELATION" FOREIGN KEY ("RELATIONBUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "BUDGET" ADD CONSTRAINT "FK_BUDGET_TERRITORY" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "TERRITORY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table BUDGETLINE
--------------------------------------------------------

  ALTER TABLE "BUDGETLINE" ADD CONSTRAINT "FK_BUDGETLINE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "BUDGETLINE" ADD CONSTRAINT "FK_BUDGETLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "BUDGETLINE" ADD CONSTRAINT "FK_BUDGETLINE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CACHELIST
--------------------------------------------------------

  ALTER TABLE "CACHELIST" ADD CONSTRAINT "FK_CACHELIST_USERSESSION" FOREIGN KEY ("USERSESSION_ID")
	  REFERENCES "USERSESSION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CAVILDOC
--------------------------------------------------------

  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_DOCUMNETCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CAVILDOC" ADD CONSTRAINT "FK_CAVILDOC_RESPPERSON" FOREIGN KEY ("RESPPERSON_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CDCAVILTYPE
--------------------------------------------------------

  ALTER TABLE "CDCAVILTYPE" ADD CONSTRAINT "FK_CDCAVILTYPE_CAVILDOC" FOREIGN KEY ("CAVILDOC_ID")
	  REFERENCES "CAVILDOC" ("ID") ;
 
  ALTER TABLE "CDCAVILTYPE" ADD CONSTRAINT "FK_CDCAVILTYPE_CAVILTYPE" FOREIGN KEY ("CAVILTYPE_ID")
	  REFERENCES "CAVILTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CEEXECUTIONLINE
--------------------------------------------------------

  ALTER TABLE "CEEXECUTIONLINE" ADD CONSTRAINT "FK_CEEXECLINE_CONEXECDOCTYPE" FOREIGN KEY ("CONTRACTEXECDOCTYPE_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "CEEXECUTIONLINE" ADD CONSTRAINT "FK_CEEXECUTIONLINE_CONTREXEC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CEEXECUTIONLINE" ADD CONSTRAINT "FK_CEEXECUTIONLINE_FACTDOC" FOREIGN KEY ("FACTDOC_ID")
	  REFERENCES "FACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CEPAYMENTPENALTY
--------------------------------------------------------

  ALTER TABLE "CEPAYMENTPENALTY" ADD CONSTRAINT "FK_CEPAYPENALTY_CONTREXEC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CEPAYMENTPENALTY" ADD CONSTRAINT "FK_CEPAYPENALTY_POS" FOREIGN KEY ("CONTRACTEXECDOC_ID", "PENALTYPOS")
	  REFERENCES "CEPENALTY" ("CONTRACTEXECDOC_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CEPENALTY
--------------------------------------------------------

  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "FK_CEPENALTY_CLAIMDOC" FOREIGN KEY ("DOC_ID")
	  REFERENCES "CLAIMDOC" ("ID") ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "FK_CEPENALTY_CONTRACTEXECDOC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "FK_CEPENALTY_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CEPENALTY" ADD CONSTRAINT "FK_CEPENALTY_DOCUMENTCLASS" FOREIGN KEY ("CLAIM_DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CEREPARATIONLINE
--------------------------------------------------------

  ALTER TABLE "CEREPARATIONLINE" ADD CONSTRAINT "FK_CEREPARATIONLINE_CONEXEC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CEREPARATIONLINE" ADD CONSTRAINT "FK_CEREPARATIONLINE_REPDOCID" FOREIGN KEY ("CONTRACTREPARATIONDOC_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CERETURNPENALTY
--------------------------------------------------------

  ALTER TABLE "CERETURNPENALTY" ADD CONSTRAINT "FK_CERETPENALTY_CONTREXEC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CERETURNPENALTY" ADD CONSTRAINT "FK_CERETPENALTY_POS" FOREIGN KEY ("CONTRACTEXECDOC_ID", "PENALTYPOS")
	  REFERENCES "CEPENALTY" ("CONTRACTEXECDOC_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CERTINTERCHANGEREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTINTERCHANGEREQUEST" ADD CONSTRAINT "FK_CERTICREQ_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CERTINTERCHANGEREQUEST" ADD CONSTRAINT "FK_CERTICREQ_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CERTINTERCHANGEREQUEST" ADD CONSTRAINT "FK_CERTICREQ_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CERTINTERCHANGEREQUEST" ADD CONSTRAINT "FK_CERTICREQ_USERCERT" FOREIGN KEY ("USERCERT_ID")
	  REFERENCES "USERCERT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CERTREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "FK_CERTREQUEST_USER_ORG" FOREIGN KEY ("USER_ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "FK_CERTREQ_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "FK_CERTREQ_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CERTREQUEST" ADD CONSTRAINT "FK_CERTREQ_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CERTREQUESTOID
--------------------------------------------------------

  ALTER TABLE "CERTREQUESTOID" ADD CONSTRAINT "FK_CERTREQUESTOID_CERTREQUEST" FOREIGN KEY ("CERTREQUEST_ID")
	  REFERENCES "CERTREQUEST" ("ID") ;
 
  ALTER TABLE "CERTREQUESTOID" ADD CONSTRAINT "FK_CERTREQUESTOID_OIDREF" FOREIGN KEY ("OIDREF_ID")
	  REFERENCES "OIDREF" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CERTREVOKEREQUEST
--------------------------------------------------------

  ALTER TABLE "CERTREVOKEREQUEST" ADD CONSTRAINT "FK_CERTREVOKEREQ_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CERTREVOKEREQUEST" ADD CONSTRAINT "FK_CERTREVOKEREQ_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CERTREVOKEREQUEST" ADD CONSTRAINT "FK_CERTREVOKEREQ_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CERTREVOKEREQUEST" ADD CONSTRAINT "FK_CERTREVOKEREQ_USERCERT" FOREIGN KEY ("USERCERT_ID")
	  REFERENCES "USERCERT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CETERMINATIONLINE
--------------------------------------------------------

  ALTER TABLE "CETERMINATIONLINE" ADD CONSTRAINT "FK_CETERMINATIONLINE_CONTREXEC" FOREIGN KEY ("CONTRACTEXECDOC_ID")
	  REFERENCES "CONTRACTEXECDOC" ("ID") ;
 
  ALTER TABLE "CETERMINATIONLINE" ADD CONSTRAINT "FK_CETERMLINE_TERMREASON" FOREIGN KEY ("TERMINATIONREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "CETERMINATIONLINE" ADD CONSTRAINT "FK_CETERMLINE_TERMREASONDOC" FOREIGN KEY ("TERMINATIONREASONDOC_ID")
	  REFERENCES "CONTRACTREASON_DOCLINES" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLAIMDOC
--------------------------------------------------------

  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "CLAIMDOC" ADD CONSTRAINT "FK_CLAIMDOC_PARENT" FOREIGN KEY ("PARENT_CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLAIMPAYFACT
--------------------------------------------------------

  ALTER TABLE "CLAIMPAYFACT" ADD CONSTRAINT "FK_CLAIMPAYFACT_CLAIM" FOREIGN KEY ("CLAIM_ID")
	  REFERENCES "CLAIMDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLAIMPENALTYCHANGEDOCINFO
--------------------------------------------------------

  ALTER TABLE "CLAIMPENALTYCHANGEDOCINFO" ADD CONSTRAINT "FK_PENALTYCHANGEDOCINFO_CLAIM" FOREIGN KEY ("CLAIM_ID")
	  REFERENCES "CLAIMDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLASSOPER
--------------------------------------------------------

  ALTER TABLE "CLASSOPER" ADD CONSTRAINT "FK_CLASSOPER_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CLASSOPER" ADD CONSTRAINT "FK_CLASSOPER_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  ALTER TABLE "CLIENTOBJECTCOMMENTS" ADD CONSTRAINT "FK_CLIOBJCOMM_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CLIENTOBJECTCOMMENTS" ADD CONSTRAINT "FK_CLIOBJCOMM_CLIENTOBJ" FOREIGN KEY ("CLIENTOBJECT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CLNDDAY
--------------------------------------------------------

  ALTER TABLE "CLNDDAY" ADD CONSTRAINT "FK_CLNDDAY_CLNDDAYTYPE" FOREIGN KEY ("CLNDDAYTYPE_ID")
	  REFERENCES "CLNDDAYTYPE" ("ID") ;
 
  ALTER TABLE "CLNDDAY" ADD CONSTRAINT "FK_CLNDDAY_CLNDTYPE" FOREIGN KEY ("CLNDTYPE_ID")
	  REFERENCES "CLNDTYPE" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCOMMEMBER
--------------------------------------------------------

  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "FK_CMPCOMMEMBER_CMPPHASE" FOREIGN KEY ("ORDER_ID", "PHASEPOS")
	  REFERENCES "CMPPHASE" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "FK_CMPCOMMEMBER_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPCOMMEMBER" ADD CONSTRAINT "FK_CMPCOMMEMBER_PERSONAL" FOREIGN KEY ("COMMEMBER_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCOMPETITOR
--------------------------------------------------------

  ALTER TABLE "CMPCOMPETITOR" ADD CONSTRAINT "FK_CMPCOMPETITOR_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCONDEALRESP
--------------------------------------------------------

  ALTER TABLE "CMPCONDEALRESP" ADD CONSTRAINT "FK_CMPCONDEALRESP_LOTPOS" FOREIGN KEY ("ORDER_ID", "CMPCUSTOMERPOS")
	  REFERENCES "CMPCUSTOMERLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPCONDEALRESP" ADD CONSTRAINT "FK_CMPCONDEALRESP_PERSONAL" FOREIGN KEY ("PERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCRITERION
--------------------------------------------------------

  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "FK_CMPCRITERION_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "FK_CMPCRITERION_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPCRITERION" ADD CONSTRAINT "FK_CMPCRITERION_TENDERCRIT" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCRITERIONLINE
--------------------------------------------------------

  ALTER TABLE "CMPCRITERIONLINE" ADD CONSTRAINT "FK_CMPCRITERIONLINE_CMPCRIT" FOREIGN KEY ("ORDER_ID", "CMPCRITERIONPOS")
	  REFERENCES "CMPCRITERION" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "CMPCRITERIONLINE" ADD CONSTRAINT "FK_CMPCRITERIONLINE_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCUSTOMER
--------------------------------------------------------

  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_CUSTFACTCODE" FOREIGN KEY ("CUSTOMERFACTCOUNTRY_ID", "CUSTOMERFACTTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_CUSTPOSTCODE" FOREIGN KEY ("CUSTOMERPOSTCOUNTRY_ID", "CUSTOMERPOSTTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_FACTCOUNTRY" FOREIGN KEY ("CUSTOMERFACTCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMER" ADD CONSTRAINT "FK_CMPCUSTOMER_POSTCOUNTRY" FOREIGN KEY ("CUSTOMERPOSTCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPCUSTOMERLOT
--------------------------------------------------------

  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CMPCUSTLOT_CONMNGRRESP" FOREIGN KEY ("CONMNGRRESP_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CMPCUSTOMERLOT_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CMPCUSTOMERLOT_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_APPBANK" FOREIGN KEY ("GUARAPPBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_APPPERSACC_ID" FOREIGN KEY ("GUARAPPPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_APPSETTACC_ID" FOREIGN KEY ("GUARAPPSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_CONBANK" FOREIGN KEY ("GUARANTEECONTRACTBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_CONPERSACC_ID" FOREIGN KEY ("GUARCONTRPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CMPCUSTOMERLOT" ADD CONSTRAINT "FK_CUSTOMERLOT_CONSETTACC_ID" FOREIGN KEY ("GUARCONTRSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPDECISION
--------------------------------------------------------

  ALTER TABLE "CMPDECISION" ADD CONSTRAINT "FK_CMPDECISION_CMPCOMPETITOR" FOREIGN KEY ("ORDER_ID", "COMPETITORPOS")
	  REFERENCES "CMPCOMPETITOR" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPDECISION" ADD CONSTRAINT "FK_CMPDECISION_CMPPHASE" FOREIGN KEY ("ORDER_ID", "PHASEPOS")
	  REFERENCES "CMPPHASE" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPDECISION" ADD CONSTRAINT "FK_CMPDECISION_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPDISCUSSION
--------------------------------------------------------

  ALTER TABLE "CMPDISCUSSION" ADD CONSTRAINT "FK_CMPDISCUSSION_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "CMPDISCUSSION" ADD CONSTRAINT "FK_CMPDISCUSSION_CMPPHASE" FOREIGN KEY ("ORDER_ID", "PHASEPOS")
	  REFERENCES "CMPPHASE" ("ORDER_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CMPDOCREQ
--------------------------------------------------------

  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "FK_CMPDOCREQ_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "FK_CMPDOCREQ_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPDOCREQ" ADD CONSTRAINT "FK_CMPDOCREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPEXPENSE
--------------------------------------------------------

  ALTER TABLE "CMPEXPENSE" ADD CONSTRAINT "FK_CMPEXPENSE_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "CMPEXPENSE" ADD CONSTRAINT "FK_CMPEXPENSE_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPFEATURE
--------------------------------------------------------

  ALTER TABLE "CMPFEATURE" ADD CONSTRAINT "FK_CMPFEATURE_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "CMPFEATURE" ADD CONSTRAINT "FK_CMPFEATURE_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPFEATURE" ADD CONSTRAINT "FK_CMPFEATURE_PLFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPGOODS
--------------------------------------------------------

  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "CMPGOODS" ADD CONSTRAINT "FK_CMPGOODS_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CMPGOODSPROP" ADD CONSTRAINT "FK_CMPGOODSPROP_CMPGOODS" FOREIGN KEY ("ORDER_ID", "GOODSPOS")
	  REFERENCES "CMPGOODS" ("ORDER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPLOT
--------------------------------------------------------

  ALTER TABLE "CMPLOT" ADD CONSTRAINT "FK_CMPLOT_CHILDORDERDOC" FOREIGN KEY ("CHILD_ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "FK_CMPLOT_CONTYPE" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "FK_CMPLOT_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "CMPLOT" ADD CONSTRAINT "FK_CMPLOT_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPOOSMODIFICATION
--------------------------------------------------------

  ALTER TABLE "CMPOOSMODIFICATION" ADD CONSTRAINT "FK_CMPOOSMODIF_CMPPHASE" FOREIGN KEY ("ORDER_ID", "PHASEPOS")
	  REFERENCES "CMPPHASE" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPOOSMODIFICATION" ADD CONSTRAINT "FK_CMPOOSMODIF_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CMPPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CMPPAYSHEDULE" ADD CONSTRAINT "FK_CMPPAYSHEDULE_PLACE" FOREIGN KEY ("ORDER_ID", "BUDGETLINEPOS")
	  REFERENCES "CMPPLACE" ("ORDER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPPERSONAL
--------------------------------------------------------

  ALTER TABLE "CMPPERSONAL" ADD CONSTRAINT "FK_CMPPERSONAL_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPPERSONAL" ADD CONSTRAINT "FK_CMPPERSONAL_PERSONAL" FOREIGN KEY ("PERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPPERSONALRESP
--------------------------------------------------------

  ALTER TABLE "CMPPERSONALRESP" ADD CONSTRAINT "FK_CMPPERSONALRESP_CMPPERSONAL" FOREIGN KEY ("ORDER_ID", "PERSONAL_ID")
	  REFERENCES "CMPPERSONAL" ("ORDER_ID", "PERSONAL_ID") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPPERSONALRESP" ADD CONSTRAINT "FK_CMPPERSONALRESP_RESP" FOREIGN KEY ("RESPONSIBILITY_ID")
	  REFERENCES "RESPONSIBILITY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPPHASE
--------------------------------------------------------

  ALTER TABLE "CMPPHASE" ADD CONSTRAINT "FK_CMPPHASE_COMMISSION" FOREIGN KEY ("COMMISSION_ID")
	  REFERENCES "COMMISSION" ("ID") ;
 
  ALTER TABLE "CMPPHASE" ADD CONSTRAINT "FK_CMPPHASE_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPPLACE
--------------------------------------------------------

  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CMPPLACE" ADD CONSTRAINT "FK_CMPPLACE_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPQUALREQ
--------------------------------------------------------

  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "FK_CMPQUALREQ_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "FK_CMPQUALREQ_PLACEMENTFEAT" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
 
  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "FK_CMPQUALREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
 
  ALTER TABLE "CMPQUALREQ" ADD CONSTRAINT "FK_CMPQUAL_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPREPDOCUMENT
--------------------------------------------------------

  ALTER TABLE "CMPREPDOCUMENT" ADD CONSTRAINT "FK_CMPREPDOCUMENT_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPREPDOCUMENT" ADD CONSTRAINT "FK_CMPREPDOCUMENT_REPDOCUMENT" FOREIGN KEY ("REPDOCUMENT_ID")
	  REFERENCES "REPDOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CMPSUPPLYSHEDULE" ADD CONSTRAINT "FK_CMPSUPPLYSHEDULE_CMPGOODS" FOREIGN KEY ("ORDER_ID", "GOODSPOS")
	  REFERENCES "CMPGOODS" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPSUPPLYSHEDULE" ADD CONSTRAINT "FK_CMPSUPPLYSHEDULE_CMPLOT" FOREIGN KEY ("ORDER_ID", "LOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "CMPSUPPLYSHEDULE" ADD CONSTRAINT "FK_CMPSUPPLYSHEDULE_CMPPLACE" FOREIGN KEY ("ORDER_ID", "PLACEPOS")
	  REFERENCES "CMPPLACE" ("ORDER_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CMPVENDOR
--------------------------------------------------------

  ALTER TABLE "CMPVENDOR" ADD CONSTRAINT "FK_CMPVENDOR_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "CMPVENDOR" ADD CONSTRAINT "FK_CMPVENDOR_ORGFORM" FOREIGN KEY ("PROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "CMPVENDOR" ADD CONSTRAINT "FK_CMPVENDOR_VENDOR" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPVOTERESULT
--------------------------------------------------------

  ALTER TABLE "CMPVOTERESULT" ADD CONSTRAINT "FK_CMPVOTERESULT_CMPCOMMEMBERS" FOREIGN KEY ("ORDER_ID", "CMPCOMMEMBERPOS")
	  REFERENCES "CMPCOMMEMBER" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPVOTERESULT" ADD CONSTRAINT "FK_CMPVOTERESULT_CMPDECISION" FOREIGN KEY ("ORDER_ID", "DECISIONPOS")
	  REFERENCES "CMPDECISION" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "CMPVOTERESULT" ADD CONSTRAINT "FK_CMPVOTERESULT_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CMPWORKGROUP
--------------------------------------------------------

  ALTER TABLE "CMPWORKGROUP" ADD CONSTRAINT "FK_CMPWORKGROUP_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CODETYPE
--------------------------------------------------------

  ALTER TABLE "CODETYPE" ADD CONSTRAINT "FK_CODETYPE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table COMMEMBER
--------------------------------------------------------

  ALTER TABLE "COMMEMBER" ADD CONSTRAINT "FK_COMMEMBER_COMMISSION" FOREIGN KEY ("COMMISSION_ID")
	  REFERENCES "COMMISSION" ("ID") ;
 
  ALTER TABLE "COMMEMBER" ADD CONSTRAINT "FK_COMMEMBER_PERSONAL" FOREIGN KEY ("COMMEMBER_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table COMMISSION
--------------------------------------------------------

  ALTER TABLE "COMMISSION" ADD CONSTRAINT "FK_COMMISSION_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table COMPLAINTDOC
--------------------------------------------------------

  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "FK_COMPLAINTDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "FK_COMPLAINTDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "FK_COMPLAINTDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "FK_COMPLAINTDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "COMPLAINTDOC" ADD CONSTRAINT "FK_COMPLAINTDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONAGREEMENTSDOCS
--------------------------------------------------------

  ALTER TABLE "CONAGREEMENTSDOCS" ADD CONSTRAINT "FK_CONAGREEMENTSDOCS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONBANKGUARANTEERETURN
--------------------------------------------------------

  ALTER TABLE "CONBANKGUARANTEERETURN" ADD CONSTRAINT "FK_CONBNKGRNTRTRN_CNTR" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBL_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBL_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_CONCONTRACTOR" FOREIGN KEY ("CONTRACT_ID", "CONTRACTORPOS")
	  REFERENCES "CONCONTRACTOR" ("CONTRACT_ID", "POS") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_CONPLACE" FOREIGN KEY ("CONTRACT_ID", "PLACEPOS")
	  REFERENCES "CONPLACE" ("CONTRACT_ID", "POS") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_LIABILITY" FOREIGN KEY ("LIABILITYEXPENSE_ID")
	  REFERENCES "LIABILITYEXPENSE" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_ORGACC" FOREIGN KEY ("RECIPIENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CONBUDGETLINE" ADD CONSTRAINT "FK_CONBUDGETLINE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONCONFIRMINGDOCS
--------------------------------------------------------

  ALTER TABLE "CONCONFIRMINGDOCS" ADD CONSTRAINT "FK_CONCONFIRMINGDOCS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONCONTRACTOR
--------------------------------------------------------

  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_EXECUTER" FOREIGN KEY ("ORGEXECUTER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_EXECUTERACC" FOREIGN KEY ("ORGEXECUTERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_OKTMO" FOREIGN KEY ("ORGOKTMO_ID")
	  REFERENCES "OKTMO" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_ORGACC" FOREIGN KEY ("ORGACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CONCONTRACTOR" ADD CONSTRAINT "FK_CONCONTRACTOR_PROPFORMID" FOREIGN KEY ("ORGPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONDAMAGEPAYMENTS
--------------------------------------------------------

  ALTER TABLE "CONDAMAGEPAYMENTS" ADD CONSTRAINT "FK_CONDAMAGEPAYMENTS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONEXECSTEP
--------------------------------------------------------

  ALTER TABLE "CONEXECSTEP" ADD CONSTRAINT "FK_CONEXECSTEP_CONBUDGETLINE" FOREIGN KEY ("CONTRACT_ID", "CONTRACTORPOS", "BUDGETLINEPOS")
	  REFERENCES "CONBUDGETLINE" ("CONTRACT_ID", "CONTRACTORPOS", "POS") ;
 
  ALTER TABLE "CONEXECSTEP" ADD CONSTRAINT "FK_CONEXECSTEP_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONEXECSTEP2
--------------------------------------------------------

  ALTER TABLE "CONEXECSTEP2" ADD CONSTRAINT "FK_CONEXECSTEP2_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONFCONCLUSIONCONTRACT
--------------------------------------------------------

  ALTER TABLE "CONFCONCLUSIONCONTRACT" ADD CONSTRAINT "FK_CCCONTRACT_PLACINGWAY" FOREIGN KEY ("PLACINGWAY_ID")
	  REFERENCES "PLACINGWAY" ("ID") ;
 
  ALTER TABLE "CONFCONCLUSIONCONTRACT" ADD CONSTRAINT "FK_CCCONTRACT_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONGOODS
--------------------------------------------------------

  ALTER TABLE "CONGOODS" ADD CONSTRAINT "FK_CONGOODS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONGOODS" ADD CONSTRAINT "FK_CONGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "CONGOODS" ADD CONSTRAINT "FK_CONGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "CONGOODS" ADD CONSTRAINT "FK_CONGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CONGOODSPROP" ADD CONSTRAINT "FK_CONGOODSPROP_CONGOODS" FOREIGN KEY ("CONTRACT_ID", "GOODSPOS")
	  REFERENCES "CONGOODS" ("CONTRACT_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CONLOT
--------------------------------------------------------

  ALTER TABLE "CONLOT" ADD CONSTRAINT "FK_CONTRACTLOT_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONORGSTATUS
--------------------------------------------------------

  ALTER TABLE "CONORGSTATUS" ADD CONSTRAINT "FK_CONORGSTATUS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONORGSTATUS" ADD CONSTRAINT "FK_CONORGSTATUS_ORGSTATUS" FOREIGN KEY ("ORGSTATUS_ID")
	  REFERENCES "ORGSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONPAYFACT
--------------------------------------------------------

  ALTER TABLE "CONPAYFACT" ADD CONSTRAINT "FK_CONPAYFACT_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CONPAYSHEDULE" ADD CONSTRAINT "FK_CONPAYSHEDULE_CONBUDGETLINE" FOREIGN KEY ("CONTRACT_ID", "CONTRACTORPOS", "BUDGETLINEPOS")
	  REFERENCES "CONBUDGETLINE" ("CONTRACT_ID", "CONTRACTORPOS", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CONPLACE
--------------------------------------------------------

  ALTER TABLE "CONPLACE" ADD CONSTRAINT "FK_CONPLACE_CONTRACTDOC" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONPLACE" ADD CONSTRAINT "FK_CONPLACE_EXECSTEP2POS" FOREIGN KEY ("CONTRACT_ID", "EXECSTEP2POS")
	  REFERENCES "CONEXECSTEP2" ("CONTRACT_ID", "POS") ;
 
  ALTER TABLE "CONPLACE" ADD CONSTRAINT "FK_CONPLACE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONPLACE" ADD CONSTRAINT "FK_CONPLACE_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table CONPRODUCTSCHANGEDOCS
--------------------------------------------------------

  ALTER TABLE "CONPRODUCTSCHANGEDOCS" ADD CONSTRAINT "FK_CONPRODUCTSCHANGEDOCS_CONTR" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONREFUSALFACT
--------------------------------------------------------

  ALTER TABLE "CONREFUSALFACT" ADD CONSTRAINT "FK_CONREFUSALFACT_CONTRACTDOC" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
 
  ALTER TABLE "CONREFUSALFACT" ADD CONSTRAINT "FK_CONREFUSALFACT_REFFACTFNDTN" FOREIGN KEY ("REFUSALFACTFOUNDATION_ID")
	  REFERENCES "REFUSALFACTFOUNDATION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONSOLIDDOC
--------------------------------------------------------

  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "CONSOLIDDOC" ADD CONSTRAINT "FK_CONSOLIDDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "CONSUPPLYSHEDULE" ADD CONSTRAINT "FK_CONSUPPLYSHEDULE_CONGOODS" FOREIGN KEY ("CONTRACT_ID", "GOODSPOS")
	  REFERENCES "CONGOODS" ("CONTRACT_ID", "POS") ;
 
  ALTER TABLE "CONSUPPLYSHEDULE" ADD CONSTRAINT "FK_CONSUPPLYSHEDULE_CONPLACE" FOREIGN KEY ("CONTRACT_ID", "PLACEPOS")
	  REFERENCES "CONPLACE" ("CONTRACT_ID", "POS") ;
 
  ALTER TABLE "CONSUPPLYSHEDULE" ADD CONSTRAINT "FK_CONSUPPLYSHEDULE_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "CONTRACTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTCARDDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_CON" FOREIGN KEY ("CON_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CONTRACTCARDDOC" ADD CONSTRAINT "FK_CONTRCARDDOC_ETPID" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_BANKGUARANTEE" FOREIGN KEY ("GRNTREGNUMBER_ID")
	  REFERENCES "BANKGUARANTEEDOC" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CCCONTRACT" FOREIGN KEY ("CONFCONCCONTRACT_ID")
	  REFERENCES "CONFCONCLUSIONCONTRACT" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CON" FOREIGN KEY ("CON_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONACC" FOREIGN KEY ("CONACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONCOUNTRY" FOREIGN KEY ("CONCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONEXECUTER" FOREIGN KEY ("CONEXECUTER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONEXECUTERACC" FOREIGN KEY ("CONEXECUTERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONSTRUCTION" FOREIGN KEY ("CONSTRUCTION_ID")
	  REFERENCES "CONSTRUCTION" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONTERCODE" FOREIGN KEY ("CONCOUNTRY_ID", "CONTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CONTYPE" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_MODIFICATION" FOREIGN KEY ("MODIFICATIONREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_MODIFICATIONDOC" FOREIGN KEY ("MODIFICATIONREASONDOC_ID")
	  REFERENCES "CONTRACTREASON_DOCLINES" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_OFRREQREASON" FOREIGN KEY ("OFRREQREASON_ID")
	  REFERENCES "OFRREQREASON" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_OKTMO" FOREIGN KEY ("CONOKTMO_ID")
	  REFERENCES "OKTMO" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_OOSPURCHASE" FOREIGN KEY ("OOSPURCHASEORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_PRICECHANGE" FOREIGN KEY ("PRICECHANGEREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_PROPFORM" FOREIGN KEY ("CONPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACTDOC_SINGLECUSTOMER" FOREIGN KEY ("SINGLECUSTOMERREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "CONTRACTDOC" ADD CONSTRAINT "FK_CONTRACT_SINGLECUSTOMERDOC" FOREIGN KEY ("SINGLECUSTOMERREASONDOC_ID")
	  REFERENCES "CONTRACTREASON_DOCLINES" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTEXECDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_CUST" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "CONTRACTEXECDOC" ADD CONSTRAINT "FK_CONTREXECDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTOR
--------------------------------------------------------

  ALTER TABLE "CONTRACTOR" ADD CONSTRAINT "FK_CONTRACTOR_INSPECTOR" FOREIGN KEY ("INSPECTOR_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "CONTRACTOR" ADD CONSTRAINT "PK_CONTRACTOR_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTREASON_DOCLINES
--------------------------------------------------------

  ALTER TABLE "CONTRACTREASON_DOCLINES" ADD CONSTRAINT "FK_CONREASONLINE_CONREASON" FOREIGN KEY ("CONTRACTREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTRACTTEMPLATEDOC
--------------------------------------------------------

  ALTER TABLE "CONTRACTTEMPLATEDOC" ADD CONSTRAINT "FK_CONTEMPDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CONTRACTTEMPLATEDOC" ADD CONSTRAINT "FK_CONTEMPDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "CONTRACTTEMPLATEDOC" ADD CONSTRAINT "FK_CONTEMPDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "CONTRACTTEMPLATEDOC" ADD CONSTRAINT "FK_CONTEMPDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CONTYPEATTACH
--------------------------------------------------------

  ALTER TABLE "CONTYPEATTACH" ADD CONSTRAINT "FK_CONTYPEATTACH" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CRLFILE
--------------------------------------------------------

  ALTER TABLE "CRLFILE" ADD CONSTRAINT "FK_CRLFILE_CRLPOINT" FOREIGN KEY ("CRLPOINT_ID")
	  REFERENCES "CRLPOINT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table CSGOODS
--------------------------------------------------------

  ALTER TABLE "CSGOODS" ADD CONSTRAINT "FK_CSGOODS_CONSOLIDDOC" FOREIGN KEY ("CONSOLID_ID")
	  REFERENCES "CONSOLIDDOC" ("ID") ;
 
  ALTER TABLE "CSGOODS" ADD CONSTRAINT "FK_CSGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "CSGOODS" ADD CONSTRAINT "FK_CSGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "CSGOODS" ADD CONSTRAINT "FK_CSGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table CSGOODSPROP
--------------------------------------------------------

  ALTER TABLE "CSGOODSPROP" ADD CONSTRAINT "FK_CSGOODSPROP_CSGOODS" FOREIGN KEY ("CONSOLID_ID", "GOODSPOS")
	  REFERENCES "CSGOODS" ("CONSOLID_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table CURHISTORY
--------------------------------------------------------

  ALTER TABLE "CURHISTORY" ADD CONSTRAINT "FK_CURHISTORY_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "CURHISTORY" ADD CONSTRAINT "FK_CURHISTORY_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table DECREASON
--------------------------------------------------------

  ALTER TABLE "DECREASON" ADD CONSTRAINT "FK_DECREASON_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "DECREASON" ADD CONSTRAINT "FK_DECREASON_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DESCRIPTION
--------------------------------------------------------

  ALTER TABLE "DESCRIPTION" ADD CONSTRAINT "FK_DESCRIPTION_DESCGROUP" FOREIGN KEY ("DESCGROUP_ID")
	  REFERENCES "DESCGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DIGEST
--------------------------------------------------------

  ALTER TABLE "DIGEST" ADD CONSTRAINT "FK_DIGEST_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "DIGEST" ADD CONSTRAINT "FK_DIGEST_FGROUP" FOREIGN KEY ("FGROUP_ID")
	  REFERENCES "FGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DIGESTSIGN
--------------------------------------------------------

  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_DIGEST" FOREIGN KEY ("DIGEST_ID")
	  REFERENCES "DIGEST" ("ID") ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_DOCATTACHEX" FOREIGN KEY ("DOCATTACHEX_ID")
	  REFERENCES "DOCATTACHEX" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_IMPORTUSER_ID" FOREIGN KEY ("IMPORTUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_SIGNFORMAT" FOREIGN KEY ("SIGNVERSION")
	  REFERENCES "SIGNFORMAT" ("ID") ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
 
  ALTER TABLE "DIGESTSIGN" ADD CONSTRAINT "FK_DIGESTSIGN_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCACTION
--------------------------------------------------------

  ALTER TABLE "DOCACTION" ADD CONSTRAINT "FK_DOCACTION_CLIENTOBJECT" FOREIGN KEY ("CLIENTOBJECT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "DOCACTION" ADD CONSTRAINT "FK_DOCACTION_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCACTION" ADD CONSTRAINT "FK_DOCACTION_DOCSTATUS" FOREIGN KEY ("DOCUMENTCLASS_ID", "DISPSTATUS_ID")
	  REFERENCES "DOCSTATUS" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") ;
 
  ALTER TABLE "DOCACTION" ADD CONSTRAINT "FK_DOCACTION_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCATTACH
--------------------------------------------------------

  ALTER TABLE "DOCATTACH" ADD CONSTRAINT "FK_DOCATTACH_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table DOCATTACHEX
--------------------------------------------------------

  ALTER TABLE "DOCATTACHEX" ADD CONSTRAINT "FK_DOCATTACHEX_DOC" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DOCATTACHEX" ADD CONSTRAINT "FK_FMTCONVERTER_CONVERTER_ID" FOREIGN KEY ("CONVERTER_ID")
	  REFERENCES "FORMATCONVERTER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCCLASS_DISPSTATUS
--------------------------------------------------------

  ALTER TABLE "DOCCLASS_DISPSTATUS" ADD CONSTRAINT "FK_DOCCL_DISPST_DISPST" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCCLASS_DISPSTATUS" ADD CONSTRAINT "FK_DOCCL_DISPST_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "DOCCLASS_DISPSTATUS" ADD CONSTRAINT "FK_DOCCL_DISPST_PARDISPST" FOREIGN KEY ("PARDISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCCOMMENT
--------------------------------------------------------

  ALTER TABLE "DOCCOMMENT" ADD CONSTRAINT "FK_DOCCOMMENT_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DOCCOMMENT" ADD CONSTRAINT "FK_DOCCOMMENT_SYSUSER" FOREIGN KEY ("USER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCCUSTOMFIELDS
--------------------------------------------------------

  ALTER TABLE "DOCCUSTOMFIELDS" ADD CONSTRAINT "FK_DOCCUSTOMFIELDS_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCCUSTOMFIELDVALUES
--------------------------------------------------------

  ALTER TABLE "DOCCUSTOMFIELDVALUES" ADD CONSTRAINT "FK_DOCCSTMFLDVALUES_CUSTFLDID" FOREIGN KEY ("CUSTFIELD_ID")
	  REFERENCES "DOCCUSTOMFIELDS" ("ID") ;
 
  ALTER TABLE "DOCCUSTOMFIELDVALUES" ADD CONSTRAINT "FK_DOCCSTMFLDVALUES_DOCID" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCDIGESTREQUISITES
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTREQUISITES" ADD CONSTRAINT "FK_DOCDIGREQS_DOCDIGRULE" FOREIGN KEY ("DOCDIGESTRULE_ID")
	  REFERENCES "DOCDIGESTRULE" ("ID") ;
 
  ALTER TABLE "DOCDIGESTREQUISITES" ADD CONSTRAINT "FK_DOCDIGREQS_RULEREQUISITE" FOREIGN KEY ("RULEREQUISITE_ID")
	  REFERENCES "RULEREQUISITE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCDIGESTROLES
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTROLES" ADD CONSTRAINT "FK_DOCDIGESTROLES_DOCACTION" FOREIGN KEY ("DOCACTION_ID")
	  REFERENCES "DOCACTION" ("ID") ON DELETE SET NULL ;
 
  ALTER TABLE "DOCDIGESTROLES" ADD CONSTRAINT "FK_DOCDIGROLES_DOCDIGRULE" FOREIGN KEY ("DOCDIGESTRULE_ID")
	  REFERENCES "DOCDIGESTRULE" ("ID") ;
 
  ALTER TABLE "DOCDIGESTROLES" ADD CONSTRAINT "FK_DOCDIGROLES_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCDIGESTRULE
--------------------------------------------------------

  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "FK_DDS_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "FK_DDS_OIDREF" FOREIGN KEY ("OIDREF_ID")
	  REFERENCES "OIDREF" ("ID") ;
 
  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "FK_DOCDIGESTRULE_FGROUPHEADER" FOREIGN KEY ("FGROUPHEADER_ID")
	  REFERENCES "FGROUPHEADER" ("ID") ;
 
  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "FK_DOCDIGESTRULE_RULESCRIPT" FOREIGN KEY ("RULESCRIPT_ID")
	  REFERENCES "RULESCRIPT" ("ID") ;
 
  ALTER TABLE "DOCDIGESTRULE" ADD CONSTRAINT "FK_DODIGESTULE_PARDISPSTATUS" FOREIGN KEY ("PARDISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCEVENT
--------------------------------------------------------

  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "FK_DOCEVENT_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "FK_DOCEVENT_DOCSTATUS" FOREIGN KEY ("DOCUMENTCLASS_ID", "DISPSTATUS_ID")
	  REFERENCES "DOCSTATUS" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "FK_DOCEVENT_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "FK_DOCEVENT_PROCTREE" FOREIGN KEY ("PROCTREE_ID")
	  REFERENCES "PROCTREE" ("ID") ;
 
  ALTER TABLE "DOCEVENT" ADD CONSTRAINT "FK_DOCEVENT_USERPROCTREE" FOREIGN KEY ("USERPROCTREE_ID")
	  REFERENCES "PROCTREE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCEVERRLOG
--------------------------------------------------------

  ALTER TABLE "DOCEVERRLOG" ADD CONSTRAINT "FK_DOCEVERRLOG_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCEVERRLOG" ADD CONSTRAINT "FK_DOCEVERRLOG_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "DOCEVERRLOG" ADD CONSTRAINT "FK_DOCEVERRLOG_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCFLAG
--------------------------------------------------------

  ALTER TABLE "DOCFLAG" ADD CONSTRAINT "FK_DOCFLAG_DOCFLAGTYPE" FOREIGN KEY ("DOCFLAGTYPE_ID")
	  REFERENCES "DOCFLAGTYPE" ("ID") ;
 
  ALTER TABLE "DOCFLAG" ADD CONSTRAINT "FK_DOCFLAG_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCFLAGTYPE
--------------------------------------------------------

  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "FK_DOCFLAGTYPE_CATEGORY" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "DOCFLAGCATEGORY" ("ID") ;
 
  ALTER TABLE "DOCFLAGTYPE" ADD CONSTRAINT "FK_DOCFLAGTYPE_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCGROUP
--------------------------------------------------------

  ALTER TABLE "DOCGROUP" ADD CONSTRAINT "FK_DOCGROUP_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "DOCGROUP" ADD CONSTRAINT "FK_DOCGROUP_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "DOCGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCJOURNAL
--------------------------------------------------------

  ALTER TABLE "DOCJOURNAL" ADD CONSTRAINT "FK_DOCJOURNAL_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCJOURNAL" ADD CONSTRAINT "FK_DOCJOURNAL_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DOCJOURNAL" ADD CONSTRAINT "FK_DOCJOURNAL_OLD_DISPSTATUS" FOREIGN KEY ("OLD_DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCREQ
--------------------------------------------------------

  ALTER TABLE "DOCREQ" ADD CONSTRAINT "FK_DOCREQ_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "DOCREQ" ADD CONSTRAINT "FK_DOCREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCRETENTION
--------------------------------------------------------

  ALTER TABLE "DOCRETENTION" ADD CONSTRAINT "FK_DOCRETENTIONR_DOCACTION" FOREIGN KEY ("DOCACTION_ID")
	  REFERENCES "DOCACTION" ("ID") ;
 
  ALTER TABLE "DOCRETENTION" ADD CONSTRAINT "FK_DOCRETENTION_DOCSTATUS" FOREIGN KEY ("DOCSTATUS_ID")
	  REFERENCES "DOCSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCRETENTIONSTATITEMS
--------------------------------------------------------

  ALTER TABLE "DOCRETENTIONSTATITEMS" ADD CONSTRAINT "FK_DOCRESTATITMS_DOC" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "DOCRETENTIONSTATITEMS" ADD CONSTRAINT "FK_DOCRESTATITMS_RET" FOREIGN KEY ("DOCRETENTION_ID")
	  REFERENCES "DOCRETENTION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCRETENTIONSTATUS
--------------------------------------------------------

  ALTER TABLE "DOCRETENTIONSTATUS" ADD CONSTRAINT "FK_DOCRESTATUS_DOC" FOREIGN KEY ("ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "DOCRETENTIONSTATUS" ADD CONSTRAINT "FK_DOCRESTAT_DOCRET" FOREIGN KEY ("DOCRETENTION_ID")
	  REFERENCES "DOCRETENTION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCSELECT
--------------------------------------------------------

  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "FK_DOCSELECT_CMPCOMPETITOR" FOREIGN KEY ("ORDER_ID", "COMPETITORPOS")
	  REFERENCES "CMPCOMPETITOR" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "DOCSELECT" ADD CONSTRAINT "FK_DOCSELECT_CMPDOCREQ" FOREIGN KEY ("ORDER_ID", "DOCREQPOS")
	  REFERENCES "CMPDOCREQ" ("ORDER_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table DOCSITELINK
--------------------------------------------------------

  ALTER TABLE "DOCSITELINK" ADD CONSTRAINT "FK_DOCSITELINK_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table DOCSTATUS
--------------------------------------------------------

  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "FK_DOCSTATUS_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "FK_DOCSTATUS_DOCSTATUS" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "DOCSTATUS" ("ID") ;
 
  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "FK_DOCSTATUS_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "FK_DOCSTATUS_PROCTREE" FOREIGN KEY ("PROCTREE_ID")
	  REFERENCES "PROCTREE" ("ID") ;
 
  ALTER TABLE "DOCSTATUS" ADD CONSTRAINT "FK_DOCSTATUS_USERPROCTREE" FOREIGN KEY ("USERPROCTREE_ID")
	  REFERENCES "PROCTREE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCUMENT
--------------------------------------------------------

  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_PARDISPSTATUS" FOREIGN KEY ("PARDISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "DOCUMENT" ADD CONSTRAINT "FK_DOCUMENT_SYSUSER" FOREIGN KEY ("AUTHOR_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCUMENTBLOCKINFO
--------------------------------------------------------

  ALTER TABLE "DOCUMENTBLOCKINFO" ADD CONSTRAINT "FK_DOCUMENTBLOCKINFO_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "DOCUMENTBLOCKINFO" ADD CONSTRAINT "FK_DOCUMENTBLOCKINFO_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table DOCUMENTCLASS
--------------------------------------------------------

  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_DOCPRINTER" FOREIGN KEY ("DOCPRINTER_ID")
	  REFERENCES "SERVERPROCESSOR" ("ID") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_DOCUMENT" FOREIGN KEY ("CLIENTDOCUMENT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_MODULE" FOREIGN KEY ("CLIENTMODULE_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_NUMGENERATOR" FOREIGN KEY ("NUMGENERATOR_ID")
	  REFERENCES "NUMGENERATOR" ("ID") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_PRINT" FOREIGN KEY ("PRINTCLIENTOBJECT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_SERVERACTION" FOREIGN KEY ("DOCPRINTER_ID", "PRINTER_ACTION")
	  REFERENCES "SERVERACTION" ("SERVERPROCESSOR_ID", "ACTION_NAME") ;
 
  ALTER TABLE "DOCUMENTCLASS" ADD CONSTRAINT "FK_DOCUMENTCLASS_SERVERPROC" FOREIGN KEY ("SERVERPROCESSOR_ID")
	  REFERENCES "SERVERPROCESSOR" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCUMENTREPORTS
--------------------------------------------------------

  ALTER TABLE "DOCUMENTREPORTS" ADD CONSTRAINT "FK_DOCREP_DOCPRINTER" FOREIGN KEY ("DOCPRINTER_ID")
	  REFERENCES "SERVERPROCESSOR" ("ID") ;
 
  ALTER TABLE "DOCUMENTREPORTS" ADD CONSTRAINT "FK_DOCREP_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOCWEBLINK
--------------------------------------------------------

  ALTER TABLE "DOCWEBLINK" ADD CONSTRAINT "FK_DOCWEBLINK_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table DOMEN
--------------------------------------------------------

  ALTER TABLE "DOMEN" ADD CONSTRAINT "FK_DOMEN_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "DOMEN" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table EQUALITYCODES
--------------------------------------------------------

  ALTER TABLE "EQUALITYCODES" ADD CONSTRAINT "FK_EQUALITYCODES_EQUALITY" FOREIGN KEY ("EQUALITY_ID")
	  REFERENCES "EQUALITY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ESCHECKRULE
--------------------------------------------------------

  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "FK_ESCHECKRULE_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "FK_ESCHECKRULE_FGROUPHEADER" FOREIGN KEY ("FGROUPHEADER_ID")
	  REFERENCES "FGROUPHEADER" ("ID") ;
 
  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "FK_ESCHECKRULE_PARDISPSTATUS" FOREIGN KEY ("PARDISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ESCHECKRULE" ADD CONSTRAINT "FK_ESCHECKRULE_SCRIPT" FOREIGN KEY ("RULESCRIPT_ID")
	  REFERENCES "RULESCRIPT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ESCHECKRULEREQUISITES
--------------------------------------------------------

  ALTER TABLE "ESCHECKRULEREQUISITES" ADD CONSTRAINT "FK_ECHKRULREQS_ESCHECKRULE" FOREIGN KEY ("ESCHECKRULE_ID")
	  REFERENCES "ESCHECKRULE" ("ID") ;
 
  ALTER TABLE "ESCHECKRULEREQUISITES" ADD CONSTRAINT "FK_ECHKRULREQS_RULEREQUISTE" FOREIGN KEY ("RULEREQUISITE_ID")
	  REFERENCES "RULEREQUISITE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ESCRROLE
--------------------------------------------------------

  ALTER TABLE "ESCRROLE" ADD CONSTRAINT "FK_ESCRROLE_ESCHECKRULE" FOREIGN KEY ("ESCHECKRULE_ID")
	  REFERENCES "ESCHECKRULE" ("ID") ;
 
  ALTER TABLE "ESCRROLE" ADD CONSTRAINT "FK_ESCRROLE_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ESTIMATE
--------------------------------------------------------

  ALTER TABLE "ESTIMATE" ADD CONSTRAINT "FK_ESTIMATE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "ESTIMATE" ADD CONSTRAINT "FK_ESTIMATE_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ETP
--------------------------------------------------------

  ALTER TABLE "ETP" ADD CONSTRAINT "FK_ETP_MSGSITE" FOREIGN KEY ("MSGSITE_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "ETP" ADD CONSTRAINT "FK_ETP_OOSETPCODE" FOREIGN KEY ("OOSETPCODE")
	  REFERENCES "ETPTYPE" ("CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table ETPATTACH
--------------------------------------------------------

  ALTER TABLE "ETPATTACH" ADD CONSTRAINT "FK_ETPATTACH_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table EXCHANGECLASSES
--------------------------------------------------------

  ALTER TABLE "EXCHANGECLASSES" ADD CONSTRAINT "FK_EXCHANGECLASSES_CLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "EXCHANGECLASSES" ADD CONSTRAINT "FK_EXCHANGECLASSES_SCHEME" FOREIGN KEY ("DOCEXCHANGESCHEME_ID")
	  REFERENCES "DOCEXCHANGESCHEME" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FACTDOC
--------------------------------------------------------

  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_EXPORT_PARENT" FOREIGN KEY ("EXPORT_PARENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_FACTDOCTYPE" FOREIGN KEY ("TYPENAME")
	  REFERENCES "FACTDOCTYPE" ("NAME") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_VENDER" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "FACTDOC" ADD CONSTRAINT "FK_FACTDOC_VENDORCOUNTRY" FOREIGN KEY ("VENDORCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FCTGOODS
--------------------------------------------------------

  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "FK_FCTGOODS_FACTDOC" FOREIGN KEY ("FACT_ID")
	  REFERENCES "FACTDOC" ("ID") ;
 
  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "FK_FCTGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "FK_FCTGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "FCTGOODS" ADD CONSTRAINT "FK_FCTGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FCTGOODSPROP
--------------------------------------------------------

  ALTER TABLE "FCTGOODSPROP" ADD CONSTRAINT "FK_FCTGOODSPROP_FCTGOODS" FOREIGN KEY ("FACT_ID", "GOODSPOS")
	  REFERENCES "FCTGOODS" ("FACT_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table FGROUP
--------------------------------------------------------

  ALTER TABLE "FGROUP" ADD CONSTRAINT "FK_FGROUP_FGROUPHEADER" FOREIGN KEY ("FGROUPHEADER_ID")
	  REFERENCES "FGROUPHEADER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FGROUPATTACH
--------------------------------------------------------

  ALTER TABLE "FGROUPATTACH" ADD CONSTRAINT "FK_FGROUPATTACH_DOCATTACHEX" FOREIGN KEY ("DOCATTACH_ID")
	  REFERENCES "DOCATTACHEX" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "FGROUPATTACH" ADD CONSTRAINT "FK_FGROUPATTACH_FGROUP" FOREIGN KEY ("FGROUP_ID")
	  REFERENCES "FGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FINSRCSATISFY
--------------------------------------------------------

  ALTER TABLE "FINSRCSATISFY" ADD CONSTRAINT "FINSRCNEXTYEAR" FOREIGN KEY ("FINSRCNEXTYEARID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "FINSRCSATISFY" ADD CONSTRAINT "FINSRCSELECTEDYEAR" FOREIGN KEY ("FINSRCSELECTEDYEARID")
	  REFERENCES "FINSRC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCDOCUMENT
--------------------------------------------------------

  ALTER TABLE "FUNCDOCUMENT" ADD CONSTRAINT "FK_FUNCDOCUMENT_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCMODULE
--------------------------------------------------------

  ALTER TABLE "FUNCMODULE" ADD CONSTRAINT "FK_FUNCMODULE_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCOBJECT
--------------------------------------------------------

  ALTER TABLE "FUNCOBJECT" ADD CONSTRAINT "FK_FUNCOBJECT_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCPROCESSOR
--------------------------------------------------------

  ALTER TABLE "FUNCPROCESSOR" ADD CONSTRAINT "FK_FUNCPROCESSOR_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCPROVIDER
--------------------------------------------------------

  ALTER TABLE "FUNCPROVIDER" ADD CONSTRAINT "FK_FUNCPROVIDER_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCREFERENCE
--------------------------------------------------------

  ALTER TABLE "FUNCREFERENCE" ADD CONSTRAINT "FK_FUNCREFERENCE_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FUNCUNIT
--------------------------------------------------------

  ALTER TABLE "FUNCUNIT" ADD CONSTRAINT "FK_FUNCUNIT_FUNUNIT" FOREIGN KEY ("FUNUNIT_ID")
	  REFERENCES "FUNUNIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table FUNUNIT
--------------------------------------------------------

  ALTER TABLE "FUNUNIT" ADD CONSTRAINT "FK_FUNUNIT_FUNCAT" FOREIGN KEY ("FUNCAT_ID")
	  REFERENCES "FUNCAT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GCREGISTER
--------------------------------------------------------

  ALTER TABLE "GCREGISTER" ADD CONSTRAINT "FK_GCREGISTER_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODS
--------------------------------------------------------

  ALTER TABLE "GOODS" ADD CONSTRAINT "FK_GOODS_GROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ;
 
  ALTER TABLE "GOODS" ADD CONSTRAINT "FK_GOODS_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSBANGOODSOKPD
--------------------------------------------------------

  ALTER TABLE "GOODSBANGOODSOKPD" ADD CONSTRAINT "FK_GBGO_GOODSBAN_ID" FOREIGN KEY ("GOODSBAN_ID")
	  REFERENCES "GOODSBAN" ("ID") ;
 
  ALTER TABLE "GOODSBANGOODSOKPD" ADD CONSTRAINT "FK_GBGO_GOODSOKPD_ID" FOREIGN KEY ("GOODSOKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSBANPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSBANPURCHASEMODE" ADD CONSTRAINT "FK_GBPM_GOODSBAN_ID" FOREIGN KEY ("GOODSBAN_ID")
	  REFERENCES "GOODSBAN" ("ID") ;
 
  ALTER TABLE "GOODSBANPURCHASEMODE" ADD CONSTRAINT "FK_GBPM_PMODE_ID" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSGROUP
--------------------------------------------------------

  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "FK_GOODSGROUP_OKDP" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "FK_GOODSGROUP_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "FK_GOODSGROUP_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "GOODSGROUP" ("ID") ;
 
  ALTER TABLE "GOODSGROUP" ADD CONSTRAINT "FK_GOODSGROUP_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSGROUPDOCDETAIL
--------------------------------------------------------

  ALTER TABLE "GOODSGROUPDOCDETAIL" ADD CONSTRAINT "FK_GOODSDOCDETAIL_DOC" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "GOODSGROUPDOCDETAIL" ADD CONSTRAINT "FK_GOODSDOCDETAIL_GOODSGROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ON DELETE CASCADE ;
 
  ALTER TABLE "GOODSGROUPDOCDETAIL" ADD CONSTRAINT "FK_GOODSDOCDETAIL_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSGROUPPURCHASEMODE" ADD CONSTRAINT "FK_GPM_GOODSGROUP" FOREIGN KEY ("GOODSGROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "GOODSGROUPPURCHASEMODE" ADD CONSTRAINT "FK_GPM_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSGROUP_TREE
--------------------------------------------------------

  ALTER TABLE "GOODSGROUP_TREE" ADD CONSTRAINT "FK_TREE_GOODSGROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKDP
--------------------------------------------------------

  ALTER TABLE "GOODSOKDP" ADD CONSTRAINT "FK_GOODSOKDP_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "GOODSOKDP" ADD CONSTRAINT "FK_GOODSOKDP_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "GOODSOKDP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKDPCOUNTRYPREF
--------------------------------------------------------

  ALTER TABLE "GOODSOKDPCOUNTRYPREF" ADD CONSTRAINT "FK_GOODSOKDPPREF_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "GOODSOKDPCOUNTRYPREF" ADD CONSTRAINT "FK_GOODSOKDPPREF_OKDP" FOREIGN KEY ("GOODSOKDP_ID")
	  REFERENCES "GOODSOKDP" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSOKDPPURCHASEMODE" ADD CONSTRAINT "FK_GOODSOKDP_OKDP" FOREIGN KEY ("GOODSOKDP_ID")
	  REFERENCES "GOODSOKDP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "GOODSOKDPPURCHASEMODE" ADD CONSTRAINT "FK_GOODSOKDP_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKPD
--------------------------------------------------------

  ALTER TABLE "GOODSOKPD" ADD CONSTRAINT "FK_GOODSOKPD_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKPDCOUNTRYPREF
--------------------------------------------------------

  ALTER TABLE "GOODSOKPDCOUNTRYPREF" ADD CONSTRAINT "FK_GOODSOKPDPREF_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "GOODSOKPDCOUNTRYPREF" ADD CONSTRAINT "FK_GOODSOKPDPREF_OKPD" FOREIGN KEY ("GOODSOKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  ALTER TABLE "GOODSOKPDPURCHASEMODE" ADD CONSTRAINT "FK_GOODSOKPD_OKPD" FOREIGN KEY ("GOODSOKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "GOODSOKPDPURCHASEMODE" ADD CONSTRAINT "FK_GOODSOKPD_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSOKVED
--------------------------------------------------------

  ALTER TABLE "GOODSOKVED" ADD CONSTRAINT "FK_GOODSOKVED_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSPRICE
--------------------------------------------------------

  ALTER TABLE "GOODSPRICE" ADD CONSTRAINT "FK_GOODSPRICE_GOODS" FOREIGN KEY ("GOODS_ID")
	  REFERENCES "GOODS" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GOODSPROP
--------------------------------------------------------

  ALTER TABLE "GOODSPROP" ADD CONSTRAINT "FK_GOODSPROP_GOODS" FOREIGN KEY ("GOODS_ID")
	  REFERENCES "GOODS" ("ID") ;
 
  ALTER TABLE "GOODSPROP" ADD CONSTRAINT "FK_GOODSPROP_GROUPPROP" FOREIGN KEY ("GROUP_ID", "SEQORDER")
	  REFERENCES "GROUPPROP" ("GROUP_ID", "SEQORDER") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table GRANTINVESTMENT
--------------------------------------------------------

  ALTER TABLE "GRANTINVESTMENT" ADD CONSTRAINT "FK_GRANTINVESTMENT_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "GRANTINVESTMENT" ADD CONSTRAINT "FK_GRANTINVESTMENT_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GROUPPROP
--------------------------------------------------------

  ALTER TABLE "GROUPPROP" ADD CONSTRAINT "FK_GROUPPROP_GROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ;
 
  ALTER TABLE "GROUPPROP" ADD CONSTRAINT "FK_GROUPPROP_PROPTYPE" FOREIGN KEY ("PROPTYPE_ID")
	  REFERENCES "PROPTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GROUPPROPVALUE
--------------------------------------------------------

  ALTER TABLE "GROUPPROPVALUE" ADD CONSTRAINT "FK_GROUPPROPVALUE_GROUPPROP" FOREIGN KEY ("GROUPPROP_ID")
	  REFERENCES "GROUPPROP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table GROUPUNIT
--------------------------------------------------------

  ALTER TABLE "GROUPUNIT" ADD CONSTRAINT "FK_GOODSGROUP_GROUPUNIT" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "GROUPUNIT" ADD CONSTRAINT "FK_GROUPUNIT_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table HISTORYMODIFY
--------------------------------------------------------

  ALTER TABLE "HISTORYMODIFY" ADD CONSTRAINT "FK_HISTORYMODIFY_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INDUSTRYCODE
--------------------------------------------------------

  ALTER TABLE "INDUSTRYCODE" ADD CONSTRAINT "FK_INDUSTRYCODE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "INDUSTRYCODE" ADD CONSTRAINT "FK_INDUSTRYCODE_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "INDUSTRYCODE" ADD CONSTRAINT "FK_INDUSTRYCODE_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INSTITUTIONLINE
--------------------------------------------------------

  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "FK_INSTITUTIONLINE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "FK_INSTITUTIONLINE_GI" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "FK_INSTITUTIONLINE_IC" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "INSTITUTIONLINE" ADD CONSTRAINT "FK_INSTITUTIONLINE_ORG" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INTERBUDGET
--------------------------------------------------------

  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "FK_INTERBUDGET_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "INTERBUDGET" ADD CONSTRAINT "FK_INTERBUDGET_MSGSITE" FOREIGN KEY ("MSGSITE_ID")
	  REFERENCES "MSGSITE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INVBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBL_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBL_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_INVOICE" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "INVOICEDOC" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_LIABILITY" FOREIGN KEY ("LIABILITYEXPENSE_ID")
	  REFERENCES "LIABILITYEXPENSE" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_ORGACC" FOREIGN KEY ("RECIPIENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "INVBUDGETLINE" ADD CONSTRAINT "FK_INVBUDGETLINE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INVGOODS
--------------------------------------------------------

  ALTER TABLE "INVGOODS" ADD CONSTRAINT "FK_INVGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "INVGOODS" ADD CONSTRAINT "FK_INVGOODS_INVOICE" FOREIGN KEY ("INVOICE_ID")
	  REFERENCES "INVOICEDOC" ("ID") ;
 
  ALTER TABLE "INVGOODS" ADD CONSTRAINT "FK_INVGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "INVGOODS" ADD CONSTRAINT "FK_INVGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table INVGOODSPROP
--------------------------------------------------------

  ALTER TABLE "INVGOODSPROP" ADD CONSTRAINT "FK_INVGOODSPROP_INVGOODS" FOREIGN KEY ("INVOICE_ID", "GOODSPOS")
	  REFERENCES "INVGOODS" ("INVOICE_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table INVOICEDOC
--------------------------------------------------------

  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CON" FOREIGN KEY ("CON_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CONACC" FOREIGN KEY ("CONACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CONEXECUTER" FOREIGN KEY ("CONEXECUTER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CONEXECUTERACC" FOREIGN KEY ("CONEXECUTERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CONTRACTREASON" FOREIGN KEY ("SINGLECUSTOMERREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INVOICEDOC_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "INVOICEDOC" ADD CONSTRAINT "FK_INV_PROPFORMID" FOREIGN KEY ("CONPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table KBKLINEFIT
--------------------------------------------------------

  ALTER TABLE "KBKLINEFIT" ADD CONSTRAINT "FK_KBKLINEFIT_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table KLADR
--------------------------------------------------------

  ALTER TABLE "KLADR" ADD CONSTRAINT "FK_KLADR_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "KLADR" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table KLADRSTREET
--------------------------------------------------------

  ALTER TABLE "KLADRSTREET" ADD CONSTRAINT "FK_KLADRSTREET_KLADR" FOREIGN KEY ("KLADR_ID")
	  REFERENCES "KLADR" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table LEDGER
--------------------------------------------------------

  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_DELIVERYBASIS" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_DESCRIPTION" FOREIGN KEY ("DESCRIPTIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_GOODS" FOREIGN KEY ("GOODS_ID")
	  REFERENCES "GOODS" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_GOODSGROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_OKDP" FOREIGN KEY ("OKDP_ID")
	  REFERENCES "GOODSOKDP" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_ORG_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_ORG_CONTRACTOR" FOREIGN KEY ("CONTRACTOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_ORG_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_PAYCONDITION" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_PLAN2DOC" FOREIGN KEY ("PLAN2DOC_ID")
	  REFERENCES "PLAN2DOC" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "LEDGER" ADD CONSTRAINT "FK_LEDGER_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table LIABILITYCREDENTIAL
--------------------------------------------------------

  ALTER TABLE "LIABILITYCREDENTIAL" ADD CONSTRAINT "FK_LIABILITYCRED_BUDGETSTAGE" FOREIGN KEY ("STAGECODE_ID")
	  REFERENCES "BUDGETSTAGE" ("ID") ;
 
  ALTER TABLE "LIABILITYCREDENTIAL" ADD CONSTRAINT "FK_LIABILITYCRED_LIABILITYGRP" FOREIGN KEY ("LIABILITYGROUP_ID")
	  REFERENCES "LIABILITYGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table LIABILITYEXPENSE
--------------------------------------------------------

  ALTER TABLE "LIABILITYEXPENSE" ADD CONSTRAINT "FK_LIABILITYEXPENSE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "LIABILITYEXPENSE" ADD CONSTRAINT "FK_LIABILITYEXPENSE_CREDENTIAL" FOREIGN KEY ("CREDENTIAL_ID")
	  REFERENCES "LIABILITYCREDENTIAL" ("ID") ;
 
  ALTER TABLE "LIABILITYEXPENSE" ADD CONSTRAINT "FK_LIABILITYEXPENSE_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table LIABILITYEXPENSE_DOCLINES
--------------------------------------------------------

  ALTER TABLE "LIABILITYEXPENSE_DOCLINES" ADD CONSTRAINT "FK_LIABILITY_LINES_EXPENSE" FOREIGN KEY ("LIABILITYEXPENSE_ID")
	  REFERENCES "LIABILITYEXPENSE" ("ID") ;
 
  ALTER TABLE "LIABILITYEXPENSE_DOCLINES" ADD CONSTRAINT "FK_LIABILITY_LINES_ORG" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MAILATTACH
--------------------------------------------------------

  ALTER TABLE "MAILATTACH" ADD CONSTRAINT "FK_MAILATTACH_MAIL" FOREIGN KEY ("MAIL_ID")
	  REFERENCES "MAIL" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  ALTER TABLE "MAILRECEIVERGROUP_RECEIVER" ADD CONSTRAINT "FK_MAILRECEIVERGROUP_GRP" FOREIGN KEY ("MAILRECEIVERGROUP_ID")
	  REFERENCES "MAILRECEIVERGROUP" ("ID") ;
 
  ALTER TABLE "MAILRECEIVERGROUP_RECEIVER" ADD CONSTRAINT "FK_MAILRECEIVERGROUP_USR" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MENUITEM
--------------------------------------------------------

  ALTER TABLE "MENUITEM" ADD CONSTRAINT "FK_MENUITEM_CLIENTOBJECT" FOREIGN KEY ("CLIENTOBJECT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "MENUITEM" ADD CONSTRAINT "FK_MENUITEM_MENU" FOREIGN KEY ("MENU_ID")
	  REFERENCES "MENU" ("ID") ;
 
  ALTER TABLE "MENUITEM" ADD CONSTRAINT "FK_MENUITEM_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "MENUITEM" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MENUITEMWEB
--------------------------------------------------------

  ALTER TABLE "MENUITEMWEB" ADD CONSTRAINT "FK_MENUITEMWEB_MENU" FOREIGN KEY ("MENU_ID")
	  REFERENCES "MENU" ("ID") ;
 
  ALTER TABLE "MENUITEMWEB" ADD CONSTRAINT "FK_MENUITEMWEB_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "MENUITEMWEB" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table METACONSTRAINT
--------------------------------------------------------

  ALTER TABLE "METACONSTRAINT" ADD CONSTRAINT "FK_METACONSTRAINT_METAOBJECT" FOREIGN KEY ("METAOBJECT_ID")
	  REFERENCES "METAOBJECT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MSG
--------------------------------------------------------

  ALTER TABLE "MSG" ADD CONSTRAINT "FK_MSG_RECEIVER" FOREIGN KEY ("RECEIVER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "MSG" ADD CONSTRAINT "FK_MSG_SENDER" FOREIGN KEY ("SENDER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "MSG" ADD CONSTRAINT "FK_MSG_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MSGQUEUE
--------------------------------------------------------

  ALTER TABLE "MSGQUEUE" ADD CONSTRAINT "FK_MSGQUEUE_RECEIVER" FOREIGN KEY ("RECEIVER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "MSGQUEUE" ADD CONSTRAINT "FK_MSGQUEUE_SENDER" FOREIGN KEY ("SENDER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MSGSITE
--------------------------------------------------------

  ALTER TABLE "MSGSITE" ADD CONSTRAINT "FK_MSGSITE_MSGLINKTYPE" FOREIGN KEY ("MSGLINKTYPE_ID")
	  REFERENCES "MSGLINKTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table MSGSITEEXCHANGE
--------------------------------------------------------

  ALTER TABLE "MSGSITEEXCHANGE" ADD CONSTRAINT "FK_MSGSITEEXCHANGE_MSGSITE" FOREIGN KEY ("MSGSITE_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "MSGSITEEXCHANGE" ADD CONSTRAINT "FK_MSGSITEEXCHANGE_SCHEME" FOREIGN KEY ("DOCEXCHANGESCHEME_ID")
	  REFERENCES "DOCEXCHANGESCHEME" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table NOTICEDOC
--------------------------------------------------------

  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_AUTHORORG" FOREIGN KEY ("AUTHORORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEDOC_PUBLISHERORG" FOREIGN KEY ("PUBLISHERORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEORG_DOCGROUP" FOREIGN KEY ("DOCGROUP_ID")
	  REFERENCES "DOCGROUP" ("ID") ;
 
  ALTER TABLE "NOTICEDOC" ADD CONSTRAINT "FK_NOTICEORG_SYSDOCGROUP" FOREIGN KEY ("SYSDOCGROUP_ID")
	  REFERENCES "DOCGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table NOTICEEMAILORG
--------------------------------------------------------

  ALTER TABLE "NOTICEEMAILORG" ADD CONSTRAINT "FK_NOTICEEMAILORG_NOTICEDOC" FOREIGN KEY ("NOTICEDOC_ID")
	  REFERENCES "NOTICEDOC" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "NOTICEEMAILORG" ADD CONSTRAINT "FK_NOTICEEMAILORG_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table NOTICEORG
--------------------------------------------------------

  ALTER TABLE "NOTICEORG" ADD CONSTRAINT "FK_NOTICEORG_NOTICEDOC" FOREIGN KEY ("NOTICEDOC_ID")
	  REFERENCES "NOTICEDOC" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "NOTICEORG" ADD CONSTRAINT "FK_NOTICEORG_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFYMSG
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "FK_NMSG_NOTIFYMSGEVENT" FOREIGN KEY ("NOTIFYMSGEVENT_ID")
	  REFERENCES "NOTIFYMSGEVENT" ("ID") ;
 
  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "FK_NMSG_NOTIFYMSGGROUP" FOREIGN KEY ("NOTIFYMSGGROUP_ID")
	  REFERENCES "NOTIFYMSGGROUP" ("ID") ;
 
  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "FK_NMSG_RECEIVER" FOREIGN KEY ("RECEIVER_ID")
	  REFERENCES "PERSON" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "NOTIFYMSG" ADD CONSTRAINT "FK_NMSG_SENDER" FOREIGN KEY ("SENDER_ID")
	  REFERENCES "PERSON" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFYMSGDOC
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGDOC" ADD CONSTRAINT "FK_NMSGDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "NOTIFYMSGDOC" ADD CONSTRAINT "FK_NMSGDOC_NOTIFYMSGRULE" FOREIGN KEY ("NOTIFYMSGRULE_ID")
	  REFERENCES "NOTIFYMSGRULE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFYMSGRULE
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGRULE" ADD CONSTRAINT "FK_NMSGRULE_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "NOTIFYMSGRULE" ADD CONSTRAINT "FK_NMSGRULE_NOTIFYMSGEVENT" FOREIGN KEY ("NOTIFYMSGEVENT_ID")
	  REFERENCES "NOTIFYMSGEVENT" ("ID") ;
 
  ALTER TABLE "NOTIFYMSGRULE" ADD CONSTRAINT "FK_NMSGRULE_NOTIFYMSGGROUP" FOREIGN KEY ("NOTIFYMSGGROUP_ID")
	  REFERENCES "NOTIFYMSGGROUP" ("ID") ;
 
  ALTER TABLE "NOTIFYMSGRULE" ADD CONSTRAINT "FK_NMSGRULE_SENDER" FOREIGN KEY ("SENDER_ID")
	  REFERENCES "PERSON" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFYMSGRULE_RECEIVER
--------------------------------------------------------

  ALTER TABLE "NOTIFYMSGRULE_RECEIVER" ADD CONSTRAINT "FK_NTFYMSGRLE_RCVR_NTFYMSGRLE" FOREIGN KEY ("NOTIFYMSGRULE_ID")
	  REFERENCES "NOTIFYMSGRULE" ("ID") ;
 
  ALTER TABLE "NOTIFYMSGRULE_RECEIVER" ADD CONSTRAINT "FK_NTFYMSGRLE_RCVR_PERSON" FOREIGN KEY ("PERSON_ID")
	  REFERENCES "PERSON" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table NUMPREFIX
--------------------------------------------------------

  ALTER TABLE "NUMPREFIX" ADD CONSTRAINT "FK_NUMPREFIX_NUMGENERATOR" FOREIGN KEY ("NUMGENERATOR_ID")
	  REFERENCES "NUMGENERATOR" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "NUMPREFIX" ADD CONSTRAINT "FK_NUMPREFIX_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table NUMSEQUENCE
--------------------------------------------------------

  ALTER TABLE "NUMSEQUENCE" ADD CONSTRAINT "FK_NUMSEQUENCE_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table NUMUSAGE
--------------------------------------------------------

  ALTER TABLE "NUMUSAGE" ADD CONSTRAINT "FK_NUMUSAGE_NUMSEQUENCE" FOREIGN KEY ("NUMSEQUENCE_ID")
	  REFERENCES "NUMSEQUENCE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFFERDOC
--------------------------------------------------------

  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_ACC" FOREIGN KEY ("VENDORACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_CUSTOMER" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_PROPFORM" FOREIGN KEY ("VENDORPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_VENDORCOUNTRY" FOREIGN KEY ("VENDORCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_VENDOREXECUTER" FOREIGN KEY ("VENDOREXECUTER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_VENDOREXECUTERACC" FOREIGN KEY ("VENDOREXECUTERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_VENDORPOSTCOUNTRY" FOREIGN KEY ("VENDORPOSTCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "OFFERDOC" ADD CONSTRAINT "FK_OFFERDOC_VENDORTERCODE" FOREIGN KEY ("VENDORCOUNTRY_ID", "VENDORTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRCRITERIONLINEVAL
--------------------------------------------------------

  ALTER TABLE "OFRCRITERIONLINEVAL" ADD CONSTRAINT "FK_OFRCRITERIONLINEVAL_OFFER" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRCRITERIONLINEVAL" ADD CONSTRAINT "FK_OFRCRITERIONLINEVAL_OFRCRIT" FOREIGN KEY ("OFFER_ID", "CMPCRITERIONPOS", "ISFINALOFFER")
	  REFERENCES "OFRCRITERIONVAL" ("OFFER_ID", "CMPCRITERIONPOS", "ISFINALOFFER") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRCRITERIONVAL
--------------------------------------------------------

  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "FK_OFRCRITERIONVALLOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRCRITERIONVAL" ADD CONSTRAINT "FK_OFRCRITERIONVAL_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRDECREASON
--------------------------------------------------------

  ALTER TABLE "OFRDECREASON" ADD CONSTRAINT "FK_OFRDECREASON_LOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRDECREASON" ADD CONSTRAINT "FK_OFRDECREASON_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRDECREASON" ADD CONSTRAINT "FK_OFRDECREASON_OFRRETREASON" FOREIGN KEY ("OFRRETREASON_ID")
	  REFERENCES "OFRRETREASON" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRDOCREQVAL
--------------------------------------------------------

  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "FK_OFRDOCREQVAL_LOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRDOCREQVAL" ADD CONSTRAINT "FK_OFRDOCREQVAL_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRGOODS
--------------------------------------------------------

  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "FK_OFRGOODS_COMPREQUEST" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "FK_OFRGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "FK_OFRGOODS_LOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "FK_OFRGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "OFRGOODS" ADD CONSTRAINT "FK_OFRGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRGOODSPROP
--------------------------------------------------------

  ALTER TABLE "OFRGOODSPROP" ADD CONSTRAINT "FK_OFRGOODSPROP_RQGOODS" FOREIGN KEY ("OFFER_ID", "GOODSPOS")
	  REFERENCES "OFRGOODS" ("OFFER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRGROUPPROP
--------------------------------------------------------

  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "FK_OFRGROUPPROP_GOODSGROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "FK_OFRGROUPPROP_GROUPPROP" FOREIGN KEY ("GROUPPROP_ID")
	  REFERENCES "GROUPPROP" ("ID") ON DELETE SET NULL ;
 
  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "FK_OFRGROUPPROP_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRGROUPPROP" ADD CONSTRAINT "FK_OFRGROUPPROP_PROPTYPE" FOREIGN KEY ("PROPTYPE_ID")
	  REFERENCES "PROPTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRGROUPPROPVALUE
--------------------------------------------------------

  ALTER TABLE "OFRGROUPPROPVALUE" ADD CONSTRAINT "FK_OFRGROUPPROPVALUE_PROP" FOREIGN KEY ("OFFER_ID", "GROUPPROPPOS")
	  REFERENCES "OFRGROUPPROP" ("OFFER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRLOT
--------------------------------------------------------

  ALTER TABLE "OFRLOT" ADD CONSTRAINT "FK_OFRLOT_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRORGSTATUS
--------------------------------------------------------

  ALTER TABLE "OFRORGSTATUS" ADD CONSTRAINT "FK_OFRORGSTATUS_OFFER" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRORGSTATUS" ADD CONSTRAINT "FK_OFRORGSTATUS_ORGSTATUS" FOREIGN KEY ("ORGSTATUS_ID")
	  REFERENCES "ORGSTATUS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRPLACE
--------------------------------------------------------

  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "FK_OFRPLACE_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "FK_OFRPLACE_LOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "FK_OFRPLACE_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "FK_OFRPLACE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "OFRPLACE" ADD CONSTRAINT "FK_OFRPLACE_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRQUALREQVAL
--------------------------------------------------------

  ALTER TABLE "OFRQUALREQVAL" ADD CONSTRAINT "FK_OFRQUALREQVAL_LOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRQUALREQVAL" ADD CONSTRAINT "FK_OFRQUALREQVAL_OFFERDOC" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRRETREASON
--------------------------------------------------------

  ALTER TABLE "OFRRETREASON" ADD CONSTRAINT "FK_OFRRETREASON_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OFRSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "OFRSUPPLYSHEDULE" ADD CONSTRAINT "FK_OFRSUPPLYSHEDULE_OFFER" FOREIGN KEY ("OFFER_ID")
	  REFERENCES "OFFERDOC" ("ID") ;
 
  ALTER TABLE "OFRSUPPLYSHEDULE" ADD CONSTRAINT "FK_OFRSUPPLYSHEDULE_OFRGOODS" FOREIGN KEY ("OFFER_ID", "GOODSPOS")
	  REFERENCES "OFRGOODS" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRSUPPLYSHEDULE" ADD CONSTRAINT "FK_OFRSUPPLYSHEDULE_OFRLOT" FOREIGN KEY ("OFFER_ID", "LOTPOS")
	  REFERENCES "OFRLOT" ("OFFER_ID", "POS") ;
 
  ALTER TABLE "OFRSUPPLYSHEDULE" ADD CONSTRAINT "FK_OFRSUPPLYSHEDULE_OFRPLACE" FOREIGN KEY ("OFFER_ID", "PLACEPOS")
	  REFERENCES "OFRPLACE" ("OFFER_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table OKTMO
--------------------------------------------------------

  ALTER TABLE "OKTMO" ADD CONSTRAINT "FK_OKTMO_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "OKTMO" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OOSCONTRACTPRODUCTS
--------------------------------------------------------

  ALTER TABLE "OOSCONTRACTPRODUCTS" ADD CONSTRAINT "FK_OOSPRODUCTS_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "OOSCONTRACT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSCONTRACTSUPPLIER
--------------------------------------------------------

  ALTER TABLE "OOSCONTRACTSUPPLIER" ADD CONSTRAINT "FK_OOSSUPPLIER_CONTRACT" FOREIGN KEY ("CONTRACT_ID")
	  REFERENCES "OOSCONTRACT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSCUSTOMERREQUIREMENT
--------------------------------------------------------

  ALTER TABLE "OOSCUSTOMERREQUIREMENT" ADD CONSTRAINT "FK_CUSTOMERREQ_NOTIFICATION" FOREIGN KEY ("NOTIFICATION_ID")
	  REFERENCES "OOSNOTIFICATION" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "OOSCUSTOMERREQUIREMENT" ADD CONSTRAINT "FK_CUSTOMERREQ_NOTIFICATIONLOT" FOREIGN KEY ("LOT_ID", "NOTIFICATION_ID")
	  REFERENCES "OOSNOTIFICATIONLOT" ("ID", "NOTIFICATION_ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSNOTIFICATIONLOT
--------------------------------------------------------

  ALTER TABLE "OOSNOTIFICATIONLOT" ADD CONSTRAINT "FK_LOT_OOSNOTIFICATION" FOREIGN KEY ("NOTIFICATION_ID")
	  REFERENCES "OOSNOTIFICATION" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSORGANIZATIONROLE
--------------------------------------------------------

  ALTER TABLE "OOSORGANIZATIONROLE" ADD CONSTRAINT "FK_OOSORGROLE_ORGANIZATION" FOREIGN KEY ("REGNUMBER")
	  REFERENCES "OOSORGANIZATION" ("REGNUMBER") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSORGROLES
--------------------------------------------------------

  ALTER TABLE "OOSORGROLES" ADD CONSTRAINT "FK_OOSORGROLES_OOSORGROLE" FOREIGN KEY ("ROLECODE")
	  REFERENCES "OOSORGROLE" ("CODE") ;
 
  ALTER TABLE "OOSORGROLES" ADD CONSTRAINT "FK_OOSORGROLES_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table OOSPRODUCTS
--------------------------------------------------------

  ALTER TABLE "OOSPRODUCTS" ADD CONSTRAINT "FK_PRODUCTS_NOTIFICATION" FOREIGN KEY ("NOTIFICATION_ID")
	  REFERENCES "OOSNOTIFICATION" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "OOSPRODUCTS" ADD CONSTRAINT "FK_PRODUCTS_NOTIFICATIONLOT" FOREIGN KEY ("LOT_ID", "NOTIFICATION_ID")
	  REFERENCES "OOSNOTIFICATIONLOT" ("ID", "NOTIFICATION_ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOSPROTOCOLLOT
--------------------------------------------------------

  ALTER TABLE "OOSPROTOCOLLOT" ADD CONSTRAINT "FK_OOSPROTOCOLLOT_PROTOCOL" FOREIGN KEY ("NOTIFICATIONNUMBER", "PROTOCOLNUMBER", "PROTOCOLVERSIONNUMBER")
	  REFERENCES "OOSPROTOCOL" ("NOTIFICATIONNUMBER", "PROTOCOLNUMBER", "VERSIONNUMBER") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  ALTER TABLE "OOS223PURCHNOTICELOTINFO" ADD CONSTRAINT "FK_OOS223PNLI_PURCHNOTICEINFO" FOREIGN KEY ("OOS223PURCHASENOTICEINFO_ID")
	  REFERENCES "OOS223PURCHASENOTICEINFO" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORDERDOC
--------------------------------------------------------

  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_BANK" FOREIGN KEY ("DOCFEESETTLEMENTBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CMPORGFACTCODE" FOREIGN KEY ("CMPORGFACTCOUNTRY_ID", "CMPORGFACTTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CMPORGFACTCOUNTRY" FOREIGN KEY ("CMPORGFACTCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CMPORGPOSTCODE" FOREIGN KEY ("CMPORGPOSTCOUNTRY_ID", "CMPORGPOSTTERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CMPORGPOSTCOUNTRY" FOREIGN KEY ("CMPORGPOSTCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_COMMISSION" FOREIGN KEY ("COMMISSION_ID")
	  REFERENCES "COMMISSION" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CONTYPE" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_DOCDEVELOPER" FOREIGN KEY ("DOCDEVELOPER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_OFRREQREASON" FOREIGN KEY ("OFRREQREASON_ID")
	  REFERENCES "OFRREQREASON" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_OOSETPCODE" FOREIGN KEY ("OOSETPCODE")
	  REFERENCES "ETPTYPE" ("CODE") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_ORGFORM" FOREIGN KEY ("VENDORPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_PURCHASEORGCACHE" FOREIGN KEY ("PURCHASEORGNAMECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_PURCHASEORG_ID" FOREIGN KEY ("PURCHASEORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_REPNOTICE" FOREIGN KEY ("REPNOTICE_ID")
	  REFERENCES "REPFRAGMENT" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_SINGLECUSTOMER" FOREIGN KEY ("SINGLECUSTOMERREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_SPECIALORG" FOREIGN KEY ("SPECIALORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORDERDOC" ADD CONSTRAINT "FK_ORDERDOC_VENDOR" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORDERSUMMARY
--------------------------------------------------------

  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "FK_ORDERSUMMARY_CMPBUDGETLINE" FOREIGN KEY ("ORDER_ID", "CMPBUDGETLINEPOS")
	  REFERENCES "CMPPLACE" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "FK_ORDERSUMMARY_CMPGOODS" FOREIGN KEY ("ORDER_ID", "CMPGOODSPOS")
	  REFERENCES "CMPGOODS" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "FK_ORDERSUMMARY_CMPLOT" FOREIGN KEY ("ORDER_ID", "CMPLOTPOS")
	  REFERENCES "CMPLOT" ("ORDER_ID", "POS") ;
 
  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "FK_ORDERSUMMARY_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "ORDERSUMMARY" ADD CONSTRAINT "FK_ORDERSUMMARY_ORG" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORG
--------------------------------------------------------

  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_ACCOUNTANT" FOREIGN KEY ("ACCOUNTANT_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_CERT" FOREIGN KEY ("CERT_ID")
	  REFERENCES "USERCERT" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_DIRECTOR" FOREIGN KEY ("DIRECTOR_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_FACTERRITORY" FOREIGN KEY ("FACTERRITORY_ID")
	  REFERENCES "TERRITORY" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_LAWTER" FOREIGN KEY ("LAWTERRITORY_ID")
	  REFERENCES "TERRITORY" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_OKTMO" FOREIGN KEY ("OKTMO_ID")
	  REFERENCES "OKTMO" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_OKVEDID" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_ORGFORM" FOREIGN KEY ("PROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_SERVEORG" FOREIGN KEY ("SERVEORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORG" ADD CONSTRAINT "FK_ORG_TERRITORY" FOREIGN KEY ("TERRITORY_ID")
	  REFERENCES "TERRITORY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGACCOUNT
--------------------------------------------------------

  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACCOUNT_BANK" FOREIGN KEY ("BANK_ID")
	  REFERENCES "BANK" ("ID") ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACCOUNT_KEEPER" FOREIGN KEY ("KEEPER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACCOUNT_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACCOUNT_ORGACCTYPE" FOREIGN KEY ("ORGACCTYPE_ID")
	  REFERENCES "ORGACCTYPE" ("ID") ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACC_EXECUTER_ORG" FOREIGN KEY ("EXECUTER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACC_EXECUTER_ORGACC" FOREIGN KEY ("EXECUTERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "ORGACCOUNT" ADD CONSTRAINT "FK_ORGACC_KEEPER_ORGACC" FOREIGN KEY ("KEEPERACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGADDKPP
--------------------------------------------------------

  ALTER TABLE "ORGADDKPP" ADD CONSTRAINT "FK_ORGADDKPP_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGADDKPP" ADD CONSTRAINT "FK_ORGADDKPP_ORGFORM" FOREIGN KEY ("PROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGATTACH
--------------------------------------------------------

  ALTER TABLE "ORGATTACH" ADD CONSTRAINT "FK_ORGATTACH_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGCHILD
--------------------------------------------------------

  ALTER TABLE "ORGCHILD" ADD CONSTRAINT "FK_ORGCHILDCHILD_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGCHILD" ADD CONSTRAINT "FK_ORGCHILDORG_ORG" FOREIGN KEY ("CHILD_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGETP
--------------------------------------------------------

  ALTER TABLE "ORGETP" ADD CONSTRAINT "FK_ORGETP_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGETP" ADD CONSTRAINT "FK_ORGETP_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGETP" ADD CONSTRAINT "FK_ORGETP_ORGROLE" FOREIGN KEY ("ORGROLE_ID")
	  REFERENCES "ORGROLE" ("ID") ;
 
  ALTER TABLE "ORGETP" ADD CONSTRAINT "FK_ORGETP_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGGOODSGROUP
--------------------------------------------------------

  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "FK_ORGGOODSGROUP_GROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGGOODSGROUP" ADD CONSTRAINT "FK_ORGGOODSGROUP_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGHEARING
--------------------------------------------------------

  ALTER TABLE "ORGHEARING" ADD CONSTRAINT "FK_ORGHEARING_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGLICENCE
--------------------------------------------------------

  ALTER TABLE "ORGLICENCE" ADD CONSTRAINT "FK_ORGLICENCE_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGLICENCE" ADD CONSTRAINT "FK_ORGLICENSE_LICTYPE" FOREIGN KEY ("LICTYPE_ID")
	  REFERENCES "LICTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGOOS223FZUSER
--------------------------------------------------------

  ALTER TABLE "ORGOOS223FZUSER" ADD CONSTRAINT "FK_ORGOOS223FZUSER_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGOOS223FZUSER" ADD CONSTRAINT "FK_ORGOOS223FZUSER_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGPERSONAL
--------------------------------------------------------

  ALTER TABLE "ORGPERSONAL" ADD CONSTRAINT "FK_ORGPERSONAL_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGPERSONAL" ADD CONSTRAINT "FK_ORGPERSONAL_PERSONAL" FOREIGN KEY ("PERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGPERSONALRESP
--------------------------------------------------------

  ALTER TABLE "ORGPERSONALRESP" ADD CONSTRAINT "FK_ORGPERSONALRESP_ORGPERSONAL" FOREIGN KEY ("ORG_ID", "PERSONAL_ID")
	  REFERENCES "ORGPERSONAL" ("ORG_ID", "PERSONAL_ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGPERSONALRESP" ADD CONSTRAINT "FK_ORGPERSONALRESP_RESP" FOREIGN KEY ("RESPONSIBILITY_ID")
	  REFERENCES "RESPONSIBILITY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGROLES
--------------------------------------------------------

  ALTER TABLE "ORGROLES" ADD CONSTRAINT "FK_ORGROLES_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ORGROLES" ADD CONSTRAINT "FK_ORGROLES_ORGROLE" FOREIGN KEY ("ORGROLE_ID")
	  REFERENCES "ORGROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ORGSELSTATUS
--------------------------------------------------------

  ALTER TABLE "ORGSELSTATUS" ADD CONSTRAINT "FK_ORGSELSTATUS_ORGSTATUS" FOREIGN KEY ("ORGSTATUS_ID")
	  REFERENCES "ORGSTATUS" ("ID") ;
 
  ALTER TABLE "ORGSELSTATUS" ADD CONSTRAINT "FK_ORGSTATUS_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGTITLE
--------------------------------------------------------

  ALTER TABLE "ORGTITLE" ADD CONSTRAINT "FK_ORGTITLE_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGTURNOVER
--------------------------------------------------------

  ALTER TABLE "ORGTURNOVER" ADD CONSTRAINT "FK_ORGTURNOVER_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "ORGTURNOVER" ADD CONSTRAINT "FK_ORGTURNOVER_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table ORGUNFAIR
--------------------------------------------------------

  ALTER TABLE "ORGUNFAIR" ADD CONSTRAINT "FK_ORGUNFAIR_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ORGUNFAIR" ADD CONSTRAINT "FK_ORGUNFAIR_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PANELITEM
--------------------------------------------------------

  ALTER TABLE "PANELITEM" ADD CONSTRAINT "FK_PANELITEM_CLIENTOBJECT" FOREIGN KEY ("CLIENTOBJECT_ID")
	  REFERENCES "CLIENTOBJECT" ("ID") ;
 
  ALTER TABLE "PANELITEM" ADD CONSTRAINT "FK_PANELITEM_PANEL" FOREIGN KEY ("PANEL_ID")
	  REFERENCES "PANEL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PERSONAL
--------------------------------------------------------

  ALTER TABLE "PERSONAL" ADD CONSTRAINT "FK_PERSONAL_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLACEMENTFEATUREPM
--------------------------------------------------------

  ALTER TABLE "PLACEMENTFEATUREPM" ADD CONSTRAINT "FK_PFPM_PLACEMENTFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
 
  ALTER TABLE "PLACEMENTFEATUREPM" ADD CONSTRAINT "FK_PFPM_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLACINGWAY
--------------------------------------------------------

  ALTER TABLE "PLACINGWAY" ADD CONSTRAINT "FK_PLACINGWAY_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLANDOC
--------------------------------------------------------

  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "PLANDOC" ADD CONSTRAINT "FK_PLANDOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLANPOSITIONNUMBERERROR
--------------------------------------------------------

  ALTER TABLE "PLANPOSITIONNUMBERERROR" ADD CONSTRAINT "FK_PLANPOSITIONNUMBERERR_DOC" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLANREQUEST
--------------------------------------------------------

  ALTER TABLE "PLANREQUEST" ADD CONSTRAINT "FK_PLANREQUEST_DOC" FOREIGN KEY ("DOC_ID")
	  REFERENCES "PLANDOC" ("ID") ;
 
  ALTER TABLE "PLANREQUEST" ADD CONSTRAINT "FK_PLANREQUEST_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLANREQUEST" ADD CONSTRAINT "FK_PLANREQUEST_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2ARRANGEMENT
--------------------------------------------------------

  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CHANGEDESCR" FOREIGN KEY ("CHANGEDESCRIPTIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CHANGEREASON" FOREIGN KEY ("CHANGEREASON_ID")
	  REFERENCES "PLANPOSITIONCHANGEREASON" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CONEXECSTAGES" FOREIGN KEY ("CONEXECSTAGESCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CONTRACTOR" FOREIGN KEY ("CONTRACTOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CONTRPAYORDER" FOREIGN KEY ("CONTRACTPAYORDERCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CONTRPROV" FOREIGN KEY ("CONTRACTPROVIDINGCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_DELIVADDR" FOREIGN KEY ("DELIVERYADDRESS_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_DELIVBASIS" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_EXPLANATION" FOREIGN KEY ("EXPLANATIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_ORDERNAME" FOREIGN KEY ("ORDERNAMECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_PAYCOND" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_PERIODICITY" FOREIGN KEY ("PERIODICITYCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_PROHIBITIONS" FOREIGN KEY ("PROHIBITIONSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_PUBLICDISCUSS" FOREIGN KEY ("PUBLICDISCUSSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_P2ARRANGEMENT_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_PLAN2ARRANGEMENT_LOTNAME" FOREIGN KEY ("LOTNAMECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_PLAN2ARRANGEMENT_LOTNUMBER" FOREIGN KEY ("LOTNUMBERCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_PLAN2ARRANGEMENT_PLAN2GOODS" FOREIGN KEY ("PLAN2GOODS_ID")
	  REFERENCES "PLAN2GOODS" ("ID") ;
 
  ALTER TABLE "PLAN2ARRANGEMENT" ADD CONSTRAINT "FK_PLAN2ARRANGEMENT_PREFERENCE" FOREIGN KEY ("PREFERENCEGROUP_ID")
	  REFERENCES "PREFERENCEGROUP" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2DAILYTOTALS
--------------------------------------------------------

  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "FK_PLAN2DAILYTOTALS_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "FK_PLAN2DAILYTOTALS_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2DAILYTOTALS" ADD CONSTRAINT "FK_PLAN2DAILYTOTALS_PURCHMDE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2DOC
--------------------------------------------------------

  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_DESCRIPTION" FOREIGN KEY ("DESCRIPTION_ID")
	  REFERENCES "DESCRIPTION" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_OOSDISPSTATUS" FOREIGN KEY ("OOSDISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_OWNER" FOREIGN KEY ("OWNER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2DOC" ADD CONSTRAINT "FK_PLAN2DOC_RESPPERSONAL" FOREIGN KEY ("RESPPERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2DOCCHILD
--------------------------------------------------------

  ALTER TABLE "PLAN2DOCCHILD" ADD CONSTRAINT "FK_PLAN2DOCCHILD_DOCID" FOREIGN KEY ("DOC_ID")
	  REFERENCES "PLAN2DOC" ("ID") ;
 
  ALTER TABLE "PLAN2DOCCHILD" ADD CONSTRAINT "FK_PLAN2DOCCHILD_DOCUMENTID" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLAN2DOCCHILD" ADD CONSTRAINT "FK_PLAN2DOCCHILD_PLAN2DOC" FOREIGN KEY ("PLAN2DOC_ID")
	  REFERENCES "PLAN2DOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2GOODS
--------------------------------------------------------

  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_P2GOODS_MEDICINEPROPVALUE" FOREIGN KEY ("MEDICINEPROPVALUECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_GOODSBRANCH" FOREIGN KEY ("GOODSBRANCH_ID")
	  REFERENCES "GOODSBRANCH" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_GOODSGROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_OLD" FOREIGN KEY ("OLDPLAN2GOODS_ID")
	  REFERENCES "PLAN2GOODS" ("ID") ON DELETE SET NULL ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_PLAN2DOC" FOREIGN KEY ("PLAN2DOC_ID")
	  REFERENCES "PLAN2DOC" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2GOODS" ADD CONSTRAINT "FK_PLAN2GOODS_UNITNAME" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2LEDGER
--------------------------------------------------------

  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_CONTRACTOR" FOREIGN KEY ("CONTRACTOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_DELIVERYBASIS" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_DESCRIPTION" FOREIGN KEY ("DESCRIPTIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_GOODS" FOREIGN KEY ("GOODS_ID")
	  REFERENCES "GOODS" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_GOODSGROUP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "GOODSGROUP" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_IDENTIFICCODE" FOREIGN KEY ("IDENTIFICCODECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_OKDP" FOREIGN KEY ("OKDP_ID")
	  REFERENCES "GOODSOKDP" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_PAYCONDITION" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_PLAN2DOC" FOREIGN KEY ("PLAN2DOC_ID")
	  REFERENCES "PLAN2DOC" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PLAN2LEDGER" ADD CONSTRAINT "FK_PLAN2LEDGER_UNITNAME" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSFEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSFEATURE" ADD CONSTRAINT "FK_PK_PLAN2OOSFEATURE_POSITION" FOREIGN KEY ("PLAN2OOSPOSITION_ID")
	  REFERENCES "PLAN2OOSPOSITION" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "PLAN2OOSFEATURE" ADD CONSTRAINT "FK_PLAN2OOSFEATURE_PLFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSKBK
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSKBK" ADD CONSTRAINT "FK_PLAN2OOSKBK_POSITION" FOREIGN KEY ("PLAN2OOSPOSITION_ID")
	  REFERENCES "PLAN2OOSPOSITION" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSKBKYEAR
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSKBKYEAR" ADD CONSTRAINT "FK_PLAN2OOSKBKYEAR_KBK" FOREIGN KEY ("PLAN2OOSKBK_ID")
	  REFERENCES "PLAN2OOSKBK" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSOKVED
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSOKVED" ADD CONSTRAINT "FK_PLAN2OOSOKVED_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLAN2OOSOKVED" ADD CONSTRAINT "FK_PLAN2OOSOKVED_POSITION" FOREIGN KEY ("PLAN2OOSPOSITION_ID")
	  REFERENCES "PLAN2OOSPOSITION" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSPOSITION
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOSITION_CHREASON" FOREIGN KEY ("CHANGEREASON_ID")
	  REFERENCES "PLANPOSITIONCHANGEREASON" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOSITION_CURRENCY" FOREIGN KEY ("CONTRACTCURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOSITION_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOSITION_DOCUMENTID" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOSITION_PURCHMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_ADVANCE" FOREIGN KEY ("ADVANCECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_CONEXECSTAGES" FOREIGN KEY ("CONEXECSTAGESCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_ORGANIZER" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_PERIODICITY" FOREIGN KEY ("PERIODICITYCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_PROHIBITIONS" FOREIGN KEY ("PROHIBITIONSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_PUBLICDISCUSS" FOREIGN KEY ("PUBLICDISCUSSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_PURCHASEFINPROC" FOREIGN KEY ("PURCHASEFINPROCEDURECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPOSITION" ADD CONSTRAINT "FK_PLAN2OOSPOS_PURCHMETHOD" FOREIGN KEY ("PURCHASEMETHOD_ID")
	  REFERENCES "PURCHASEMETHOD" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN2OOSPRODUCT
--------------------------------------------------------

  ALTER TABLE "PLAN2OOSPRODUCT" ADD CONSTRAINT "FK_PLAN2OOSPRODUCT_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPRODUCT" ADD CONSTRAINT "FK_PLAN2OOSPRODUCT_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLAN2OOSPRODUCT" ADD CONSTRAINT "FK_PLAN2OOSPRODUCT_POSITION" FOREIGN KEY ("PLAN2OOSPOSITION_ID")
	  REFERENCES "PLAN2OOSPOSITION" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "PLAN2OOSPRODUCT" ADD CONSTRAINT "FK_PLAN2OOSPRODUCT_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3DOC
--------------------------------------------------------

  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_CONFIRMPERSON" FOREIGN KEY ("CONFIRMPERSON_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_COUNTRY" FOREIGN KEY ("CUSTOMERCOUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_FACTTERRITORY" FOREIGN KEY ("CUSTOMERFACTTERRITORY_ID")
	  REFERENCES "TERRITORY" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_ORGFORM" FOREIGN KEY ("CUSTOMERPROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_RESPEXECUTER" FOREIGN KEY ("RESPEXECUTER_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "PLAN3DOC" ADD CONSTRAINT "FK_PLAN3DOC_RESPORG" FOREIGN KEY ("RESPORG_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3DOCCHILD
--------------------------------------------------------

  ALTER TABLE "PLAN3DOCCHILD" ADD CONSTRAINT "FK_PLAN3DOCCHILD_DOCID" FOREIGN KEY ("DOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
 
  ALTER TABLE "PLAN3DOCCHILD" ADD CONSTRAINT "FK_PLAN3DOCCHILD_DOCUMENTID" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLAN3DOCCHILD" ADD CONSTRAINT "FK_PLAN3DOCCHILD_PLAN3DOC" FOREIGN KEY ("PLAN3DOC_ID")
	  REFERENCES "PLAN3DOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASEDOC
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CHANGEREASON" FOREIGN KEY ("CHANGEREASON_ID")
	  REFERENCES "PLANPOSITIONCHANGEREASON" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CONBANKSUPP" FOREIGN KEY ("CONBANKSUPPORTCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CONEXECSTAGES" FOREIGN KEY ("CONEXECSTAGESCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CONTRACTOR" FOREIGN KEY ("CONTRACTOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CONTRPAYORDER" FOREIGN KEY ("CONTRACTPAYORDERCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DELIVADDR" FOREIGN KEY ("DELIVERYADDRESS_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DELIVBASIS" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DESCRIPTION" FOREIGN KEY ("DESCRIPTION_ID")
	  REFERENCES "DESCRIPTION" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DISCUSSION" FOREIGN KEY ("PUBLICDISCUSSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DISPSTAT" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DOCCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_IKOKPDID" FOREIGN KEY ("IKOKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_OFRREQRSN" FOREIGN KEY ("OFRREQREASON_ID")
	  REFERENCES "OFRREQREASON" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_ORDERNAME" FOREIGN KEY ("ORDERNAMECACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PAYCOND" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PERIODICITY" FOREIGN KEY ("PERIODICITYCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PLAN2REASON" FOREIGN KEY ("PLANCHANGEREASON_ID")
	  REFERENCES "PLAN2CHANGEREASON" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PROHIBITIONS" FOREIGN KEY ("PROHIBITIONSCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_PURCHMETHOD" FOREIGN KEY ("PURCHASEMETHOD_ID")
	  REFERENCES "PURCHASEMETHOD" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_RCPT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_SINGLECUST" FOREIGN KEY ("SINGLECUSTOMERREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEDOC" ADD CONSTRAINT "FK_P3PURCHASEDOC_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASEFEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEFEATURE" ADD CONSTRAINT "FK_P3PF_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEFEATURE" ADD CONSTRAINT "FK_P3PF_PLFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASEGOODS
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_GOODSGROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ON DELETE SET NULL ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_PURCHASEPLANLINE" FOREIGN KEY ("PLAN3PURCHASEDOC_ID", "PLAN3PURCHASELINEPOS")
	  REFERENCES "PLAN3PURCHASELINE" ("PLAN3PURCHASEDOC_ID", "POS") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODS" ADD CONSTRAINT "FK_P3GOODS_UNITNAME" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASEGOODSOKVED
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODSOKVED" ADD CONSTRAINT "FK_P3GOODSOKVED_P3GOODS" FOREIGN KEY ("PLAN3PURCHASEDOC_ID", "GOODSPOS")
	  REFERENCES "PLAN3PURCHASEGOODS" ("PLAN3PURCHASEDOC_ID", "POS") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODSOKVED" ADD CONSTRAINT "FK_P3GO_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODSOKVED" ADD CONSTRAINT "FK_P3GO_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASEGOODSPROP
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASEGOODSPROP" ADD CONSTRAINT "FK_P3GOODSPROP_P3GOODS" FOREIGN KEY ("PLAN3PURCHASEDOC_ID", "GOODSPOS")
	  REFERENCES "PLAN3PURCHASEGOODS" ("PLAN3PURCHASEDOC_ID", "POS") ;
 
  ALTER TABLE "PLAN3PURCHASEGOODSPROP" ADD CONSTRAINT "FK_P3GOODSPROP_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASELINE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINE" ADD CONSTRAINT "FK_P3LINE_RCPT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLAN3PURCHASELINESHEDULE
--------------------------------------------------------

  ALTER TABLE "PLAN3PURCHASELINESHEDULE" ADD CONSTRAINT "FK_P3SHED_PLANPURCHASEDOC" FOREIGN KEY ("PLAN3PURCHASEDOC_ID")
	  REFERENCES "PLAN3PURCHASEDOC" ("ID") ;
 
  ALTER TABLE "PLAN3PURCHASELINESHEDULE" ADD CONSTRAINT "FK_P3SHED_PURCHASEPLANLINE" FOREIGN KEY ("PLAN3PURCHASEDOC_ID", "PLAN3PURCHASELINEPOS")
	  REFERENCES "PLAN3PURCHASELINE" ("PLAN3PURCHASEDOC_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLGOODS
--------------------------------------------------------

  ALTER TABLE "PLGOODS" ADD CONSTRAINT "FK_PLGOODS_GROUPCODE" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PLGOODS" ADD CONSTRAINT "FK_PLGOODS_ORG" FOREIGN KEY ("ORGID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLGOODSPROP
--------------------------------------------------------

  ALTER TABLE "PLGOODSPROP" ADD CONSTRAINT "FK_PLGOODSPROP_GOODS" FOREIGN KEY ("GOODSID")
	  REFERENCES "PLGOODS" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PLNBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBL_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBL_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBUDGETLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBUDGETLINE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBUDGETLINE_PLANDOC" FOREIGN KEY ("PLANDOC_ID")
	  REFERENCES "PLANDOC" ("ID") ;
 
  ALTER TABLE "PLNBUDGETLINE" ADD CONSTRAINT "FK_PLNBUDGETLINE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLNGOODS
--------------------------------------------------------

  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "FK_PLNGOODS_GOODSGROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "FK_PLNGOODS_OKDP" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "FK_PLNGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "FK_PLNGOODS_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "PLNGOODS" ADD CONSTRAINT "FK_PLNGOODS_PLANDOC" FOREIGN KEY ("PLANDOC_ID")
	  REFERENCES "PLANDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PLNSHEDULE
--------------------------------------------------------

  ALTER TABLE "PLNSHEDULE" ADD CONSTRAINT "FK_PLNSHEDULE_PLANDOC" FOREIGN KEY ("PLANDOC_ID")
	  REFERENCES "PLANDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PREFERENCEGROUP
--------------------------------------------------------

  ALTER TABLE "PREFERENCEGROUP" ADD CONSTRAINT "FK_PREFERENCEGROUP_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PREFERENCEGROUP" ADD CONSTRAINT "FK_PREFERENCEGROUP_PURCHASE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PREFERENCEGROUPFEATURE
--------------------------------------------------------

  ALTER TABLE "PREFERENCEGROUPFEATURE" ADD CONSTRAINT "FK_PREFERENCEFEATURE_GROUP" FOREIGN KEY ("PREFERENCEGROUP_ID")
	  REFERENCES "PREFERENCEGROUP" ("ID") ;
 
  ALTER TABLE "PREFERENCEGROUPFEATURE" ADD CONSTRAINT "FK_PREFERENCEFEATURE_PLFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PROCTREE
--------------------------------------------------------

  ALTER TABLE "PROCTREE" ADD CONSTRAINT "FK_PROCTREE_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PROCTREE" ADD CONSTRAINT "FK_PROCTREE_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "PROCTREE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PROCUREMENT
--------------------------------------------------------

  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "FK_PROCUREMENT_COMMISSION" FOREIGN KEY ("COMMISSION_ID")
	  REFERENCES "COMMISSION" ("ID") ;
 
  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "FK_PROCUREMENT_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "FK_PROCUREMENT_PERSONAL" FOREIGN KEY ("RESPPERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "PROCUREMENT" ADD CONSTRAINT "FK_PROCUREMENT_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASECARRY
--------------------------------------------------------

  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_CONTRACTOR" FOREIGN KEY ("CONTRACTOR_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_DELIV" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_DESCRIPTION" FOREIGN KEY ("DESCRIPTIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_GRANTINVEST" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_PAYCONDITION" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHASECARRY_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_DOCUMENT" FOREIGN KEY ("DOC_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_GOODSGROUPCODE" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PURCHASECARRY" ADD CONSTRAINT "FK_PURCHCARRY_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEMETHOD
--------------------------------------------------------

  ALTER TABLE "PURCHASEMETHOD" ADD CONSTRAINT "FK_PURCHASEMETHOD_ORG" FOREIGN KEY ("CREATORORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEPLAN
--------------------------------------------------------

  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_DESC_PLANDESC" FOREIGN KEY ("DESC_ID")
	  REFERENCES "DESCRIPTION" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PLAN_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PLAN_GOODSGROUPCODE" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PLAN_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PURCHASEPLAN_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PURCHASEPLAN_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PURCHASEPLAN_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "PURCHASEPLAN" ADD CONSTRAINT "FK_PURCHPLAN_PURCHPLANDOC" FOREIGN KEY ("PURCHASEPLANDOC_ID")
	  REFERENCES "PURCHASEPLANDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table PURCHASEPLANDOC
--------------------------------------------------------

  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "PURCHASEPLANDOC" ADD CONSTRAINT "FK_PURCHPLANDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table QUALIFYSELECT
--------------------------------------------------------

  ALTER TABLE "QUALIFYSELECT" ADD CONSTRAINT "FK_QUALIFYSELECT_CMPCOMPETITOR" FOREIGN KEY ("ORDER_ID", "COMPETITORPOS")
	  REFERENCES "CMPCOMPETITOR" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "QUALIFYSELECT" ADD CONSTRAINT "FK_QUALIFYSELECT_CMPQUALREQ" FOREIGN KEY ("ORDER_ID", "QUALIFYREQPOS")
	  REFERENCES "CMPQUALREQ" ("ORDER_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table QUALREQ
--------------------------------------------------------

  ALTER TABLE "QUALREQ" ADD CONSTRAINT "FK_QUALREQ_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "QUALREQ" ADD CONSTRAINT "FK_QUALREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RECOILDOC
--------------------------------------------------------

  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_CONTRACTOR" FOREIGN KEY ("CON_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "RECOILDOC" ADD CONSTRAINT "FK_RECOILDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RECOILLINES
--------------------------------------------------------

  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_DELIV" FOREIGN KEY ("DELIVERYBASIS_ID")
	  REFERENCES "DELIVERYBASIS" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_GOODSGROUPCODE" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_GRANTINVEST" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_PAYCONDITION" FOREIGN KEY ("PAYCONDITIONCACHE_ID")
	  REFERENCES "DESCRIPTIONCACHE" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_RECOILDOC" FOREIGN KEY ("RECOILDOC_ID")
	  REFERENCES "RECOILDOC" ("ID") ;
 
  ALTER TABLE "RECOILLINES" ADD CONSTRAINT "FK_RECOILLINES_UNIT" FOREIGN KEY ("UNITNAME")
	  REFERENCES "UNIT" ("NAME") ;
--------------------------------------------------------
--  Ref Constraints for Table REFDOC
--------------------------------------------------------

  ALTER TABLE "REFDOC" ADD CONSTRAINT "FK_REFDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "REFDOC" ADD CONSTRAINT "FK_REFDOC_REF" FOREIGN KEY ("REF_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REFJOURNAL
--------------------------------------------------------

  ALTER TABLE "REFJOURNAL" ADD CONSTRAINT "FK_REFJOURNAL_REFCLASS" FOREIGN KEY ("REF_ID")
	  REFERENCES "REFERENCECLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPDOCFRAGMENT
--------------------------------------------------------

  ALTER TABLE "REPDOCFRAGMENT" ADD CONSTRAINT "FK_REPDOCFRAGMENT_REPDOCUMENT" FOREIGN KEY ("REPDOCUMENT_ID")
	  REFERENCES "REPDOCUMENT" ("ID") ;
 
  ALTER TABLE "REPDOCFRAGMENT" ADD CONSTRAINT "FK_REPDOCFRAGMENT_REPFRAGMENT" FOREIGN KEY ("REPFRAGMENT_ID")
	  REFERENCES "REPFRAGMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPFIELD
--------------------------------------------------------

  ALTER TABLE "REPFIELD" ADD CONSTRAINT "FK_REPFORMLINE_REPFORM" FOREIGN KEY ("REPFORM_ID")
	  REFERENCES "REPFORM" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPFORM
--------------------------------------------------------

  ALTER TABLE "REPFORM" ADD CONSTRAINT "FK_REPFORM_SERVERACTION" FOREIGN KEY ("SERVERPROCESSOR_ID", "SERVERACTION_NAME")
	  REFERENCES "SERVERACTION" ("SERVERPROCESSOR_ID", "ACTION_NAME") ON DELETE SET NULL ;
 
  ALTER TABLE "REPFORM" ADD CONSTRAINT "FK_REPFORM_SERVERPROCESSOR" FOREIGN KEY ("SERVERPROCESSOR_ID")
	  REFERENCES "SERVERPROCESSOR" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPFRAGMENT
--------------------------------------------------------

  ALTER TABLE "REPFRAGMENT" ADD CONSTRAINT "FK_REPFRAGMENT_REPSOURCE" FOREIGN KEY ("REPSOURCE_ID")
	  REFERENCES "REPSOURCE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPFRAGMENTCHILD
--------------------------------------------------------

  ALTER TABLE "REPFRAGMENTCHILD" ADD CONSTRAINT "FK_REPFRAGMENTCHILD_CHILD" FOREIGN KEY ("CHILD_ID")
	  REFERENCES "REPFRAGMENT" ("ID") ;
 
  ALTER TABLE "REPFRAGMENTCHILD" ADD CONSTRAINT "FK_REPFRAGMENTCHILD_FRAGMENT" FOREIGN KEY ("REPFRAGMENT_ID")
	  REFERENCES "REPFRAGMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REPTEMPLATEATTACH
--------------------------------------------------------

  ALTER TABLE "REPTEMPLATEATTACH" ADD CONSTRAINT "FK_REPATTACH_REPDOCUMENT" FOREIGN KEY ("REPDOCUMENT_ID")
	  REFERENCES "REPDOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REQUESTDOC
--------------------------------------------------------

  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_APPBANK" FOREIGN KEY ("GUARAPPBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_APPPERSACC_ID" FOREIGN KEY ("GUARAPPPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_APPSETTACC_ID" FOREIGN KEY ("GUARAPPSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CMPORG" FOREIGN KEY ("CMPORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_COMMISSION" FOREIGN KEY ("COMMISSION_ID")
	  REFERENCES "COMMISSION" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONBANK" FOREIGN KEY ("GUARANTEECONTRACTBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONMNGRRESP" FOREIGN KEY ("CONMNGRRESP_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONPERSACC_ID" FOREIGN KEY ("GUARCONTRPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONSETTACC_ID" FOREIGN KEY ("GUARCONTRSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONSOLIDDOC" FOREIGN KEY ("CONSOLIDDOC_ID")
	  REFERENCES "CONSOLIDDOC" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONTRACTREASON" FOREIGN KEY ("SINGLECUSTOMERREASON_ID")
	  REFERENCES "CONTRACTREASON" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CONTYPE" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_ETP" FOREIGN KEY ("ETP_ID")
	  REFERENCES "ETP" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_NECESSITY" FOREIGN KEY ("NECESSITY_ID")
	  REFERENCES "NECESSITY" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_OFRREQREASON" FOREIGN KEY ("OFRREQREASON_ID")
	  REFERENCES "OFRREQREASON" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_PERSONAL" FOREIGN KEY ("RESPPERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_PLACINGWAY" FOREIGN KEY ("PLACINGWAY_ID")
	  REFERENCES "PLACINGWAY" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "REQUESTDOC" ADD CONSTRAINT "FK_REQUESTDOC_REPNOTICE" FOREIGN KEY ("REPNOTICE_ID")
	  REFERENCES "REPDOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REQUESTORDER
--------------------------------------------------------

  ALTER TABLE "REQUESTORDER" ADD CONSTRAINT "FK_REQUESTORDER_DOC" FOREIGN KEY ("DOC_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "REQUESTORDER" ADD CONSTRAINT "FK_REQUESTORDER_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "REQUESTORDER" ADD CONSTRAINT "FK_REQUESTORDER_ORDER" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table REQUIREMENTTYPEPM
--------------------------------------------------------

  ALTER TABLE "REQUIREMENTTYPEPM" ADD CONSTRAINT "FK_REQUIREMENTTYPEPM_PURCHMD" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "REQUIREMENTTYPEPM" ADD CONSTRAINT "FK_REQUIREMENTTYPEPM_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RESERVEDBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RBL_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RBL_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_CUST" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_ORDERDOC" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "ORDERDOC" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_PARENT_ID" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "RESERVEDBUDGETLINE" ("ID") ;
 
  ALTER TABLE "RESERVEDBUDGETLINE" ADD CONSTRAINT "FK_RESERVEDLINE_RECP" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEAPPOBJ
--------------------------------------------------------

  ALTER TABLE "ROLEAPPOBJ" ADD CONSTRAINT "FK_ROLEAPPOBJ_APPOBJNAME" FOREIGN KEY ("APPOBJNAME")
	  REFERENCES "APPOBJ" ("NAME") ON DELETE CASCADE ;
 
  ALTER TABLE "ROLEAPPOBJ" ADD CONSTRAINT "FK_ROLEAPPOBJ_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEATTACH
--------------------------------------------------------

  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "FK_ROLEATTACH_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "FK_ROLEATTACH_DOCCATEGORY" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "DOCCATEGORY" ("ID") ;
 
  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "FK_ROLEATTACH_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ROLEATTACH" ADD CONSTRAINT "FK_ROLEATTACH_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEBUDGET
--------------------------------------------------------

  ALTER TABLE "ROLEBUDGET" ADD CONSTRAINT "FK_ROLEBUDGET_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "ROLEBUDGET" ADD CONSTRAINT "FK_ROLEBUDGET_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLECLASS
--------------------------------------------------------

  ALTER TABLE "ROLECLASS" ADD CONSTRAINT "FK_ROLECLASS_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ROLECLASS" ADD CONSTRAINT "FK_ROLECLASS_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEEVENT
--------------------------------------------------------

  ALTER TABLE "ROLEEVENT" ADD CONSTRAINT "FK_ROLEACTION_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ROLEEVENT" ADD CONSTRAINT "FK_ROLEACTION_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "ROLEEVENT" ADD CONSTRAINT "FK_ROLEACTION_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEFUNC
--------------------------------------------------------

  ALTER TABLE "ROLEFUNC" ADD CONSTRAINT "FK_ROLEOBJECT_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEORG
--------------------------------------------------------

  ALTER TABLE "ROLEORG" ADD CONSTRAINT "FK_ROLEORG_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "ROLEORG" ADD CONSTRAINT "FK_ROLEORG_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEREFCLASS
--------------------------------------------------------

  ALTER TABLE "ROLEREFCLASS" ADD CONSTRAINT "FK_ROLEREF_REFNAME" FOREIGN KEY ("REF_NAME")
	  REFERENCES "REFERENCECLASS" ("NAME") ;
 
  ALTER TABLE "ROLEREFCLASS" ADD CONSTRAINT "FK_ROLEREF_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLEREGISTER
--------------------------------------------------------

  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_DOCUMENTCLASS" FOREIGN KEY ("DOCUMENTCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_GRANTEDROLE" FOREIGN KEY ("GRANTEDROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_GRANTINGUSER" FOREIGN KEY ("GRANTINGUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_OPERTYPE" FOREIGN KEY ("OPERTYPE_ID")
	  REFERENCES "OPERTYPE" ("ID") ;
 
  ALTER TABLE "ROLEREGISTER" ADD CONSTRAINT "FK_ROLEREGISTER_SYSUSER" FOREIGN KEY ("USER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table ROLERIGHT
--------------------------------------------------------

  ALTER TABLE "ROLERIGHT" ADD CONSTRAINT "FK_ROLERIGHT_SYSRIGHT" FOREIGN KEY ("SYSRIGHT_NAME")
	  REFERENCES "SYSRIGHT" ("NAME") ;
 
  ALTER TABLE "ROLERIGHT" ADD CONSTRAINT "FK_ROLERIGHT_USERROLE" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES "USERROLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPL
--------------------------------------------------------

  ALTER TABLE "RPL" ADD CONSTRAINT "FK_RPL_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "RPL" ADD CONSTRAINT "FK_RPL_MASTER" FOREIGN KEY ("MASTER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "RPL" ADD CONSTRAINT "FK_RPL_RPLOBJECT" FOREIGN KEY ("RPLOBJECT_ID")
	  REFERENCES "RPLOBJECT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table RPL$CONSTRAINTFIELDS
--------------------------------------------------------

  ALTER TABLE "RPL$CONSTRAINTFIELDS" ADD CONSTRAINT "FK_CONSTRFIELDS_CONSTRAINTS" FOREIGN KEY ("RPL$CONSTRAINTS_ID")
	  REFERENCES "RPL$CONSTRAINTS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPLRULEOBJ
--------------------------------------------------------

  ALTER TABLE "RPLRULEOBJ" ADD CONSTRAINT "FK_RPLRULEOBJ_RPLOBJECT" FOREIGN KEY ("RPLOBJECT_ID")
	  REFERENCES "RPLOBJECT" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "RPLRULEOBJ" ADD CONSTRAINT "FK_RPLRULEOBJ_RPLRULE" FOREIGN KEY ("RPLRULE_ID")
	  REFERENCES "RPLRULE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPLSITE
--------------------------------------------------------

  ALTER TABLE "RPLSITE" ADD CONSTRAINT "FK_RPLSITE_CLIENT" FOREIGN KEY ("CLIENT_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "RPLSITE" ADD CONSTRAINT "FK_RPLSITE_MASTER" FOREIGN KEY ("MASTER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "RPLSITE" ADD CONSTRAINT "FK_RPLSITE_RPLRULE" FOREIGN KEY ("RPLRULE_ID")
	  REFERENCES "RPLRULE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPLTABLEPLUGIN
--------------------------------------------------------

  ALTER TABLE "RPLTABLEPLUGIN" ADD CONSTRAINT "FK_PLUGIN_PARENTRPL" FOREIGN KEY ("PLUGIN_RPLTABLE_ID")
	  REFERENCES "RPLTABLE" ("ID") ;
 
  ALTER TABLE "RPLTABLEPLUGIN" ADD CONSTRAINT "FK_PLUGIN_RPLTABLE" FOREIGN KEY ("RPLTABLE_ID")
	  REFERENCES "RPLTABLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPLTABLINK
--------------------------------------------------------

  ALTER TABLE "RPLTABLINK" ADD CONSTRAINT "FK_RPLTABLINK_RPLTABLE" FOREIGN KEY ("RPLTABLE_ID")
	  REFERENCES "RPLTABLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RPLVERSIONLOG
--------------------------------------------------------

  ALTER TABLE "RPLVERSIONLOG" ADD CONSTRAINT "FK_RPLVERSIONLOG_RPLTABLE" FOREIGN KEY ("RPLTABLE_ID")
	  REFERENCES "RPLTABLE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQBUDGETLINE
--------------------------------------------------------

  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBL_GRANTINVESTMENT" FOREIGN KEY ("GRANTINVESTMENT_ID")
	  REFERENCES "GRANTINVESTMENT" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBL_INDUSTRYCODE" FOREIGN KEY ("INDUSTRYCODE_ID")
	  REFERENCES "INDUSTRYCODE" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBUDGETLINE_ESTIMATE" FOREIGN KEY ("ESTIMATE_ID")
	  REFERENCES "ESTIMATE" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBUDGETLINE_FINSRC" FOREIGN KEY ("FINSRC_ID")
	  REFERENCES "FINSRC" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBUDGETLINE_RECIPIENT" FOREIGN KEY ("RECIPIENT_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBUDGETLINE_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQBUDGETLINE" ADD CONSTRAINT "FK_RQBUDGETLINE_TERRITORY" FOREIGN KEY ("COUNTRY_ID", "TERRITORYCODE")
	  REFERENCES "TERRITORY" ("COUNTRY_ID", "CODE") ;
--------------------------------------------------------
--  Ref Constraints for Table RQCOMMEMBER
--------------------------------------------------------

  ALTER TABLE "RQCOMMEMBER" ADD CONSTRAINT "FK_RQCOMMEMBER_PERSONAL" FOREIGN KEY ("COMMEMBER_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "RQCOMMEMBER" ADD CONSTRAINT "FK_RQCOMMEMBER_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table RQCONDEALRESP
--------------------------------------------------------

  ALTER TABLE "RQCONDEALRESP" ADD CONSTRAINT "FK_RQCONDEALRESP_LOTPOS" FOREIGN KEY ("REQUEST_ID", "LOTPOS")
	  REFERENCES "RQLOT" ("REQUEST_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "RQCONDEALRESP" ADD CONSTRAINT "FK_RQCONDEALRESP_PERSONAL" FOREIGN KEY ("PERSONAL_ID")
	  REFERENCES "PERSONAL" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQCRITERION
--------------------------------------------------------

  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "FK_RQCRITERION_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "FK_RQCRITERION_RQLOT" FOREIGN KEY ("REQUEST_ID", "LOTPOS")
	  REFERENCES "RQLOT" ("REQUEST_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "RQCRITERION" ADD CONSTRAINT "FK_RQCRITERION_TENDERCRITERION" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQCRITERIONLINE
--------------------------------------------------------

  ALTER TABLE "RQCRITERIONLINE" ADD CONSTRAINT "FK_RQCRITERIONLINE_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQCRITERIONLINE" ADD CONSTRAINT "FK_RQCRITERIONLINE_RQCRITERION" FOREIGN KEY ("REQUEST_ID", "RQCRITERIONPOS")
	  REFERENCES "RQCRITERION" ("REQUEST_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table RQDOCCHILD
--------------------------------------------------------

  ALTER TABLE "RQDOCCHILD" ADD CONSTRAINT "FK_RQDOCCHILD_DOC" FOREIGN KEY ("DOC_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQDOCCHILD" ADD CONSTRAINT "FK_RQDOCCHILD_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
 
  ALTER TABLE "RQDOCCHILD" ADD CONSTRAINT "FK_RQDOCCHILD_ORDER" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQDOCREQ
--------------------------------------------------------

  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "FK_RQDOCREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "FK_RQDOCREQ_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQDOCREQ" ADD CONSTRAINT "FK_RQDOCREQ_RQLOT" FOREIGN KEY ("REQUEST_ID", "LOTPOS")
	  REFERENCES "RQLOT" ("REQUEST_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table RQFEATURE
--------------------------------------------------------

  ALTER TABLE "RQFEATURE" ADD CONSTRAINT "FK_RQFEATURE_PLFEATURE" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
 
  ALTER TABLE "RQFEATURE" ADD CONSTRAINT "FK_RQFEATURE_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQFEATURE" ADD CONSTRAINT "FK_RQFEATURE_RQLOT" FOREIGN KEY ("REQUEST_ID", "LOTPOS")
	  REFERENCES "RQLOT" ("REQUEST_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table RQGOODS
--------------------------------------------------------

  ALTER TABLE "RQGOODS" ADD CONSTRAINT "FK_RQGOODS_GROUP" FOREIGN KEY ("GROUPCODE")
	  REFERENCES "GOODSGROUP" ("CODE") ;
 
  ALTER TABLE "RQGOODS" ADD CONSTRAINT "FK_RQGOODS_OKDP_CODE" FOREIGN KEY ("OKDP_CODE")
	  REFERENCES "GOODSOKDP" ("CODE") ;
 
  ALTER TABLE "RQGOODS" ADD CONSTRAINT "FK_RQGOODS_OKPD" FOREIGN KEY ("OKPD_ID")
	  REFERENCES "GOODSOKPD" ("ID") ;
 
  ALTER TABLE "RQGOODS" ADD CONSTRAINT "FK_RQGOODS_OKVED" FOREIGN KEY ("OKVED_ID")
	  REFERENCES "GOODSOKVED" ("ID") ;
 
  ALTER TABLE "RQGOODS" ADD CONSTRAINT "FK_RQGOODS_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQGOODSPROP
--------------------------------------------------------

  ALTER TABLE "RQGOODSPROP" ADD CONSTRAINT "FK_RQGOODSPROP_RQGOODS" FOREIGN KEY ("REQUEST_ID", "GOODSPOS")
	  REFERENCES "RQGOODS" ("REQUEST_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table RQLOT
--------------------------------------------------------

  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_APPBANK" FOREIGN KEY ("GUARAPPBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_APPPERSACC_ID" FOREIGN KEY ("GUARAPPPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_APPSETTACC_ID" FOREIGN KEY ("GUARAPPSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CONBANK" FOREIGN KEY ("GUARANTEECONTRACTBIC")
	  REFERENCES "BANK" ("BIC") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CONMNGRRESP" FOREIGN KEY ("CONMNGRRESP_ID")
	  REFERENCES "PERSONAL" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CONPERSACC_ID" FOREIGN KEY ("GUARCONTRPERSONALACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CONSETTACC_ID" FOREIGN KEY ("GUARCONTRSETTLEMENTACC_ID")
	  REFERENCES "ORGACCOUNT" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CONTYPE" FOREIGN KEY ("CONTYPE_ID")
	  REFERENCES "CONTYPE" ("ID") ;
 
  ALTER TABLE "RQLOT" ADD CONSTRAINT "FK_RQLOT_CURRENCY" FOREIGN KEY ("CURRENCY_ID")
	  REFERENCES "CURRENCY" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQOPTIMIZEDPRICE
--------------------------------------------------------

  ALTER TABLE "RQOPTIMIZEDPRICE" ADD CONSTRAINT "FK_RQOPTIMIZEDPRICE_REQUEST" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQPAYSHEDULE
--------------------------------------------------------

  ALTER TABLE "RQPAYSHEDULE" ADD CONSTRAINT "FK_RQPAYSHEDULE_RQBUDGETLINE" FOREIGN KEY ("REQUEST_ID", "BUDGETLINEPOS")
	  REFERENCES "RQBUDGETLINE" ("REQUEST_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table RQQUALREQ
--------------------------------------------------------

  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "FK_RQQUALREQ_PLACEMENTFEAT" FOREIGN KEY ("PLACEMENTFEATURE_ID")
	  REFERENCES "PLACEMENTFEATURE" ("ID") ;
 
  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "FK_RQQUALREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
 
  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "FK_RQQUALREQ_RQLOT" FOREIGN KEY ("REQUEST_ID", "LOTPOS")
	  REFERENCES "RQLOT" ("REQUEST_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "RQQUALREQ" ADD CONSTRAINT "FK_RQQUAL_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table RQSUPPLYSHEDULE
--------------------------------------------------------

  ALTER TABLE "RQSUPPLYSHEDULE" ADD CONSTRAINT "FK_RQSUPPLYSHEDULE_RQBDGTLINE" FOREIGN KEY ("REQUEST_ID", "BUDGETLINEPOS")
	  REFERENCES "RQBUDGETLINE" ("REQUEST_ID", "POS") ;
 
  ALTER TABLE "RQSUPPLYSHEDULE" ADD CONSTRAINT "FK_RQSUPPLYSHEDULE_RQGOODS" FOREIGN KEY ("REQUEST_ID", "GOODSPOS")
	  REFERENCES "RQGOODS" ("REQUEST_ID", "POS") ;
--------------------------------------------------------
--  Ref Constraints for Table RQVENDOR
--------------------------------------------------------

  ALTER TABLE "RQVENDOR" ADD CONSTRAINT "FK_RQVENDOR_ORGFORM" FOREIGN KEY ("PROPFORM_ID")
	  REFERENCES "ORGFORM" ("ID") ;
 
  ALTER TABLE "RQVENDOR" ADD CONSTRAINT "FK_RQVENDOR_REQUESTDOC" FOREIGN KEY ("REQUEST_ID")
	  REFERENCES "REQUESTDOC" ("ID") ;
 
  ALTER TABLE "RQVENDOR" ADD CONSTRAINT "FK_RQVENDOR_VENDOR" FOREIGN KEY ("VENDOR_ID")
	  REFERENCES "ORG" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SCHEXPDOCS
--------------------------------------------------------

  ALTER TABLE "SCHEXPDOCS" ADD CONSTRAINT "FK_SCHEXPDOCS_DOCUMENTCLASS" FOREIGN KEY ("DOCCLASS_ID")
	  REFERENCES "DOCUMENTCLASS" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SCHPLAN
--------------------------------------------------------

  ALTER TABLE "SCHPLAN" ADD CONSTRAINT "FK_SCHPLAN_SCHTASK" FOREIGN KEY ("SCHTASK_ID")
	  REFERENCES "SCHTASK" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table SERVERACTION
--------------------------------------------------------

  ALTER TABLE "SERVERACTION" ADD CONSTRAINT "FK_SRVRACTION_SRVRPROCESSOR" FOREIGN KEY ("SERVERPROCESSOR_ID")
	  REFERENCES "SERVERPROCESSOR" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SIGNEXPORTLOG
--------------------------------------------------------

  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "FK_SEL_DIGEST" FOREIGN KEY ("DIGEST_ID")
	  REFERENCES "DIGEST" ("ID") ;
 
  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "FK_SEL_DISPSTATUS" FOREIGN KEY ("DISPSTATUS_ID")
	  REFERENCES "DISPSTATUS" ("ID") ;
 
  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "FK_SEL_DOCATTACHEX" FOREIGN KEY ("DOCATTACHEX_ID")
	  REFERENCES "DOCATTACHEX" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "SIGNEXPORTLOG" ADD CONSTRAINT "FK_SEL_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SIGNTYPE
--------------------------------------------------------

  ALTER TABLE "SIGNTYPE" ADD CONSTRAINT "FK_SIGNTYPE_SIGNFORMAT" FOREIGN KEY ("SIGNFORMAT_ID")
	  REFERENCES "SIGNFORMAT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table STOREDDOCUMENTS
--------------------------------------------------------

  ALTER TABLE "STOREDDOCUMENTS" ADD CONSTRAINT "FK_STOREDDOCUMENTS_DOCUMENT" FOREIGN KEY ("DOCUMENT_ID")
	  REFERENCES "DOCUMENT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table STOREPLACE
--------------------------------------------------------

  ALTER TABLE "STOREPLACE" ADD CONSTRAINT "FK_STOREPLACE_GOODS" FOREIGN KEY ("GOODSID")
	  REFERENCES "PLGOODS" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table SUPPLYPLACE
--------------------------------------------------------

  ALTER TABLE "SUPPLYPLACE" ADD CONSTRAINT "FK_SUPPLYPLACE_GOODS" FOREIGN KEY ("GOODSID")
	  REFERENCES "PLGOODS" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  ALTER TABLE "SUPPORTCRYPTOLIBFORMAT" ADD CONSTRAINT "FK_FORMAT_SUPPORTCRYPTOLIB_ID" FOREIGN KEY ("SUPPORTCRYPTOLIB_ID")
	  REFERENCES "SUPPORTCRYPTOLIB" ("ID") ;
 
  ALTER TABLE "SUPPORTCRYPTOLIBFORMAT" ADD CONSTRAINT "FK_SIGNFORMAT_ID" FOREIGN KEY ("SIGNFORMAT_ID")
	  REFERENCES "SIGNFORMAT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  ALTER TABLE "SUPPORTCRYPTOLIBPARAM" ADD CONSTRAINT "FK_PARAM_SUPPORTCRYPTOLIB_ID" FOREIGN KEY ("SUPPORTCRYPTOLIB_ID")
	  REFERENCES "SUPPORTCRYPTOLIB" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SYSEVENT
--------------------------------------------------------

  ALTER TABLE "SYSEVENT" ADD CONSTRAINT "FK_SYSMSG_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SYSPARAM
--------------------------------------------------------

  ALTER TABLE "SYSPARAM" ADD CONSTRAINT "FK_SYSPARAM_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table SYSUSER
--------------------------------------------------------

  ALTER TABLE "SYSUSER" ADD CONSTRAINT "FK_SYSUSER_DOMEN" FOREIGN KEY ("DOMEN_ID")
	  REFERENCES "DOMEN" ("ID") ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "FK_SYSUSER_MENU" FOREIGN KEY ("MENU_ID")
	  REFERENCES "MENU" ("ID") ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "FK_SYSUSER_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "FK_SYSUSER_PANEL" FOREIGN KEY ("PANEL_ID")
	  REFERENCES "PANEL" ("ID") ;
 
  ALTER TABLE "SYSUSER" ADD CONSTRAINT "FK_SYSUSER_PERSON" FOREIGN KEY ("PERSON_ID")
	  REFERENCES "PERSON" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table SYSUSEREXT
--------------------------------------------------------

  ALTER TABLE "SYSUSEREXT" ADD CONSTRAINT "FK_SYSUSEREXT_SYSUSER" FOREIGN KEY ("ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table TASKJOURNAL
--------------------------------------------------------

  ALTER TABLE "TASKJOURNAL" ADD CONSTRAINT "FK_TASKJOURNAL_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TENDER
--------------------------------------------------------

  ALTER TABLE "TENDER" ADD CONSTRAINT "FK_TENDER_CMPCOMPETITOR" FOREIGN KEY ("ORDER_ID", "COMPETITORPOS")
	  REFERENCES "CMPCOMPETITOR" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "TENDER" ADD CONSTRAINT "FK_TENDER_CMPCRITERION" FOREIGN KEY ("ORDER_ID", "CRITERIONPOS")
	  REFERENCES "CMPCRITERION" ("ORDER_ID", "POS") ON DELETE CASCADE ;
 
  ALTER TABLE "TENDER" ADD CONSTRAINT "FK_TENDER_TENDERCRITERION" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TENDERCRITERIONCHILD
--------------------------------------------------------

  ALTER TABLE "TENDERCRITERIONCHILD" ADD CONSTRAINT "FK_TENDERCRITERIONCHILD_CHILD" FOREIGN KEY ("CHILD_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
 
  ALTER TABLE "TENDERCRITERIONCHILD" ADD CONSTRAINT "FK_TENDERCRITERIONCHILD_CRIT" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TENDERCRITERIONPM
--------------------------------------------------------

  ALTER TABLE "TENDERCRITERIONPM" ADD CONSTRAINT "FK_TCPM_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "TENDERCRITERIONPM" ADD CONSTRAINT "FK_TCPM_TENDERCRITERION" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TENDERLINE
--------------------------------------------------------

  ALTER TABLE "TENDERLINE" ADD CONSTRAINT "FK_TENDERLINE_CMPCRITERIONLINE" FOREIGN KEY ("ORDER_ID", "CRITERIONPOS", "CRITERIONLINESEQORDER")
	  REFERENCES "CMPCRITERIONLINE" ("ORDER_ID", "CMPCRITERIONPOS", "SEQORDER") ;
 
  ALTER TABLE "TENDERLINE" ADD CONSTRAINT "FK_TENDERLINE_TENDER" FOREIGN KEY ("TENDER_ID")
	  REFERENCES "TENDER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TENDERLINECOMM
--------------------------------------------------------

  ALTER TABLE "TENDERLINECOMM" ADD CONSTRAINT "FK_TENDERCOMMLINE_TENDERLINE" FOREIGN KEY ("TENDERLINE_ID")
	  REFERENCES "TENDERLINE" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "TENDERLINECOMM" ADD CONSTRAINT "FK_TENDERLINECOMM_CMPCOMMEMBER" FOREIGN KEY ("ORDER_ID", "COMMEMBERPOS")
	  REFERENCES "CMPCOMMEMBER" ("ORDER_ID", "POS") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table TERRITORY
--------------------------------------------------------

  ALTER TABLE "TERRITORY" ADD CONSTRAINT "FK_TERRITORY_COUNTRY" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "COUNTRY" ("ID") ;
 
  ALTER TABLE "TERRITORY" ADD CONSTRAINT "FK_TERRITORY_PARENT" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "TERRITORY" ("ID") ;
 
  ALTER TABLE "TERRITORY" ADD CONSTRAINT "FK_TERRITORY_TERTYPE" FOREIGN KEY ("TERTYPE_ID")
	  REFERENCES "TERTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TER_TREE
--------------------------------------------------------

  ALTER TABLE "TER_TREE" ADD CONSTRAINT "FK_TER_TREE_TERRITORY" FOREIGN KEY ("TER_ID")
	  REFERENCES "TERRITORY" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table TYPECRIT
--------------------------------------------------------

  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "FK_TYPECRIT_TENDERCRITERION" FOREIGN KEY ("TENDERCRITERION_ID")
	  REFERENCES "TENDERCRITERION" ("ID") ;
 
  ALTER TABLE "TYPECRIT" ADD CONSTRAINT "FK_TYPECRIT_TYPEREQCRIT" FOREIGN KEY ("TYPEREQCRITID")
	  REFERENCES "TYPEREQCRIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TYPECRITLINE
--------------------------------------------------------

  ALTER TABLE "TYPECRITLINE" ADD CONSTRAINT "FK_TYPECRITLINE_TYPECRIT" FOREIGN KEY ("TYPEREQCRIT_ID", "TYPECRITPOS")
	  REFERENCES "TYPECRIT" ("TYPEREQCRITID", "POS") ;
 
  ALTER TABLE "TYPECRITLINE" ADD CONSTRAINT "FK_TYPECRITLINE_TYPEREQCRIT" FOREIGN KEY ("TYPEREQCRIT_ID")
	  REFERENCES "TYPEREQCRIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TYPEDOCREQ
--------------------------------------------------------

  ALTER TABLE "TYPEDOCREQ" ADD CONSTRAINT "FK_TYPEDOCREQ_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "TYPEDOCREQ" ADD CONSTRAINT "FK_TYPEDOCREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TYPEDOCREQGROUP
--------------------------------------------------------

  ALTER TABLE "TYPEDOCREQGROUP" ADD CONSTRAINT "FK_TYPEDOCREQGROUP_PURCHMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TYPEREQ
--------------------------------------------------------

  ALTER TABLE "TYPEREQ" ADD CONSTRAINT "FK_TYPEREQ_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
 
  ALTER TABLE "TYPEREQ" ADD CONSTRAINT "FK_TYPEREQ_REQTYPE" FOREIGN KEY ("REQUIREMENTTYPE_ID")
	  REFERENCES "REQUIREMENTTYPE" ("ID") ;
 
  ALTER TABLE "TYPEREQ" ADD CONSTRAINT "FK_TYPEREQ_TYPEREQCRIT" FOREIGN KEY ("TYPEREQCRITID")
	  REFERENCES "TYPEREQCRIT" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table TYPEREQCRIT
--------------------------------------------------------

  ALTER TABLE "TYPEREQCRIT" ADD CONSTRAINT "FK_TYPEREQCRIT_PURCHASEMODE" FOREIGN KEY ("PURCHASEMODE_ID")
	  REFERENCES "PURCHASEMODE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table UPDPACKAGE
--------------------------------------------------------

  ALTER TABLE "UPDPACKAGE" ADD CONSTRAINT "FK_UPDPACKAGE_RECEIVER" FOREIGN KEY ("RECEIVER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
 
  ALTER TABLE "UPDPACKAGE" ADD CONSTRAINT "FK_UPDPACKAGE_SENDER" FOREIGN KEY ("SENDER_ID")
	  REFERENCES "MSGSITE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table USERBUDGET
--------------------------------------------------------

  ALTER TABLE "USERBUDGET" ADD CONSTRAINT "FK_USERBUDGET_ORG" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "USERBUDGET" ADD CONSTRAINT "FK_USERBUDGET_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table USERCERT
--------------------------------------------------------

  ALTER TABLE "USERCERT" ADD CONSTRAINT "FK_USERCERT_CRLPOINT" FOREIGN KEY ("CRLPOINT_ID")
	  REFERENCES "CRLPOINT" ("ID") ON DELETE SET NULL ;
 
  ALTER TABLE "USERCERT" ADD CONSTRAINT "FK_USERCERT_SIGNTYPE" FOREIGN KEY ("SIGNTYPE_ID")
	  REFERENCES "SIGNTYPE" ("ID") ;
 
  ALTER TABLE "USERCERT" ADD CONSTRAINT "FK_USERCERT_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table USERCERTSYSUSER
--------------------------------------------------------

  ALTER TABLE "USERCERTSYSUSER" ADD CONSTRAINT "FK_SYSUSER_USSU" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "USERCERTSYSUSER" ADD CONSTRAINT "FK_USERCERT_USSU" FOREIGN KEY ("USERCERT_ID")
	  REFERENCES "USERCERT" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table USERORG
--------------------------------------------------------

  ALTER TABLE "USERORG" ADD CONSTRAINT "FK_USERORG_ORG" FOREIGN KEY ("ORG_ID")
	  REFERENCES "ORG" ("ID") ON DELETE CASCADE ;
 
  ALTER TABLE "USERORG" ADD CONSTRAINT "FK_USERORG_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table USERPROFILE
--------------------------------------------------------

  ALTER TABLE "USERPROFILE" ADD CONSTRAINT "FK_USERPROFILE_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  Ref Constraints for Table USERSESSION
--------------------------------------------------------

  ALTER TABLE "USERSESSION" ADD CONSTRAINT "FK_USERSESSION_SYSUSER" FOREIGN KEY ("SYSUSER_ID")
	  REFERENCES "SYSUSER" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table USESCRYPTOLIB
--------------------------------------------------------

  ALTER TABLE "USESCRYPTOLIB" ADD CONSTRAINT "FK_USESCRYPLIB_SUPPORTCRYPLIB" FOREIGN KEY ("SUPPORTCRYPTOLIB_ID")
	  REFERENCES "SUPPORTCRYPTOLIB" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table USESCRYPTOLIBPARAM
--------------------------------------------------------

  ALTER TABLE "USESCRYPTOLIBPARAM" ADD CONSTRAINT "FK_USESCRYPTOLIBPARAM" FOREIGN KEY ("USESCRYPTOLIB_ID")
	  REFERENCES "USESCRYPTOLIB" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table WEBSTATCACHE
--------------------------------------------------------

  ALTER TABLE "WEBSTATCACHE" ADD CONSTRAINT "FK_WEBSTAT_BUDGET" FOREIGN KEY ("BUDGET_ID")
	  REFERENCES "BUDGET" ("ID") ;
 
  ALTER TABLE "WEBSTATCACHE" ADD CONSTRAINT "FK_WEBSTAT_STATSOURCE" FOREIGN KEY ("STATISTICSSOURCE_ID")
	  REFERENCES "STATISTICSSOURCE" ("ID") ;
--------------------------------------------------------
--  Ref Constraints for Table WEBSTATCACHEVAL
--------------------------------------------------------

  ALTER TABLE "WEBSTATCACHEVAL" ADD CONSTRAINT "FK_WEBSTATVAL_WEBSTATCACHE" FOREIGN KEY ("WEBSTAT_ID")
	  REFERENCES "WEBSTATCACHE" ("ID") ON DELETE CASCADE ;
--------------------------------------------------------
--  DDL for Index PK_ORGSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USERBUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_PAYCONDITION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_PAYCONDITION" ON "PLAN2LEDGER" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_NUMGENERATO
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_NUMGENERATO" ON "DOCUMENTCLASS" ("NUMGENERATOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQCRITERION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_NUMGENERATOR_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQDOCREQ_LOTPOSREQUEST_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQDOCREQ_LOTPOSREQUEST_ID" ON "RQDOCREQ" ("REQUEST_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NOTICEORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONTRACTDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_INVBUDGE_RECIPIENTACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVBUDGE_RECIPIENTACC_ID" ON "INVBUDGETLINE" ("RECIPIENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SIGNEXPORTLOG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_PREFERENCEGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SYSUSER_MENU
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSUSER_MENU" ON "SYSUSER" ("MENU_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_INTERBUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CLAIMDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CLAIMDOC_DISPSTATUS" ON "CLAIMDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONSTRAINTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GBGO_GOODSBAN_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_GBGO_GOODSBAN_ID" ON "GOODSBANGOODSOKPD" ("GOODSBAN_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_PLAN2LEDGER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTRACTDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_STOREPLACE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCRETENTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CERETPENALTY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_OFFERDOC_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFFERDOC_CMPORG_ID" ON "OFFERDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NUMUSAGE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPVOTER_CMPCOMMEMBERPOSO
--------------------------------------------------------

  CREATE INDEX "IFK_CMPVOTER_CMPCOMMEMBERPOSO" ON "CMPVOTERESULT" ("ORDER_ID", "CMPCOMMEMBERPOS") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSAPPLICATION_NUMBER
--------------------------------------------------------

  CREATE INDEX "IDX_OOSAPPLICATION_NUMBER" ON "OOSAPPLICATION" ("JOURNALNUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_PLACINGWAY
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_PLACINGWAY" ON "REQUESTDOC" ("PLACINGWAY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPWORKGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONCONTRACTOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_ORG_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_ORG_CONTRACTOR" ON "LEDGER" ("CONTRACTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPPHASE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_MODULE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_MODULE" ON "DOCUMENTCLASS" ("CLIENTMODULE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PURCHASEMETHOD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_COMMISSION_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_COMMISSION_ORG" ON "COMMISSION" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CURRENCY_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_DOCUMENT" ON "PLAN2DOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_USSU
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DBCONNECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OFFERDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_KEEPERACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_KEEPERACC_ID" ON "ORGACCOUNT" ("KEEPERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRCARDDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRCARDDOC_BUDGET" ON "CONTRACTCARDDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_BUDGET" ON "LEDGER" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RESERVEDLINE_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_RESERVEDLINE_DISPSTATUS" ON "RESERVEDBUDGETLINE" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_DISPSTATUS" ON "CAVILDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONCONFIRMINGDOCS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGPERSONAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DOCREP_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OOSCONTRACTSUPPLIER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USERORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_DISPSTATUS" ON "RECOILDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_EXECUTERACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_EXECUTERACC_ID" ON "ORGACCOUNT" ("EXECUTERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NMSG_SENDER
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSG_SENDER" ON "NOTIFYMSG" ("SENDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGETP_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGETP_ETP" ON "ORGETP" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPPLACE_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPLACE_CUSTOMER" ON "CMPPLACE" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DATASOURCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSGROUP_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSGROUP_OKPD" ON "GOODSGROUP" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RBL_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_RBL_GRANTINVESTMENT" ON "RESERVEDBUDGETLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRGOODS_OKPD" ON "OFRGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCCOMMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_REPPROFILE_FORM_NAME
--------------------------------------------------------

  CREATE INDEX "IDX_REPPROFILE_FORM_NAME" ON "REPPROFILE" ("FORM_NAME") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GROUPPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CMPORGPOSTCOUNTR
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CMPORGPOSTCOUNTR" ON "ORDERDOC" ("CMPORGPOSTCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CURRENCY" ON "PLAN2ARRANGEMENT" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_APPMODULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSDOCDETAIL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_DOCUMENT" ON "ROLEREGISTER" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPOOSMODIF_CMPPHASE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPOOSMODIF_CMPPHASE" ON "CMPOOSMODIFICATION" ("ORDER_ID", "PHASEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_APPOBJ_APPMODULE2
--------------------------------------------------------

  CREATE INDEX "J_FK_APPOBJ_APPMODULE2" ON "APPMODULEDEPENDENCY" ("DEPENDID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPRODUCT_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPRODUCT_UNIT" ON "PLAN2OOSPRODUCT" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_GRANTINVESTMEN
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_GRANTINVESTMEN" ON "PLAN2GOODS" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_PURCHASEMODE" ON "PLAN2LEDGER" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FCTGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_FCTGOODS_OKPD" ON "FCTGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREF_REFNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREF_REFNAME" ON "ROLEREFCLASS" ("REF_NAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPVENDOR_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPVENDOR_ORGFORM" ON "CMPVENDOR" ("PROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NECESSITY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_OPERTYPE" ON "ROLEREGISTER" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPCRITE_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPCRITE_LOTPOSORDER_ID" ON "CMPCRITERION" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SUPPORTCRYPTOLIB
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_INDUSTRYCODE" ON "LEDGER" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_BANK_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_BANK_ID" ON "ORGACCOUNT" ("BANK_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_PREFERENCEGROUPFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_OPERTYPE" ON "OFFERDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REPFORM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKDP_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKDP_PARENT" ON "GOODSOKDP" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKDPPREFCOUNTRY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCDIGESTROLES_DOCACTION
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCDIGESTROLES_DOCACTION" ON "DOCDIGESTROLES" ("DOCACTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PROHIBITION
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PROHIBITION" ON "PLAN3PURCHASEDOC" ("PROHIBITIONSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_OKVED" ON "PLAN3PURCHASEGOODS" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_CUSTOMER" ON "CAVILDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_SYSRIGHT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_CMPORG" ON "CAVILDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLANDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLANDOC_NECESSITY" ON "PLANDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSOKVED_POSITION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSOKVED_POSITION" ON "PLAN2OOSOKVED" ("PLAN2OOSPOSITION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_MSG_RECEIVER
--------------------------------------------------------

  CREATE INDEX "J_FK_MSG_RECEIVER" ON "MSG" ("RECEIVER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONSOLIDDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CONSOLIDDOC_DISPSTATUS" ON "CONSOLIDDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_DOCUMENTCLASS" ON "DOCUMENT" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTEMPDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CONTEMPDOC_DATENUM" ON "CONTRACTTEMPLATEDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLANDOC_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLANDOC_RECIPIENT_ID" ON "PLANDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_PAYCONDITION
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_PAYCONDITION" ON "LEDGER" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCFLAG_DOC_FLAGTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RPL_CLIENT
--------------------------------------------------------

  CREATE INDEX "J_FK_RPL_CLIENT" ON "RPL" ("CLIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CETERMLINE_TERMREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_CETERMLINE_TERMREASON" ON "CETERMINATIONLINE" ("TERMINATIONREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITYEXPENSE_CREDENTI
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITYEXPENSE_CREDENTI" ON "LIABILITYEXPENSE" ("CREDENTIAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_DOCSELEC_COMPETITORPOSORD
--------------------------------------------------------

  CREATE INDEX "IFK_DOCSELEC_COMPETITORPOSORD" ON "DOCSELECT" ("ORDER_ID", "COMPETITORPOS") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPVENDO_VENDOR_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPVENDO_VENDOR_ID" ON "CMPVENDOR" ("VENDOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NMSGRULE_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSGRULE_DOCUMENTCLASS" ON "NOTIFYMSGRULE" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHCARRY_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHCARRY_PURCHASEMODE" ON "PURCHASECARRY" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQBL_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_RQBL_GRANTINVESTMENT" ON "RQBUDGETLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ESCHECKRULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_GOODSOKPD_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTRACTDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTEMPDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGUNFAIR_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGUNFAIR_PURCHASEMODE" ON "ORGUNFAIR" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_ETP" ON "OFFERDOC" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_METACONSTRAINT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_OFRDECREASON_LOT
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRDECREASON_LOT" ON "OFRDECREASON" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FACTDOCTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMDOC_BUDGET" ON "CLAIMDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DECREASON_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_DECREASON_BUDGET" ON "DECREASON" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_MENUITEM_MENU
--------------------------------------------------------

  CREATE INDEX "J_FK_MENUITEM_MENU" ON "MENUITEM" ("MENU_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DIGEST_FGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGEST_FGROUP" ON "DIGEST" ("FGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NOTICEDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_NOTICEDOC_DISPSTATUS" ON "NOTICEDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSPROTOCOL_TYPE
--------------------------------------------------------

  CREATE INDEX "IDX_OOSPROTOCOL_TYPE" ON "OOSPROTOCOL" ("NOTIFICATIONNUMBER", "PROTOCOLTYPE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITYEXPENSE_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITYEXPENSE_BUDGET" ON "LIABILITYEXPENSE" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_IDENTIFICCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_IDENTIFICCODE" ON "PLAN2LEDGER" ("IDENTIFICCODECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_APPOBJ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_DESCRIPTION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_DESCRIPTION" ON "PLAN2LEDGER" ("DESCRIPTIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GPM_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_GPM_PURCHASEMODE" ON "GOODSGROUPPURCHASEMODE" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NUMSEQUENCE_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_NUMSEQUENCE_BUDGET" ON "NUMSEQUENCE" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_APPOBJPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCSELECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONPERSACC_ID" ON "REQUESTDOC" ("GUARCONTRPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REPDOCUMENT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TCPM_TENDERCRITERION
--------------------------------------------------------

  CREATE INDEX "J_FK_TCPM_TENDERCRITERION" ON "TENDERCRITERIONPM" ("TENDERCRITERION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REQUESTDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OKTMO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPLTABLINK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ATTACHED_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ATTACHED_DOCUMENT_ID" ON "ATTACHEDPLANDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_P3SHED
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE2
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE2" ON "KLADRSTREET" ("CODE2") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCWEBLINK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3GO_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GO_OKVED" ON "PLAN3PURCHASEGOODSOKVED" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_DISPSTATUS" ON "PLAN2DOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_COMMISSION
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_COMMISSION" ON "ORDERDOC" ("COMMISSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_RESPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_RESPORG" ON "PLAN3DOC" ("RESPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_UNIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCEVERRLOG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SYSUSER_DOMEN
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSUSER_DOMEN" ON "SYSUSER" ("DOMEN_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGETP_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGETP_SYSUSER" ON "ORGETP" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORDERSUM_ORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERSUM_ORDER_ID" ON "ORDERSUMMARY" ("ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OFFERDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_OFFERDOC_DISPSTATUS" ON "OFFERDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERSESSION_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_USERSESSION_SYSUSER" ON "USERSESSION" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_P2ARRANGEMENT_CMPORG
--------------------------------------------------------

  CREATE INDEX "IDX_P2ARRANGEMENT_CMPORG" ON "PLAN2ARRANGEMENT" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_COMPLAINTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_COMPLAINTDOC_DISPSTATUS" ON "COMPLAINTDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTEXECDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTEXECDOC_DISPSTATUS" ON "CONTRACTEXECDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_INSTANCE_LINK
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_INSTANCE_LINK" ON "DOCUMENT" ("INSTANCE_LINK", "DOCUMENTCLASS_ID", "BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INDUSTRYCODE_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_INDUSTRYCODE_PARENT" ON "INDUSTRYCODE" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_EXPORT_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_EXPORT_PARENT" ON "FACTDOC" ("EXPORT_PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_CMPORG" ON "PLAN2LEDGER" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_RECIPIENT
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_RECIPIENT" ON "ORDERDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TYPECRIT_TENDERCRITERION
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPECRIT_TENDERCRITERION" ON "TYPECRIT" ("TENDERCRITERION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORG_SERVEORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORG_SERVEORG_ID" ON "ORG" ("SERVEORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_REQUESTD_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_REQUESTD_CUSTOMER_ID" ON "REQUESTDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_DIGEST
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_DIGEST" ON "DIGEST" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DECREASON_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_DECREASON_DOCUMENTCLASS" ON "DECREASON" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_COMMEMBER_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_COMMEMBER_PERSONAL" ON "COMMEMBER" ("COMMEMBER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTREQ_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREQ_DISPSTATUS" ON "CERTREQUEST" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CEPENALTY_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_CEPENALTY_DOCUMENTCLASS" ON "CEPENALTY" ("CLAIM_DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_PROPFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_PROPFORM" ON "CONTRACTDOC" ("CONPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_OPERTYPE" ON "PLAN2DOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CERTREQUESTOID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_RECOILDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_RECOILDOC_DOC_DATE" ON "RECOILDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_LIABILITYGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_BUDGET" ON "PLAN3DOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_DISPSTATUS" ON "ROLEREGISTER" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_ACC
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_ACC" ON "OFFERDOC" ("VENDORACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PREFERENCEGROUPFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CURHISTORY_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_CURHISTORY_CURRENCY" ON "CURHISTORY" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN3DOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_CMPORG" ON "RECOILDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REFCLASS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_RPLRULE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CEPENALTY_DOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CEPENALTY_DOC_ID" ON "CEPENALTY" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGOOS223FZUSER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USERSESSIONACESS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GRANTINVESTMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_ROLEREGISTER
--------------------------------------------------------

  CREATE UNIQUE INDEX "UQ_ROLEREGISTER" ON "ROLEREGISTER" ("USER_ID", "GRANTEDROLE_ID", "GRANTDATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTOMER_FACTCOUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTOMER_FACTCOUNTRY" ON "CMPCUSTOMER" ("CUSTOMERFACTCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_VENDOREXECUTERAC
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_VENDOREXECUTERAC" ON "OFFERDOC" ("VENDOREXECUTERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GOODSOKDP_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_PERIODICITY
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_PERIODICITY" ON "PLAN2ARRANGEMENT" ("PERIODICITYCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_INSTITUTIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_ORDERDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CURRENCY" ON "PLAN3PURCHASEDOC" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RQDOCCHI_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQDOCCHI_DOCUMENT_ID" ON "RQDOCCHILD" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORG_PARENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORG_PARENT_ID" ON "ORG" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCJOURNAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DODIGESTULE_PARDISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DODIGESTULE_PARDISPSTATUS" ON "DOCDIGESTRULE" ("PARDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSEXTNUMBER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQQUALREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQQUALREQ_REQTYPE" ON "RQQUALREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PROCUREMENT_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCUREMENT_PERSONAL" ON "PROCUREMENT" ("RESPPERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ORGOOS223FZUSER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONCONTRACTOR_EXECUTERACC
--------------------------------------------------------

  CREATE INDEX "J_FK_CONCONTRACTOR_EXECUTERACC" ON "CONCONTRACTOR" ("ORGEXECUTERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CODETYPE_DISPLAY_ORDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_OWNER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_OWNER" ON "PLAN2DOC" ("OWNER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLANDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_PLANDOC_BUDGET" ON "PLANDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CRLFILE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TENDERLINECOMM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_OFRCRITE_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRCRITE_LOTPOSOFFER_ID" ON "OFRCRITERIONVAL" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_CMPLOT
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_CMPLOT" ON "CMPCUSTOMERLOT" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_EXPLANATION
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_EXPLANATION" ON "PLAN2ARRANGEMENT" ("EXPLANATIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_RECOILDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_RECOILDOC_DATENUM" ON "RECOILDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_APPBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_APPBANK" ON "CMPCUSTOMERLOT" ("GUARAPPBIC") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSPOSITION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DIGESTSIGN_USERROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGESTSIGN_USERROLE" ON "DIGESTSIGN" ("USERROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLANDOC_PLANYEAR
--------------------------------------------------------

  CREATE INDEX "IDX_PLANDOC_PLANYEAR" ON "PLANDOC" ("PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASEMETHOD_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASEMETHOD_ORG" ON "PURCHASEMETHOD" ("CREATORORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRQUALR_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRQUALR_LOTPOSOFFER_ID" ON "OFRQUALREQVAL" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_INDUSTRYCODE" ON "PLAN2LEDGER" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQOPTIMIZEDPRICE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE5
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE5" ON "KLADRSTREET" ("CODE5") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_REQUESTDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_REQUESTDOC_DATENUM" ON "REQUESTDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PRODUCTS_NOTIFICATIONLOT
--------------------------------------------------------

  CREATE INDEX "J_FK_PRODUCTS_NOTIFICATIONLOT" ON "OOSPRODUCTS" ("LOT_ID", "NOTIFICATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLGOODS_ORGID
--------------------------------------------------------

  CREATE INDEX "IFK_PLGOODS_ORGID" ON "PLGOODS" ("ORGID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRORGSTATUS_ORGSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRORGSTATUS_ORGSTATUS" ON "OFRORGSTATUS" ("ORGSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLANREQU_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLANREQU_DOCUMENT_ID" ON "PLANREQUEST" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_BUDGET" ON "CAVILDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REPFRAGMENT_REPSOURCE
--------------------------------------------------------

  CREATE INDEX "J_FK_REPFRAGMENT_REPSOURCE" ON "REPFRAGMENT" ("REPSOURCE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_DOCSELEC_DOCREQPOSORDER_I
--------------------------------------------------------

  CREATE INDEX "IFK_DOCSELEC_DOCREQPOSORDER_I" ON "DOCSELECT" ("ORDER_ID", "DOCREQPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PFPM_PLACEMENTFEATURE
--------------------------------------------------------

  CREATE INDEX "J_FK_PFPM_PLACEMENTFEATURE" ON "PLACEMENTFEATUREPM" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ORGATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCDIGESTRULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DESC_PLANDESC
--------------------------------------------------------

  CREATE INDEX "J_FK_DESC_PLANDESC" ON "PURCHASEPLAN" ("DESC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADR_ACTUAL
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_ACTUAL" ON "KLADR" ("ACTUAL") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPCUSTOMER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CRLPOINT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPPLACE_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPLACE_INDUSTRYCODE" ON "CMPPLACE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCFLAG_DOCFLAGTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCFLAG_DOCFLAGTYPE" ON "DOCFLAG" ("DOCFLAGTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSCUSTOMER_REGNUM
--------------------------------------------------------

  CREATE INDEX "IDX_OOSCUSTOMER_REGNUM" ON "OOSCUSTOMERREQUIREMENT" ("CUSTOMERREGNUM") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEACTION_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEACTION_DOCUMENTCLASS" ON "ROLEEVENT" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLNBUDGETLINE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNBUDGETLINE_FINSRC" ON "PLNBUDGETLINE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONPLACE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONPLACE_RECIPIENT_ID" ON "CONPLACE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_OFFERDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITY_LINES_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITY_LINES_ORG" ON "LIABILITYEXPENSE_DOCLINES" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DIGEST
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_DOCUMENT" ON "CAVILDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGHEARING
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_PURCHASEMODE" ON "LEDGER" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVENT_PROCTREE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVENT_PROCTREE" ON "DOCEVENT" ("PROCTREE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DESCGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REPFRAGMENTCHILD_FRAGMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_REPFRAGMENTCHILD_FRAGMENT" ON "REPFRAGMENTCHILD" ("REPFRAGMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONCOUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONCOUNTRY" ON "CONTRACTDOC" ("CONCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INV_PROPFORMID
--------------------------------------------------------

  CREATE INDEX "J_FK_INV_PROPFORMID" ON "INVOICEDOC" ("CONPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NMSG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ALTUNIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPCOMME_PHASEPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPCOMME_PHASEPOSORDER_ID" ON "CMPCOMMEMBER" ("ORDER_ID", "PHASEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_VENDORCOUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_VENDORCOUNTRY" ON "FACTDOC" ("VENDORCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONCONTRACTOR_PROPFORMID
--------------------------------------------------------

  CREATE INDEX "J_FK_CONCONTRACTOR_PROPFORMID" ON "CONCONTRACTOR" ("ORGPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_KLADRSTREET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_PACKTYPE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_FACTTERRITORY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_FACTTERRITORY" ON "PLAN3DOC" ("CUSTOMERFACTTERRITORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REFINANCINGRATE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_PURCHASEPLANLINE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_PURCHASEPLANLINE" ON "PLAN3PURCHASEGOODS" ("PLAN3PURCHASEDOC_ID", "PLAN3PURCHASELINEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_SERVERPROC
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_SERVERPROC" ON "DOCUMENTCLASS" ("SERVERPROCESSOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOSITION_PURCHMOD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOSITION_PURCHMOD" ON "PLAN2OOSPOSITION" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2DOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2DOC_DISPSTATUS" ON "PLAN2DOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSORGROLES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_APPSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_APPSETTACC_ID" ON "CMPCUSTOMERLOT" ("GUARAPPSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GROUPPROP_PROPTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_GROUPPROP_PROPTYPE" ON "GROUPPROP" ("PROPTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GBGO_GOODSOKPD_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_GBGO_GOODSOKPD_ID" ON "GOODSBANGOODSOKPD" ("GOODSOKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_LIABILITYCREDENTIAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2ARRANGEMENT_LOTNUMBE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2ARRANGEMENT_LOTNUMBE" ON "PLAN2ARRANGEMENT" ("LOTNUMBERCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_PLANDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_NMSGRULE_SENDER
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSGRULE_SENDER" ON "NOTIFYMSGRULE" ("SENDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSORGROLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLNGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_OKPD" ON "PLAN2GOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TENDERCRITERIONCHILD_CHIL
--------------------------------------------------------

  CREATE INDEX "J_FK_TENDERCRITERIONCHILD_CHIL" ON "TENDERCRITERIONCHILD" ("CHILD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TENDER_TENDERCRITERION
--------------------------------------------------------

  CREATE INDEX "J_FK_TENDER_TENDERCRITERION" ON "TENDER" ("TENDERCRITERION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONTEMPDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RQSUPPLYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCREQ_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCREQ_PURCHASEMODE" ON "DOCREQ" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCCLASS_DISPSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_ETPATTACH
--------------------------------------------------------

  CREATE INDEX "IDX_ETPATTACH" ON "ETPATTACH" ("ETPKEY", "ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE8
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE8" ON "PLAN2GOODS" ("CODE8") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TENDERLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_INVBUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPFORM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTREXECDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTREXECDOC_DISPSTATUS" ON "CONTRACTEXECDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQDOCCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCACTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_BUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CLIOBJCOMM_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CLIOBJCOMM_BUDGET" ON "CLIENTOBJECTCOMMENTS" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_USESCRYPTOLIB
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMDOC_CUSTOMER" ON "CLAIMDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLACEMENTFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DEVFACTFOUNDATION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCFLAGTYPE_CATEGORY
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCFLAGTYPE_CATEGORY" ON "DOCFLAGTYPE" ("CATEGORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_DIGESTSIGN_DOCATTACHEX
--------------------------------------------------------

  CREATE INDEX "IFK_DIGESTSIGN_DOCATTACHEX" ON "DIGESTSIGN" ("DOCATTACHEX_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PANELITEM_CLIENTOBJECT
--------------------------------------------------------

  CREATE INDEX "J_FK_PANELITEM_CLIENTOBJECT" ON "PANELITEM" ("CLIENTOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_APPPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_APPPERSACC_ID" ON "RQLOT" ("GUARAPPPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQCONDEALRESP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RESERVED_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RESERVED_RECIPIENT_ID" ON "RESERVEDBUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGOOS223FZUSER_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGOOS223FZUSER_SYSUSER" ON "ORGOOS223FZUSER" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_CUSTOMER" ON "RECOILDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FUNUNIT_FUNCAT
--------------------------------------------------------

  CREATE INDEX "J_FK_FUNUNIT_FUNCAT" ON "FUNUNIT" ("FUNCAT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ESTIMATE_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_ESTIMATE_BUDGET" ON "ESTIMATE" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPPHASE_COMMISSION
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPHASE_COMMISSION" ON "CMPPHASE" ("COMMISSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGACCOUNT_ORGACCTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGACCOUNT_ORGACCTYPE" ON "ORGACCOUNT" ("ORGACCTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_FACTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_FACTDOC_DISPSTATUS" ON "FACTDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONLOT_CONTRACT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONLOT_CONTRACT_ID" ON "CONLOT" ("CONTRACT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_NOTICEDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGROLES_ORGROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGROLES_ORGROLE" ON "ORGROLES" ("ORGROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSPROTOCOL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTEMPDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTEMPDOC_DISPSTATUS" ON "CONTRACTTEMPLATEDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_ORGFORM" ON "PLAN3DOC" ("CUSTOMERPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CMPORGPOSTCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CMPORGPOSTCODE" ON "ORDERDOC" ("CMPORGPOSTCOUNTRY_ID", "CMPORGPOSTTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_GOODSGROUP_PARENT_ID
--------------------------------------------------------

  CREATE INDEX "IDX_GOODSGROUP_PARENT_ID" ON "GOODSGROUP" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEBUDGET_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEBUDGET_BUDGET" ON "ROLEBUDGET" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRPLACE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRPLACE_RECIPIENT_ID" ON "OFRPLACE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_PARDISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_PARDISPSTATUS" ON "DOCUMENT" ("DOCUMENTCLASS_ID", "PARDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORDERSUMMARY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONBUDGETLINE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_CONBUDGETLINE_FINSRC" ON "CONBUDGETLINE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_PROHIBITION
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_PROHIBITION" ON "PLAN2ARRANGEMENT" ("PROHIBITIONSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TERTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_MAILATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CONSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CONSETTACC_ID" ON "RQLOT" ("GUARCONTRSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2CHANGEREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_NUMGENERATOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_PURCHMETHOD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_PURCHMETHOD" ON "PLAN2OOSPOSITION" ("PURCHASEMETHOD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_P3PURCHASEDOC_PLANYEAR
--------------------------------------------------------

  CREATE INDEX "IDX_P3PURCHASEDOC_PLANYEAR" ON "PLAN3PURCHASEDOC" ("PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORDERSUM_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERSUM_CUSTOMER_ID" ON "ORDERSUMMARY" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NUMPREFIX
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CLAIMDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_APPBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_APPBANK" ON "REQUESTDOC" ("GUARAPPBIC") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NTFYMSGRLE_RCVR_PERSON
--------------------------------------------------------

  CREATE INDEX "J_FK_NTFYMSGRLE_RCVR_PERSON" ON "NOTIFYMSGRULE_RECEIVER" ("PERSON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_OKDP_CODE" ON "PLAN2GOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONBL_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONBL_INDUSTRYCODE" ON "CONBUDGETLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_VENDORPOSTCOUNTR
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_VENDORPOSTCOUNTR" ON "OFFERDOC" ("VENDORPOSTCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCONDEALRESP_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCONDEALRESP_PERSONAL" ON "CMPCONDEALRESP" ("PERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FGROUPATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPLOT_CONTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPLOT_CONTYPE" ON "CMPLOT" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCFLAGTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONPAYFACT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ORDERDOC_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERDOC_CMPORG_ID" ON "ORDERDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OLAPQUERY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_FACTDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQSUPPLY_BUDGETLINEPOSREQ
--------------------------------------------------------

  CREATE INDEX "IFK_RQSUPPLY_BUDGETLINEPOSREQ" ON "RQSUPPLYSHEDULE" ("REQUEST_ID", "BUDGETLINEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_PURCHASEMETHOD_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_GRANTINVESTME
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_GRANTINVESTME" ON "PLAN2LEDGER" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONBUDGE_RECIPIENTACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONBUDGE_RECIPIENTACC_ID" ON "CONBUDGETLINE" ("RECIPIENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_ORG_ID" ON "CONTRACTOR" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TYPEREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEREQ_REQTYPE" ON "TYPEREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SYSUSEREXT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_OKDP_CODE" ON "RECOILLINES" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSCONTRACT_REGNUM
--------------------------------------------------------

  CREATE INDEX "IDX_OOSCONTRACT_REGNUM" ON "OOSCONTRACT" ("REGNUM") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE4
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE4" ON "KLADRSTREET" ("CODE4") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONORGSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SEL_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_SEL_DISPSTATUS" ON "SIGNEXPORTLOG" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DAY_VERSION
--------------------------------------------------------

  CREATE INDEX "IDX_DAY_VERSION" ON "DAYVERSION" ("DAY_DATE", "DAY_VERSION") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_APPOBJPROPS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DDS_OIDREF
--------------------------------------------------------

  CREATE INDEX "J_FK_DDS_OIDREF" ON "DOCDIGESTRULE" ("OIDREF_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_OOSORGROLE_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPLOT_CHILDORDERDOC
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPLOT_CHILDORDERDOC" ON "CMPLOT" ("CHILD_ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ESCRROLE_USERROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_ESCRROLE_USERROLE" ON "ESCRROLE" ("USERROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLANDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_PLANDOC_DATENUM" ON "PLANDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CONEXECSTAG
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CONEXECSTAG" ON "PLAN2ARRANGEMENT" ("CONEXECSTAGESCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PURCHASEPLAN_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASEPLAN_CUSTOMER_ID" ON "PURCHASEPLAN" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPDISCUSSION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPSUPPL_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPSUPPL_LOTPOSORDER_ID" ON "CMPSUPPLYSHEDULE" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERREQ_NOTIFICATION
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERREQ_NOTIFICATION" ON "OOSCUSTOMERREQUIREMENT" ("NOTIFICATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_DOCPRINTER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_DOCPRINTER" ON "DOCUMENTCLASS" ("DOCPRINTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPPLACE_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPLACE_GRANTINVESTMENT" ON "CMPPLACE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRSUPPLYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PLAN2DOC_PLANYEAR
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2DOC_PLANYEAR" ON "PLAN2DOC" ("PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_PROHIBITIONS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_PROHIBITIONS" ON "PLAN2OOSPOSITION" ("PROHIBITIONSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONSTRUCTION
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONSTRUCTION" ON "CONTRACTDOC" ("CONSTRUCTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ROLECLASS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_RESPPERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_RESPPERSONAL" ON "PLAN2DOC" ("RESPPERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PLAN3PURCHASEDOC_PCODE
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN3PURCHASEDOC_PCODE" ON "PLAN3PURCHASEDOC" ("PURCHASECODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RESERVED_ESTIMATE_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RESERVED_ESTIMATE_ID" ON "RESERVEDBUDGETLINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_USERPROFILE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_APPOBJ_APPMODULE1
--------------------------------------------------------

  CREATE INDEX "J_FK_APPOBJ_APPMODULE1" ON "APPMODULEDEPENDENCY" ("ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ALTGGLINK_GOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_ALTGGLINK_GOODSGROUP" ON "ALTGOODSGROUPLINK" ("GOODSGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SYSEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2GOODS_MEDICINEPROPVALUE
--------------------------------------------------------

  CREATE INDEX "J_FK_P2GOODS_MEDICINEPROPVALUE" ON "PLAN2GOODS" ("MEDICINEPROPVALUECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PURCHASEPLANDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASEPLANDOC_CUSTOMER" ON "PURCHASEPLANDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVERRLOG_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVERRLOG_SYSUSER" ON "DOCEVERRLOG" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_NECESSITY" ON "INVOICEDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSDOCDETAIL_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSDOCDETAIL_OKDP_CODE" ON "GOODSGROUPDOCDETAIL" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPSUPPL_PLACEPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPSUPPL_PLACEPOSORDER_ID" ON "CMPSUPPLYSHEDULE" ("ORDER_ID", "PLACEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PENALTYCHANGEDOCINFO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_NECESSITY" ON "ORDERDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OIDREF
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_NOTICEDOC_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_NOTICEDOC_ETP" ON "NOTICEDOC" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCRETENTION_DOCSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCRETENTION_DOCSTATUS" ON "DOCRETENTION" ("DOCSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GOODSBAN_NAME_NPA
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_SCHTASK_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_GOODSBRANCH_NAME_TYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_MSG_QUEUE_NAME
--------------------------------------------------------

  CREATE INDEX "IDX_MSG_QUEUE_NAME" ON "MSG" ("QUEUE_NAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMPAYFACT_CLAIM
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMPAYFACT_CLAIM" ON "CLAIMPAYFACT" ("CLAIM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLACINGWAY_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLACINGWAY_PURCHASEMODE" ON "PLACINGWAY" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_OKVED" ON "PLAN2GOODS" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCCSTMFLDVALUES_CUSTFLDI
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCCSTMFLDVALUES_CUSTFLDI" ON "DOCCUSTOMFIELDVALUES" ("CUSTFIELD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUIREMENTTYPEPM_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUIREMENTTYPEPM_REQTYPE" ON "REQUIREMENTTYPEPM" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQCONDEALRESP_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_RQCONDEALRESP_PERSONAL" ON "RQCONDEALRESP" ("PERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCCL_DISPST_DISPST
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCCL_DISPST_DISPST" ON "DOCCLASS_DISPSTATUS" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RQPAYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LOT_OOSNOTIFICATION
--------------------------------------------------------

  CREATE INDEX "J_FK_LOT_OOSNOTIFICATION" ON "OOSNOTIFICATIONLOT" ("NOTIFICATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOSITION_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOSITION_DOCUMENT" ON "PLAN2OOSPOSITION" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_FACTDOC_VENDOR_ID
--------------------------------------------------------

  CREATE INDEX "IFK_FACTDOC_VENDOR_ID" ON "FACTDOC" ("VENDOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FINSRCNEXTYEAR
--------------------------------------------------------

  CREATE INDEX "J_FINSRCNEXTYEAR" ON "FINSRCSATISFY" ("FINSRCNEXTYEARID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONEXECUTER
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONEXECUTER" ON "CONTRACTDOC" ("CONEXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RULESCRIPT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_PURCHASEMODE" ON "ORDERDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ESCHECKRULEREQUISITES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CERTREQUEST_USER_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREQUEST_USER_ORG" ON "CERTREQUEST" ("USER_ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCRITERION_TENDERCRIT
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCRITERION_TENDERCRIT" ON "CMPCRITERION" ("TENDERCRITERION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSGROUP_TREE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_APPPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_APPPERSACC_ID" ON "REQUESTDOC" ("GUARAPPPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCCOMMENT_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCCOMMENT_DOCUMENT" ON "DOCCOMMENT" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERBUDGET_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_USERBUDGET_ORG" ON "USERBUDGET" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCEXCHANGESCHEME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ESCRROLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPCRITERION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_TER_TREE
--------------------------------------------------------

  CREATE INDEX "IDX_TER_TREE" ON "TER_TREE" ("TREE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NMSG_NOTIFYMSGEVENT
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSG_NOTIFYMSGEVENT" ON "NOTIFYMSG" ("NOTIFYMSGEVENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLNGOODS_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNGOODS_OKVED" ON "PLNGOODS" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DECREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_APPMODULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_ADVANCE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_ADVANCE" ON "PLAN2OOSPOSITION" ("ADVANCECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE6
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE6" ON "PLAN2GOODS" ("CODE6") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONTRACTOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_REQUESTO_DOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_REQUESTO_DOC_ID" ON "REQUESTORDER" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SERVERERROR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPPERSONAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCJOURNAL_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCJOURNAL_DISPSTATUS" ON "DOCJOURNAL" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPLSITE_MASTER_ID_CLIENT_ID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ETPATTACH_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_ETPATTACH_ETP" ON "ETPATTACH" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CETERMLINE_TERMREASONDOC
--------------------------------------------------------

  CREATE INDEX "J_FK_CETERMLINE_TERMREASONDOC" ON "CETERMINATIONLINE" ("TERMINATIONREASONDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_DELIVERYBASIS
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_DELIVERYBASIS" ON "LEDGER" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_NECESSITY_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_REQUESTDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_REQUESTDOC_DOCUMENT" ON "REQUESTDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ROLEREGISTER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PANELITEM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC_DATENUM" ON "PURCHASEPLANDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_PURCHASEMODE" ON "RECOILDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTDOC_DISPSTATUS" ON "CONTRACTDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRPLACE_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_OFRPLACE_TERRITORYCODECOU" ON "OFRPLACE" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PLAN2REASON
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PLAN2REASON" ON "PLAN3PURCHASEDOC" ("PLANCHANGEREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_RECOILDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONSOLIDDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ETP_MSGSITE
--------------------------------------------------------

  CREATE INDEX "J_FK_ETP_MSGSITE" ON "ETP" ("MSGSITE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTEMPDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CONTEMPDOC_DOCUMENT" ON "CONTRACTTEMPLATEDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DELIVBASIS
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DELIVBASIS" ON "PLAN3PURCHASEDOC" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_DOCDEVELOPER
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_DOCDEVELOPER" ON "ORDERDOC" ("DOCDEVELOPER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPGOODS_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPGOODS_OKVED" ON "CMPGOODS" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_UNITNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_UNITNAME" ON "PLAN3PURCHASEGOODS" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SYSUSER_PERSON
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSUSER_PERSON" ON "SYSUSER" ("PERSON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CODE2
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CODE2" ON "KLADR" ("CODE2") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TYPEREQCRIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INVGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_INVGOODS_OKDP_CODE" ON "INVGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_QUALREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_QUALREQ_REQTYPE" ON "QUALREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONCONTRACTOR_OKTMO
--------------------------------------------------------

  CREATE INDEX "J_FK_CONCONTRACTOR_OKTMO" ON "CONCONTRACTOR" ("ORGOKTMO_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OOSORGROLES_OOSORGROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_OOSORGROLES_OOSORGROLE" ON "OOSORGROLES" ("ROLECODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_CONPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_CONPERSACC_ID" ON "CMPCUSTOMERLOT" ("GUARCONTRPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_DISPSTATUS" ON "FACTDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CHANGEREASO
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CHANGEREASO" ON "PLAN3PURCHASEDOC" ("CHANGEREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE2
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE2" ON "PLAN2GOODS" ("CODE2") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_NECESSITY" ON "PURCHASECARRY" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_TENDER_COMPETITOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PANEL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_APPOBJ_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REFDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SCHTASK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CONPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CONPERSACC_ID" ON "RQLOT" ("GUARCONTRPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_OFRREQREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_OFRREQREASON" ON "ORDERDOC" ("OFRREQREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_COMMEMBER_COMMISSION
--------------------------------------------------------

  CREATE INDEX "J_FK_COMMEMBER_COMMISSION" ON "COMMEMBER" ("COMMISSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_OFRGOODS_GROUPCODE" ON "OFRGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONTRCARDDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPDOCUMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_GOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_GOODSGROUP" ON "PLAN2LEDGER" ("GROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTEXECDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTEXECDOC_DOC_DATE" ON "CONTRACTEXECDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPPERSONALRESP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKPDPREF_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKPDPREF_COUNTRY" ON "GOODSOKPDCOUNTRYPREF" ("COUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_USERCERT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_TERRITORY
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_TERRITORY" ON "PLAN2ARRANGEMENT" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCJOURNAL_OLD_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCJOURNAL_OLD_DISPSTATUS" ON "DOCJOURNAL" ("OLD_DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLNGOODS_OKDP
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNGOODS_OKDP" ON "PLNGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index S_REQUESTDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_FUNCAT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_BANKGUARANTEEREFDOCREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_BUDGET_TERRITORY_ID
--------------------------------------------------------

  CREATE INDEX "IFK_BUDGET_TERRITORY_ID" ON "BUDGET" ("TERRITORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_FINSRC" ON "RECOILLINES" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_EQUALITYCODES_EQUALITY
--------------------------------------------------------

  CREATE INDEX "J_FK_EQUALITYCODES_EQUALITY" ON "EQUALITYCODES" ("EQUALITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONSOLIDDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SCHPLAN_SCHTASK
--------------------------------------------------------

  CREATE INDEX "J_FK_SCHPLAN_SCHTASK" ON "SCHPLAN" ("SCHTASK_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SEL_DOCATTACHEX
--------------------------------------------------------

  CREATE INDEX "J_FK_SEL_DOCATTACHEX" ON "SIGNEXPORTLOG" ("DOCATTACHEX_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSKBK_POSITION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSKBK_POSITION" ON "PLAN2OOSKBK" ("PLAN2OOSPOSITION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONSETTACC_ID" ON "REQUESTDOC" ("GUARCONTRSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEATTACH_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEATTACH_DOCUMENTCLASS" ON "ROLEATTACH" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PURCHMETHOD
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PURCHMETHOD" ON "PLAN3PURCHASEDOC" ("PURCHASEMETHOD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRREQREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_FGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCREQ_REQTYPE" ON "DOCREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGADDKPP_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGADDKPP_ORG" ON "ORGADDKPP" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_SINGLECUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_SINGLECUSTOMER" ON "ORDERDOC" ("SINGLECUSTOMERREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_BUDGET" ON "CONTRACTDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GOODSPRICE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GCREGISTER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_OOSCUSTOMERREQ_LOT
--------------------------------------------------------

  CREATE INDEX "IDX_OOSCUSTOMERREQ_LOT" ON "OOSCUSTOMERREQUIREMENT" ("LOT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSKBKYEAR_KBK
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSKBKYEAR_KBK" ON "PLAN2OOSKBKYEAR" ("PLAN2OOSKBK_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2GOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_DELIVERYBASIS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_DELIVERYBASIS" ON "PLAN2LEDGER" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONCONTR_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONCONTR_ORG_ID" ON "CONCONTRACTOR" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DIGESTSIGN_IMPORTUSER_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGESTSIGN_IMPORTUSER_ID" ON "DIGESTSIGN" ("IMPORTUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONPLACE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OFRCRITERIONVAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OFRORGSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_PLAN2OOSEXTNUMBER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TENDERCRITERIONPM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTEMPDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CONTEMPDOC_DISPSTATUS" ON "CONTRACTTEMPLATEDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CAVILTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_DELIVADDR
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_DELIVADDR" ON "PLAN2ARRANGEMENT" ("DELIVERYADDRESS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_FACTDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_FACTDOC_DOCUMENT" ON "FACTDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FUNCMODULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ECHKRULREQS_RULEREQUISTE
--------------------------------------------------------

  CREATE INDEX "J_FK_ECHKRULREQS_RULEREQUISTE" ON "ESCHECKRULEREQUISITES" ("RULEREQUISITE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_DOCATTACHEX_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IFK_DOCATTACHEX_DOCUMENT" ON "DOCATTACHEX" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DAYVERSION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_SCHPLAN_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DAILYTOTALS_PURCHMDE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DAILYTOTALS_PURCHMDE" ON "PLAN2DAILYTOTALS" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONSOLIDDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_OKDP_CODE" ON "PURCHASECARRY" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REQUIREMENTTYPEPM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ESCHECKRULE_SCRIPT
--------------------------------------------------------

  CREATE INDEX "J_FK_ESCHECKRULE_SCRIPT" ON "ESCHECKRULE" ("RULESCRIPT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_CONGOODS_GROUPCODE" ON "CONGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_BUDGET" ON "RECOILDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GBPM_PMODE_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_GBPM_PMODE_ID" ON "GOODSBANPURCHASEMODE" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPRODUCT_POSITION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPRODUCT_POSITION" ON "PLAN2OOSPRODUCT" ("PLAN2OOSPOSITION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_INVBUDGE_ESTIMATE_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVBUDGE_ESTIMATE_ID" ON "INVBUDGETLINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRGROUPPROPVALUE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ESCHECKRULE_FGROUPHEADER
--------------------------------------------------------

  CREATE INDEX "J_FK_ESCHECKRULE_FGROUPHEADER" ON "ESCHECKRULE" ("FGROUPHEADER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTREQUESTOID_OIDREF
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREQUESTOID_OIDREF" ON "CERTREQUESTOID" ("OIDREF_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_RESPPERSON
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_RESPPERSON" ON "CAVILDOC" ("RESPPERSON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_RP_FORM_NAME_NAME
--------------------------------------------------------

  CREATE INDEX "IDX_RP_FORM_NAME_NAME" ON "REPPROFILE" ("FORM_NAME", "NAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTOMER_POSTCOUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTOMER_POSTCOUNTRY" ON "CMPCUSTOMER" ("CUSTOMERPOSTCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_REQUESTDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRCARDDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRCARDDOC_DISPSTATUS" ON "CONTRACTCARDDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPRODUCT_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPRODUCT_OKVED" ON "PLAN2OOSPRODUCT" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_ACTUAL
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_ACTUAL" ON "KLADRSTREET" ("ACTUAL") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRGROUPPROP_PROPTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRGROUPPROP_PROPTYPE" ON "OFRGROUPPROP" ("PROPTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PROCUREMENT_REQUEST
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCUREMENT_REQUEST" ON "PROCUREMENT" ("REQUEST_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_BANK
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_BANK" ON "ORDERDOC" ("DOCFEESETTLEMENTBIC") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLNBL_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNBL_INDUSTRYCODE" ON "PLNBUDGETLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RPLRULEOBJ_RPLOBJECT
--------------------------------------------------------

  CREATE INDEX "J_FK_RPLRULEOBJ_RPLOBJECT" ON "RPLRULEOBJ" ("RPLOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CLASSOPER_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CLASSOPER_OPERTYPE" ON "CLASSOPER" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_FACTDOC_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_FACTDOC_RECIPIENT_ID" ON "FACTDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ESCHECKRULE_PARDISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ESCHECKRULE_PARDISPSTATUS" ON "ESCHECKRULE" ("PARDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RQCRITER_LOTPOSREQUEST_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQCRITER_LOTPOSREQUEST_ID" ON "RQCRITERION" ("REQUEST_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REFUSALFACTFOUNDATION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CLAIMDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_CLAIMDOC_DOC_DATE" ON "CLAIMDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONTRACTEXECDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTRCARDDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRCARDDOC_DATENUM" ON "CONTRACTCARDDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLANPOSITIONNUMBERERR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3LINE_ESTIMATE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3LINE_ESTIMATE" ON "PLAN3PURCHASELINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OFFERDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_OFFERDOC_DOCUMENT" ON "OFFERDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEDOC_DOCUMENT" ON "BANKGUARANTEEDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_AUCTIONLOG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GBGO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DOCRESTATITMS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_OFRREQRSN
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_OFRREQRSN" ON "PLAN3PURCHASEDOC" ("OFRREQREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORDERDOC_VENDOR_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERDOC_VENDOR_ID" ON "ORDERDOC" ("VENDOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_METACONSTRAINT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_LEDGER_GROUP
--------------------------------------------------------

  CREATE INDEX "IDX_LEDGER_GROUP" ON "LEDGER" ("GROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONEXECUTERAC
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONEXECUTERAC" ON "CONTRACTDOC" ("CONEXECUTERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_PARENT_ID
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_PARENT_ID" ON "DOCUMENT" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEDOC_DOCCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEDOC_DOCCLASS" ON "BANKGUARANTEEDOC" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLANDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_PLANDOC_DOC_DATE" ON "PLANDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKVED_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKVED_PARENT" ON "GOODSOKVED" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_REQUESTDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_REQUESTDOC_DOC_DATE" ON "REQUESTDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCDIGESTROLES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_DATAOBJECTCHANGELOG_OBJ
--------------------------------------------------------

  CREATE INDEX "IDX_DATAOBJECTCHANGELOG_OBJ" ON "DATAOBJECTCHANGELOG" ("OBJ_NAME", "OBJ_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN3DOC_DOCDATE
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN3DOC_DOCDATE" ON "PLAN3DOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_INVOICED_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVOICED_CUSTOMER_ID" ON "INVOICEDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_STATISTICSSOURCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_FACTDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_FACTDOC_DATENUM" ON "FACTDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SERVERPROCESSOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_OKPD" ON "PLAN3PURCHASEGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEATTACH_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEATTACH_DISPSTATUS" ON "ROLEATTACH" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_COMPLAINTDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_OKTMO_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_OKTMO_PARENT" ON "OKTMO" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PK_PLAN2OOSFEATURE_POSITI
--------------------------------------------------------

  CREATE INDEX "J_FK_PK_PLAN2OOSFEATURE_POSITI" ON "PLAN2OOSFEATURE" ("PLAN2OOSPOSITION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN3DOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN3DOC_DISPSTATUS" ON "PLAN3DOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVENT_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVENT_DISPSTATUS" ON "DOCEVENT" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTREXECDOC_CUST
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTREXECDOC_CUST" ON "CONTRACTEXECDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLECLASS_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLECLASS_DOCUMENTCLASS" ON "ROLECLASS" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGCONCCONT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ORDERSUM_CMPGOODSPOSORDER
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERSUM_CMPGOODSPOSORDER" ON "ORDERSUMMARY" ("ORDER_ID", "CMPGOODSPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONPLACE_EXECSTEP2POS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONPLACE_EXECSTEP2POS" ON "CONPLACE" ("CONTRACT_ID", "EXECSTEP2POS") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_NOTICEEM_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_NOTICEEM_ORG_ID" ON "NOTICEEMAILORG" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN3PURCHASEDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPLTABLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PLANDOC_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLANDOC_CUSTOMER_ID" ON "PLANDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_FCTGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_FCTGOODS_GROUPCODE" ON "FCTGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_DISPSTATUS" ON "DOCUMENT" ("DISPSTATUS_ID", "DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CODETYPE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_FACTDOCTYPE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONBANK" ON "REQUESTDOC" ("GUARANTEECONTRACTBIC") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONTYPE" ON "REQUESTDOC" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_FACTDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTRCARDDOC_DOCDATE
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRCARDDOC_DOCDATE" ON "CONTRACTCARDDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_HISTORYMODIFY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNCPROVIDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_SERVERACTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_NECESSITY" ON "REQUESTDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNCREFERENCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLERIGHT_SYSRIGHT
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLERIGHT_SYSRIGHT" ON "ROLERIGHT" ("SYSRIGHT_NAME") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ATTACHCATEGORIES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_SERVERPROVIDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ESTIMATE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSKBK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCCUSTOMFIELDS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SCHEXPDOCS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_GOODSOKDPPUR_GOODSOKDP_ID
--------------------------------------------------------

  CREATE INDEX "IFK_GOODSOKDPPUR_GOODSOKDP_ID" ON "GOODSOKDPPURCHASEMODE" ("GOODSOKDP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REFINANCINGRATE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OOSNOTIFICATION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_OFRREQREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_OFRREQREASON" ON "REQUESTDOC" ("OFRREQREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CONTRPAYORD
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CONTRPAYORD" ON "PLAN3PURCHASEDOC" ("CONTRACTPAYORDERCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PAYCOND
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PAYCOND" ON "PLAN3PURCHASEDOC" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_WEBSTAT_STATSOURCE
--------------------------------------------------------

  CREATE INDEX "J_FK_WEBSTAT_STATSOURCE" ON "WEBSTATCACHE" ("STATISTICSSOURCE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_PURCHASEPLANDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CSGOODS_GROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_CSGOODS_GROUP" ON "CSGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_COUNTRY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCRETSTATITEMS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TCPM_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_TCPM_PURCHASEMODE" ON "TENDERCRITERIONPM" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTLOT_CONMNGRRESP
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTLOT_CONMNGRRESP" ON "CMPCUSTOMERLOT" ("CONMNGRRESP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCGROUP_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCGROUP_PARENT" ON "DOCGROUP" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLNBUDGE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLNBUDGE_RECIPIENT_ID" ON "PLNBUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SIGNTYPE_SIGNFORMAT
--------------------------------------------------------

  CREATE INDEX "J_FK_SIGNTYPE_SIGNFORMAT" ON "SIGNTYPE" ("SIGNFORMAT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RESPONSIBILITY_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_PURCHASEMODE" ON "CONTRACTDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLANDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_PLANDOC_DISPSTATUS" ON "PLANDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERREQ_NOTIFICATIONL
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERREQ_NOTIFICATIONL" ON "OOSCUSTOMERREQUIREMENT" ("LOT_ID", "NOTIFICATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPLOBJECT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_CLNDDAY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OOSORGANIZATIONROLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_INVOICEDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_INVOICEDOC_DISPSTATUS" ON "INVOICEDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DESCGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_GRANTEDROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_GRANTEDROLE" ON "ROLEREGISTER" ("GRANTEDROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RPLSITE_CLIENT
--------------------------------------------------------

  CREATE INDEX "J_FK_RPLSITE_CLIENT" ON "RPLSITE" ("CLIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PURCHASEPLAN_DOC
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASEPLAN_DOC" ON "PURCHASEPLAN" ("PURCHASEPLANDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCSTATUS_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCSTATUS_DISPSTATUS" ON "DOCSTATUS" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONREFUSALFACT_REFFACTFND
--------------------------------------------------------

  CREATE INDEX "J_FK_CONREFUSALFACT_REFFACTFND" ON "CONREFUSALFACT" ("REFUSALFACTFOUNDATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SYSRIGHT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SEL_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_SEL_SYSUSER" ON "SIGNEXPORTLOG" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONSOLIDDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CONSOLIDDOC_DOCUMENT" ON "CONSOLIDDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCFLAGTYPE_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCFLAGTYPE_DOCUMENTCLASS" ON "DOCFLAGTYPE" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTBLOCKINFO_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTBLOCKINFO_SYSUSER" ON "DOCUMENTBLOCKINFO" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCCL_DISPST_PARDISPST
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCCL_DISPST_PARDISPST" ON "DOCCLASS_DISPSTATUS" ("PARDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_NECESSITY" ON "PLAN2LEDGER" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GCREGISTER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OFRQUALREQVAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_GOODSGROUP_TREE
--------------------------------------------------------

  CREATE INDEX "IDX_GOODSGROUP_TREE" ON "GOODSGROUP_TREE" ("TREE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSCONTRACT_NOTICECUSTOMER
--------------------------------------------------------

  CREATE INDEX "IDX_OOSCONTRACT_NOTICECUSTOMER" ON "OOSCONTRACT" ("NOTIFICATIONNUMBER", "CUSTOMERREGNUM") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RECOILDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_CMPGOODS_GROUPCODE" ON "CMPGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CONBANKSUPP
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CONBANKSUPP" ON "PLAN3PURCHASEDOC" ("CONBANKSUPPORTCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCFLAGCATEGORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_MSGSITE_MSGLINKTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_MSGSITE_MSGLINKTYPE" ON "MSGSITE" ("MSGLINKTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DIGESTSIGN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DATAOBJECTCHANGELOG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONBUDGE_PLACEPOSCONTRACT
--------------------------------------------------------

  CREATE INDEX "IFK_CONBUDGE_PLACEPOSCONTRACT" ON "CONBUDGETLINE" ("CONTRACT_ID", "PLACEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_NECESSITY" ON "CONTRACTDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVBL_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_INVBL_GRANTINVESTMENT" ON "INVBUDGETLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_FACTDOC_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_FACTDOC_TERRITORYCODECOU" ON "FACTDOC" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRPLACE_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRPLACE_LOTPOSOFFER_ID" ON "OFRPLACE" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRCARDDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRCARDDOC_DISPSTATUS" ON "CONTRACTCARDDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGSELSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ROLEATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_EXCHANGECLASSES_CLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_EXCHANGECLASSES_CLASS" ON "EXCHANGECLASSES" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPVOTERESULT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCACTION_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCACTION_DISPSTATUS" ON "DOCACTION" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_JAVACLASS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCDIGROLES_USERROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCDIGROLES_USERROLE" ON "DOCDIGESTROLES" ("USERROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_GOODS_GROUP_ID
--------------------------------------------------------

  CREATE INDEX "IDX_GOODS_GROUP_ID" ON "GOODS" ("GROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCCATEGORY_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_FACTDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_USERBUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ROLEORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_NECESSITY" ON "PLAN2GOODS" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DAILYTOTALS_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DAILYTOTALS_BUDGET" ON "PLAN2DAILYTOTALS" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSKBKYEAR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLACINGWAY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PERSONAL_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PERSONAL_ORG_ID" ON "PERSONAL" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BUDGET_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_BUDGET_PARENT" ON "BUDGET" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRGOODS_OKDP_CODE" ON "OFRGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGUNFAI_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGUNFAI_ORG_ID" ON "ORGUNFAIR" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSNOTIFICATION_NUMBER
--------------------------------------------------------

  CREATE INDEX "IDX_OOSNOTIFICATION_NUMBER" ON "OOSNOTIFICATION" ("NOTIFICATIONNUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index S_PLANDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_ORDERDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_ORDERDOC_DOCUMENT" ON "ORDERDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PERIODICITY
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PERIODICITY" ON "PLAN3PURCHASEDOC" ("PERIODICITYCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPVOTER_ORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPVOTER_ORDER_ID" ON "CMPVOTERESULT" ("ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGGOODS_GROUP_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGGOODS_GROUP_ID" ON "ORGGOODSGROUP" ("GROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCREP_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCREP_DOCUMENTCLASS" ON "DOCUMENTREPORTS" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REPFORM_SERVERACTION
--------------------------------------------------------

  CREATE INDEX "J_FK_REPFORM_SERVERACTION" ON "REPFORM" ("SERVERPROCESSOR_ID", "SERVERACTION_NAME") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CLIENTOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_SYSPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_OKDP_CODE" ON "PLAN3PURCHASEGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_INVBUDGE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVBUDGE_RECIPIENT_ID" ON "INVBUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_P3GOODSOKVED
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index FK_PLANDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USERROLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKPD_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKPD_PARENT" ON "GOODSOKPD" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CODE1
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CODE1" ON "KLADR" ("CODE1") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_UNIT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USERCERT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_ETPTYPE_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ALTGOODSGROUP_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_ALTGOODSGROUP_PARENT" ON "ALTGOODSGROUP" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ALTGOODSGROUPTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3LINE_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3LINE_INDUSTRYCODE" ON "PLAN3PURCHASELINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3GOODS_GOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_P3GOODS_GOODSGROUP" ON "PLAN3PURCHASEGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCJOURNAL_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_DOCJOURNAL_DOCUMENT" ON "DOCJOURNAL" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_SERVERPROCESSOR_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_DESCRIPTION
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_DESCRIPTION" ON "PLAN2DOC" ("DESCRIPTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCUMENTREPORTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLUGIN_RPLTABLE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLUGIN_RPLTABLE" ON "RPLTABLEPLUGIN" ("RPLTABLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_ORDERDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PURCHASEMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_BUDGETLINE_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_BUDGETLINE_BUDGET" ON "BUDGETLINE" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ESTIMATE_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ESTIMATE_ORG_ID" ON "ESTIMATE" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRPLACE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CSRECIPIENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_MSG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGPERSONALRESP_RESP
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGPERSONALRESP_RESP" ON "ORGPERSONALRESP" ("RESPONSIBILITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQCRITERION_TENDERCRITERI
--------------------------------------------------------

  CREATE INDEX "J_FK_RQCRITERION_TENDERCRITERI" ON "RQCRITERION" ("TENDERCRITERION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_USERSESSIONACCESS
--------------------------------------------------------

  CREATE INDEX "IDX_USERSESSIONACCESS" ON "USERSESSIONACCESS" ("ACCESS_TIME") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPCOMPETITOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_QUALIFYS_QUALIFYREQPOSORD
--------------------------------------------------------

  CREATE INDEX "IFK_QUALIFYS_QUALIFYREQPOSORD" ON "QUALIFYSELECT" ("ORDER_ID", "QUALIFYREQPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_SINGLECUSTOME
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_SINGLECUSTOME" ON "CONTRACTDOC" ("SINGLECUSTOMERREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERCERT_USSU
--------------------------------------------------------

  CREATE INDEX "J_FK_USERCERT_USSU" ON "USERCERTSYSUSER" ("USERCERT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CEEXECUTIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CCCONTRACT
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CCCONTRACT" ON "CONTRACTDOC" ("CONFCONCCONTRACT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOMEN_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOMEN_PARENT" ON "DOMEN" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REFDOC_REF
--------------------------------------------------------

  CREATE INDEX "J_FK_REFDOC_REF" ON "REFDOC" ("REF_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_RECIPIENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_RECIPIENT" ON "PLAN2DOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DESCRIPTION_DESCGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_DESCRIPTION_DESCGROUP" ON "DESCRIPTION" ("DESCGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DIGEST_DIGESTSIGN
--------------------------------------------------------

  CREATE INDEX "IDX_DIGEST_DIGESTSIGN" ON "DIGESTSIGN" ("DIGEST_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSORGANIZATION_REGION
--------------------------------------------------------

  CREATE INDEX "IDX_OOSORGANIZATION_REGION" ON "OOSORGANIZATION" ("FACTREGIONKLADRCODE", "SUBORDINATIONTYPEID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RPLSITE_RPLRULE
--------------------------------------------------------

  CREATE INDEX "J_FK_RPLSITE_RPLRULE" ON "RPLSITE" ("RPLRULE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_FGROUPHEADER_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_BUDGET" ON "FACTDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_BANKGUARANTEEDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_QUALREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_LEDGER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_QUALIFYS_COMPETITORPOSORD
--------------------------------------------------------

  CREATE INDEX "IFK_QUALIFYS_COMPETITORPOSORD" ON "QUALIFYSELECT" ("ORDER_ID", "COMPETITORPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_COMMISSION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_UNITNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_UNITNAME" ON "PLAN2LEDGER" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONBUDGE_ESTIMATE_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONBUDGE_ESTIMATE_ID" ON "CONBUDGETLINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_PUBLICDISCU
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_PUBLICDISCU" ON "PLAN2ARRANGEMENT" ("PUBLICDISCUSSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_PLAN2DOC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_PLAN2DOC" ON "PLAN2GOODS" ("PLAN2DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTOMER_CUSTPOSTCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTOMER_CUSTPOSTCODE" ON "CMPCUSTOMER" ("CUSTOMERPOSTCOUNTRY_ID", "CUSTOMERPOSTTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGETP_ORGROLE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGETP_ORGROLE" ON "ORGETP" ("ORGROLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC_DOC_DATE" ON "PURCHASEPLANDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_PRINT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_PRINT" ON "DOCUMENTCLASS" ("PRINTCLIENTOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_NOTICEDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_NOTICEDOC_DOC_DATE" ON "NOTICEDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVENT_USERPROCTREE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVENT_USERPROCTREE" ON "DOCEVENT" ("USERPROCTREE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DISPSTAT
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DISPSTAT" ON "PLAN3PURCHASEDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DIGESTSIGN_SIGNFORMAT
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGESTSIGN_SIGNFORMAT" ON "DIGESTSIGN" ("SIGNVERSION") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_ORDERDOC_DATENUM" ON "ORDERDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_INVOICEDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_INVOICEDOC_DOC_DATE" ON "INVOICEDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRCARDDOC_CON
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRCARDDOC_CON" ON "CONTRACTCARDDOC" ("CON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CLAIMDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DESCRIPTION
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DESCRIPTION" ON "PLAN3PURCHASEDOC" ("DESCRIPTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRGROUPPROP_GROUPPROP
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRGROUPPROP_GROUPPROP" ON "OFRGROUPPROP" ("GROUPPROP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RBL_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RBL_INDUSTRYCODE" ON "RESERVEDBUDGETLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORG_FACTERRITORY_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORG_FACTERRITORY_ID" ON "ORG" ("FACTERRITORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEATTACH_DOCCATEGORY
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEATTACH_DOCCATEGORY" ON "ROLEATTACH" ("CATEGORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OFFERDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_OFFERDOC_DATENUM" ON "OFFERDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_INVOICEDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_INVOICEDOC_DATENUM" ON "INVOICEDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INSTITUTIONLINE_GI
--------------------------------------------------------

  CREATE INDEX "J_FK_INSTITUTIONLINE_GI" ON "INSTITUTIONLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCSTATUS_USERPROCTREE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCSTATUS_USERPROCTREE" ON "DOCSTATUS" ("USERPROCTREE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_P3PURFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DAILYTOTALS_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DAILYTOTALS_CUSTOMER" ON "PLAN2DAILYTOTALS" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_GRANTINGUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_GRANTINGUSER" ON "ROLEREGISTER" ("GRANTINGUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_RCPT
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_RCPT" ON "PLAN3PURCHASEDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEAPPOBJ_APPOBJNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEAPPOBJ_APPOBJNAME" ON "ROLEAPPOBJ" ("APPOBJNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLUGIN_PARENTRPL
--------------------------------------------------------

  CREATE INDEX "J_FK_PLUGIN_PARENTRPL" ON "RPLTABLEPLUGIN" ("PLUGIN_RPLTABLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE3
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE3" ON "PLAN2GOODS" ("CODE3") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORG_DIRECTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_DIRECTOR" ON "ORG" ("DIRECTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PERSON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_SINGLECUST
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_SINGLECUST" ON "PLAN3PURCHASEDOC" ("SINGLECUSTOMERREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOSITION_DISPSTAT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOSITION_DISPSTAT" ON "PLAN2OOSPOSITION" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_KBKLINEFIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GROUPPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGROLES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_SPECIALORG
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_SPECIALORG" ON "ORDERDOC" ("SPECIALORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVBUDGETLINE_LIABILITY
--------------------------------------------------------

  CREATE INDEX "J_FK_INVBUDGETLINE_LIABILITY" ON "INVBUDGETLINE" ("LIABILITYEXPENSE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRGROUPPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_RECOILDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_RECOILDOC_DISPSTATUS" ON "RECOILDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMDOC_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMDOC_PARENT" ON "CLAIMDOC" ("PARENT_CONTRACT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RQDOCCHI_DOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQDOCCHI_DOC_ID" ON "RQDOCCHILD" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCSTATUS_PROCTREE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCSTATUS_PROCTREE" ON "DOCSTATUS" ("PROCTREE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONEXECSTEP2
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_USERROLE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQCOMMEMBER_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_RQCOMMEMBER_PERSONAL" ON "RQCOMMEMBER" ("COMMEMBER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_KLADR_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKDP_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKDP_OKVED" ON "GOODSOKDP" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_OFRGROUPPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_FINSRC" ON "LEDGER" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FUNCDOCUMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_OFFERDOC_VENDOR_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFFERDOC_VENDOR_ID" ON "OFFERDOC" ("VENDOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_DESCRIPTION
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_DESCRIPTION" ON "LEDGER" ("DESCRIPTIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CURRENCY" ON "RQLOT" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCACTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CERTREVOKEREQ_DOCCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREVOKEREQ_DOCCLASS" ON "CERTREVOKEREQUEST" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_GOODS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_GOODS" ON "PLAN2LEDGER" ("GOODS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE1
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE1" ON "PLAN2GOODS" ("CODE1") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CLNDTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQVENDOR_VENDOR_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQVENDOR_VENDOR_ID" ON "RQVENDOR" ("VENDOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_LICTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_NECESSITY" ON "PLAN2DOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_AUCTIONB_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_AUCTIONB_DOCUMENT_ID" ON "AUCTIONBID" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOCCHILD_DOCUMENTID
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOCCHILD_DOCUMENTID" ON "PLAN2DOCCHILD" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE5
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE5" ON "PLAN2GOODS" ("CODE5") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_NECESSITY" ON "LEDGER" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TYPEDOCREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEDOCREQ_REQTYPE" ON "TYPEDOCREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_UNIT" ON "LEDGER" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CODE_GOODS
--------------------------------------------------------

  CREATE INDEX "IDX_CODE_GOODS" ON "GOODS" ("GROUP_ID", "CODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CERTREVOKEREQ_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IFK_CERTREVOKEREQ_DOCUMENT" ON "CERTREVOKEREQUEST" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CEPAYPENALTY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPORT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONTRACTCARDDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPLSITE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_NOTIFYMSGEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ABANDONEDREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQGOODS_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_RQGOODS_OKVED" ON "RQGOODS" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_COMPLAINTDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_COMPLAINTDOC_BUDGET" ON "COMPLAINTDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLANPOSITIONCHANGEREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNCUNIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_BUDGET" ON "PLAN2DOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_KEEPER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_KEEPER_ID" ON "ORGACCOUNT" ("KEEPER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTREVOKEREQ_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREVOKEREQ_DISPSTATUS" ON "CERTREVOKEREQUEST" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PROCUREMENT_ORDER
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCUREMENT_ORDER" ON "PROCUREMENT" ("ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REPFRAGMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPCOMMEMBER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQQUALRE_LOTPOSREQUEST_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQQUALRE_LOTPOSREQUEST_ID" ON "RQQUALREQ" ("REQUEST_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_VENDORCOUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_VENDORCOUNTRY" ON "OFFERDOC" ("VENDORCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RQGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_RQGOODS_GROUPCODE" ON "RQGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPEXPEN_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_CMPEXPEN_GROUPCODE" ON "CMPEXPENSE" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQGOODS_OKDP_CODE" ON "RQGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_PLAN2DOC
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_PLAN2DOC" ON "LEDGER" ("PLAN2DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TYPEREQCRIT_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEREQCRIT_PURCHASEMODE" ON "TYPEREQCRIT" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_PROPFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_PROPFORM" ON "OFFERDOC" ("VENDORPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_DOCUMENT" ON "DOCUMENTCLASS" ("CLIENTDOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_TASKJOURNAL
--------------------------------------------------------

  CREATE INDEX "IDX_TASKJOURNAL" ON "TASKJOURNAL" ("ACTION_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRSUPPL_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRSUPPL_LOTPOSOFFER_ID" ON "OFRSUPPLYSHEDULE" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_CONEXECSTAGES
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_CONEXECSTAGES" ON "PLAN2OOSPOSITION" ("CONEXECSTAGESCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_BANKGUARANTEEREFREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPSOURCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVERRLOG_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVERRLOG_DISPSTATUS" ON "DOCEVERRLOG" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQQUALREQ_PLACEMENTFEAT
--------------------------------------------------------

  CREATE INDEX "J_FK_RQQUALREQ_PLACEMENTFEAT" ON "RQQUALREQ" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PFPM_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PFPM_PURCHASEMODE" ON "PLACEMENTFEATUREPM" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORDERSUM_CMPBUDGETLINEPOSO
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERSUM_CMPBUDGETLINEPOSO" ON "ORDERSUMMARY" ("ORDER_ID", "CMPBUDGETLINEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_CONSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_CONSETTACC_ID" ON "CMPCUSTOMERLOT" ("GUARCONTRSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONSOLIDDOC_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSOLIDDOC_CMPORG" ON "CONSOLIDDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCRESTATITMS_RET
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCRESTATITMS_RET" ON "DOCRETENTIONSTATITEMS" ("DOCRETENTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_REPNOTICE
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_REPNOTICE" ON "REQUESTDOC" ("REPNOTICE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONTRACTEXECDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_NOTIFYMSGDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IFK_NOTIFYMSGDOC_DOCUMENT" ON "NOTIFYMSGDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RECOILLINES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPPROFILE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPDISCU_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPDISCU_LOTPOSORDER_ID" ON "CMPDISCUSSION" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPFEATURE_CMPLOT
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPFEATURE_CMPLOT" ON "CMPFEATURE" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGCHILD_CHILD_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGCHILD_CHILD_ID" ON "ORGCHILD" ("CHILD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOS223PURCHASENOTICEINFO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_CLNDTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_COMPLAINTDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_COMPLAINTDOC_DOC_DATE" ON "COMPLAINTDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHCARRY_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHCARRY_FINSRC" ON "PURCHASECARRY" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CDCAVILTYPE_CAVILTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CDCAVILTYPE_CAVILTYPE" ON "CDCAVILTYPE" ("CAVILTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CEPENALTY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_P3GOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CONMNGRRESP
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CONMNGRRESP" ON "RQLOT" ("CONMNGRRESP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN3DOC_PLANYEAR
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN3DOC_PLANYEAR" ON "PLAN3DOC" ("PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN3DOCCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC" ON "PURCHASEPLANDOC" ("BUDGET_ID", "CUSTOMER_ID", "PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GOODSGROUP_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_INVOICEDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTRACTEXECDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_KBKLINEFIT_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_KBKLINEFIT_BUDGET" ON "KBKLINEFIT" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_NUMPREFIX
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQVENDOR_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_RQVENDOR_ORGFORM" ON "RQVENDOR" ("PROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPCRITERIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TYPEREQ_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEREQ_PURCHASEMODE" ON "TYPEREQ" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_COMPLAINTDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ALTUNIT_ALTGOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_ALTUNIT_ALTGOODSGROUP" ON "ALTUNITFACTOR" ("ALTGOODSGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_PAYCONDITIO
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_PAYCONDITIO" ON "PURCHASECARRY" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONSOLIDDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_CONSOLIDDOC_DOC_DATE" ON "CONSOLIDDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_COMPLAINTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_COMPLAINTDOC_DISPSTATUS" ON "COMPLAINTDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TASKJOURNAL_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_TASKJOURNAL_SYSUSER" ON "TASKJOURNAL" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_REQUESTDOC_PARENTREQUEST
--------------------------------------------------------

  CREATE INDEX "IDX_REQUESTDOC_PARENTREQUEST" ON "REQUESTDOC" ("PARENTREQUESTDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRRETREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_GOODSGROUPCOD
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_GOODSGROUPCOD" ON "RECOILLINES" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCCATEGORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPFRAGMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTRACTDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONREASONLINE_CONREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_CONREASONLINE_CONREASON" ON "CONTRACTREASON_DOCLINES" ("CONTRACTREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_MSGSITEEXCHANGE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORDERDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_GOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_GOODSGROUP" ON "PLAN2GOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CLNDDAY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONSUPPL_PLACEPOSCONTRACT
--------------------------------------------------------

  CREATE INDEX "IFK_CONSUPPL_PLACEPOSCONTRACT" ON "CONSUPPLYSHEDULE" ("CONTRACT_ID", "PLACEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_CONTRACTOR" ON "RECOILDOC" ("CON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE10
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE10" ON "PLAN2GOODS" ("CODE10") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_NOTICEDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_NOTICEDOC_DOCUMENT" ON "NOTICEDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_UPDPACKAGE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GBPM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLNGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNGOODS_OKPD" ON "PLNGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_INDUSTRYCOD
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_INDUSTRYCOD" ON "PURCHASECARRY" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CCCONTRACT_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CCCONTRACT_PURCHASEMODE" ON "CONFCONCLUSIONCONTRACT" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPDISCU_PHASEPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPDISCU_PHASEPOSORDER_ID" ON "CMPDISCUSSION" ("ORDER_ID", "PHASEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTREVOKEREQ_USERCERT
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREVOKEREQ_USERCERT" ON "CERTREVOKEREQUEST" ("USERCERT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ROLERIGHT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPQUALREQ_PLACEMENTFEAT
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPQUALREQ_PLACEMENTFEAT" ON "CMPQUALREQ" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CURRENCY" ON "CONTRACTDOC" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_AUCTIONBID_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_AUCTIONBID_BUDGET" ON "AUCTIONBID" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FGROUPATTACH_FGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_FGROUPATTACH_FGROUP" ON "FGROUPATTACH" ("FGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_KLADR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_BUDGET" ON "INVOICEDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORDERSUM_CMPLOTPOSORDER_I
--------------------------------------------------------

  CREATE INDEX "IFK_ORDERSUM_CMPLOTPOSORDER_I" ON "ORDERSUMMARY" ("ORDER_ID", "CMPLOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CODE4
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CODE4" ON "KLADR" ("CODE4") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_COUNTRY" ON "PLAN2ARRANGEMENT" ("COUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONCONTRACTOR_EXECUTER
--------------------------------------------------------

  CREATE INDEX "J_FK_CONCONTRACTOR_EXECUTER" ON "CONCONTRACTOR" ("ORGEXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_INDUSTRYCODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REFERENCECLASS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ROLEREFNAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REPATTACH_REPDOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_REPATTACH_REPDOCUMENT" ON "REPTEMPLATEATTACH" ("REPDOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_CUSTOMER" ON "PLAN3DOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMDOC_OPERTYPE" ON "CLAIMDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_GOODSBRANCH
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_GOODSBRANCH" ON "PLAN2GOODS" ("GOODSBRANCH_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKPDPREFCOUNTRY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE1
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE1" ON "KLADRSTREET" ("CODE1") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_ORDERDOC_DISPSTATUS" ON "ORDERDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_AUCTIONL_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_AUCTIONL_LOTPOSORDER_ID" ON "AUCTIONLOG" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ETP_OOSETPCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ETP_OOSETPCODE" ON "ETP" ("OOSETPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CLNDDAYTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SYSPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONTERCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONTERCODE" ON "CONTRACTDOC" ("CONCOUNTRY_ID", "CONTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_RPLLOG_TABLE
--------------------------------------------------------

  CREATE INDEX "IDX_RPLLOG_TABLE" ON "RPLLOG" ("RPLTABLE_ID", "GENERATION", "RECORD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_ORDERDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CACHEMAN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCRESTAT_DOCRET
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCRESTAT_DOCRET" ON "DOCRETENTIONSTATUS" ("DOCRETENTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ROLEFUNC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TYPECRIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGROLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONSOLIDDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSOLIDDOC_BUDGET" ON "CONSOLIDDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCCUSTOMFIELDS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_KLADR_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_KLADR_PARENT" ON "KLADR" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OPERTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPPERSONALRESP_RESP
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPERSONALRESP_RESP" ON "CMPPERSONALRESP" ("RESPONSIBILITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_INDUSTRYCODE" ON "RECOILLINES" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONAGREEMENTSDOCS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_OOSDISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_OOSDISPSTATUS" ON "PLAN2DOC" ("OOSDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLANREQUEST
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_CMPORG_ID" ON "CONTRACTDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRGROUP_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_OFRGROUP_GROUPCODE" ON "OFRGROUPPROP" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2ARRANGEMENT_LOTNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2ARRANGEMENT_LOTNAME" ON "PLAN2ARRANGEMENT" ("LOTNAMECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CERTREQ_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IFK_CERTREQ_DOCUMENT" ON "CERTREQUEST" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_NOTICEDO_AUTHORORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_NOTICEDO_AUTHORORG_ID" ON "NOTICEDOC" ("AUTHORORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSNOTIFICATIONLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCDIGESTRULE_FGROUPHEADE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCDIGESTRULE_FGROUPHEADE" ON "DOCDIGESTRULE" ("FGROUPHEADER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_BANK_BIC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKPD_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKPD_PURCHASEMODE" ON "GOODSOKPDPURCHASEMODE" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SIGNTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONSUPPLYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_DISPSTATUS" ON "REQUESTDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERORG_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_USERORG_ORG" ON "USERORG" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_AUCTIONBID_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_AUCTIONBID_DISPSTATUS" ON "AUCTIONBID" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_PLANDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_OFRDOCRE_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRDOCRE_LOTPOSOFFER_ID" ON "OFRDOCREQVAL" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSCONTRACTPRODUCTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_OFFERDOC_CLASS_ETPKEY
--------------------------------------------------------

  CREATE INDEX "IDX_OFFERDOC_CLASS_ETPKEY" ON "OFFERDOC" ("DOCUMENTCLASS_ID", "ETPKEY", "ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_RECOILDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_OFRDECREASON_OFRRETREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRDECREASON_OFRRETREASON" ON "OFRDECREASON" ("OFRRETREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPCUSTO_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPCUSTO_CUSTOMER_ID" ON "CMPCUSTOMER" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NOTICEDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_NOTICEDOC_OPERTYPE" ON "NOTICEDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RPLTRANSACTMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_CLASSOPER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPPLACE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ANYDATA
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_CODETYPE_SEQORDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCDIGESTRULE_RULESCRIPT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCDIGESTRULE_RULESCRIPT" ON "DOCDIGESTRULE" ("RULESCRIPT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PURCHCARRY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_DOCUMENT" ON "PLAN3DOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3LINE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_P3LINE_FINSRC" ON "PLAN3PURCHASELINE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_BUDGETSTAGE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGLICENSE_LICTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGLICENSE_LICTYPE" ON "ORGLICENCE" ("LICTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PERSONAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_EQUALITY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RQCRITERIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_DELIVBASIS
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_DELIVBASIS" ON "PLAN2ARRANGEMENT" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2DOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_REQUESTDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_BUDGETLI_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_BUDGETLI_RECIPIENT_ID" ON "BUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_FINSRCSATISFY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DIGESTSIGN_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGESTSIGN_DISPSTATUS" ON "DIGESTSIGN" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_OPERTYPE" ON "INVOICEDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CODETYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPLRULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_MENUITEMWEB_MENU
--------------------------------------------------------

  CREATE INDEX "IDX_MENUITEMWEB_MENU" ON "MENUITEMWEB" ("MENU_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLANDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLANDOC_OPERTYPE" ON "PLANDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MSGSITE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_INSTITUTIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSPRODUCT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTRCARDDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRCARDDOC_DOCUMENT" ON "CONTRACTCARDDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SIGNFORMAT_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_SIGNFORMAT_ID" ON "SUPPORTCRYPTOLIBFORMAT" ("SIGNFORMAT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CUSTOMER" ON "PLAN3PURCHASEDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_INDUSTRYCODE" ON "PLAN2GOODS" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_USERORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKPDPREF_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKPDPREF_OKPD" ON "GOODSOKPDCOUNTRYPREF" ("GOODSOKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_BUDGET" ON "REQUESTDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKDP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ALTGOODSGROUP_TYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ALTGOODSGROUP_TYPE" ON "ALTGOODSGROUP" ("TYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGETP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_REPORT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CNBNKGRNTRTRN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_OPERTYPE" ON "FACTDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CERTICREQ_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IFK_CERTICREQ_DOCUMENT" ON "CERTINTERCHANGEREQUEST" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_OFFERDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CEPENALTY_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CEPENALTY_DOCUMENT_ID" ON "CEPENALTY" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_PERSONAL" ON "REQUESTDOC" ("RESPPERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPDECISION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CLIENTOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REFATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_NOTIFYMSGGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONCONTR_ORGACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONCONTR_ORGACC_ID" ON "CONCONTRACTOR" ("ORGACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_P3PURCHASEDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_P3PURCHASEDOC_DISPSTATUS" ON "PLAN3PURCHASEDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_FUNUNIT_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_MAILRECEIVERGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OFRDOCREQVAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONSOLIDDOC
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONSOLIDDOC" ON "REQUESTDOC" ("CONSOLIDDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_COMMEMBER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PURCHASECARRY_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASECARRY_RECIPIENT_ID" ON "PURCHASECARRY" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RPL_MASTER
--------------------------------------------------------

  CREATE INDEX "J_FK_RPL_MASTER" ON "RPL" ("MASTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQDOCREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPPERSONAL_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPERSONAL_PERSONAL" ON "CMPPERSONAL" ("PERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_CONEXECUTERACC
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_CONEXECUTERACC" ON "INVOICEDOC" ("CONEXECUTERACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_INVGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_INVGOODS_GROUPCODE" ON "INVGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_PDD
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_PDD" ON "DOCUMENT" ("PARENT_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONSTRUCTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONSOLIDDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CONSOLIDDOC_DATENUM" ON "CONSOLIDDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTDOC_DOC_DATE" ON "CONTRACTDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CERTREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CSGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CSGOODS_OKDP_CODE" ON "CSGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRDECREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENTCLASS_SERVERACTIO
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENTCLASS_SERVERACTIO" ON "DOCUMENTCLASS" ("DOCPRINTER_ID", "PRINTER_ACTION") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONSOLIDDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSOLIDDOC_OPERTYPE" ON "CONSOLIDDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PF_PLFEATURE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PF_PLFEATURE" ON "PLAN3PURCHASEFEATURE" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DELIVADDR
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DELIVADDR" ON "PLAN3PURCHASEDOC" ("DELIVERYADDRESS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2ARRANGEMENT_PREFEREN
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2ARRANGEMENT_PREFEREN" ON "PLAN2ARRANGEMENT" ("PREFERENCEGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_NECESSITY" ON "RECOILDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_GOODSGRO_GOODSGROUP_ID
--------------------------------------------------------

  CREATE INDEX "IFK_GOODSGRO_GOODSGROUP_ID" ON "GOODSGROUPPURCHASEMODE" ("GOODSGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_MAILRECEIVERGROUP_USR
--------------------------------------------------------

  CREATE INDEX "J_FK_MAILRECEIVERGROUP_USR" ON "MAILRECEIVERGROUP_RECEIVER" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ATTACHCATEGORIES_CATEGORY
--------------------------------------------------------

  CREATE INDEX "J_FK_ATTACHCATEGORIES_CATEGORY" ON "ATTACHCATEGORIES" ("DOCCATEGORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPGOODS_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPGOODS_LOTPOSORDER_ID" ON "CMPGOODS" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_RECIPIENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_RECIPIENT" ON "PLAN2GOODS" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITYCRED_LIABILITYGR
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITYCRED_LIABILITYGR" ON "LIABILITYCREDENTIAL" ("LIABILITYGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ORGETP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ALTGOODSGROUPLINK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQFEATURE_RQLOT
--------------------------------------------------------

  CREATE INDEX "J_FK_RQFEATURE_RQLOT" ON "RQFEATURE" ("REQUEST_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_AUCTIONB_ORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_AUCTIONB_ORDER_ID" ON "AUCTIONBID" ("ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_OFRSUPPL_GOODSPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRSUPPL_GOODSPOSOFFER_ID" ON "OFRSUPPLYSHEDULE" ("OFFER_ID", "GOODSPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ROLEACTION_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEACTION_DISPSTATUS" ON "ROLEEVENT" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRPLACE_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRPLACE_CUSTOMER" ON "OFRPLACE" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_MSG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE4
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE4" ON "PLAN2GOODS" ("CODE4") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITY_LINES_EXPENSE
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITY_LINES_EXPENSE" ON "LIABILITYEXPENSE_DOCLINES" ("LIABILITYEXPENSE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILDOC_OPERTYPE" ON "RECOILDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORG_OKTMO
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_OKTMO" ON "ORG" ("OKTMO_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SERVERPROVIDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_WEBSTATCACHE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_CONTRACTOR" ON "PURCHASECARRY" ("CONTRACTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TYPEREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_KLADRSTREET_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSBAN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_EXECUTER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_EXECUTER_ID" ON "ORGACCOUNT" ("EXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_ORGFORM" ON "ORDERDOC" ("VENDORPROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CETERMINATIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_OPERTYPE" ON "CONTRACTDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_DISPSTATUS" ON "INVOICEDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TERRITORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCDIGREQS_RULEREQUISITE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCDIGREQS_RULEREQUISITE" ON "DOCDIGESTREQUISITES" ("RULEREQUISITE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_CONTRACTREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_CONTRACTREASON" ON "INVOICEDOC" ("SINGLECUSTOMERREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_COMPLAINTDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_COMPLAINTDOC_DOCUMENT" ON "COMPLAINTDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPDOCREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_CONBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_CONBANK" ON "CMPCUSTOMERLOT" ("GUARANTEECONTRACTBIC") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REQUESTORDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORG_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_ORGFORM" ON "ORG" ("PROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3LINE_RCPT
--------------------------------------------------------

  CREATE INDEX "J_FK_P3LINE_RCPT" ON "PLAN3PURCHASELINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_GOODSOKVED_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_PURCHASEORGCACHE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_PURCHASEORGCACHE" ON "ORDERDOC" ("PURCHASEORGNAMECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_VENDORTERCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_VENDORTERCODE" ON "OFFERDOC" ("VENDORCOUNTRY_ID", "VENDORTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSGROUP_OKDP
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSGROUP_OKDP" ON "GOODSGROUP" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_BUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_OOSPURCHASE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_OOSPURCHASE" ON "CONTRACTDOC" ("OOSPURCHASEORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQQUALREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCSITELINK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGADDKPP_ORGFORM
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGADDKPP_ORGFORM" ON "ORGADDKPP" ("PROPFORM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_COMPLAINTDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_INVOICED_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_INVOICED_TERRITORYCODECOU" ON "INVOICEDOC" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_INTERBUDGET_OUTERBUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTYPEATTACH
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTYPEATTACH" ON "CONTYPEATTACH" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_STOREDDOCUMENTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_NOTIFYMSGEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_PAYCONDITION
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_PAYCONDITION" ON "RECOILLINES" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PRODUCTS_NOTIFICATION
--------------------------------------------------------

  CREATE INDEX "J_FK_PRODUCTS_NOTIFICATION" ON "OOSPRODUCTS" ("NOTIFICATION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTICREQ_USERCERT
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTICREQ_USERCERT" ON "CERTINTERCHANGEREQUEST" ("USERCERT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLNBL_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PLNBL_GRANTINVESTMENT" ON "PLNBUDGETLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TYPEDOCREQ_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEDOCREQ_PURCHASEMODE" ON "TYPEDOCREQ" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_TENDER_CRITERIONPOSORDE
--------------------------------------------------------

  CREATE INDEX "IFK_TENDER_CRITERIONPOSORDE" ON "TENDER" ("ORDER_ID", "CRITERIONPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_OPERTYPE" ON "PLAN3DOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_INTERBUDGET_BUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPSUPPLYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPDOCREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPDOCREQ_REQTYPE" ON "CMPDOCREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_COUNTRY" ON "PLAN3DOC" ("CUSTOMERCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_OKDP
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_OKDP" ON "LEDGER" ("OKDP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_BANKGUARANTEEREFDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_NMSG_RECEIVER
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSG_RECEIVER" ON "NOTIFYMSG" ("RECEIVER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCCUSTOMFIELDVALUES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PLANDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_PLANDOC_DOCUMENT" ON "PLANDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASEPLAN_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASEPLAN_NECESSITY" ON "PURCHASEPLAN" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_TENDERLINECOMM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_REPNOTICE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_REPNOTICE" ON "ORDERDOC" ("REPNOTICE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_FINSRC" ON "PLAN2GOODS" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PREFERENCEGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RESERVEDLINE_PARENT_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_RESERVEDLINE_PARENT_ID" ON "RESERVEDBUDGETLINE" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CSGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FINSRC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CERTICREQ_DOCCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTICREQ_DOCCLASS" ON "CERTINTERCHANGEREQUEST" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CHILDLEVEL
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CHILDLEVEL" ON "KLADR" ("CHILDLEVEL") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DBUPDATE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEREFDOC_STAT
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEREFDOC_STAT" ON "BANKGUARANTEEREFDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_NOTICEORG_DOCGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_NOTICEORG_DOCGROUP" ON "NOTICEDOC" ("DOCGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPEXPENSE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_TENDERLINETENDERLI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INDUSTRYCODE_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_INDUSTRYCODE_ORG" ON "INDUSTRYCODE" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHPLANDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHPLANDOC_DISPSTATUS" ON "PURCHASEPLANDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_AUCTIONBID_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_AUCTIONBID_DOCUMENTCLASS" ON "AUCTIONBID" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_COMMISSION
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_COMMISSION" ON "REQUESTDOC" ("COMMISSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PENALTYCHANGEDOCINFO_CLAI
--------------------------------------------------------

  CREATE INDEX "J_FK_PENALTYCHANGEDOCINFO_CLAI" ON "CLAIMPENALTYCHANGEDOCINFO" ("CLAIM_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE7
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE7" ON "PLAN2GOODS" ("CODE7") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RESERVED_ORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RESERVED_ORDER_ID" ON "RESERVEDBUDGETLINE" ("ORDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTION_CACHE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_HISTORYMODIFY_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_HISTORYMODIFY_SYSUSER" ON "HISTORYMODIFY" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_PURCHASEPLANDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CEEXECUTIONLINE_FACTDOC
--------------------------------------------------------

  CREATE INDEX "J_FK_CEEXECUTIONLINE_FACTDOC" ON "CEEXECUTIONLINE" ("FACTDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_COUNTRY" ON "PLAN3PURCHASEDOC" ("COUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCOMMEMBER_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCOMMEMBER_PERSONAL" ON "CMPCOMMEMBER" ("COMMEMBER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PREFERENCEGROUP_PURCHASE
--------------------------------------------------------

  CREATE INDEX "J_FK_PREFERENCEGROUP_PURCHASE" ON "PREFERENCEGROUP" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_APPOBJ_APPMODULE
--------------------------------------------------------

  CREATE INDEX "J_FK_APPOBJ_APPMODULE" ON "APPOBJ" ("MODULEID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RESERVED_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RESERVED_CUSTOMER_ID" ON "RESERVEDBUDGETLINE" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CRLFILE_CRLPOINT
--------------------------------------------------------

  CREATE INDEX "J_FK_CRLFILE_CRLPOINT" ON "CRLFILE" ("CRLPOINT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_PURCHASEMOD
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_PURCHASEMOD" ON "PLAN3PURCHASEDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TENDERCRITERIONCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SYSUSER_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSUSER_ORG" ON "SYSUSER" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CSGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_CSGOODS_OKPD" ON "CSGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE6
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE6" ON "KLADRSTREET" ("CODE6") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORG_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_COUNTRY" ON "ORG" ("COUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCUMENTCLASS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DOCUMENT" ON "PLAN3PURCHASEDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONREASONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCCOMMENT_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCCOMMENT_SYSUSER" ON "DOCCOMMENT" ("USER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPRODUCT_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPRODUCT_OKPD" ON "PLAN2OOSPRODUCT" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CONTRPROV
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CONTRPROV" ON "PLAN2ARRANGEMENT" ("CONTRACTPROVIDINGCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_RPLLOG_GENERATION
--------------------------------------------------------

  CREATE INDEX "IDX_RPLLOG_GENERATION" ON "RPLLOG" ("GENERATION", "RPLTABLE_ID", "RECORD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_CONACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_CONACC_ID" ON "CONTRACTDOC" ("CONACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_INDUSTRYCODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_ORDERNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_ORDERNAME" ON "PLAN3PURCHASEDOC" ("ORDERNAMECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FGROUPHEADER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CLAIMDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CLAIMDOC_DISPSTATUS" ON "CLAIMDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_CLASS_ID
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_CLASS_ID" ON "DOCUMENT" ("DOCUMENTCLASS_ID", "ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENT_PARDISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENT_PARDISPSTATUS" ON "DOCUMENT" ("PARDISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLNBUDGE_ESTIMATE_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLNBUDGE_ESTIMATE_ID" ON "PLNBUDGETLINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_CONGOODS_OKPD" ON "CONGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_AUCTIONBID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPGOODS_OKDP_CODE" ON "CMPGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_VENDOREXECUTER
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_VENDOREXECUTER" ON "OFFERDOC" ("VENDOREXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TYPEDOCREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DDS_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DDS_DISPSTATUS" ON "DOCDIGESTRULE" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CMPORG" ON "PLAN3PURCHASEDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_ORDERDOC_DOC_DATE" ON "ORDERDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONTRCARDDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_OPERTYPE" ON "PLAN3PURCHASEDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REFATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CLAIMDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CLAIMDOC_DOCUMENT" ON "CLAIMDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PURCHASEPLAN_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASEPLAN_CMPORG_ID" ON "PURCHASEPLAN" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_REQUESTD_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_REQUESTD_RECIPIENT_ID" ON "REQUESTDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_BUDGET_RELATION
--------------------------------------------------------

  CREATE INDEX "J_FK_BUDGET_RELATION" ON "BUDGET" ("RELATIONBUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CONSOLIDDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PURCHASECARRY_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASECARRY_GROUPCODE" ON "PURCHASECARRY" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCUMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_INVOICEDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_INVOICEDOC_DOCUMENT" ON "INVOICEDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPL$CONSTRAINTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_FCTGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_FCTGOODS_OKDP_CODE" ON "FCTGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DBCONNECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TENDERLINECOMM_CMPCOMMEMB
--------------------------------------------------------

  CREATE INDEX "J_FK_TENDERLINECOMM_CMPCOMMEMB" ON "TENDERLINECOMM" ("ORDER_ID", "COMMEMBERPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASEPLAN_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASEPLAN_FINSRC" ON "PURCHASEPLAN" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_INVGOODS_OKPD" ON "INVGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC_DISPSTATUS" ON "PURCHASEPLANDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OFFERDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_OFFERDOC_DOC_DATE" ON "OFFERDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_DISPSTATUS" ON "OFFERDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CERTREQ_DOCCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTREQ_DOCCLASS" ON "CERTREQUEST" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_MSG_STATUS
--------------------------------------------------------

  CREATE INDEX "IDX_MSG_STATUS" ON "MSG" ("DISPSTATUS", "RECEIVER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OOS223PNLI_PURCHNOTICEINF
--------------------------------------------------------

  CREATE INDEX "J_FK_OOS223PNLI_PURCHNOTICEINF" ON "OOS223PURCHNOTICELOTINFO" ("OOS223PURCHASENOTICEINFO_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FILEFOLDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_FGROUPATTACH_DOCATTACHEX
--------------------------------------------------------

  CREATE INDEX "J_FK_FGROUPATTACH_DOCATTACHEX" ON "FGROUPATTACH" ("DOCATTACH_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_CLAIMDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_DISPSTATUS" ON "ORDERDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_PLAN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONTREXECDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLANDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLANDOC_DISPSTATUS" ON "PLANDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPDOCRE_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPDOCRE_LOTPOSORDER_ID" ON "CMPDOCREQ" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INVBL_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_INVBL_INDUSTRYCODE" ON "INVBUDGETLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONTRACTREASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_MENUITEM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TASKJOURNAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_INVOICEDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPDECISION_CMPCOMPETITOR
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPDECISION_CMPCOMPETITOR" ON "CMPDECISION" ("ORDER_ID", "COMPETITORPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PREFERENCEFEATURE_PLFEATU
--------------------------------------------------------

  CREATE INDEX "J_FK_PREFERENCEFEATURE_PLFEATU" ON "PREFERENCEGROUPFEATURE" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPL$CONSTRAINTS_TRIG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_DISPSTATUS" ON "PLAN3DOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TYPECRITLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_STATISTICSSOURCEVALUES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGUNFAIR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONMNGRRESP
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONMNGRRESP" ON "REQUESTDOC" ("CONMNGRRESP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONBL_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_CONBL_GRANTINVESTMENT" ON "CONBUDGETLINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQBL_INDUSTRYCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQBL_INDUSTRYCODE" ON "RQBUDGETLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGSELSTATUS_ORGSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGSELSTATUS_ORGSTATUS" ON "ORGSELSTATUS" ("ORGSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_ORDERDOC_CLASS_ETPKEY
--------------------------------------------------------

  CREATE INDEX "IDX_ORDERDOC_CLASS_ETPKEY" ON "ORDERDOC" ("DOCUMENTCLASS_ID", "ETPKEY", "ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_QUALIFYSELECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_MSG_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_MSG_SYSUSER" ON "MSG" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_STOREDDO_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_STOREDDO_DOCUMENT_ID" ON "STOREDDOCUMENTS" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQDOCREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQDOCREQ_REQTYPE" ON "RQDOCREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONEXECSTEP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index DOCRETENTIONSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RPLVERSIONLOG_RPLTABLE
--------------------------------------------------------

  CREATE INDEX "J_FK_RPLVERSIONLOG_RPLTABLE" ON "RPLVERSIONLOG" ("RPLTABLE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_P2ARRANGEMENT_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "IDX_P2ARRANGEMENT_CONTRACTOR" ON "PLAN2ARRANGEMENT" ("CONTRACTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_GOODSGRO_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_GOODSGRO_GROUPCODE" ON "GOODSGROUPDOCDETAIL" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GROUPUNIT_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_GROUPUNIT_UNIT" ON "GROUPUNIT" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CONBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CONBANK" ON "RQLOT" ("GUARANTEECONTRACTBIC") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NOTIFYMSGRULE_RECEIVER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_METAOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPCUSTOMERLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DOCCLASS_DISPSTATUS_ID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_ORG_CMPORG
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_ORG_CMPORG" ON "LEDGER" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCATTACHEX
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PROPTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SYSUSER_PANEL
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSUSER_PANEL" ON "SYSUSER" ("PANEL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CURHISTORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_CONTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_CONTYPE" ON "RQLOT" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CHANGEREASO
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CHANGEREASO" ON "PLAN2ARRANGEMENT" ("CHANGEREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONSOLIDDOC_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSOLIDDOC_PURCHASEMODE" ON "CONSOLIDDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PANELITEM_PANEL
--------------------------------------------------------

  CREATE INDEX "J_FK_PANELITEM_PANEL" ON "PANELITEM" ("PANEL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQCONDEALRESP_LOTPOS
--------------------------------------------------------

  CREATE INDEX "J_FK_RQCONDEALRESP_LOTPOS" ON "RQCONDEALRESP" ("REQUEST_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FCTGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PROCTREE_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCTREE_PARENT" ON "PROCTREE" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CODE3
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CODE3" ON "KLADR" ("CODE3") 
   ;
--------------------------------------------------------
--  DDL for Index S_INVOICEDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_PUBLICDISCUSS
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_PUBLICDISCUSS" ON "PLAN2OOSPOSITION" ("PUBLICDISCUSSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_OKTMO_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONREFUSALFACT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_OFRRETREASON_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRRETREASON_PURCHASEMODE" ON "OFRRETREASON" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SYSMSG_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSMSG_SYSUSER" ON "SYSEVENT" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSCONTRACT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLNSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_PURCHASEORG_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_PURCHASEORG_ID" ON "ORDERDOC" ("PURCHASEORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_NOTICEDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_NOTICEDOC_DISPSTATUS" ON "NOTICEDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NUMPREFIX_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_NUMPREFIX_SYSUSER" ON "NUMPREFIX" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGTURNOVER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEREGISTER_DOCUMENTCLAS
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEREGISTER_DOCUMENTCLAS" ON "ROLEREGISTER" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_BUDGET" ON "ORDERDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPPAYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTREXECDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTREXECDOC_BUDGET" ON "CONTRACTEXECDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLANREQU_DOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PLANREQU_DOC_ID" ON "PLANREQUEST" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_PAYCOND
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_PAYCOND" ON "PLAN2ARRANGEMENT" ("PAYCONDITIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REFJOURNAL_REFCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_REFJOURNAL_REFCLASS" ON "REFJOURNAL" ("REF_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKDPPREF_COUNTRY
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKDPPREF_COUNTRY" ON "GOODSOKDPCOUNTRYPREF" ("COUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPPLACE_ESTIMATE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPLACE_ESTIMATE" ON "CMPPLACE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SCHPLAN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPL$CONSTRAINTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SERVERACTION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_PURCHASEMODE" ON "REQUESTDOC" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_NOTIFYMSGGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPLOT_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPLOT_CURRENCY" ON "CMPLOT" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_ETP" ON "ORDERDOC" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_COMPLAINTDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ROLEORG_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_ROLEORG_ORG" ON "ROLEORG" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_PANEL_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_KLADRSTREET_KLADR
--------------------------------------------------------

  CREATE INDEX "J_FK_KLADRSTREET_KLADR" ON "KLADRSTREET" ("KLADR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RULEREQUISITE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_BANK
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTDOC_DOCUMENT" ON "CONTRACTDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_RECOILDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_INVOICED_CONACC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVOICED_CONACC_ID" ON "INVOICEDOC" ("CONACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GROUPPROPVALUE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OOSPROTOCOLLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CEREPARATIONLINE_REPDOCID
--------------------------------------------------------

  CREATE INDEX "J_FK_CEREPARATIONLINE_REPDOCID" ON "CEREPARATIONLINE" ("CONTRACTREPARATIONDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_REPFIELD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REPDOCFRAGMENT_REPFRAGMEN
--------------------------------------------------------

  CREATE INDEX "J_FK_REPDOCFRAGMENT_REPFRAGMEN" ON "REPDOCFRAGMENT" ("REPFRAGMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_QUALREQ_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_QUALREQ_PURCHASEMODE" ON "QUALREQ" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_DOCUMENT_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_DOCUMENT_DOC_DATE" ON "DOCUMENT" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKDP_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKDP_PURCHASEMODE" ON "GOODSOKDPPURCHASEMODE" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ETPATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TENDERLINE_CMPCRITERIONLI
--------------------------------------------------------

  CREATE INDEX "J_FK_TENDERLINE_CMPCRITERIONLI" ON "TENDERLINE" ("ORDER_ID", "CRITERIONPOS", "CRITERIONLINESEQORDER") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_EXCHANGECLASSES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_TERTYPE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REPFORM_SERVERPROCESSOR
--------------------------------------------------------

  CREATE INDEX "J_FK_REPFORM_SERVERPROCESSOR" ON "REPFORM" ("SERVERPROCESSOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ETPTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_DELIV
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_DELIV" ON "PURCHASECARRY" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_UPDPACKAGE_SENDER
--------------------------------------------------------

  CREATE INDEX "J_FK_UPDPACKAGE_SENDER" ON "UPDPACKAGE" ("SENDER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ROLEBUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC_DOCUMENT" ON "PURCHASEPLANDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2ARRANGEMENT_GOODS
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2ARRANGEMENT_GOODS" ON "PLAN2ARRANGEMENT" ("PLAN2GOODS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FUNCOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FINSRCSATISFY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GRANTINVESTMENT_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_GRANTINVESTMENT_ORG" ON "GRANTINVESTMENT" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_DESCRIPTION
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_DESCRIPTION" ON "PURCHASECARRY" ("DESCRIPTIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_APPBANK
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_APPBANK" ON "RQLOT" ("GUARAPPBIC") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_DELIV
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_DELIV" ON "RECOILLINES" ("DELIVERYBASIS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CURRENCY" ON "REQUESTDOC" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REPFRAGMENTCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ETP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DELIVERYBASIS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CERTREVOKEREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_OFRGOODS_LOTPOSOFFER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_OFRGOODS_LOTPOSOFFER_ID" ON "OFRGOODS" ("OFFER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_P3GOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ROLEEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPOOSMODIF
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CLAIMDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENT_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENT_OPERTYPE" ON "DOCUMENT" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_BUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPPLACE_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_CMPPLACE_TERRITORYCODECOU" ON "CMPPLACE" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_USERSESSION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_ETP
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_ETP" ON "REQUESTDOC" ("ETP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_CONTRACTREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_CONTRACTREASON" ON "REQUESTDOC" ("SINGLECUSTOMERREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_NOTICEOR_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_NOTICEOR_ORG_ID" ON "NOTICEORG" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFRCRITERIONLINEVAL_OFRCR
--------------------------------------------------------

  CREATE INDEX "J_FK_OFRCRITERIONLINEVAL_OFRCR" ON "OFRCRITERIONLINEVAL" ("OFFER_ID", "CMPCRITERIONPOS", "ISFINALOFFER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_INSTITUTIONLINE_ORG
--------------------------------------------------------

  CREATE INDEX "J_FK_INSTITUTIONLINE_ORG" ON "INSTITUTIONLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CEEXECLINE_CONEXECDOCTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CEEXECLINE_CONEXECDOCTYPE" ON "CEEXECUTIONLINE" ("CONTRACTEXECDOCTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPFEATURE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOCCHILD_PLAN3DOC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOCCHILD_PLAN3DOC" ON "PLAN3DOCCHILD" ("PLAN3DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_P3PURCHASEDOC_DOCDATA
--------------------------------------------------------

  CREATE INDEX "IDX_P3PURCHASEDOC_DOCDATA" ON "PLAN3PURCHASEDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2ARRANGEMENT_PURCHASE
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2ARRANGEMENT_PURCHASE" ON "PLAN2ARRANGEMENT" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PROCTREE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONFCONCCONTRACT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2OOSOKVED
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_CUSTOMER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_CUSTOMER_ID" ON "CONTRACTDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MENUITEMWEB
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_COMPLAINTDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_COMPLAINTDOC_DATENUM" ON "COMPLAINTDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PROCTREE_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCTREE_DOCUMENTCLASS" ON "PROCTREE" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_PERIODICITY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_PERIODICITY" ON "PLAN2OOSPOSITION" ("PERIODICITYCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_AUCTIONB_COMPETITORPOSORD
--------------------------------------------------------

  CREATE INDEX "IFK_AUCTIONB_COMPETITORPOSORD" ON "AUCTIONBID" ("ORDER_ID", "COMPETITORPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_OKDP
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_OKDP" ON "PLAN2LEDGER" ("OKDP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSCUSTOMERREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONBUDGETLINE_LIABILITY
--------------------------------------------------------

  CREATE INDEX "J_FK_CONBUDGETLINE_LIABILITY" ON "CONBUDGETLINE" ("LIABILITYEXPENSE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSOKVED
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CERTICREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_MENUITEM_PARENT
--------------------------------------------------------

  CREATE INDEX "J_FK_MENUITEM_PARENT" ON "MENUITEM" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSORGANIZATION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_ORGFORM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHPLANDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHPLANDOC_OPERTYPE" ON "PURCHASEPLANDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUIREMENTTYPEPM_PURCHMD
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUIREMENTTYPEPM_PURCHMD" ON "REQUIREMENTTYPEPM" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_OKTMO
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_OKTMO" ON "CONTRACTDOC" ("CONOKTMO_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REPFRAGMENTCHILD_CHILD
--------------------------------------------------------

  CREATE INDEX "J_FK_REPFRAGMENTCHILD_CHILD" ON "REPFRAGMENTCHILD" ("CHILD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_UPDPACKAGE_RECEIVER
--------------------------------------------------------

  CREATE INDEX "J_FK_UPDPACKAGE_RECEIVER" ON "UPDPACKAGE" ("RECEIVER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NMSG_NOTIFYMSGGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSG_NOTIFYMSGGROUP" ON "NOTIFYMSG" ("NOTIFYMSGGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_OOSCONTRACT_NOTICENUMBER
--------------------------------------------------------

  CREATE INDEX "IDX_OOSCONTRACT_NOTICENUMBER" ON "OOSCONTRACT" ("NOTIFICATIONNUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_NUMSEQUENCE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_FMTCONVERTER_CONVERTER_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_FMTCONVERTER_CONVERTER_ID" ON "DOCATTACHEX" ("CONVERTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONTYPEATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOCUMENTBLOCKINFO
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_REPSOURCE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_CONTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_CONTYPE" ON "CONTRACTDOC" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONBUDGE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONBUDGE_RECIPIENT_ID" ON "CONBUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3LINE_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_P3LINE_GRANTINVESTMENT" ON "PLAN3PURCHASELINE" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NOTICEDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQBUDGETLINE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_RQBUDGETLINE_FINSRC" ON "RQBUDGETLINE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPLOBJECT_SEQORDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2ARRANGEMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SEL_DIGEST
--------------------------------------------------------

  CREATE INDEX "J_FK_SEL_DIGEST" ON "SIGNEXPORTLOG" ("DIGEST_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RPL_RPLOBJECT
--------------------------------------------------------

  CREATE INDEX "J_FK_RPL_RPLOBJECT" ON "RPL" ("RPLOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ABANDONEDREASON_PM
--------------------------------------------------------

  CREATE INDEX "J_FK_ABANDONEDREASON_PM" ON "ABANDONEDREASON" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PROCUREMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQBUDGET_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQBUDGET_RECIPIENT_ID" ON "RQBUDGETLINE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_OFFERDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_OFFERDOC_BUDGET" ON "OFFERDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_MODIFICATION
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_MODIFICATION" ON "CONTRACTDOC" ("MODIFICATIONREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_BUDGET" ON "PLAN3PURCHASEDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONORGSTATUS_ORGSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONORGSTATUS_ORGSTATUS" ON "CONORGSTATUS" ("ORGSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index FK_PURCHPLANDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTEMPDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_WEBSTATVAL_WEBSTATCACHE
--------------------------------------------------------

  CREATE INDEX "J_FK_WEBSTATVAL_WEBSTATCACHE" ON "WEBSTATCACHEVAL" ("WEBSTAT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPREPDOCUMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN_PURCHASEMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN_PURCHASEMODE" ON "PURCHASEPLAN" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RPLOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_NOTICEEMAILORG
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_NOTICEEM_NOTICEDOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_NOTICEEM_NOTICEDOC_ID" ON "NOTICEEMAILORG" ("NOTICEDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MAIL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_RQBUDGET_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_RQBUDGET_TERRITORYCODECOU" ON "RQBUDGETLINE" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TYPEDOCREQGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONSTRFIELDS_CONSTRAINTS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSTRFIELDS_CONSTRAINTS" ON "RPL$CONSTRAINTFIELDS" ("RPL$CONSTRAINTS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPPLACE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPPLACE_FINSRC" ON "CMPPLACE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPVOTER_DECISIONPOSORDER
--------------------------------------------------------

  CREATE INDEX "IFK_CMPVOTER_DECISIONPOSORDER" ON "CMPVOTERESULT" ("ORDER_ID", "DECISIONPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_METAOBJECT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACT_SINGLECUSTOMERDO
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACT_SINGLECUSTOMERDO" ON "CONTRACTDOC" ("SINGLECUSTOMERREASONDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_MAIL_READ_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_MAIL_READ_DATE" ON "MAIL" ("READ_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_LEDGER_GOODS
--------------------------------------------------------

  CREATE INDEX "IDX_LEDGER_GOODS" ON "LEDGER" ("GOODS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCEVENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RQFEATURE_PLFEATURE
--------------------------------------------------------

  CREATE INDEX "J_FK_RQFEATURE_PLFEATURE" ON "RQFEATURE" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CURRENCY" ON "ORDERDOC" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRCARDDOC_ETPKEY
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRCARDDOC_ETPKEY" ON "CONTRACTCARDDOC" ("ETP_ID", "ETPKEY") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTEXECDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTEXECDOC_DOCUMENT" ON "CONTRACTEXECDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SIGNFORMAT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index S_CONTRCARDDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTREXECDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTREXECDOC_OPERTYPE" ON "CONTRACTEXECDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_CONTRACTOR" ON "PLAN2LEDGER" ("CONTRACTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_PURCHASEPLANDOC_DI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCREP_DOCPRINTER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCREP_DOCPRINTER" ON "DOCUMENTREPORTS" ("DOCPRINTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPDECIS_PHASEPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPDECIS_PHASEPOSORDER_ID" ON "CMPDECISION" ("ORDER_ID", "PHASEPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RPLRULEOBJ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CSGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEDOC_CUSTORG
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEDOC_CUSTORG" ON "BANKGUARANTEEDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEREFDOC_CLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEREFDOC_CLASS" ON "BANKGUARANTEEREFDOC" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ALTGGLINK_ALTGOODSGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_ALTGGLINK_ALTGOODSGROUP" ON "ALTGOODSGROUPLINK" ("ALTGOODSGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CLNDDAY_CLNDDAYTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CLNDDAY_CLNDDAYTYPE" ON "CLNDDAY" ("CLNDDAYTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_STATISTICSSOURCE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_UNIT" ON "RECOILLINES" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCACTION_CLIENTOBJECT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCACTION_CLIENTOBJECT" ON "DOCACTION" ("CLIENTOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPFEATURE_PLFEATURE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPFEATURE_PLFEATURE" ON "CMPFEATURE" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CDCAVILTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKPD_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKPD_OKPD" ON "GOODSOKPDPURCHASEMODE" ("GOODSOKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTEXECDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTEXECDOC_DATENUM" ON "CONTRACTEXECDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index FK_PLAN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_MSGQUEUE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNCAT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RNP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_RESPEXECUTER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_RESPEXECUTER" ON "PLAN3DOC" ("RESPEXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_NOTICEDO_PUBLISHERORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_NOTICEDO_PUBLISHERORG_ID" ON "NOTICEDOC" ("PUBLISHERORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NOTICEORG_SYSDOCGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_NOTICEORG_SYSDOCGROUP" ON "NOTICEDOC" ("SYSDOCGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REPTEMPLATEATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CERTICREQ_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CERTICREQ_DISPSTATUS" ON "CERTINTERCHANGEREQUEST" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_DISPSTATUS" ON "CONTRACTDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONPAYSHEDULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_USERCERT_CRLPOINT
--------------------------------------------------------

  CREATE INDEX "J_FK_USERCERT_CRLPOINT" ON "USERCERT" ("CRLPOINT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQCOMMEMBER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNCPROCESSOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSOKVED_OKVED
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSOKVED_OKVED" ON "PLAN2OOSOKVED" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OOSAPPLICATION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_IKOKPDID
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_IKOKPDID" ON "PLAN3PURCHASEDOC" ("IKOKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_DOCSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOSITION_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOSITION_CURRENCY" ON "PLAN2OOSPOSITION" ("CONTRACTCURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGFORM_ID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_USESCRYPTOLIBPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_INVOICED_CON_ID
--------------------------------------------------------

  CREATE INDEX "IFK_INVOICED_CON_ID" ON "INVOICEDOC" ("CON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONPLACE_TERRITORYCODECOU
--------------------------------------------------------

  CREATE INDEX "IFK_CONPLACE_TERRITORYCODECOU" ON "CONPLACE" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_RECOILDOC_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "IDX_RECOILDOC_DOCUMENT" ON "RECOILDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RPL$CONSTRAINTFIELDS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_UNIT" ON "PURCHASECARRY" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_OOSETPCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_OOSETPCODE" ON "ORDERDOC" ("OOSETPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ANYDATA
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADRSTREET_CODE3
--------------------------------------------------------

  CREATE INDEX "IDX_KLADRSTREET_CODE3" ON "KLADRSTREET" ("CODE3") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CONTRACTOR
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CONTRACTOR" ON "PLAN3PURCHASEDOC" ("CONTRACTOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODSOKDPPREF_OKDP
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSOKDPPREF_OKDP" ON "GOODSOKDPCOUNTRYPREF" ("GOODSOKDP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ALTGOODSGROUPTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CURHISTORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_ETPATTACH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_BUDGCODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ROLEAPPOBJ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_REQUESTDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "IDX_REQUESTDOC_DISPSTATUS" ON "REQUESTDOC" ("DOCUMENTCLASS_ID", "DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_TERRITORY_TERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_TERRITORY_TERTYPE" ON "TERRITORY" ("TERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RESPONSIBILITY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONSOLIDDOC_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_CONSOLIDDOC_DISPSTATUS" ON "CONSOLIDDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_LIABILITYEXPENSE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CMPVENDOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REQUIREMENTTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PLGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_PLGOODS_GROUPCODE" ON "PLGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_ORG_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_ORG_CUSTOMER" ON "LEDGER" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_CONTRACTDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CONTRACTDOC_DATENUM" ON "CONTRACTDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index PK_NUMSEQUENCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CLAIMDOC_DATENUM
--------------------------------------------------------

  CREATE INDEX "IDX_CLAIMDOC_DATENUM" ON "CLAIMDOC" ("DOC_DATE", "DOC_NUMBER") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQLOT_APPSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_RQLOT_APPSETTACC_ID" ON "RQLOT" ("GUARAPPSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LIABILITYCRED_BUDGETSTAGE
--------------------------------------------------------

  CREATE INDEX "J_FK_LIABILITYCRED_BUDGETSTAGE" ON "LIABILITYCREDENTIAL" ("STAGECODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGACCOUNT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLAN2DAILYTOTALS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_CONTEMPDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_CONTEMPDOC_DOC_DATE" ON "CONTRACTTEMPLATEDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_GOODS_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODS_UNIT" ON "GOODS" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORGTURNOVER_CURRENCY
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGTURNOVER_CURRENCY" ON "ORGTURNOVER" ("CURRENCY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_MODIFICATIOND
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_MODIFICATIOND" ON "CONTRACTDOC" ("MODIFICATIONREASONDOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGACCTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CMPQUALR_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPQUALR_LOTPOSORDER_ID" ON "CMPQUALREQ" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index PK_REPDOCFRAGMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_TYPEDOCREQGROUP_PURCHMODE
--------------------------------------------------------

  CREATE INDEX "J_FK_TYPEDOCREQGROUP_PURCHMODE" ON "TYPEDOCREQGROUP" ("PURCHASEMODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPCOMPE_LOTPOSORDER_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPCOMPE_LOTPOSORDER_ID" ON "CMPCOMPETITOR" ("ORDER_ID", "LOTPOS") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CMPORGFACTCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CMPORGFACTCODE" ON "ORDERDOC" ("CMPORGFACTCOUNTRY_ID", "CMPORGFACTTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_SYSUSER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CCCONTRACT_PLACINGWAY
--------------------------------------------------------

  CREATE INDEX "J_FK_CCCONTRACT_PLACINGWAY" ON "CONFCONCLUSIONCONTRACT" ("PLACINGWAY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERCERT_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_USERCERT_SYSUSER" ON "USERCERT" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PURCHASEPLANDOC_PLANYEAR
--------------------------------------------------------

  CREATE INDEX "IDX_PURCHASEPLANDOC_PLANYEAR" ON "PURCHASEPLANDOC" ("PLANYEAR") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DISPSTATUS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_TENDERCRITERIONCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PAYCONDITION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RESERVEDLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_DOMEN
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_MSGQUEUE_RECEIVER
--------------------------------------------------------

  CREATE INDEX "J_FK_MSGQUEUE_RECEIVER" ON "MSGQUEUE" ("RECEIVER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PURCHASECARRY_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASECARRY_CMPORG_ID" ON "PURCHASECARRY" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_OLD
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_OLD" ON "PLAN2GOODS" ("OLDPLAN2GOODS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FETCHMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_LIABILITY_LINES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSOKPD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_OOSPRODUCTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GBPM_GOODSBAN_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_GBPM_GOODSBAN_ID" ON "GOODSBANPURCHASEMODE" ("GOODSBAN_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_NMSGRULE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_MAILRECEIVERGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CONDAMAGEPAYMENTS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_SYSPARAM_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_SYSPARAM_SYSUSER" ON "SYSPARAM" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEDOC_DISPSTAT
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEDOC_DISPSTAT" ON "BANKGUARANTEEDOC" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CHANGEDESCR
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CHANGEDESCR" ON "PLAN2ARRANGEMENT" ("CHANGEDESCRIPTIONCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRCRITERIONLINEVAL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CURRENCY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTOMERLOT_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTOMERLOT_CUSTOMER" ON "CMPCUSTOMERLOT" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_SUPPLYPLACE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_WEBSTAT_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_WEBSTAT_BUDGET" ON "WEBSTATCACHE" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_APPOINTMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCUMENT_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCUMENT_SYSUSER" ON "DOCUMENT" ("AUTHOR_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSFEATURE_PLFEATURE
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSFEATURE_PLFEATURE" ON "PLAN2OOSFEATURE" ("PLACEMENTFEATURE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_TERRITORY
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DELIVERYBASIS_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_REQUESTO_DOCUMENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_REQUESTO_DOCUMENT_ID" ON "REQUESTORDER" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_SCHEXPDOCS_DOCUMENTCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_SCHEXPDOCS_DOCUMENTCLASS" ON "SCHEXPDOCS" ("DOCCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGTITLE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_AUCTIONBID_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_AUCTIONBID_OPERTYPE" ON "AUCTIONBID" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_INVGOODS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CLAIMPAYFACT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_NMSGRULE_NOTIFYMSGGROUP
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSGRULE_NOTIFYMSGGROUP" ON "NOTIFYMSGRULE" ("NOTIFYMSGGROUP_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_EQUALITYCODES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FUNUNIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_USERSESSION_BUDGET
--------------------------------------------------------

  CREATE INDEX "IDX_USERSESSION_BUDGET" ON "USERSESSION" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_FORMATCONVERTER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ALTGOODSGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_APPSETTACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_APPSETTACC_ID" ON "REQUESTDOC" ("GUARAPPSETTLEMENTACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_FACTDOC_DOC_DATE
--------------------------------------------------------

  CREATE INDEX "IDX_FACTDOC_DOC_DATE" ON "FACTDOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_MSGQUEUE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ATTACHEDPLANDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DIGESTSIGN_SYSUSER
--------------------------------------------------------

  CREATE INDEX "J_FK_DIGESTSIGN_SYSUSER" ON "DIGESTSIGN" ("SYSUSER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQBUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CAVILDOC_DOCUMNETCLASS
--------------------------------------------------------

  CREATE INDEX "J_FK_CAVILDOC_DOCUMNETCLASS" ON "CAVILDOC" ("DOCUMENTCLASS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_USERSESSION_CLOSE
--------------------------------------------------------

  CREATE INDEX "IDX_USERSESSION_CLOSE" ON "USERSESSION" ("CLOSE_TIME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_BANKGUARANTEE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_BANKGUARANTEE" ON "CONTRACTDOC" ("GRNTREGNUMBER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPCUSTOMER_CUSTFACTCODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPCUSTOMER_CUSTFACTCODE" ON "CMPCUSTOMER" ("CUSTOMERFACTCOUNTRY_ID", "CUSTOMERFACTTERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2DOCCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ORG_TERRITORY_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORG_TERRITORY_ID" ON "ORG" ("TERRITORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_DOCSTATUS_DOCSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCSTATUS_DOCSTATUS" ON "DOCSTATUS" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_EQUALITYCODES_CODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_USESCRYPTOLIBPARAM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_PLAN2GOODS_CODE9
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2GOODS_CODE9" ON "PLAN2GOODS" ("CODE9") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_COMPLAINTDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_COMPLAINTDOC_OPERTYPE" ON "COMPLAINTDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGCHILD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CLASSOPER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_ATTACHED_DOC_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ATTACHED_DOC_ID" ON "ATTACHEDPLANDOC" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_RQGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_RQGOODS_OKPD" ON "RQGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_OFRRETREASON_REASON
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_MENUITEMWEB_PARENT
--------------------------------------------------------

  CREATE INDEX "IDX_MENUITEMWEB_PARENT" ON "MENUITEMWEB" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IX_NUMUSAGE_NUM_VALUE
--------------------------------------------------------

  CREATE INDEX "IX_NUMUSAGE_NUM_VALUE" ON "NUMUSAGE" ("NUM_VALUE", "USE_COUNT", "NUMSEQUENCE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_GROUPUNIT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCEVERRLOG_DOCUMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCEVERRLOG_DOCUMENT" ON "DOCEVERRLOG" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_PLAN2DOC_DOCDATA
--------------------------------------------------------

  CREATE INDEX "IDX_PLAN2DOC_DOCDATA" ON "PLAN2DOC" ("DOC_DATE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLACEMENTFEATUREPM
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSPRICE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_CON_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_CON_ID" ON "CONTRACTDOC" ("CON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_FACTDOC_FACTDOCTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_FACTDOC_FACTDOCTYPE" ON "FACTDOC" ("TYPENAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOCCHILD_PLAN2DOC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOCCHILD_PLAN2DOC" ON "PLAN2DOCCHILD" ("PLAN2DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CMPPLACE_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CMPPLACE_RECIPIENT_ID" ON "CMPPLACE" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2LEDGER_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2LEDGER_FINSRC" ON "PLAN2LEDGER" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2GOODS_UNITNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2GOODS_UNITNAME" ON "PLAN2GOODS" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USESCRYPLIB_SUPPORTCRYPLI
--------------------------------------------------------

  CREATE INDEX "J_FK_USESCRYPLIB_SUPPORTCRYPLI" ON "USESCRYPTOLIB" ("SUPPORTCRYPTOLIB_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_LIABILIT_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_LIABILIT_ORG_ID" ON "LIABILITYEXPENSE" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPGOODS_OKPD
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPGOODS_OKPD" ON "CMPGOODS" ("OKPD_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_CONTRPAYORD
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_CONTRPAYORD" ON "PLAN2ARRANGEMENT" ("CONTRACTPAYORDERCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_OFFERDOC_DNI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_P3LINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INVOICEDOC_CONEXECUTER
--------------------------------------------------------

  CREATE INDEX "J_FK_INVOICEDOC_CONEXECUTER" ON "INVOICEDOC" ("CONEXECUTER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CMPORGFACTCOUNTR
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CMPORGFACTCOUNTR" ON "ORDERDOC" ("CMPORGFACTCOUNTRY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_INVGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSGROUP_UNIT
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSGROUP_UNIT" ON "GOODSGROUP" ("UNITNAME") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_NMSGRULE_NOTIFYMSGEVENT
--------------------------------------------------------

  CREATE INDEX "J_FK_NMSGRULE_NOTIFYMSGEVENT" ON "NOTIFYMSGRULE" ("NOTIFYMSGEVENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CAVILDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_CEREPARATIONLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_DOCRETENTIONR_DOCACTION
--------------------------------------------------------

  CREATE INDEX "J_FK_DOCRETENTIONR_DOCACTION" ON "DOCRETENTION" ("DOCACTION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_ANYDATA_DATAKEY
--------------------------------------------------------

  CREATE INDEX "IDX_ANYDATA_DATAKEY" ON "ANYDATA" ("DATA_KEY") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CMPQUALREQ
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CACHELIST_USERSESSION
--------------------------------------------------------

  CREATE INDEX "J_FK_CACHELIST_USERSESSION" ON "CACHELIST" ("USERSESSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ESCHECKRULE_DISPSTATUS
--------------------------------------------------------

  CREATE INDEX "J_FK_ESCHECKRULE_DISPSTATUS" ON "ESCHECKRULE" ("DISPSTATUS_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PACKTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CMPQUALREQ_REQTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPQUALREQ_REQTYPE" ON "CMPQUALREQ" ("REQUIREMENTTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_ETP_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOC_CONFIRMPERSON
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOC_CONFIRMPERSON" ON "PLAN3DOC" ("CONFIRMPERSON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONBUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORG_CERT
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_CERT" ON "ORG" ("CERT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CACHELIST
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INSTITUTIONLINE_IC
--------------------------------------------------------

  CREATE INDEX "J_FK_INSTITUTIONLINE_IC" ON "INSTITUTIONLINE" ("INDUSTRYCODE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGPERSONALRESP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TENDER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CUSTOMERLOT_APPPERSACC_ID
--------------------------------------------------------

  CREATE INDEX "J_FK_CUSTOMERLOT_APPPERSACC_ID" ON "CMPCUSTOMERLOT" ("GUARAPPPERSONALACC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_ORGANIZER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_ORGANIZER" ON "PLAN2OOSPOSITION" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN3DOCCHILD_DOCUMENTID
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN3DOCCHILD_DOCUMENTID" ON "PLAN3DOCCHILD" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORG_OKVEDID
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_OKVEDID" ON "ORG" ("OKVED_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UK_GOODSDOCDETAIL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_FETCHMODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_PRICECHANGE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_PRICECHANGE" ON "CONTRACTDOC" ("PRICECHANGEREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_DOCDIGESREQUISITES
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P2ARRANGEMENT_ORDERNAME
--------------------------------------------------------

  CREATE INDEX "J_FK_P2ARRANGEMENT_ORDERNAME" ON "PLAN2ARRANGEMENT" ("ORDERNAMECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_MENUITEM_CLIENTOBJECT
--------------------------------------------------------

  CREATE INDEX "J_FK_MENUITEM_CLIENTOBJECT" ON "MENUITEM" ("CLIENTOBJECT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PROCUREMENT_COMMISSION
--------------------------------------------------------

  CREATE INDEX "J_FK_PROCUREMENT_COMMISSION" ON "PROCUREMENT" ("COMMISSION_ID") 
   ;
--------------------------------------------------------
--  DDL for Index S_INVOICEDOC_NI
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_RPL
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONPAYFACT_CONTRACT
--------------------------------------------------------

  CREATE INDEX "J_FK_CONPAYFACT_CONTRACT" ON "CONPAYFACT" ("CONTRACT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORG_LAWTERRITORY_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORG_LAWTERRITORY_ID" ON "ORG" ("LAWTERRITORY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_RQVENDOR
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_OPERTYPE" ON "ORDERDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_PLNGOODS_GROUPCODE
--------------------------------------------------------

  CREATE INDEX "IFK_PLNGOODS_GROUPCODE" ON "PLNGOODS" ("GROUPCODE") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_RPLTABLE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_CONEXECSTAG
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_CONEXECSTAG" ON "PLAN3PURCHASEDOC" ("CONEXECSTAGESCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_RQBUDGET_ESTIMATE_ID
--------------------------------------------------------

  CREATE INDEX "IFK_RQBUDGET_ESTIMATE_ID" ON "RQBUDGETLINE" ("ESTIMATE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_ORGACCOU_ORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_ORGACCOU_ORG_ID" ON "ORGACCOUNT" ("ORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_CONPRODUCTSCHANGEDOCS
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_BANKGUARANTEEREFDOC_DOCUM
--------------------------------------------------------

  CREATE INDEX "J_FK_BANKGUARANTEEREFDOC_DOCUM" ON "BANKGUARANTEEREFDOC" ("DOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_LEDGER_GRANTINVESTMENT
--------------------------------------------------------

  CREATE INDEX "J_FK_LEDGER_GRANTINVESTMENT" ON "LEDGER" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_USERCERT_SIGNTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_USERCERT_SIGNTYPE" ON "USERCERT" ("SIGNTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORG_ACCOUNTANT
--------------------------------------------------------

  CREATE INDEX "J_FK_ORG_ACCOUNTANT" ON "ORG" ("ACCOUNTANT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_TERRITORY
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_TERRITORY" ON "PLAN3PURCHASEDOC" ("COUNTRY_ID", "TERRITORYCODE") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_MSGSITEEXCHANGE_SCHEME
--------------------------------------------------------

  CREATE INDEX "J_FK_MSGSITEEXCHANGE_SCHEME" ON "MSGSITEEXCHANGE" ("DOCEXCHANGESCHEME_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_FORMATCONVERTER_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_ORGPERSONAL_PERSONAL
--------------------------------------------------------

  CREATE INDEX "J_FK_ORGPERSONAL_PERSONAL" ON "ORGPERSONAL" ("PERSONAL_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_REQUESTD_CMPORG_ID
--------------------------------------------------------

  CREATE INDEX "IFK_REQUESTD_CMPORG_ID" ON "REQUESTDOC" ("CMPORG_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_BUDGET_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_BUDGET_FINSRC" ON "BUDGET" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IFK_CONTRACT_RECIPIENT_ID
--------------------------------------------------------

  CREATE INDEX "IFK_CONTRACT_RECIPIENT_ID" ON "CONTRACTDOC" ("RECIPIENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONGOODS_OKDP_CODE
--------------------------------------------------------

  CREATE INDEX "J_FK_CONGOODS_OKDP_CODE" ON "CONGOODS" ("OKDP_CODE") 
   ;
--------------------------------------------------------
--  DDL for Index PK_TER_TREE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REFJOURNAL_ID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTRACTDOC_OFRREQREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRACTDOC_OFRREQREASON" ON "CONTRACTDOC" ("OFRREQREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CONTRCARDDOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTRCARDDOC_CUSTOMER" ON "CONTRACTCARDDOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_CMPCONDEALRESP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2DOC_CUSTOMER
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2DOC_CUSTOMER" ON "PLAN2DOC" ("CUSTOMER_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_DISCUSSION
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_DISCUSSION" ON "PLAN3PURCHASEDOC" ("PUBLICDISCUSSCACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_CMPREPDOCUMENT_REPDOCUMEN
--------------------------------------------------------

  CREATE INDEX "J_FK_CMPREPDOCUMENT_REPDOCUMEN" ON "CMPREPDOCUMENT" ("REPDOCUMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_BUDGET
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IFK_PURCHASECARRY_DOC
--------------------------------------------------------

  CREATE INDEX "IFK_PURCHASECARRY_DOC" ON "PURCHASECARRY" ("DOC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOS_PURCHASEFINPR
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOS_PURCHASEFINPR" ON "PLAN2OOSPOSITION" ("PURCHASEFINPROCEDURECACHE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_P3PURCHASEDOC_NECESSITY
--------------------------------------------------------

  CREATE INDEX "J_FK_P3PURCHASEDOC_NECESSITY" ON "PLAN3PURCHASEDOC" ("NECESSITY_ID") 
   ;
--------------------------------------------------------
--  DDL for Index IDX_TERRITORY_PARENT
--------------------------------------------------------

  CREATE INDEX "IDX_TERRITORY_PARENT" ON "TERRITORY" ("PARENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_ORGADDKPP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_RECOILLINES_GRANTINVEST
--------------------------------------------------------

  CREATE INDEX "J_FK_RECOILLINES_GRANTINVEST" ON "RECOILLINES" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_REQUESTDOC_OPERTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_REQUESTDOC_OPERTYPE" ON "REQUESTDOC" ("OPERTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_PLAN2LEDGER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_GOODSPROP_GROUPPROP
--------------------------------------------------------

  CREATE INDEX "J_FK_GOODSPROP_GROUPPROP" ON "GOODSPROP" ("GROUP_ID", "SEQORDER") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_MENU_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PLAN2OOSPOSITION_CHREASON
--------------------------------------------------------

  CREATE INDEX "J_FK_PLAN2OOSPOSITION_CHREASON" ON "PLAN2OOSPOSITION" ("CHANGEREASON_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MENU
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FCTGOODSPROP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGGOODSGROUP
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_FACTDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_REPFIELD
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_TENDERCRITERION
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_GRANTINVESTMENT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_DATASOURCE_NAME
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index IDX_KLADR_CODE5
--------------------------------------------------------

  CREATE INDEX "IDX_KLADR_CODE5" ON "KLADR" ("CODE5") 
   ;
--------------------------------------------------------
--  DDL for Index UQ_NOTIFYMSGDOC
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_GOODSBRANCH
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_PURCHASECARRY_GRANTINVEST
--------------------------------------------------------

  CREATE INDEX "J_FK_PURCHASECARRY_GRANTINVEST" ON "PURCHASECARRY" ("GRANTINVESTMENT_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_MSGLINKTYPE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_INVBUDGETLINE_FINSRC
--------------------------------------------------------

  CREATE INDEX "J_FK_INVBUDGETLINE_FINSRC" ON "INVBUDGETLINE" ("FINSRC_ID") 
   ;
--------------------------------------------------------
--  DDL for Index J_FK_ORDERDOC_CONTYPE
--------------------------------------------------------

  CREATE INDEX "J_FK_ORDERDOC_CONTYPE" ON "ORDERDOC" ("CONTYPE_ID") 
   ;
--------------------------------------------------------
--  DDL for Index PK_OFRLOT
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_BUDGCODE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index UQ_OIDREF_OID
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_SYSUSER
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_PLNBUDGETLINE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index PK_ORGLICENCE
--------------------------------------------------------

  
--------------------------------------------------------
--  DDL for Index J_FK_CONTEMPDOC_BUDGET
--------------------------------------------------------

  CREATE INDEX "J_FK_CONTEMPDOC_BUDGET" ON "CONTRACTTEMPLATEDOC" ("BUDGET_ID") 
   ;
--------------------------------------------------------
--  DDL for Function CURRENT_TRANSACTION_ID
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "CURRENT_TRANSACTION_ID"
RETURNS VARCHAR(250) as
begin
  return dbms_transaction.local_transaction_id(TRUE);
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GETBASEGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GETBASEGROUP" ( IDIN   numeric(18, 4),
    PURCHASEMODE  numeric(18, 4))
  RETURNS  numeric(18, 4) AS
  DECLARE p numeric(18, 4);
  DECLARE q numeric(18, 4);
BEGIN 
  p = :idin;
  while ((not :p is null)) DO
  BEGIN
    select count(*)
    from goodsgrouppurchasemode gpm where (gpm.purchasemode_id = :purchasemode) and (gpm.goodsgroup_id = :p) and (gpm.goodsgroup_id <> :idin)
    into :q;
    if (:q > 0) then
      return (:p);
    select parent_id
    from goodsgroup where goodsgroup.id=:p
    into :p;
  END
  return (null);
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GETDOCIDFORATTACHID
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GETDOCIDFORATTACHID" (DocAttachId NUMERIC(18, 4)) RETURNS NUMERIC(18, 4) AS
  
  DECLARE DocId NUMERIC(18,0);
BEGIN
  IN AUTONOMOUS TRANSACTION DO BEGIN
select da.Document_id
  from DocAttachEx da where da.Id = :DocAttachId
  into :DocId;
  COMMIT;
  return DocId;
	END
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GETFIRSTGROUPBYCRIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GETFIRSTGROUPBYCRIT" (
 grpcode  VARCHAR(250)
)
RETURNS varchar(250) AS
DECLARE ret varchar(500);
begin
 select gg.caption
 from goodsgroup gg  where gg.code like :grpcode||'%' and ROWNUM=1
 into :ret;
 return ret;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GET_ORDERID_OF_CONTRACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GET_ORDERID_OF_CONTRACT" (
  id  numeric(18, 4))
RETURNS  numeric(18, 4) AS
  DECLARE docid numeric(18, 4);
  DECLARE parent_id1 numeric(18, 4);
  DECLARE documentclass_id numeric(18, 4);
begin
  parent_id1 = :id;
  documentclass_id = -1;
  while (((not :documentclass_id in (4,5,28,30,25)) and not :parent_id1 is null)) DO
  BEGIN
  begin
    select d.id, d.documentclass_id, d.parent_id
    from document d 
    where d.id = :parent_id1
    into :docid, :documentclass_id, :parent_id1;    
  exception
    when no_data_found then
      return parent_id1;
  end
  END
  if (:parent_id1 is null and not :documentclass_id in (4,5,28,30,25)) then
    docid = null;
  return docid;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GET_ORGPARENT_WITH_ROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GET_ORGPARENT_WITH_ROLE" (
  child_org_id  numeric(18, 4), org_role_id  numeric(18, 4), parent_first  numeric(18, 4))
  RETURNS numeric(18, 4)
AS
  DECLARE org_id numeric(18, 4);
  DECLARE parent_org_id numeric(18, 4);
  DECLARE role_id numeric(18, 4);
  DECLARE cur_org_id numeric(18, 4);
  DECLARE child_role_id numeric(18, 4);
begin
  org_id = null;
  cur_org_id = :child_org_id;
  if ((:parent_first = 1)) then
    select o.parent_id, r.orgrole_id
    from org o
      left join orgroles r on (o.id = r.org_id and r.orgrole_id = :org_role_id)
      where o.id = :cur_org_id
    into :cur_org_id, :child_role_id;
  while (((not :cur_org_id is null) and (:org_id is null))) DO
  BEGIN
    select o.parent_id, r.orgrole_id
    from org o
      left join orgroles r on (o.id = r.org_id and r.orgrole_id = :org_role_id)
      where o.id = :cur_org_id
    into :parent_org_id, :role_id;
    if ((not :role_id is null)) then
      org_id = :cur_org_id;
    if ((:parent_org_id = :cur_org_id)) then
      cur_org_id = null;
    else
      cur_org_id = :parent_org_id;
  END
  if (((:parent_first = 1) and (:org_id is null) and (not :child_role_id is null))) then
    org_id = :child_org_id;
  return org_id;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GET_PARENT_BY_DISPSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GET_PARENT_BY_DISPSTATUS" (
  current_doc_id  numeric(18, 4), dispstatus_id  numeric(18, 4))
RETURNS  numeric(18, 4) AS
  DECLARE docid numeric(18, 4);
  DECLARE current_class_id numeric(18, 4);
  DECLARE class_id numeric(18, 4);
  DECLARE parent_doc_id numeric(18, 4);
  DECLARE next_docid numeric(18, 4);
  DECLARE next_dispstatus_id numeric(18, 4);
begin
  select documentclass_id, documentclass_id, parent_id
  from document
    where id = :current_doc_id
  into :current_class_id, :class_id, :parent_doc_id;
  while ((:class_id = :current_class_id and not :parent_doc_id is null and (:next_dispstatus_id is null or :next_dispstatus_id <> :dispstatus_id))) DO
  BEGIN
  begin
    select id, documentclass_id, parent_id, :dispstatus_id
    from document
     where id = :parent_doc_id
    into :next_docid, :class_id, :parent_doc_id, :next_dispstatus_id;
  exception
    when no_data_found then
      return null;
  end
  END
  if (:next_dispstatus_id = :dispstatus_id) then
    docid = :next_docid;
  return docid;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GET_PARENT_NO_CLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GET_PARENT_NO_CLASS" (
  current_doc_id  numeric(18, 4))
RETURNS  numeric(18, 4) AS
  DECLARE docid numeric(18, 4);
  DECLARE current_class_id numeric(18, 4);
  DECLARE class_id numeric(18, 4);
  DECLARE parent_doc_id numeric(18, 4);
begin
  select documentclass_id, documentclass_id, parent_id
  from document
    where id = :current_doc_id
  into :current_class_id, :class_id, :parent_doc_id;
  while ((:class_id = :current_class_id and not :parent_doc_id is null)) DO
  BEGIN
  begin
    select id, documentclass_id, parent_id
    from document
     where id = :parent_doc_id
    into :docid, :class_id, :parent_doc_id;
  exception
    when no_data_found then
      return null;
  end
  END
  if (:class_id = :current_class_id) then
    docid = null;
  return docid;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function GET_TOP_PARENT_BY_CLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "GET_TOP_PARENT_BY_CLASS" (
  current_doc_id  numeric(18, 4))
RETURNS  numeric(18, 4) AS
  DECLARE docid numeric(18, 4);
  DECLARE current_class_id numeric(18, 4);
  DECLARE class_id numeric(18, 4);
  DECLARE parent_doc_id numeric(18, 4);
  DECLARE next_docid numeric(18, 4);
begin
  select documentclass_id, documentclass_id, parent_id
  from document
    where id = :current_doc_id
  into :current_class_id, :class_id, :parent_doc_id;
  while ((:class_id = :current_class_id and not :parent_doc_id is null)) DO
  BEGIN
  begin
    docid = :next_docid;
    select id, documentclass_id, parent_id
    from document
     where id = :parent_doc_id
    into :next_docid, :class_id, :parent_doc_id;
  exception
    when no_data_found then
      return null;
  end
  END
  if (:class_id = :current_class_id) then
    docid = :next_docid;
  return docid;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Function LEFT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER FUNCTION "LEFT" (p_Str varchar(250), p_Size integer) RETURNS VARCHAR(250) AS
begin
  return SUBSTRING (:p_Str FROM  1 FOR  :p_Size);
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure CREATE_FK_INDEXES
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "CREATE_FK_INDEXES" 
AS
begin
  for cur in (
    Select t.table_name, t.constraint_name, t.colum 
    From (Select table_name, constraint_name,
            cname1 || nvl2(cname2,','||cname2, null) ||
            nvl2(cname3,','||cname3,null) || nvl2(cname4,','||cname4,null) ||
            nvl2(cname5,','||cname5,null) || nvl2(cname6,','||cname6,null) ||
            nvl2(cname7,','||cname7,null) || nvl2(cname8,','||cname8,null) colum
          From (Select b.table_name, b.constraint_name,
                  max(decode(position, 1, column_name, null)) cname1,
                  max(decode(position, 2, column_name, null)) cname2,
                  max(decode(position, 3, column_name, null)) cname3,
                  max(decode(position, 4, column_name, null)) cname4,
                  max(decode(position, 5, column_name, null)) cname5,
                  max(decode(position, 6, column_name, null)) cname6,
                  max(decode(position, 7, column_name, null)) cname7,
                  max(decode(position, 8, column_name, null)) cname8,
                  count(*) col_cnt
               From (Select SUBSTRING(table_name FROM 1 FOR 30) table_name,
                        SUBSTRING(constraint_name FROM 1 FOR 30) constraint_name,
                        SUBSTRING(column_name FROM 1 FOR 30) column_name, position
                     From user_cons_columns ) a,
                 user_constraints b
               Where a.constraint_name = b.constraint_name and b.constraint_type = 'R'  
               Group by b.table_name, b.constraint_name) cons
          Where col_cnt > All
           (Select count(*)
            From user_ind_columns i
            Where i.table_name = cons.table_name
              and i.column_name in (cname1, cname2, cname3, cname4,
                                    cname5, cname6, cname7, cname8)
              and i.column_position <= cons.col_cnt
            Group by i.index_name) 
            Order by table_name, constraint_name, colum) t )
  DO
  BEGIN
    execute STATEMENT ('create index j_' || SUBSTRING(cur.constraint_name FROM 1 FOR 28) || ' on ' || cur.table_name || ' (' || cur.colum || ')');
  END
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure GOODSGROUP_TREE_FILL
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "GOODSGROUP_TREE_FILL" AS
begin
  delete from GoodsGroup_Tree
  where Group_Id in
    ( select Group_Id
      from (
        select Group_Id, Tree
        from GoodsGroup_Tree
        minus
        select Id as Group_Id, Sys_Connect_By_Path(Code,'/') || '/' as Tree
        from GoodsGroup
        start with Parent_Id is null
        connect by Parent_Id = prior Id
      )
    );
  insert into GoodsGroup_Tree (Group_Id, Tree)
  select Id as Group_Id, Sys_Connect_By_Path(Code,'/') || '/' as Tree
  from GoodsGroup
  start with Parent_Id is null
  connect by Parent_Id = prior Id
  minus
  select Group_Id, Tree
  from GoodsGroup_Tree;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure ORGCHILD_FILL
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "ORGCHILD_FILL" 
AS
BEGIN
  DELETE FROM orgchild;
  FOR cur IN
    (SELECT id FROM org
      START WITH parent_id = id
      CONNECT BY parent_id = prior id AND parent_id <> id)
  DO
  BEGIN
    INSERT INTO orgchild(org_id, child_id)
      SELECT parent_id, id FROM org WHERE parent_id = cur.id AND parent_id <> id;
    INSERT INTO orgchild(org_id, child_id)
      SELECT org_id, id FROM orgchild, org
        WHERE child_id = parent_id AND child_id = cur.id;
  END
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$ACTIVATE_RPL
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$ACTIVATE_RPL" 
AS
  DECLARE stmt varchar(2000);
  DECLARE s CURSOR FOR (SELECT TRIGGER_NAME from USER_TRIGGERS where (TRIGGER_NAME like 'RPL$%'));
  DECLARE r CURSOR FOR (SELECT id, name FROM rpltable) ;
  DECLARE VARIABLE R_R_REC TYPE OF TABLE R;
  DECLARE VARIABLE S_S_REC TYPE OF TABLE S;
BEGIN
  OPEN S;
  FETCH S INTO S_S_REC;
  WHILE ( ROW_COUNT != 0 ) DO
  BEGIN
    stmt = 'DROP TRIGGER ' || S_S_REC.trigger_name;
    execute STATEMENT (:stmt);
  	FETCH S INTO S_S_REC;
  END
  CLOSE S;

  OPEN R;
  FETCH R INTO R_R_REC;
  WHILE ( ROW_COUNT != 0 ) DO
  BEGIN
    EXECUTE PROCEDURE RPL$REENABLE_RPL_TABLE(R_R_REC.name);
  	FETCH R INTO R_R_REC;
  END
  CLOSE R;

END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$ASSIGN_GENERATION
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$ASSIGN_GENERATION" 
    AS
    DECLARE GNRTN NUMERIC(15,0);
    DECLARE OLD_GEN NUMERIC(15,0);
    DECLARE OLD_GEN1 NUMERIC(15,0);
    DECLARE OLD_GEN2 NUMERIC(15,0);
    DECLARE ldaydate date;
begin
  -- THIS PROCEDURE MUST BE EXECUTED AT SNAPSHOT ISOLATION LEVEL
  -- lock some table for a singleton execution of this procedure
  lock table rpltable in exclusive mode;
  select generation_seq.nextval
  from dual
  into :gnrtn;
  select max(day_date)
  from dayversion
  into :ldaydate;
  update rpllog set generation = :GNRTN, transaction_id = current_transaction_id where
    generation=999999999999999;
  old_gen = null;
  if (((CURRENT_TIMESTAMP - :ldaydate) * 24 > 1)) then
  BEGIN
    insert into dayversion(day_date, day_version) values (CURRENT_TIMESTAMP, :GNRTN);
    select min(sent_version)
    from rpl where master_id = (select site_id from systemsite) and sent_version > 0
    into :old_gen;
    if ((:old_gen is null)) then
      old_gen = 999999999999999;
  -- We have three differen ranges of 'living time' for records in log, depending on rpltable generation_group
  -- 10 days
    select max(day_version)
    from dayversion where day_date < cast(CURRENT_TIMESTAMP as date) - 10
    into :old_gen1;
    if ((:old_gen1 is null)) then
      old_gen1 = 0;
    if ((:old_gen1 < :old_gen)) then
      old_gen2 = :old_gen1;
    else
      old_gen2 = :old_gen;
    if ((:old_gen2 > 0)) then
      begin
        update systemsite set clean_generation_1 = :old_gen2 ;
      end
  -- 1 day
    select max(day_version)
    from dayversion where day_date < cast(CURRENT_TIMESTAMP as date) - 1
    into :old_gen1;
    if ((:old_gen1 is null)) then
      old_gen1 = 0;
    if ((:old_gen1 < :old_gen)) then
      old_gen2 = :old_gen1;
    else
      old_gen2 = :old_gen;
    if ((:old_gen2 > 0)) then
      begin
        update systemsite set clean_generation_2 = :old_gen2 ;
      end
  -- 1 hour
    select max(day_version)
    from dayversion where day_date < cast(CURRENT_TIMESTAMP as date) - 1/24
    into :old_gen1;
    if ((:old_gen1 is null)) then
      old_gen1 = 0;
    if ((:old_gen1 < :old_gen)) then
      old_gen2 = :old_gen1;
    else
      old_gen2 = :old_gen;
    if ((:old_gen2 > 0)) then
      begin
        update systemsite set clean_generation_3 = :old_gen2 ;
      end
  END
  update systemsite set last_generation = :gnrtn;
  commit;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$CREATE_TRIGGER
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$CREATE_TRIGGER" (constr_name varchar(250))
AS
  DECLARE CHILD_WHERE VARCHAR(250);
  DECLARE CHILD_CONDITION VARCHAR(250);
  DECLARE CHILD_IF VARCHAR(250);
  DECLARE CHILD_STATEMENT VARCHAR(2000);
  DECLARE PARENT_CONDITION VARCHAR(250);
  DECLARE PARENT_WHERE VARCHAR(250);
  DECLARE PARENT_SET VARCHAR(250);
  DECLARE FCOUNT INTEGER;
  DECLARE BODY VARCHAR(4000);
  DECLARE VARIABLE rc TYPE OF TABLE rpl$constraints;
  DECLARE getFields(constr_id TYPE OF COLUMN rpl$constraintfields.rpl$constraints_id) CURSOR FOR
    (select fieldname, target_fieldname from rpl$constraintfields where rpl$constraints_id = constr_id);
BEGIN
  select *
  from rpl$constraints where name = :constr_name
  into :rc;
  child_where = ''; child_condition = ''; child_if = 'numrows = 0 and ';
  parent_where = ''; parent_condition = ''; parent_set = '';
  select count(*)
  from rpl$constraintfields where rpl$constraints_id = rc.id
  into :fcount;
  for getFields_Rec in getFields(rc.id)
  DO
  BEGIN
    child_where = :child_where || ':NEW.'||getFields_Rec.fieldname||' = '||rc.target_tablename||'.'||getFields_Rec.target_fieldname;
    child_if = :child_if || ':NEW.'||getFields_Rec.fieldname||' is not null';
    child_condition = :child_condition || ':OLD.'||getFields_Rec.fieldname||' <> :NEW.'||getFields_Rec.fieldname;
    parent_where = :parent_where || rc.tablename||'.'||getFields_Rec.fieldname||' = :OLD.'||getFields_Rec.target_fieldname;
    parent_condition = :parent_condition || ':OLD.'||getFields_Rec.target_fieldname||' <> :NEW.'||getFields_Rec.target_fieldname;
    parent_set = :parent_set || rc.tablename||'.'||getFields_Rec.fieldname||' = NULL';
    fcount = :fcount - 1;
    if ((:fcount <> 0)) then
    BEGIN
      child_condition = :child_condition || ' or ';
      child_where = :child_where || ' and ';
      child_if = :child_if || ' and ';
      parent_where = :parent_where || ' and ';
      parent_condition = :parent_condition || ' or ';
      parent_set = :parent_set || ', ';
    END
  END
  body =
    'CREATE or REPLACE TRIGGER RPL$TRIG_' || rc.triggername ||
    ' BEFORE INSERT OR UPDATE ON ' || rc.tablename || ' FOR EACH ROW' ||
    ' DECLARE numrows INTEGER; RplMode NUMBER; ' ||
    'BEGIN ' ||
    ' RplMode := 0; ' ||
    ' select rpl_mode into RplMode from RplTransactMode where num_transaction = current_transaction_id; ' ||
    ' if RplMode <> 1 then ';
  child_statement = 'select count(*) into numrows from ' || rc.target_tablename || ' where ' || :child_where || '; '
      || ' if(' || :child_if || ') then '
      ||'raise_application_error(-20001, ''violation of FOREIGN KEY constraint "'||rc.name
      ||'" on table "'||rc.tablename||'". Foreign key reference target does not exist.''); end if;';
  body = :body || 'if (inserting) then ' || :child_statement || ' ';
  body = :body || 'elsif (' || :child_condition || ') then ' || :child_statement || ' end if;';
  body = :body || ' end if; END;';
  execute STATEMENT (:body);
  body =
    'CREATE or REPLACE TRIGGER RPL$TRIGT_' || rc.triggername ||
    ' BEFORE UPDATE OR DELETE ON ' || rc.target_tablename || ' FOR EACH ROW' ||
    ' DECLARE numrows INTEGER; RplMode NUMBER; ' ||
    'BEGIN ' ||
    ' RplMode := 0; ' ||
    ' select rpl_mode into RplMode from RplTransactMode where num_transaction = current_transaction_id; ' ||
    ' if RplMode <> 1 then ';
  body = :body || 'if (deleting) then '; /* delete_rule ��������� ��������: RESTRICT, CASCADE, SET NULL */
  if ((rc.delete_rule = 'CASCADE')) then /* DELETE CASCADE */
    body = :body ||' delete from '||rc.tablename||' where '||:parent_where||';';
  ELSE IF ((rc.delete_rule = 'SET NULL')) then /* DELETE SET NULL */
    body = :body ||' update '||rc.tablename||' set '||:parent_set||' where '||:parent_where||';';
  else /* DELETE RESTRICT */
    body = :body ||' select count(*) into numrows from '||rc.tablename||' where '||:parent_where||'; '
        ||'if(numrows > 0) then '
        ||'raise_application_error(-20001, ''violation of FOREIGN KEY constraint "'||rc.name
        ||'" on table "'||rc.target_tablename||'". Foreign key references are present for the record.''); end if;';
  body = :body || ' elsif(' || :parent_condition || ') then '; /* update_rule ��������� ��������: RESTRICT, SET NULL */
  if ((rc.update_rule = 'SET NULL')) then /* UPDATE SET NULL */
    body = :body ||' update '||rc.tablename||' set '||:parent_set||' where '||:parent_where||';';
  else /* UPDATE RESTRICT */
    body = :body ||' select count(*) into numrows from '||rc.tablename||' where '||:parent_where||'; '
        ||'if(numrows > 0) then '
        ||'raise_application_error(-20001, ''violation of FOREIGN KEY constraint "'||rc.name
        ||'" on table "'||rc.target_tablename||'". Foreign key references are present for the record.''); end if;';
  body = :body || ' end if;';
  body = :body || '  end if; END;';
  execute STATEMENT (:body);
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$CREATE_TRIGGERS
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$CREATE_TRIGGERS" 
AS
  DECLARE getConstraints CURSOR FOR
    (select name from rpl$constraints);
  DECLARE VARIABLE GETCONSTRAINTS_GETCONSTRAINTS_REC TYPE OF TABLE GETCONSTRAINTS;
BEGIN
  OPEN GETCONSTRAINTS;
  FETCH GETCONSTRAINTS INTO GETCONSTRAINTS_GETCONSTRAINTS_REC;
  WHILE ( ROW_COUNT != 0 ) DO
  BEGIN
    EXECUTE PROCEDURE RPL$CREATE_TRIGGER(GETCONSTRAINTS_GETCONSTRAINTS_REC.name);
  	FETCH GETCONSTRAINTS INTO GETCONSTRAINTS_GETCONSTRAINTS_REC;
  END
  CLOSE GETCONSTRAINTS;

END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$DEACTIVATE_RPL
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$DEACTIVATE_RPL" 
AS
  DECLARE stmt varchar(2000);
  DECLARE s CURSOR FOR (SELECT TRIGGER_NAME from USER_TRIGGERS where (TRIGGER_NAME like 'RPL$%'));
  DECLARE VARIABLE S_S_REC TYPE OF TABLE S;
BEGIN
  OPEN S;
  FETCH S INTO S_S_REC;
  WHILE ( ROW_COUNT != 0 ) DO
  BEGIN
    stmt = 'DROP TRIGGER ' || S_S_REC.trigger_name;
    execute STATEMENT (:stmt);
  	FETCH S INTO S_S_REC;
  END
  CLOSE S;

END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$DISABLE_RPL_TABLE
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$DISABLE_RPL_TABLE" (tablename varchar(250))
AS
   DECLARE s CURSOR FOR (select trigger_name name from user_triggers where (trigger_name like 'RPL$'||:tablename)) ;
   DECLARE stmt VARCHAR(2000);
  DECLARE VARIABLE S_S_REC TYPE OF TABLE S;
BEGIN
  OPEN S;
  FETCH S INTO S_S_REC;
  WHILE ( ROW_COUNT != 0 ) DO
  BEGIN
    stmt =
      'drop trigger '||S_S_REC.NAME;
    EXECUTE STATEMENT (:stmt);
  	FETCH S INTO S_S_REC;
  END
  CLOSE S;

END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$ENABLE_RPL_TABLE
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$ENABLE_RPL_TABLE" (tablename varchar(250))
AS
   DECLARE stmt            VARCHAR (20000);
   DECLARE fieldlist       VARCHAR (500);
   DECLARE fieldvalue      VARCHAR (500);
   DECLARE oldfieldvalue   VARCHAR (500);
   DECLARE condition       VARCHAR (500);
   DECLARE mut_fieldvalue      VARCHAR (500);
   DECLARE mut_oldfieldvalue   VARCHAR (500);
   DECLARE mut_condition       VARCHAR (500);
   DECLARE table_id        NUMERIC (15);
   DECLARE plugin_count    NUMERIC (15);
   DECLARE s
   CURSOR FOR
      (SELECT ID, rplfield1, rplfield2, rplfield3, rplfield4, rplfield5
        FROM rpltable
       WHERE UPPER (NAME) = UPPER (:tablename) AND isplugin = 0);
   DECLARE c_plugin
   CURSOR FOR
      (SELECT plugin_rpltable_id, join_fragment
        FROM rpltableplugin rtp JOIN rpltable rt
             ON rt.ID = rtp.rpltable_id
           AND UPPER (rt.NAME) = UPPER (:tablename)
           AND rt.isplugin = 0)
             ;
  DECLARE VARIABLE C_PLUGIN_PLUGIN_REC TYPE OF TABLE C_PLUGIN;
  DECLARE VARIABLE S_S_REC TYPE OF TABLE S;
BEGIN
   select count(rtp.ID)
   from rpltableplugin rtp 
            JOIN rpltable rt ON rt.ID = rtp.rpltable_id
                             AND UPPER (rt.NAME) = UPPER (:tablename)
                             AND rt.isplugin = 0
   into :plugin_count;
   OPEN S;
   FETCH S INTO S_S_REC;
   WHILE ( ROW_COUNT != 0 ) DO
   BEGIN
      fieldlist = 'generation';
      fieldvalue = '999999999999999';
      oldfieldvalue = :fieldvalue;
      mut_fieldvalue = :fieldvalue;
      mut_oldfieldvalue = :fieldvalue;
      condition = '(updating and not(1=1 ';
      mut_condition = '1=1 ';      
      fieldlist = :fieldlist || ', FIELD1_VALUE';
      table_id = S_S_REC.ID;
      IF ((S_S_REC.rplfield1 IS NOT NULL))
      THEN
         BEGIN
           fieldvalue = :fieldvalue || ', :new.' || S_S_REC.rplfield1;
           oldfieldvalue = :oldfieldvalue || ', :old.' || S_S_REC.rplfield1;
           condition = :condition
            || 'and (:new.'
            || S_S_REC.rplfield1
            || '='
            || ':old.'
            || S_S_REC.rplfield1
            || ')';
           if ((:plugin_count > 0)) then
           BEGIN   
                mut_fieldvalue = :mut_fieldvalue || ', mutating.new_slave_rpls(i).field_value1';
                mut_oldfieldvalue = :mut_oldfieldvalue || ', mutating.old_slave_rpls(i).field_value1';
                mut_condition = :mut_condition || 'and (mutating.new_slave_rpls(i).field_value1 = mutating.old_slave_rpls(i).field_value1';
           END
         END
      ELSE
         BEGIN
            fieldvalue = :fieldvalue || ', 0';
            oldfieldvalue = :oldfieldvalue || ', 0';
            mut_fieldvalue = :mut_fieldvalue || ', 0';
            mut_oldfieldvalue = :mut_oldfieldvalue || ', 0';
         END
      fieldlist = :fieldlist || ', FIELD2_VALUE';
      IF ((S_S_REC.rplfield2 IS NOT NULL))
      THEN
         BEGIN
            fieldvalue = :fieldvalue || ', :new.' || S_S_REC.rplfield2;
            oldfieldvalue = :oldfieldvalue || ', :old.' || S_S_REC.rplfield2;
            condition =
                  :condition
               || 'and (:new.'
               || S_S_REC.rplfield2
               || '='
               || ':old.'
               || S_S_REC.rplfield2
               || ')';
           if ((:plugin_count > 0)) then
           BEGIN   
                mut_fieldvalue = :mut_fieldvalue || ', mutating.new_slave_rpls(i).field_value2';
                mut_oldfieldvalue = :mut_oldfieldvalue || ', mutating.old_slave_rpls(i).field_value2';
                mut_condition = :mut_condition || 'and (mutating.new_slave_rpls(i).field_value2 = mutating.old_slave_rpls(i).field_value2';
           END
         END
      ELSE
         BEGIN
            fieldvalue = :fieldvalue || ', 0';
            oldfieldvalue = :oldfieldvalue || ', 0';
            mut_fieldvalue = :mut_fieldvalue || ', 0';
            mut_oldfieldvalue = :mut_oldfieldvalue || ', 0';
         END
      fieldlist = :fieldlist || ', FIELD3_VALUE';
      IF ((S_S_REC.rplfield3 IS NOT NULL))
      THEN
         BEGIN
            fieldvalue = :fieldvalue || ', :new.' || S_S_REC.rplfield3;
            oldfieldvalue = :oldfieldvalue || ', :old.' || S_S_REC.rplfield3;
            condition =
                  :condition
               || 'and (:new.'
               || S_S_REC.rplfield3
               || '='
               || ':old.'
               || S_S_REC.rplfield3
               || ')';
           if ((:plugin_count > 0)) then
           BEGIN   
                mut_fieldvalue = :mut_fieldvalue || ', mutating.new_slave_rpls(i).field_value3';
                mut_oldfieldvalue = :mut_oldfieldvalue || ', mutating.old_slave_rpls(i).field_value3';
                mut_condition = :mut_condition || 'and (mutating.new_slave_rpls(i).field_value3 = mutating.old_slave_rpls(i).field_value3';
           END
         END
      ELSE
         BEGIN
            fieldvalue = :fieldvalue || ', 0';
            oldfieldvalue = :oldfieldvalue || ', 0';
            mut_fieldvalue = :mut_fieldvalue || ', 0';
            mut_oldfieldvalue = :mut_oldfieldvalue || ', 0';
         END
      fieldlist = :fieldlist || ', FIELD4_VALUE';
      IF ((S_S_REC.rplfield4 IS NOT NULL))
      THEN
         BEGIN
            fieldvalue = :fieldvalue || ', :new.' || S_S_REC.rplfield4;
            oldfieldvalue = :oldfieldvalue || ', :old.' || S_S_REC.rplfield4;
            condition =
                  :condition
               || 'and (:new.'
               || S_S_REC.rplfield4
               || '='
               || ':old.'
               || S_S_REC.rplfield4
               || ')';
           if ((:plugin_count > 0)) then
           BEGIN   
                mut_fieldvalue = :mut_fieldvalue || ', mutating.new_slave_rpls(i).field_value4';
                mut_oldfieldvalue = :mut_oldfieldvalue || ', mutating.old_slave_rpls(i).field_value4';
                mut_condition = :mut_condition || 'and (mutating.new_slave_rpls(i).field_value4 = mutating.old_slave_rpls(i).field_value4';
           END
         END
      ELSE
         BEGIN
            fieldvalue = :fieldvalue || ', 0';
            oldfieldvalue = :oldfieldvalue || ', 0';
            mut_fieldvalue = :mut_fieldvalue || ', 0';
            mut_oldfieldvalue = :mut_oldfieldvalue || ', 0';
         END
      fieldlist = :fieldlist || ', FIELD5_VALUE';
      IF ((S_S_REC.rplfield5 IS NOT NULL))
      THEN
         BEGIN
            fieldvalue = :fieldvalue || ', :new.' || S_S_REC.rplfield5;
            oldfieldvalue = :oldfieldvalue || ', :old.' || S_S_REC.rplfield5;
            condition =
                  :condition
               || 'and (:new.'
               || S_S_REC.rplfield5
               || '='
               || ':old.'
               || S_S_REC.rplfield5
               || ')';
           if ((:plugin_count > 0)) then
           BEGIN   
                mut_fieldvalue = :mut_fieldvalue || ', mutating.new_slave_rpls(i).field_value5';
                mut_oldfieldvalue = :mut_oldfieldvalue || ', mutating.old_slave_rpls(i).field_value5';
                mut_condition = :mut_condition || 'and (mutating.new_slave_rpls(i).field_value5 = mutating.old_slave_rpls(i).field_value5';
           END
         END
      ELSE
         BEGIN
            fieldvalue = :fieldvalue || ', 0';
            oldfieldvalue = :oldfieldvalue || ', 0';
            mut_fieldvalue = :mut_fieldvalue || ', 0';
            mut_oldfieldvalue = :mut_oldfieldvalue || ', 0';
         END
      -- create trigger for each row
      stmt =
             'CREATE or REPLACE TRIGGER RPL$'
          || UPPER (:tablename)
          || ' AFTER INSERT OR UPDATE OR DELETE ON '
          || UPPER (:tablename)
          || ' REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW ' 
          || 'declare ' --|| utl_tcp.CRLF
          || 'ltable_id numeric(15); ' 
          || 'mutation_index numeric; ' 
          || 'begin ' 
          || '  ltable_id := ' || :table_id || ';' 
          ;
     if ((:plugin_count > 0)) then
     BEGIN
       -- use it in statement trigger
       stmt = :stmt 
          || '  mutation_index := mutating.new_slave_rpls.count+1;'
          || '  mutating.new_slave_rpls(mutation_index).id := :new.id;' 
          || '  mutating.old_slave_rpls(mutation_index).id := :old.id;' 
          ;
       if ((S_S_REC.rplfield1 IS NOT NULL)) then
       stmt = :stmt 
          || '  mutating.new_slave_rpls(mutation_index).field_value1 := :new.' || S_S_REC.rplfield1 || ';'
          || '  mutating.old_slave_rpls(mutation_index).field_value1 := :old.' || S_S_REC.rplfield1 || ';'
          ;
       if ((S_S_REC.rplfield2 IS NOT NULL)) then
       stmt = :stmt 
          || '  mutating.new_slave_rpls(mutation_index).field_value2 := :new.' || S_S_REC.rplfield2 || ';'
          || '  mutating.old_slave_rpls(mutation_index).field_value2 := :old.' || S_S_REC.rplfield2 || ';'
          ;
       if ((S_S_REC.rplfield3 IS NOT NULL)) then
       stmt = :stmt 
          || '  mutating.new_slave_rpls(mutation_index).field_value3 := :new.' || S_S_REC.rplfield3 || ';'
          || '  mutating.old_slave_rpls(mutation_index).field_value3 := :old.' || S_S_REC.rplfield3 || ';'
          ;
       if ((S_S_REC.rplfield4 IS NOT NULL)) then
       stmt = :stmt 
          || '  mutating.new_slave_rpls(mutation_index).field_value4 := :new.' || S_S_REC.rplfield4 || ';'
          || '  mutating.old_slave_rpls(mutation_index).field_value4 := :old.' || S_S_REC.rplfield4 || ';'
          ;
       if ((S_S_REC.rplfield5 IS NOT NULL)) then
       stmt = :stmt 
          || '  mutating.new_slave_rpls(mutation_index).field_value5 := :new.' || S_S_REC.rplfield5 || ';'
          || '  mutating.old_slave_rpls(mutation_index).field_value5 := :old.' || S_S_REC.rplfield5 || ';'
          ;
     END
     stmt = :stmt 
          || '  if (deleting) then ' 
          || '    insert into RPLLOG (rpltable_id, record_id, transaction_id,'
          || :fieldlist
          || ' ) ' 
          || '      values (ltable_id, :old.ID, current_transaction_id,'
          || :oldfieldvalue
          || ');' 
          ;
     stmt = :stmt
          || '  else ' 
          || '  begin ' 
          || '    insert into RPLLOG (rpltable_id, record_id, transaction_id,'
          || :fieldlist
          || ' ) ' 
          || '      values (ltable_id, :new.ID, current_transaction_id,'
          || :fieldvalue
          || ');' 
          ;
     stmt = :stmt
          || '    if '
          || :condition
          || ')) then ' 
          || '      insert into RPLLOG (rpltable_id, record_id, transaction_id,'
          || :fieldlist
          || ' ) ' 
          || '        values (ltable_id, :old.ID, current_transaction_id, '
          || :oldfieldvalue
          || ');';
     stmt = :stmt || '    end if; ' 
       || '  end; ' 
       || ' end if;' 
       || 'end;';
     EXECUTE STATEMENT (:stmt);
     if ((:plugin_count > 0)) then
     BEGIN
       -- create statement trigger
       stmt =
             'CREATE or REPLACE TRIGGER VRPL$' || UPPER (:tablename)
          || ' AFTER INSERT OR UPDATE OR DELETE ON ' || UPPER (:tablename)
          || ' declare lplugin_table_id numeric(15);'
          || ' begin '
          || '   if (deleting) then '
          || '     if mutating.old_slave_rpls.FIRST is not null then'
          || '       for i in mutating.old_slave_rpls.FIRST..mutating.old_slave_rpls.LAST'
          || '         loop';
       OPEN C_PLUGIN;
       FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       WHILE ( ROW_COUNT != 0 ) DO
       BEGIN
         stmt = :stmt
          || '           lplugin_table_id := ' || C_PLUGIN_PLUGIN_REC.plugin_rpltable_id || ';'
          || '           insert into RPLLOG (rpltable_id, record_id, transaction_id,' || :fieldlist || ') '
          || '             select lplugin_table_id, master.id, current_transaction_id,' || :mut_oldfieldvalue
          || '               from ' || C_PLUGIN_PLUGIN_REC.join_fragment
          || '               where slave.id=mutating.old_slave_rpls(i).id;';
       	FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       END
       CLOSE C_PLUGIN;

       stmt = :stmt 
          || '         end loop;' 
          || '     end if;';-- end if mutation
       stmt = :stmt 
          || '   else ' 
          || '     begin '
          || '       if mutating.new_slave_rpls.FIRST is not null then'
          || '         for i in mutating.new_slave_rpls.FIRST..mutating.new_slave_rpls.LAST'
          || '           loop';
       OPEN C_PLUGIN;
       FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       WHILE ( ROW_COUNT != 0 ) DO
       BEGIN
         stmt = :stmt
          || '             lplugin_table_id := ' || C_PLUGIN_PLUGIN_REC.plugin_rpltable_id || ';'
          || '             insert into RPLLOG (rpltable_id, record_id, transaction_id,' || :fieldlist || ') '
          || '               select lplugin_table_id, master.id, current_transaction_id,' || :mut_fieldvalue 
          || '                 from ' || C_PLUGIN_PLUGIN_REC.join_fragment
          || '                 where slave.id = mutating.new_slave_rpls(i).id;';
       	FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       END
       CLOSE C_PLUGIN;

       stmt = :stmt 
          || '           end loop;' 
          || '       end if;';-- end if mutation
       stmt = :stmt 
          || '       if (updating) then '
          || '         if mutating.old_slave_rpls.FIRST is not null then'
          || '           for i in mutating.old_slave_rpls.FIRST..mutating.old_slave_rpls.LAST'
          || '             loop';
       OPEN C_PLUGIN;
       FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       WHILE ( ROW_COUNT != 0 ) DO
       BEGIN
           stmt = :stmt
          || '               if (' || :mut_condition ||')) then '
          || '                 lplugin_table_id := ' || C_PLUGIN_PLUGIN_REC.plugin_rpltable_id || ';'
          || '                 insert into RPLLOG (rpltable_id, record_id, transaction_id,' || :fieldlist || ') '
          || '                   select lplugin_table_id, master.id, current_transaction_id,' || :mut_oldfieldvalue 
          || '                     from ' || C_PLUGIN_PLUGIN_REC.join_fragment
          || '                     where slave.id = mutating.old_slave_rpls(i).id;'
          || '               end if;';
       	FETCH C_PLUGIN INTO C_PLUGIN_PLUGIN_REC;
       END
       CLOSE C_PLUGIN;

       stmt = :stmt 
          || '             end loop;' 
          || '         end if;'-- end if mutation
          || '       end if; '--end if updating
          || '     end; '--end of _else begin_
          || '  end if; ' --end of large if
          || '  mutating.new_slave_rpls.delete;' 
          || '  mutating.old_slave_rpls.delete;' 
          || 'end;';--end of trigger
       EXECUTE STATEMENT (:stmt);
     END
   	FETCH S INTO S_S_REC;
   END
   CLOSE S;

END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure RPL$REENABLE_RPL_TABLE
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "RPL$REENABLE_RPL_TABLE" (tablename varchar(250))
AS
BEGIN
  EXECUTE PROCEDURE RPL$DISABLE_RPL_TABLE(:tablename);
  EXECUTE PROCEDURE RPL$ENABLE_RPL_TABLE(:tablename);
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure SEQUENCE_ADJ
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "SEQUENCE_ADJ" (tablename VARCHAR(250))
AS
   DECLARE maxval     NUMERIC (15);
   DECLARE sitemult   NUMERIC (15);
   DECLARE curval     NUMERIC (15);
   DECLARE i          NUMERIC (15);
  DECLARE VARIABLE i INTEGER;
BEGIN
   SELECT MAX (site_id * 1000000000)
   FROM systemsite
   INTO :sitemult;
   EXECUTE STATEMENT    ('select coalesce(max(id),'
                     || :sitemult
                     || '+1)-'
                     || :sitemult
                     || ' from '
                     || :tablename
                     || ' where id-'
                     || :sitemult
                     || '<999999999')
                 INTO :maxval;
   EXECUTE STATEMENT ('select ' || :tablename || '_seq.nextval from dual')
                 INTO :curval;
   -- ������� ������, � �� �������������. ��� ��������
   i = curval;
   WHILE ( i < :maxval - 1) DO
   BEGIN
      EXECUTE STATEMENT ('select ' || :tablename || '_seq.nextval from dual')
                    INTO :sitemult;
   i = i + 1;
   END
END^

SET TERM ; ^


--------------------------------------------------------
--  DDL for Procedure TER_TREE_FILL
--------------------------------------------------------


  SET TERM ^ ;

CREATE OR ALTER PROCEDURE "TER_TREE_FILL" AS
begin
  delete from Ter_Tree
  where Ter_Id in
    ( select Ter_Id
      from (
        select Ter_Id, Tree, Path
        from Ter_Tree
        minus
        select Id as Ter_Id, Sys_Connect_By_Path(Code,'/') || '/' as Tree, SUBSTRING(Sys_Connect_By_Path(Caption,', ') FROM 3) as Path
        from Territory
        start with Parent_Id is null
        connect by Parent_Id = prior Id
      )
    );
  insert into Ter_Tree (Ter_Id, Tree, Path)
  select Id as Ter_Id, Sys_Connect_By_Path(Code,'/') || '/' as Tree, SUBSTRING(Sys_Connect_By_Path(Caption,', ') FROM 3) as Path
  from Territory
  start with Parent_Id is null
  connect by Parent_Id = prior Id
  minus
  select Ter_Id, Tree, Path
  from Ter_Tree;
end^

SET TERM ; ^


--------------------------------------------------------
--  DDL for View ACTUALIZATIONVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "ACTUALIZATIONVIEW" ("ID", "VERSION", "DOCUMENT_ID", "INSTANCE_LINK", "BUDGET_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "OPERTYPE_ID", "DOC_NUMBER", "DOC_DATE", "DESCRIPTION", "REMARK", "AMOUNT", "FOREIGN_KEY", "PAYCONDITIONNAME", "DELIVERYBASISCODE", "ACTUAL_YEAR") AS 
  select dc.id,dc.version,dc.id,tb.id,tb.budget_id,tb.documentclass_id,tb.dispstatus_id,tb.opertype_id,tb.doc_number,tb.doc_date,tb.description,tb.remark,tb.amount,tb.foreign_key,tb.payconditionname,tb.deliverybasiscode,tb.actual_year
   from requestdoc tb
   join document dc on (dc.id = tb.document_id and dc.dispstatus_id <> -1)
   union all
   select dc.id,dc.version,dc.id,tb.id,tb.budget_id,tb.documentclass_id,tb.dispstatus_id,tb.opertype_id,tb.doc_number,tb.doc_date,tb.description,tb.remark,tb.amount,tb.foreign_key,tb.payconditionname,tb.deliverybasiscode,tb.actual_year
   from contractdoc tb
   join document dc on (dc.id = tb.document_id and dc.dispstatus_id <> -1)
   union all
   select dc.id,dc.version,dc.id,tb.id,tb.budget_id,tb.documentclass_id,tb.dispstatus_id,tb.opertype_id,tb.doc_number,tb.doc_date,tb.description,tb.remark,tb.amount,tb.foreign_key,cast(null as varchar(255)) payconditionname,cast(null as varchar(50)) deliverybasiscode,tb.actual_year
   from invoicedoc tb
   join document dc on (dc.id = tb.document_id and dc.dispstatus_id <> -1)
   union all
   select dc.id,dc.version,dc.id,tb.id,tb.budget_id,tb.documentclass_id,tb.dispstatus_id,tb.opertype_id,tb.doc_number,tb.doc_date,tb.description,tb.remark,tb.amount,tb.foreign_key,cast(null as varchar(255)) payconditionname,cast(null as varchar(50)) deliverybasiscode,tb.actual_year
   from factdoc tb
   join document dc on (dc.id = tb.document_id and dc.dispstatus_id <> -1)
   where tb.dispstatus_id not in (16, 32);
--------------------------------------------------------
--  DDL for View AUCTIONLIST_VIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "AUCTIONLIST_VIEW" ("ID", "BUDGET_ID", "DOCUMENT_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "PURCHASEMODE_ID", "CMPDATE", "ACCEPTDATE", "CMPNAME", "CMPORG_ID", "CMPORGNAME", "DOC_NUMBER", "ISACTIVE", "AMOUNT") AS 
  select
  o.ID,
  o.Budget_ID,
  o.Document_ID,
  o.DocumentClass_ID,
  o.DispStatus_ID,
  o.PurchaseMode_ID,
  o.CmpDate,
  o.AcceptDate,
  o.CmpName,
  o.CmpOrg_id,
  o.CmpOrgName,
  o.Doc_Number,
  (select count(*) from AuctionLog al where al.Order_ID=o.ID and o.PurchaseMode_ID<>13) IsActive,
  o.amount
from
  OrderDoc o;
--------------------------------------------------------
--  DDL for View CALENDARPLANVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "CALENDARPLANVIEW" ("BUDGET_ID", "ID", "DOCUMENT_ID", "INVITATIONDATE", "CMPDATE", "DEALDATE", "OPENINGDATE", "SELECTDATE", "FINISHDATE", "AMOUNT", "PURCHASEMODE_ID", "DISPSTATUS_ID", "DOCUMENTCLASS_ID", "ENTERPRISE", "LOTNAME", "LOTPOS", "CMPORG_ID", "PLANPOSITIONNUMBER", "CUSTOMER_ID") AS 
  select
  pd.budget_id,
  pd.id,
  pd.document_id,
  pa.invitationdate,
  pa.cmpdate,
  pa.dealdate,
  cast(null as date),
  cast(null as date),
  cast(null as date),
  sum(pa.amount),
  pa.purchasemode_id,
  pd.dispstatus_id,
  pd.documentclass_id,
  case when pa.purchasemode_id <> 3 then pa.isenterprise else 0 end,
  dc.description,
  cast(null as numeric(18, 4)),
  pa.cmporg_id,
  dic.description,
  pd.customer_id
from Plan2Arrangement pa
join Plan2Goods pg on (pg.id = pa.plan2goods_id)
join Plan2Doc pd on (pd.id = pg.plan2doc_id)
left join DescriptionCache dc on (dc.id = pa.ordernamecache_id)
left join DescriptionCache dic on (dic.id = pa.lotnumbercache_id)
where pd.documentclass_id = 41 and pd.dispstatus_id in (10, 23) and pa.issmall = 0 and pa.lotnumbercache_id is not null
group by
  pd.budget_id,
  pd.id,
  pd.document_id,
  pa.invitationdate,
  pa.cmpdate,
  pa.dealdate,
  pa.purchasemode_id,
  pd.dispstatus_id,
  pd.documentclass_id,
  case when pa.purchasemode_id <> 3 then pa.isenterprise else 0 end,
  dc.description,
  pa.cmporg_id,
  dic.description,
  pd.customer_id;
--------------------------------------------------------
--  DDL for View CALENDARPURCHASEVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "CALENDARPURCHASEVIEW" ("BUDGET_ID", "ID", "DOCUMENT_ID", "INVITATIONDATE", "CMPDATE", "DEALDATE", "OPENINGDATE", "SELECTDATE", "FINISHDATE", "AMOUNT", "PURCHASEMODE_ID", "DISPSTATUS_ID", "DOCUMENTCLASS_ID", "ENTERPRISE", "LOTNAME", "LOTPOS", "CMPORG_ID") AS 
  select
  od.budget_id,
  od.id,
  od.document_id,
  trunc(od.plan_invitationdate),
  trunc(coalesce(cl.cmpdate, od.cmpdate)),
  cast(null as date),
  trunc(case when documentclass_id = 4  then od.openingdate else
        case when documentclass_id = 49 then od.finishdate else od.acceptdate end end),
  trunc(case when documentclass_id in (5, 49) then od.cmpdate else od.selectdate end),
  trunc(od.finishdate),
  coalesce(cl.amount, od.amount),
  od.purchasemode_id,
  od.dispstatus_id,
  od.documentclass_id,
  coalesce(cl.enterprise, od.enterprise),
  coalesce(cl.name, od.cmpname),
  cl.pos,
  od.cmporg_id
from OrderDoc od
left join cmplot cl on (od.id = cl.order_id and cl.islotdeclined = 0 and cl.islotreregistered = 0)
where od.dispstatus_id not in (-1, 0, 5, 17, 21) and od.documentclass_id <> 3;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRYINTERNAL
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRYINTERNAL" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 pc.doc_id,
 pc.groupcode, pc.okdp_code, pc.recipient_id, pc.purchasemode_id, pc.cmporg_id, pc.planyear, doc.budget_id,
 pc.payconditioncache_id,
 pc.goodscode, pc.unitname, pc.code1, pc.code2, pc.code3, pc.code4, pc.code5, pc.code6, pc.code7, pc.code8, pc.code9, pc.code10,
 pc.IndustryCode_Id, pc.GrantInvestment_Id,
 pc.finsrc_id, pc.deliverybasis_id, pc.invitationdate, pc.cmpdate, pc.descriptioncache_id, pc.contractor_id, pc.isenterprise, pc.issmall,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id in (2, 3, 4, 11, 13, 18, 19, 28, 31, 33)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id in (2, 3, 4, 11, 13, 18, 19, 28, 31, 33)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id in (2, 3, 4, 11, 13, 18, 19, 28, 31, 33)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id in (2, 3, 4, 11, 13, 18, 19, 28, 31, 33)) then coalesce(pc.amount4, 0) else 0.00 end,
 case when (doc.documentclass_id = 1 and doc.dispstatus_id in (3, 13, 31)) or (doc.documentclass_id = 2 and doc.dispstatus_id in (19, 31)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id = 1 and doc.dispstatus_id in (3, 13, 31)) or (doc.documentclass_id = 2 and doc.dispstatus_id in (19, 31)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id = 1 and doc.dispstatus_id in (3, 13, 31)) or (doc.documentclass_id = 2 and doc.dispstatus_id in (19, 31)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id = 1 and doc.dispstatus_id in (3, 13, 31)) or (doc.documentclass_id = 2 and doc.dispstatus_id in (19, 31)) then coalesce(pc.amount4, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 17) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 17) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 17) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 17) then coalesce(pc.amount4, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 6) or
           (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (5, 16, 43, 44, 47, 48, 49, 50, 51, 58, 59)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (5)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 6) or
           (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (5, 16, 43, 44, 47, 48, 49, 50, 51, 58, 59)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (5)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 6) or
           (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (5, 16, 43, 44, 47, 48, 49, 50, 51, 58, 59)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (5)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id in (1, 2) and doc.dispstatus_id = 6) or
           (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (5, 16, 43, 44, 47, 48, 49, 50, 51, 58, 59)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (5)) then coalesce(pc.amount4, 0) else 0.00 end,
 case when doc.documentclass_id in (4, 28, 5, 36, 3, 49) and doc.dispstatus_id = 17 then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (4, 28, 5, 36, 3, 49) and doc.dispstatus_id = 17 then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (4, 28, 5, 36, 3, 49) and doc.dispstatus_id = 17 then coalesce(pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id in (4, 28, 5, 36, 3, 49) and doc.dispstatus_id = 17 then coalesce(pc.amount4, 0) else 0.00 end,
 case when (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (10, 12, 13, 20, 31, 30, 35, 45, 46, 52, 62, 63, 64, 65, 67, 68)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (10, 13)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (10, 12, 13, 20, 31, 30, 35, 45, 46, 52, 62, 63, 64, 65, 67, 68)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (10, 13)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (10, 12, 13, 20, 31, 30, 35, 45, 46, 52, 62, 63, 64, 65, 67, 68)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (10, 13)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id in (4, 28, 5, 36, 49) and doc.dispstatus_id in (10, 12, 13, 20, 31, 30, 35, 45, 46, 52, 62, 63, 64, 65, 67, 68)) or
           (doc.documentclass_id = 3 and doc.dispstatus_id in (10, 13)) then coalesce(pc.amount4, 0) else 0.00 end,
 pc.economyamount, pc.economyfinalamount,
 case when (doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (2, 4, 5, 6, 10, 14, 16, 19, 32, 34, 35, 24, 25, 49, 50, 51, 52)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when (doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (2, 4, 5, 6, 10, 14, 16, 19, 32, 34, 35, 24, 25, 49, 50, 51, 52)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when (doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (2, 4, 5, 6, 10, 14, 16, 19, 32, 34, 35, 24, 25, 49, 50, 51, 52)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when (doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (2, 4, 5, 6, 10, 14, 16, 19, 32, 34, 35, 24, 25, 49, 50, 51, 52)) then coalesce(pc.amount4, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (6, 24, 34, 25) then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (6, 24, 34, 25) then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (6, 24, 34, 25) then coalesce(pc.amount3, 0) else 0.00 end, 
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (6, 24, 34, 25) then coalesce(pc.amount4, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (17) then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (17) then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (17) then coalesce(pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (17) then coalesce(pc.amount4, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (10) then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (10) then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (10) then coalesce(pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id in (8, 9, 32) and doc.dispstatus_id in (10) then coalesce(pc.amount4, 0) else 0.00 end,
 coalesce(inv.suppliedamount, con.suppliedamount),
 case when ifl.docflagtype_id is not null then inv.amount else con.payedamount end,
 case when doc.documentclass_id = 48 and doc.dispstatus_id = 10 then coalesce(-pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id = 48 and doc.dispstatus_id = 10 then coalesce(-pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id = 48 and doc.dispstatus_id = 10 then coalesce(-pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id = 48 and doc.dispstatus_id = 10 then coalesce(-pc.amount4, 0) else 0.00 end
from PurchaseCarry pc
left join document doc on (pc.doc_id = doc.id)
left join contractdoc con on (doc.id = con.document_id and doc.documentclass_id in (8, 32))
left join invoicedoc inv on (doc.id = inv.document_id and doc.documentclass_id = 9)
left join docflag ifl on (inv.document_id = ifl.document_id and ifl.docflagtype_id = 34)
where pc.planversion=2;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRY
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRY" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 MAX(document_id),
 groupcode, okdp_code, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 goodscode, unitname, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 IndustryCode_Id, GrantInvestment_Id,
 finsrc_id, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall,
 SUM(useamount1), SUM(useamount2), SUM(useamount3), SUM(useamount4),
 SUM(useconfirmamount1), SUM(useconfirmamount2), SUM(useconfirmamount3), SUM(useconfirmamount4),
 SUM(usequalifyamount1), SUM(usequalifyamount2), SUM(usequalifyamount3), SUM(usequalifyamount4),
 SUM(controlamount1), SUM(controlamount2), SUM(controlamount3), SUM(controlamount4),
 SUM(controlqualifyamount1), SUM(controlqualifyamount2), SUM(controlqualifyamount3), SUM(controlqualifyamount4),
 SUM(declaredamount1), SUM(declaredamount2), SUM(declaredamount3), SUM(declaredamount4),
 SUM(economyamount), SUM(economyfinalamount),
 SUM(distributeamount1), SUM(distributeamount2), SUM(distributeamount3), SUM(distributeamount4),
 SUM(distributeconfirmamount1), SUM(distributeconfirmamount2), SUM(distributeconfirmamount3), SUM(distributeconfirmamount4),
 SUM(distributequalifyamount1), SUM(distributequalifyamount2), SUM(distributequalifyamount3), SUM(distributequalifyamount4),
 SUM(executeamount1), SUM(executeamount2), SUM(executeamount3), SUM(executeamount4),
 SUM(suppliedamount),
 SUM(payedamount),
 SUM(recoilamount1), SUM(recoilamount2), SUM(recoilamount3), SUM(recoilamount4)
from Plan2PurchaseCarryInternal pc
group by
 groupcode, okdp_code, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 goodscode, unitname, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 IndustryCode_Id, GrantInvestment_Id,
 finsrc_id, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRYBYKBK
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRYBYKBK" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 MAX(document_id),
 null, null, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 null, null, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 IndustryCode_Id, GrantInvestment_Id,
 finsrc_id, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall,
 SUM(useamount1), SUM(useamount2), SUM(useamount3), SUM(useamount4),
 SUM(useconfirmamount1), SUM(useconfirmamount2), SUM(useconfirmamount3), SUM(useconfirmamount4),
 SUM(usequalifyamount1), SUM(usequalifyamount2), SUM(usequalifyamount3), SUM(usequalifyamount4),
 SUM(controlamount1), SUM(controlamount2), SUM(controlamount3), SUM(controlamount4),
 SUM(controlqualifyamount1), SUM(controlqualifyamount2), SUM(controlqualifyamount3), SUM(controlqualifyamount4),
 SUM(declaredamount1), SUM(declaredamount2), SUM(declaredamount3), SUM(declaredamount4),
 SUM(economyamount), SUM(economyfinalamount),
 SUM(distributeamount1), SUM(distributeamount2), SUM(distributeamount3), SUM(distributeamount4),
 SUM(distributeconfirmamount1), SUM(distributeconfirmamount2), SUM(distributeconfirmamount3), SUM(distributeconfirmamount4),
 SUM(distributequalifyamount1), SUM(distributequalifyamount2), SUM(distributequalifyamount3), SUM(distributequalifyamount4),
 SUM(executeamount1), SUM(executeamount2), SUM(executeamount3), SUM(executeamount4),
 SUM(suppliedamount),
 SUM(payedamount),
 SUM(recoilamount1), SUM(recoilamount2), SUM(recoilamount3), SUM(recoilamount4)
from Plan2PurchaseCarryInternal pc
group by
 customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 IndustryCode_Id, GrantInvestment_Id,
 finsrc_id, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRYBYPURCHASE
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRYBYPURCHASE" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 MAX(document_id),
 null, null, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 null, null, null, null, null, null, null, null, null, null, null, null,
 null, null,
 null, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall,
 SUM(useamount1), SUM(useamount2), SUM(useamount3), SUM(useamount4),
 SUM(useconfirmamount1), SUM(useconfirmamount2), SUM(useconfirmamount3), SUM(useconfirmamount4),
 SUM(usequalifyamount1), SUM(usequalifyamount2), SUM(usequalifyamount3), SUM(usequalifyamount4),
 SUM(controlamount1), SUM(controlamount2), SUM(controlamount3), SUM(controlamount4),
 SUM(controlqualifyamount1), SUM(controlqualifyamount2), SUM(controlqualifyamount3), SUM(controlqualifyamount4),
 SUM(declaredamount1), SUM(declaredamount2), SUM(declaredamount3), SUM(declaredamount4),
 SUM(economyamount), SUM(economyfinalamount),
 SUM(distributeamount1), SUM(distributeamount2), SUM(distributeamount3), SUM(distributeamount4),
 SUM(distributeconfirmamount1), SUM(distributeconfirmamount2), SUM(distributeconfirmamount3), SUM(distributeconfirmamount4),
 SUM(distributequalifyamount1), SUM(distributequalifyamount2), SUM(distributequalifyamount3), SUM(distributequalifyamount4),
 SUM(executeamount1), SUM(executeamount2), SUM(executeamount3), SUM(executeamount4),
 SUM(suppliedamount),
 SUM(payedamount),
 SUM(recoilamount1), SUM(recoilamount2), SUM(recoilamount3), SUM(recoilamount4)
from Plan2PurchaseCarryInternal pc
group by
 customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRYINTBYKBK
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRYINTBYKBK" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 document_id,
 null, null, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 null, null, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 IndustryCode_Id, GrantInvestment_Id,
 finsrc_id, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall,
 useamount1, useamount2, useamount3, useamount4,
 useconfirmamount1, useconfirmamount2, useconfirmamount3, useconfirmamount4,
 usequalifyamount1, usequalifyamount2, usequalifyamount3, usequalifyamount4,
 controlamount1, controlamount2, controlamount3, controlamount4,
 controlqualifyamount1, controlqualifyamount2, controlqualifyamount3, controlqualifyamount4,
 declaredamount1, declaredamount2, declaredamount3, declaredamount4,
 economyamount, economyfinalamount,
 distributeamount1, distributeamount2, distributeamount3, distributeamount4,
 distributeconfirmamount1, distributeconfirmamount2, distributeconfirmamount3, distributeconfirmamount4,
 distributequalifyamount1, distributequalifyamount2, distributequalifyamount3, distributequalifyamount4,
 executeamount1, executeamount2, executeamount3, executeamount4,
 suppliedamount,
 payedamount,
 recoilamount1, recoilamount2, recoilamount3, recoilamount4
from Plan2PurchaseCarryInternal pc;
--------------------------------------------------------
--  DDL for View PLAN2PURCHASECARRYINTBYPURCH
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2PURCHASECARRYINTBYPURCH" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITION_ID", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "LOT_DESCRIPTION_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "ECONOMYFINALAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT", "RECOILAMOUNT1", "RECOILAMOUNT2", "RECOILAMOUNT3", "RECOILAMOUNT4") AS 
  select
 document_id,
 null, null, customer_id, purchasemode_id, cmporg_id, planyear, budget_id, paycondition_id,
 null, null, null, null, null, null, null, null, null, null, null, null,
 null, null,
 null, deliverybasis_id, invitationdate, cmpdate, lot_description_id, contractor_id, isenterprise, issmall,
 useamount1, useamount2, useamount3, useamount4,
 useconfirmamount1, useconfirmamount2, useconfirmamount3, useconfirmamount4,
 usequalifyamount1, usequalifyamount2, usequalifyamount3, usequalifyamount4,
 controlamount1, controlamount2, controlamount3, controlamount4,
 controlqualifyamount1, controlqualifyamount2, controlqualifyamount3, controlqualifyamount4,
 declaredamount1, declaredamount2, declaredamount3, declaredamount4,
 economyamount, economyfinalamount,
 distributeamount1, distributeamount2, distributeamount3, distributeamount4,
 distributeconfirmamount1, distributeconfirmamount2, distributeconfirmamount3, distributeconfirmamount4,
 distributequalifyamount1, distributequalifyamount2, distributequalifyamount3, distributequalifyamount4,
 executeamount1, executeamount2, executeamount3, executeamount4,
 suppliedamount,
 payedamount,
 recoilamount1, recoilamount2, recoilamount3, recoilamount4
from Plan2PurchaseCarryInternal pc;
--------------------------------------------------------
--  DDL for View PLAN2VIEWERINTERNAL
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERINTERNAL" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 pd.document_id, pd.budget_id, pd.planyear,
 pg.groupcode, pg.okdp_code, pg.okpd_code, pg.okpd_id, pg.okpd_name, pg.okved, pg.okved_id, pg.okved_name, pg.price, pg.minrequirement,
 pg.goodscode, pg.goodscaption, pg.unitname, pd.customer_id, pl.finsrc_id, pd.deliverybasis_id, pd.purchasemode_id,
 pd.invitationdate, pd.dealdate, pd.contractexecdate, pd.cmporg_id, pd.isenterprise,
 pd.purchasetype, pd.contractor_id, pd.planposition, pd.description, pd.ordernumber, pd.ordernamecache_id, pd.identification_code, pd.currency_id, pd.orderform,
 pd.contractpayordercache_id, pd.changereason_id, pd.payconditioncache_id, pd.singlecustomerreason_id, pd.ofrreqreason_id,
 pl.industrycode_id, pl.grantinvestment_id, pl.code1, pl.code2, pl.code3, pl.code4, pl.code5, pl.code6, pl.code7, pl.code8, pl.code9, pl.code10,
 pd.changereasoninfo, pd.eform, pl.recipient_id, pd.conexecstagescache_id, pd.periodicitycache_id,
 pd.prohibitionscache_id, pd.publicdiscusscache_id, f192.docflagtype_id, pd.guaranteecontractamount, pd.advancepercents,
 pd.recipient_id, pd.changereasondate, pd.deliverydatefrom, pd.deliverydateto, pd.paydatefrom, pd.paydateto,
 pd.amount, pd.guaranteeappamount, pd.sumpushasesmallbusiness, pd.prcpushasesmallbusiness,
 pl.amount, pl.amount_2year, pl.amount_3year, pl.amount_future,
 pg.amount, pg.amount_2year, pg.amount_3year, pg.amount_future,
 pg.qty, pg.qty_2year, pg.qty_3year, pg.qty_future
from Plan3PurchaseDoc pd
inner join Plan3DocChild on (Plan3DocChild.doc_id=pd.id)
inner join Plan3Doc on (Plan3Doc.id=Plan3DocChild.plan3doc_id and Plan3Doc.dispstatus_id in (10,24) and Plan3Doc.documentclass_id=55)
inner join Plan3PurchaseLine pl on (pl.plan3purchasedoc_id=pd.id)
left join Plan3PurchaseGoods pg on (pg.plan3purchasedoc_id=pd.id and pg.plan3purchaselinepos=pl.pos)
left join DocFlag f192 on (f192.document_id=pd.document_id and f192.docflagtype_id=192)
where pd.dispstatus_id in (10,24);
--------------------------------------------------------
--  DDL for View PLAN2VIEWER
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWER" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag, sum(guaranteecontractamount), avg(advancepercent),
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto,
 sum(plan_amount), sum(guaranteeappamount), sum(sumpushasesmallbusiness), avg(prcpushasesmallbusiness),
 sum(line_amount), sum(line_amount_2year), sum(line_amount_3year), sum(line_amount_future),
 sum(goods_amount), sum(goods_amount_2year), sum(goods_amount_3year), sum(goods_amount_future),
 sum(goods_qty), sum(goods_qty_2year), sum(goods_qty_3year), sum(goods_qty_future)
from Plan2ViewerInternal
group by
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag,
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto;
 --------------------------------------------------------
--  DDL for View PLAN2VIEWERINTERNALBYGRAPH
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERINTERNALBYGRAPH" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "DISPSTATUS_ID", "GRAPH_DOCUMENT_ID", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 pd.document_id, pd.budget_id, pd.planyear,
 pg.groupcode, pg.okdp_code, pg.okpd_code, pg.okpd_id, pg.okpd_name, pg.okved, pg.okved_id, pg.okved_name, pg.price, pg.minrequirement,
 pg.goodscode, pg.goodscaption, pg.unitname, pd.customer_id, pl.finsrc_id, pd.deliverybasis_id, pd.purchasemode_id,
 pd.invitationdate, pd.dealdate, pd.contractexecdate, pd.cmporg_id, pd.isenterprise,
 pd.purchasetype, pd.contractor_id, pd.planposition, pd.description, pd.ordernumber, pd.ordernamecache_id, pd.identification_code, pd.currency_id, pd.orderform,
 pd.contractpayordercache_id, pd.changereason_id, pd.payconditioncache_id, pd.singlecustomerreason_id, pd.ofrreqreason_id,
 pl.industrycode_id, pl.grantinvestment_id, pl.code1, pl.code2, pl.code3, pl.code4, pl.code5, pl.code6, pl.code7, pl.code8, pl.code9, pl.code10,
 pd.changereasoninfo, pd.eform, pl.recipient_id, pd.conexecstagescache_id, pd.periodicitycache_id,
 pd.prohibitionscache_id, pd.publicdiscusscache_id, f192.docflagtype_id, pd.guaranteecontractamount, pd.advancepercents,
 pd.recipient_id, pd.changereasondate, pd.deliverydatefrom, pd.deliverydateto, pd.paydatefrom, pd.paydateto,
 pd.amount, pd.guaranteeappamount, pd.sumpushasesmallbusiness, pd.prcpushasesmallbusiness,
 pd.dispstatus_id, Plan3Doc.document_id,
 pl.amount, pl.amount_2year, pl.amount_3year, pl.amount_future,
 pg.amount, pg.amount_2year, pg.amount_3year, pg.amount_future,
 pg.qty, pg.qty_2year, pg.qty_3year, pg.qty_future
from Plan3PurchaseDoc pd
inner join Plan3DocChild on (Plan3DocChild.doc_id=pd.id)
inner join Plan3Doc on (Plan3Doc.id=Plan3DocChild.plan3doc_id and Plan3Doc.documentclass_id=55)
inner join Plan3PurchaseLine pl on (pl.plan3purchasedoc_id=pd.id)
left join Plan3PurchaseGoods pg on (pg.plan3purchasedoc_id=pd.id and pg.plan3purchaselinepos=pl.pos)
left join DocFlag f192 on (f192.document_id=pd.document_id and f192.docflagtype_id=192);
--------------------------------------------------------
--  DDL for View PLAN2VIEWERBYGRAPH
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERBYGRAPH" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "DISPSTATUS_ID", "GRAPH_DOCUMENT_ID", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag, sum(guaranteecontractamount), avg(advancepercent),
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto,
 sum(plan_amount), sum(guaranteeappamount), sum(sumpushasesmallbusiness), avg(prcpushasesmallbusiness),
 dispstatus_id, graph_document_id,
 sum(line_amount), sum(line_amount_2year), sum(line_amount_3year), sum(line_amount_future),
 sum(goods_amount), sum(goods_amount_2year), sum(goods_amount_3year), sum(goods_amount_future),
 sum(goods_qty), sum(goods_qty_2year), sum(goods_qty_3year), sum(goods_qty_future)
from Plan2ViewerInternalByGraph
group by
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag,
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto,
 dispstatus_id, graph_document_id;
 --------------------------------------------------------
--  DDL for View PLAN2VIEWERINTERNALBYKBK
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERINTERNALBYKBK" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 pd.document_id, pd.budget_id, pd.planyear,
 null, null, null, null, null, null, null, null, null, null,
 null, null, null, pd.customer_id, pl.finsrc_id, pd.deliverybasis_id, pd.purchasemode_id,
 pd.invitationdate, pd.dealdate, pd.contractexecdate, pd.cmporg_id, pd.isenterprise,
 pd.purchasetype, pd.contractor_id, pd.planposition, pd.description, pd.ordernumber, pd.ordernamecache_id, pd.identification_code, pd.currency_id, pd.orderform,
 pd.contractpayordercache_id, pd.changereason_id, pd.payconditioncache_id, pd.singlecustomerreason_id, pd.ofrreqreason_id,
 pl.industrycode_id, pl.grantinvestment_id, pl.code1, pl.code2, pl.code3, pl.code4, pl.code5, pl.code6, pl.code7, pl.code8, pl.code9, pl.code10,
 pd.changereasoninfo, pd.eform, pl.recipient_id, pd.conexecstagescache_id, pd.periodicitycache_id,
 pd.prohibitionscache_id, pd.publicdiscusscache_id, f192.docflagtype_id, pd.guaranteecontractamount, pd.advancepercents,
 pd.recipient_id, pd.changereasondate, pd.deliverydatefrom, pd.deliverydateto, pd.paydatefrom, pd.paydateto,
 pd.amount, pd.guaranteeappamount, pd.sumpushasesmallbusiness, pd.prcpushasesmallbusiness,
 pl.amount, pl.amount_2year, pl.amount_3year, pl.amount_future,
 0, 0, 0, 0,
 0, 0, 0, 0
from Plan3PurchaseDoc pd
inner join Plan3DocChild on (Plan3DocChild.doc_id=pd.id)
inner join Plan3Doc on (Plan3Doc.id=Plan3DocChild.plan3doc_id and Plan3Doc.dispstatus_id in (10,24) and Plan3Doc.documentclass_id=55)
inner join Plan3PurchaseLine pl on (pl.plan3purchasedoc_id=pd.id)
left join DocFlag f192 on (f192.document_id=pd.document_id and f192.docflagtype_id=192)
where pd.dispstatus_id in (10,24);
--------------------------------------------------------
--  DDL for View PLAN2VIEWERBYKBK
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERBYKBK" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag, sum(guaranteecontractamount), avg(advancepercent),
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto,
 sum(plan_amount), sum(guaranteeappamount), sum(sumpushasesmallbusiness), avg(prcpushasesmallbusiness),
 sum(line_amount), sum(line_amount_2year), sum(line_amount_3year), sum(line_amount_future),
 sum(goods_amount), sum(goods_amount_2year), sum(goods_amount_3year), sum(goods_amount_future),
 sum(goods_qty), sum(goods_qty_2year), sum(goods_qty_3year), sum(goods_qty_future)
from Plan2ViewerInternalByKBK
group by
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag,
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto;
 --------------------------------------------------------
--  DDL for View PLAN2VIEWERINTERNALBYPURCHASE
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERINTERNALBYPURCHASE" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 pd.document_id, pd.budget_id, pd.planyear,
 null, null, null, null, null, null, null, null, null, null,
 null, null, null, pd.customer_id, null, pd.deliverybasis_id, pd.purchasemode_id,
 pd.invitationdate, pd.dealdate, pd.contractexecdate, pd.cmporg_id, pd.isenterprise,
 pd.purchasetype, pd.contractor_id, pd.planposition, pd.description, pd.ordernumber, pd.ordernamecache_id, pd.identification_code, pd.currency_id, pd.orderform,
 pd.contractpayordercache_id, pd.changereason_id, pd.payconditioncache_id, pd.singlecustomerreason_id, pd.ofrreqreason_id,
 null, null, null, null, null, null, null, null, null, null, null, null,
 pd.changereasoninfo, pd.eform, null, pd.conexecstagescache_id, pd.periodicitycache_id,
 pd.prohibitionscache_id, pd.publicdiscusscache_id, f192.docflagtype_id, pd.guaranteecontractamount, pd.advancepercents,
 pd.recipient_id, pd.changereasondate, pd.deliverydatefrom, pd.deliverydateto, pd.paydatefrom, pd.paydateto,
 pd.amount, pd.guaranteeappamount, pd.sumpushasesmallbusiness, pd.prcpushasesmallbusiness,
 0, 0, 0, 0,
 0, 0, 0, 0,
 0, 0, 0, 0
from Plan3PurchaseDoc pd
inner join Plan3DocChild on (Plan3DocChild.doc_id=pd.id)
inner join Plan3Doc on (Plan3Doc.id=Plan3DocChild.plan3doc_id and Plan3Doc.dispstatus_id in (10,24) and Plan3Doc.documentclass_id=55)
left join DocFlag f192 on (f192.document_id=pd.document_id and f192.docflagtype_id=192)
where pd.dispstatus_id in (10,24);
--------------------------------------------------------
--  DDL for View PLAN2VIEWERBYPURCHASE
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERBYPURCHASE" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "GROUPCODE", "OKDP_CODE", "OKPD_CODE", "OKPD_ID", "OKPD_NAME", "OKVED", "OKVED_ID", "OKVED_NAME", "PRICE", "MINREQUIREMENT", "GOODSCODE", "GOODSCAPTION", "UNITNAME", "CUSTOMER_ID", "FINSRC_ID", "DELIVERYBASIS_ID", "PURCHASEMODE_ID", "PLAN_INVITATIONDATE", "PLAN_DEALDATE", "PLAN_CONTRACTEXECDATE", "CMPORG_ID", "ISENTERPRISE", "PURCHASETYPE", "CONTRACTOR_ID", "PLANPOSITION", "DESCRIPTION", "ORDERNUMBER", "ORDERNAME", "IDENTIFICATION_CODE", "CURRENCY_ID", "ORDERFORM", "CONTRACTPAYORDERCACHE_ID", "CHANGEREASON_ID", "PAYCONDITIONCACHE_ID", "SINGLECUSTOMERREASON_ID", "OFRREQREASON_ID", "INDUSTRYCODE_ID", "GRANTINVESTMENT_ID", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "CHANGEREASONINFO", "EFORM", "FIN_RECIPIENT_ID", "CONEXECSTAGESCACHE_ID", "PERIODICITYCACHE_ID", "PROHIBITIONSCACHE_ID", "PUBLICDISCUSSCACHE_ID", "GOODSUNITPRICE_FLAG", "GUARANTEECONTRACTAMOUNT", "ADVANCEPERCENT", "RECIPIENT_ID", "CHANGEREASONDATE", "DELIVERYDATEFROM", "DELIVERYDATETO", "PAYDATEFROM", "PAYDATETO", "PLAN_AMOUNT", "GUARANTEEAPPAMOUNT", "SUMPUSHASESMALLBUSINESS", "PRCPUSHASESMALLBUSINESS", "LINE_AMOUNT", "LINE_AMOUNT_2YEAR", "LINE_AMOUNT_3YEAR", "LINE_AMOUNT_FUTURE", "GOODS_AMOUNT", "GOODS_AMOUNT_2YEAR", "GOODS_AMOUNT_3YEAR", "GOODS_AMOUNT_FUTURE", "GOODS_QTY", "GOODS_QTY_2YEAR", "GOODS_QTY_3YEAR", "GOODS_QTY_FUTURE") AS 
  select
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag, sum(guaranteecontractamount), avg(advancepercent),
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto,
 sum(plan_amount), sum(guaranteeappamount), sum(sumpushasesmallbusiness), avg(prcpushasesmallbusiness),
 sum(line_amount), sum(line_amount_2year), sum(line_amount_3year), sum(line_amount_future),
 sum(goods_amount), sum(goods_amount_2year), sum(goods_amount_3year), sum(goods_amount_future),
 sum(goods_qty), sum(goods_qty_2year), sum(goods_qty_3year), sum(goods_qty_future)
from Plan2ViewerInternalByPurchase
group by
 document_id, budget_id, planyear,
 groupcode, okdp_code, okpd_code, okpd_id, okpd_name, okved, okved_id, okved_name, price, minrequirement,
 goodscode, goodscaption, unitname, customer_id, finsrc_id, deliverybasis_id, purchasemode_id,
 plan_invitationdate, plan_dealdate, plan_contractexecdate, cmporg_id, isenterprise,
 purchasetype, contractor_id, planposition, description, ordernumber, ordername, identification_code, currency_id, orderform,
 contractpayordercache_id, changereason_id, payconditioncache_id, singlecustomerreason_id, ofrreqreason_id,
 industrycode_id, grantinvestment_id, code1, code2, code3, code4, code5, code6, code7, code8, code9, code10,
 changereasoninfo, eform, fin_recipient_id, conexecstagescache_id, periodicitycache_id,
 prohibitionscache_id, publicdiscusscache_id, goodsunitprice_flag,
 recipient_id, changereasondate, deliverydatefrom, deliverydateto, paydatefrom, paydateto;
 --------------------------------------------------------
--  DDL for View PLAN2VIEWERIC_ORDER_INTERNAL
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERIC_ORDER_INTERNAL" ("ORDER_ID", "DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "PLANPOSITIONNUMBER", "CUSTOMER_ID", "ISMAXINVITATIONDATE", "CUSTOMERPOS", "INVITATIONDATE", "AMOUNT") AS 
  select
  od.ID, od.DOCUMENT_ID, od.BUDGET_ID, extract(YEAR from coalesce(cast(od.PLAN_INVITATIONDATE as DATE), od.PLAN_DEALDATE)),
  cl.PlanPositionNumber, cl.CUSTOMER_ID, cl.ISMAXINVITATIONDATE, cl.POS,
  coalesce(cast(od.PLAN_INVITATIONDATE as DATE), od.PLAN_DEALDATE),
  coalesce(cl.AMOUNT, od.AMOUNT)
from OrderDoc od
left join CmpCustomerLot cl on (cl.Order_ID = od.id)
where od.dispstatus_id in (10, 12, 13, 20, 24, 30, 31, 35, 45, 46, 52, 61, 62, 63, 64, 65, 66, 68, 70, 71, 76,
  77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87);
--------------------------------------------------------
--  DDL for View PLAN2VIEWERIC_ORDER
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERIC_ORDER" ("DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "PLANPOSITIONNUMBER", "CUSTOMER_ID", "INVITATIONDATE", "AMOUNT") AS 
  select
  oi.Document_ID, oi.Budget_ID, oi.PlanYear,
  oi.PlanPositionNumber, oi.Customer_ID,
  oi.InvitationDate,
  oi.Amount
from Plan2ViewerIC_Order_Internal oi
where oi.PlanPositionNumber is not null and oi.IsMaxInvitationDate <> 0;
--------------------------------------------------------
--  DDL for View PLAN2VIEWERIC_PLAN_INTERNAL
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERIC_PLAN_INTERNAL" ("PLAN3DOC_ID", "VERSION", "DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "PLANPOSITIONNUMBER", "PURCHASEMODE_ID", "PURCHASETYPE", "CUSTOMER_ID", "CMPORG_ID", "ORDERNAME_CACHE_ID", "IDENTIFICATION_CODE", "DESCRIPTION", "CHANGEREASON_ID", "PLAN_INVITATIONDATE", "PLAN_CMPDATE", "PLAN_EXECDATE", "AMOUNT") AS 
  select
  pd.ID, pd.VERSION, pd.DOCUMENT_ID, pd.BUDGET_ID, pd.PLANYEAR, pd.PLANPOSITION, pd.PURCHASEMODE_ID,
  pd.PURCHASETYPE, pd.CUSTOMER_ID, pd.CMPORG_ID, pd.ORDERNAMECACHE_ID, pd.IDENTIFICATION_CODE, pd.DESCRIPTION,
  pd.CHANGEREASON_ID,
  pd.INVITATIONDATE, pd.DEALDATE, pd.CONTRACTEXECDATE,
  pd.AMOUNT
from PLAN3PURCHASEDOC pd
where pd.DISPSTATUS_ID in (10,24) and pd.PLANPOSITION is not null;
--------------------------------------------------------
--  DDL for View PLAN2VIEWERIC_PLAN
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PLAN2VIEWERIC_PLAN" ("PLAN3DOC_ID", "VERSION", "DOCUMENT_ID", "BUDGET_ID", "PLANYEAR", "PLANPOSITIONNUMBER", "PURCHASEMODE_ID", "PURCHASETYPE", "CUSTOMER_ID", "CMPORG_ID", "ORDERNAME_CACHE_ID", "IDENTIFICATION_CODE", "DESCRIPTION", "CHANGEREASON_ID", "PLAN_INVITATIONDATE", "PLAN_CMPDATE", "PLAN_EXECDATE", "AMOUNT") AS 
  select
  pi.Plan3Doc_ID, pi.Version, pi.Document_ID, pi.Budget_ID, pi.PlanYear, pi.PlanPositionNumber, pi.PurchaseMode_ID,
  pi.PurchaseType, pi.Customer_ID, pi.CmpOrg_ID, pi.OrderName_cache_ID, pi.Identification_Code, pi.Description,
  pi.ChangeReason_ID,
  pi.Plan_InvitationDate, pi.Plan_CmpDate, pi.Plan_ExecDate,
  SUM(pi.Amount)
from Plan2ViewerIC_Plan_Internal pi
group by
  pi.Plan3Doc_ID, pi.Version, pi.Document_ID, pi.Budget_ID, pi.PlanYear, pi.PlanPositionNumber, pi.PurchaseMode_ID,
  pi.PurchaseType, pi.Customer_ID, pi.CmpOrg_ID, pi.OrderName_cache_ID, pi.Identification_Code, pi.Description,
  pi.ChangeReason_ID,
  pi.Plan_InvitationDate, pi.Plan_CmpDate, pi.Plan_ExecDate;
--------------------------------------------------------
--  DDL for View PURCHASECARRYINTERNALVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PURCHASECARRYINTERNALVIEW" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "NECESSITY_ID", "PLANYEAR", "BUDGET_ID", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4") AS 
  select
 pc.doc_id,
 pc.groupcode, pc.okdp_code, pc.recipient_id, pc.purchasemode_id, pc.cmporg_id, pc.necessity_id, pc.planyear, doc.budget_id,
 case when ((doc.documentclass_id=1 or doc.documentclass_id=2) and pc.carrystatus=1) or (doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id in (5,16)) then coalesce(pc.amount1, 0) else 0.00 end,
 case when ((doc.documentclass_id=1 or doc.documentclass_id=2) and pc.carrystatus=1) or (doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id in (5,16)) then coalesce(pc.amount2, 0) else 0.00 end,
 case when ((doc.documentclass_id=1 or doc.documentclass_id=2) and pc.carrystatus=1) or (doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id in (5,16)) then coalesce(pc.amount3, 0) else 0.00 end,
 case when ((doc.documentclass_id=1 or doc.documentclass_id=2) and pc.carrystatus=1) or (doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id in (5,16)) then coalesce(pc.amount4, 0) else 0.00 end,
 case when pc.carrystatus<>1 then coalesce(pc.amount1, 0) else 0.00 end,
 case when pc.carrystatus<>1 then coalesce(pc.amount2, 0) else 0.00 end,
 case when pc.carrystatus<>1 then coalesce(pc.amount3, 0) else 0.00 end,
 case when pc.carrystatus<>1 then coalesce(pc.amount4, 0) else 0.00 end,
 case when doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id not in (5,16) and pc.carrystatus=1 then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id not in (5,16) and pc.carrystatus=1 then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id not in (5,16) and pc.carrystatus=1 then coalesce(pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id in (3,4,5,28,36) and doc.dispstatus_id not in (5,16) and pc.carrystatus=1 then coalesce(pc.amount4, 0) else 0.00 end,
 pc.economyamount,
 case when doc.documentclass_id in (8,9,32) and pc.carrystatus=1 then coalesce(pc.amount1, 0) else 0.00 end,
 case when doc.documentclass_id in (8,9,32) and pc.carrystatus=1 then coalesce(pc.amount2, 0) else 0.00 end,
 case when doc.documentclass_id in (8,9,32) and pc.carrystatus=1 then coalesce(pc.amount3, 0) else 0.00 end,
 case when doc.documentclass_id in (8,9,32) and pc.carrystatus=1 then coalesce(pc.amount4, 0) else 0.00 end,
 coalesce(pc.executeamount1, 0),
 coalesce(pc.executeamount2, 0),
 coalesce(pc.executeamount3, 0),
 coalesce(pc.executeamount4, 0)
from PurchaseCarry pc
left join document doc on (pc.doc_id = doc.id)
where pc.planversion=1;
--------------------------------------------------------
--  DDL for View PURCHASECARRYVIEWERVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PURCHASECARRYVIEWERVIEW" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "NECESSITY_ID", "PLANYEAR", "BUDGET_ID", "PAYCONDITIONNAME", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "FINSRC_ID", "DELIVERYBASIS_ID", "INVITATIONDATE", "CMPDATE", "DESCRIPTION", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "USEAMOUNT1", "USEAMOUNT2", "USEAMOUNT3", "USEAMOUNT4", "USECONFIRMAMOUNT1", "USECONFIRMAMOUNT2", "USECONFIRMAMOUNT3", "USECONFIRMAMOUNT4", "USEQUALIFYAMOUNT1", "USEQUALIFYAMOUNT2", "USEQUALIFYAMOUNT3", "USEQUALIFYAMOUNT4", "CONTROLAMOUNT1", "CONTROLAMOUNT2", "CONTROLAMOUNT3", "CONTROLAMOUNT4", "CONTROLQUALIFYAMOUNT1", "CONTROLQUALIFYAMOUNT2", "CONTROLQUALIFYAMOUNT3", "CONTROLQUALIFYAMOUNT4", "DECLAREDAMOUNT1", "DECLAREDAMOUNT2", "DECLAREDAMOUNT3", "DECLAREDAMOUNT4", "ECONOMYAMOUNT", "DISTRIBUTEAMOUNT1", "DISTRIBUTEAMOUNT2", "DISTRIBUTEAMOUNT3", "DISTRIBUTEAMOUNT4", "DISTRIBUTECONFIRMAMOUNT1", "DISTRIBUTECONFIRMAMOUNT2", "DISTRIBUTECONFIRMAMOUNT3", "DISTRIBUTECONFIRMAMOUNT4", "DISTRIBUTEQUALIFYAMOUNT1", "DISTRIBUTEQUALIFYAMOUNT2", "DISTRIBUTEQUALIFYAMOUNT3", "DISTRIBUTEQUALIFYAMOUNT4", "EXECUTEAMOUNT1", "EXECUTEAMOUNT2", "EXECUTEAMOUNT3", "EXECUTEAMOUNT4", "SUPPLIEDAMOUNT", "PAYEDAMOUNT") AS 
  select
 MIN(0),
 groupcode, cast(null as char), customer_id, purchasemode_id, cmporg_id, necessity_id, planyear, budget_id,
 cast(null as char),
 cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char),
 cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char),
 cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as date), cast(null as date), cast(null as char),
 cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as numeric(18, 4)),
 SUM(useamount1), SUM(useamount2), SUM(useamount3), SUM(useamount4),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00),
 SUM(controlamount1), SUM(controlamount2), SUM(controlamount3), SUM(controlamount4),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00),
 SUM(declaredamount1), SUM(declaredamount2), SUM(declaredamount3), SUM(declaredamount4),
 SUM(economyamount),
 SUM(distributeamount1), SUM(distributeamount2), SUM(distributeamount3), SUM(distributeamount4),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00),
 SUM(executeamount1), SUM(executeamount2), SUM(executeamount3), SUM(executeamount4),
 SUM(0.00),
 SUM(0.00)
from PurchaseCarryInternalView pc
group by
 groupcode, customer_id, purchasemode_id, cmporg_id, necessity_id, planyear, budget_id;
--------------------------------------------------------
--  DDL for View PURCHASEPLANINTERNALVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PURCHASEPLANINTERNALVIEW" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "NECESSITY_ID", "PLANYEAR", "DESC_ID", "DESCRIPTION", "DATEBEGIN", "DATEEND", "BUDGET_ID", "AMOUNT1", "AMOUNT2", "AMOUNT3", "AMOUNT4", "AMOUNT5", "AMOUNT6", "AMOUNT7", "AMOUNT8", "AMOUNT9", "AMOUNT10", "AMOUNT11", "AMOUNT12", "ENTAMOUNT1", "ENTAMOUNT2", "ENTAMOUNT3", "ENTAMOUNT4", "ENTAMOUNT5", "ENTAMOUNT6", "ENTAMOUNT7", "ENTAMOUNT8", "ENTAMOUNT9", "ENTAMOUNT10", "ENTAMOUNT11", "ENTAMOUNT12") AS 
  select
 ppd.document_id,
 pp.groupcode, cast(null as char), pp.customer_id, pp.purchasemode_id, pp.cmporg_id, pp.necessity_id,
 ppd.planyear, pp.desc_id, d.description, pp.datebegin, pp.dateend, ppd.budget_id,
 coalesce(pp.amount1, 0), coalesce(pp.amount2, 0), coalesce(pp.amount3, 0),
 coalesce(pp.amount4, 0), coalesce(pp.amount5, 0), coalesce(pp.amount6, 0),
 coalesce(pp.amount7, 0), coalesce(pp.amount8, 0), coalesce(pp.amount9, 0),
 coalesce(pp.amount10, 0),coalesce(pp.amount11, 0),coalesce(pp.amount12, 0),
 coalesce(pp.entamount1, 0), coalesce(pp.entamount2, 0), coalesce(pp.entamount3, 0),
 coalesce(pp.entamount4, 0), coalesce(pp.entamount5, 0), coalesce(pp.entamount6, 0),
 coalesce(pp.entamount7, 0), coalesce(pp.entamount8, 0), coalesce(pp.entamount9, 0),
 coalesce(pp.entamount10, 0),coalesce(pp.entamount11, 0),coalesce(pp.entamount12, 0)
from PurchasePlan pp
inner join PurchasePlanDoc ppd on (pp.purchaseplandoc_id = ppd.id)
left outer join description d on (d.id = pp.desc_id)
where ppd.dispstatus_id = 10;
--------------------------------------------------------
--  DDL for View PURCHASEPLANVIEWERVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "PURCHASEPLANVIEWERVIEW" ("DOCUMENT_ID", "GROUPCODE", "OKDP_CODE", "CUSTOMER_ID", "PURCHASEMODE_ID", "CMPORG_ID", "NECESSITY_ID", "PLANYEAR", "DESC_ID", "DESCRIPTION", "DATEBEGIN", "DATEEND", "BUDGET_ID", "PAYCONDITIONNAME", "PAYDATEFROM", "PAYDATETO", "GOODSCODE", "UNITNAME", "CODE1", "CODE2", "CODE3", "CODE4", "CODE5", "CODE6", "CODE7", "CODE8", "CODE9", "CODE10", "FINSRC_ID", "DELIVERYBASIS_ID", "CONTRACTOR_ID", "ISENTERPRISE", "ISSMALL", "DEALDATE", "PAYAMOUNT", "PAYAMOUNTPROLONG", "AMOUNT1", "AMOUNT2", "AMOUNT3", "AMOUNT4", "AMOUNT5", "AMOUNT6", "AMOUNT7", "AMOUNT8", "AMOUNT9", "AMOUNT10", "AMOUNT11", "AMOUNT12", "ENTAMOUNT1", "ENTAMOUNT2", "ENTAMOUNT3", "ENTAMOUNT4", "ENTAMOUNT5", "ENTAMOUNT6", "ENTAMOUNT7", "ENTAMOUNT8", "ENTAMOUNT9", "ENTAMOUNT10", "ENTAMOUNT11", "ENTAMOUNT12", "CHANGE_AMOUNT_QUARTER1", "CHANGE_AMOUNT_QUARTER2", "CHANGE_AMOUNT_QUARTER3", "CHANGE_AMOUNT_QUARTER4") AS 
  select
 MIN(0),
 groupcode, cast(null as char), customer_id, purchasemode_id, cmporg_id, necessity_id,
 planyear, desc_id, description, datebegin, dateend, budget_id,
 cast(null as char), cast(null as date), cast(null as date),
 cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char),
 cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char), cast(null as char),
 cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as numeric(18, 4)), cast(null as date),
 SUM(0.00), SUM(0.00),
 SUM(amount1), SUM(amount2), SUM(amount3), SUM(amount4), SUM(amount5), SUM(amount6),
 SUM(amount7), SUM(amount8), SUM(amount9), SUM(amount10), SUM(amount11), SUM(amount12),
 SUM(entamount1), SUM(entamount2), SUM(entamount3), SUM(entamount4), SUM(entamount5), SUM(entamount6),
 SUM(entamount7), SUM(entamount8), SUM(entamount9), SUM(entamount10), SUM(entamount11), SUM(entamount12),
 SUM(0.00), SUM(0.00), SUM(0.00), SUM(0.00)
from PurchasePlanInternalView pp
group by
 groupcode, customer_id, purchasemode_id, cmporg_id, necessity_id,
 planyear, desc_id, description, datebegin, dateend, budget_id;
--------------------------------------------------------
--  DDL for View ROLEACTIONVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "ROLEACTIONVIEW" ("USERROLE_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME") AS 
  select c.userrole_id,a.documentclass_id,a.dispstatus_id,a.name from docaction a 
    join roleclass c on c.documentclass_id=a.documentclass_id
  where c.access_mode=3
  union
  select e.userrole_id,a.documentclass_id,a.dispstatus_id,a.name from docaction a 
    join roleevent e on e.event_name=a.docevent_name and e.documentclass_id=a.documentclass_id and e.dispstatus_id=a.dispstatus_id
    join roleclass c on c.documentclass_id=e.documentclass_id
  where c.access_mode=2
  union
  select c.userrole_id,a.documentclass_id,a.dispstatus_id,a.name from docaction a
    join roleclass c on c.documentclass_id=a.documentclass_id
  where (c.access_mode=2 or c.access_mode=3) and a.docevent_name is null;
--------------------------------------------------------
--  DDL for View ROLEEVENTVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "ROLEEVENTVIEW" ("USERROLE_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME") AS 
  select c.userrole_id,e.documentclass_id,e.dispstatus_id,e.name from docevent e
  join roleclass c on c.documentclass_id=e.documentclass_id
  where c.access_mode=3
  union
  select e.userrole_id,e.documentclass_id,e.dispstatus_id,e.event_name from roleevent e
  join roleclass c on c.documentclass_id=e.documentclass_id
  where c.access_mode=2;
--------------------------------------------------------
--  DDL for View SUMMARYPLANVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "SUMMARYPLANVIEW" ("ID", "CAPTION", "CODE", "CUSTOMERID", "FSDESCRIPTION", "CMPORGNAME", "CUSTOMERNAME", "PMCAPTION", "CUSTOMERCODE", "AMOUNT1", "AMOUNT2", "AMOUNT3", "AMOUNT4", "AMOUNT5", "AMOUNT6", "AMOUNT7", "AMOUNT8", "AMOUNT9", "AMOUNT10", "AMOUNT11", "AMOUNT12", "PARENT_ID", "PLANYEAR", "BUDGETID", "DISPSTATUS_ID", "CMPORG_ID", "PURCHASEMODE_ID", "IS_ACTUAL", "DATEBEGIN", "DATEEND") AS 
  SELECT a.ID,a.CAPTION,a.CODE, ppd.Customer_ID CUSTOMERID,
fs.Description FSDESCRIPTION, og.Caption CMPORGNAME,ogc.Caption CUSTOMERNAME,
pm.Caption PMCaption,ogc.CustomerCode CUSTOMERCODE, SUM(pp.Amount1) Amount1,SUM(pp.Amount2) Amount2,
SUM(pp.Amount3) Amount3,SUM(pp.Amount4) Amount4,SUM(pp.Amount5) Amount5,
SUM(pp.Amount6) Amount6,SUM(pp.Amount7) Amount7,SUM(pp.Amount8) Amount8,
SUM(pp.Amount9) Amount9,SUM(pp.Amount10) Amount10,SUM(pp.Amount11) Amount11,
SUM(pp.Amount12) Amount12, a.parent_id, 
ppd.PlanYear, ppd.budget_id, ppd.dispstatus_id, pp.cmporg_id, pp.purchasemode_id, a.is_actual, pp.datebegin, pp.dateend
 FROM GOODSGROUP a
    JOIN PURCHASEPLAN pp on pp.GROUPCODE=a.CODE
    JOIN PURCHASEPLANDOC ppd on ppd.ID=pp.PurchasePlanDoc_ID
     LEFT JOIN ORG og on og.ID=pp.CMPORG_ID
     LEFT JOIN ORG ogc on ogc.ID=ppd.CUSTOMER_ID
      LEFT JOIN PURCHASEMODE pm on pm.ID=pp.PURCHASEMODE_ID
       LEFT JOIN FinSrc fs on fs.ID=pp.FINSRC_ID
         GROUP BY a.ID, a.CAPTION, a.CODE, pp.PURCHASEMODE_ID, pp.CMPORG_ID,
          ppd.Customer_ID, pp.FinSrc_ID, fs.Description, og.Caption, ogc.Caption,
          pm.Caption, ogc.CustomerCode, a.parent_id, 
          ppd.PlanYear, ppd.budget_id, ppd.dispstatus_id, pp.cmporg_id,
          pp.purchasemode_id, a.is_actual, pp.datebegin, pp.dateend
union all
SELECT a.ID,a.CAPTION,a.CODE, cast(null as numeric(18,0)) CUSTOMERID,
cast(null as varchar(255)) FsDescription, cast(null as varchar(100)) CMPORGNAME,
cast(null as varchar(100)) CUSTOMERNAME,cast(null as varchar(100)) PMCaption,
cast(null as varchar(5)) CUSTOMERCODE, cast(null as numeric(18,2)) Amount1,
cast(null as numeric(18,2)) Amount2, cast(null as numeric(18,2)) Amount3,
cast(null as numeric(18,2)) Amount4, cast(null as numeric(18,2)) Amount5,
cast(null as numeric(18,2)) Amount6, cast(null as numeric(18,2)) Amount7,
cast(null as numeric(18,2)) Amount8, cast(null as numeric(18,2)) Amount9,
cast(null as numeric(18,2)) Amount10,cast(null as numeric(18,2)) Amount11,
cast(null as numeric(18,2)) Amount12, a.parent_id,
cast(null as numeric(4,0)) PlanYear, cast(null as numeric(18,0)) budget_ID,
cast(null as numeric(18,0)) dispstatus_id, cast(null as numeric(18,0)) cmporg_id,
cast(null as numeric(18,0)) purchasemode_id, a.is_actual,
cast(null as date)datebegin, cast(null as date)dateend
 FROM GOODSGROUP a WHERE a.id in (select parent_id from GOODSGROUP);
--------------------------------------------------------
--  DDL for View USERROLES
--------------------------------------------------------

  CREATE OR ALTER  VIEW "USERROLES" ("SYSUSER_ID", "USERROLE_ID") AS 
  select p.user_id, p.grantedrole_id from roleregister p
where p.grantdate = (select max (grantdate) from roleregister r
  where r.user_id = p.user_id and r.grantedrole_id=p.grantedrole_id
  and r.grantdate<=CURRENT_TIMESTAMP+0.000015) and
  CURRENT_TIMESTAMP between p.fromdate and p.todate
  and p.grantdate<=CURRENT_TIMESTAMP+0.000015  and p.dispstatus_id = 10 and p.operation = 1;
--------------------------------------------------------
--  DDL for View USERACTIONVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "USERACTIONVIEW" ("SYSUSER_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME") AS 
  SELECT DISTINCT
    r.sysuser_id, e.documentclass_id, e.dispstatus_id, e.name
  FROM roleactionview e
    JOIN userroles r ON r.userrole_id=e.userrole_id
;
--------------------------------------------------------
--  DDL for View USEREVENTVIEW
--------------------------------------------------------

  CREATE OR ALTER  VIEW "USEREVENTVIEW" ("SYSUSER_ID", "DOCUMENTCLASS_ID", "DISPSTATUS_ID", "NAME") AS 
  SELECT DISTINCT
    r.sysuser_id, e.documentclass_id, e.dispstatus_id, e.name
  FROM roleeventview e
    JOIN userroles r ON r.userrole_id=e.userrole_id
;
--------------------------------------------------------
--  DDL for View V_SIGNS
--------------------------------------------------------

  CREATE OR ALTER  VIEW "V_SIGNS" ("ID", "DOCUMENT_ID", "USERROLE_ID", "USERCERT_SN", "USERCERT_ISSUER_SN", "SIGN_TYPE", "IS_VALID") AS 
  select 
  s.id as id, 
  d.document_id, 
  s.userrole_id, 
  s.certserialnumber as usercert_sn, 
  s.certissuerserialnumber as usercert_issuer_sn, 
  0 as sign_type,
  s.isvalid  as is_valid
from     
   digestsign s
   join digest d on (d.id = s.digest_id)
union all
select 
  s.id as id, 
  a.document_id, 
  s.userrole_id, 
  s.certserialnumber, 
  s.certissuerserialnumber, 
  1 as sign_type, 
  s.isvalid  as sign_valid
from     
   digestsign s
   join docattachex a on (a.id = s.docattachex_id);
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_DOCREQ
--------------------------------------------------------

  CREATE EXCEPTION CUSTOM_EXCEPTION 'error';

SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_DOCREQ" AFTER INSERT OR UPDATE
 ON DocReq  
AS

  DECLARE NumRows INTEGER;
  DECLARE idList NUMERIC(15);

 BEGIN
  SELECT COUNT(*)
  FROM DocReq WHERE Name = NEW.Name and PurchaseMode_Id = NEW.PurchaseMode_Id
  INTO :NumRows;
  IF ((:NumRows > 0)) THEN
  BEGIN
    SELECT Id
    FROM DocReq WHERE Name = NEW.Name and PurchaseMode_Id = NEW.PurchaseMode_Id
    INTO :idList;
    IF ((NEW.Id NOT IN (:idList))) THEN
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_DOCREQ"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_DOCREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_ESTIMATE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_ESTIMATE" after insert or update
 on ESTIMATE  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from ESTIMATE where CAPTION = NEW.CAPTION and FINYEAR = NEW.FINYEAR and BUDGET_ID = NEW.BUDGET_ID
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from ESTIMATE where CAPTION = NEW.CAPTION and FINYEAR = NEW.FINYEAR and BUDGET_ID = NEW.BUDGET_ID
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_ESTIMATE"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_ESTIMATE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_FINSRC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_FINSRC" after insert or update
 on FINSRC  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from FINSRC where NAME = NEW.NAME and FINYEAR = NEW.FINYEAR
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from FINSRC where NAME = NEW.NAME and FINYEAR = NEW.FINYEAR
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_FINSRC"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_FINSRC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_GROUPPROP_CAPTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_GROUPPROP_CAPTION" after insert or update
 on GROUPPROP  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from GROUPPROP where CAPTION = NEW.CAPTION and GROUP_ID = NEW.GROUP_ID
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from GROUPPROP where CAPTION = NEW.CAPTION and GROUP_ID = NEW.GROUP_ID
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_GROUPPROP_CAPTION"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_GROUPPROP_CAPTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_OFRGROUPPROP_CAPTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_OFRGROUPPROP_CAPTION" after insert or update
 on OFRGROUPPROP  
AS
 DECLARE numrows INTEGER;

 BEGIN
  SELECT count(*)
  from OFRGROUPPROP where CAPTION = NEW.CAPTION and OFFER_ID = NEW.OFFER_ID and GROUPCODE = NEW.GROUPCODE
  into :numrows;
  if ((:numrows > 0)) then
  EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_OFRGROUPPROP_CAPTION"');
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_OFRGROUPPROP_CAPTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_PAYCONDITION_NAME
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_PAYCONDITION_NAME" after insert or update
 on PAYCONDITION  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from PAYCONDITION where NAME = NEW.NAME
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from PAYCONDITION where NAME = NEW.NAME
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_PAYCONDITION_NAME"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_PAYCONDITION_NAME" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_PLGOODS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_PLGOODS" after insert or update
 on PLGOODS  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from PLGOODS where NAME = NEW.NAME and UNIT = NEW.UNIT and PRICE = NEW.PRICE and GROUPCODE = NEW.GROUPCODE and ORGID = NEW.ORGID
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from PLGOODS where NAME = NEW.NAME and UNIT = NEW.UNIT and PRICE = NEW.PRICE and GROUPCODE = NEW.GROUPCODE and ORGID = NEW.ORGID
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_PLGOODS"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_PLGOODS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_PROPTYPE_CAPTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_PROPTYPE_CAPTION" after insert or update
 on PROPTYPE  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from PROPTYPE where CAPTION = NEW.CAPTION
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from PROPTYPE where CAPTION = NEW.CAPTION
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_PROPTYPE_CAPTION"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_PROPTYPE_CAPTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_QUALREQ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_QUALREQ" AFTER INSERT OR UPDATE
 ON QualReq  
AS

  DECLARE NumRows INTEGER;
  DECLARE idList NUMERIC(15);

 BEGIN
  SELECT COUNT(*)
  FROM QualReq WHERE Name = NEW.Name and PurchaseMode_Id = NEW.PurchaseMode_Id
  INTO :NumRows;
  IF ((:NumRows > 0)) THEN
  BEGIN
    SELECT Id
    FROM QualReq WHERE Name = NEW.Name and PurchaseMode_Id = NEW.PurchaseMode_Id
    INTO :idList;
    IF ((NEW.Id NOT IN (:idList))) THEN
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_QUALREQ"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_QUALREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger CHK_UQ_TYPEREQCRIT_NAME
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "CHK_UQ_TYPEREQCRIT_NAME" after insert or update
 on TYPEREQCRIT  
AS
 DECLARE numrows INTEGER;
 DECLARE idList numeric(15);

 BEGIN
  SELECT count(*)
  from TYPEREQCRIT where NAME = NEW.NAME and PurchaseMode_Id = NEW.PurchaseMode_Id
  into :numrows;
  if ((:numrows > 0)) then
  BEGIN
    SELECT ID
    from TYPEREQCRIT where NAME = NEW.NAME and PurchaseMode_Id = NEW.PurchaseMode_Id
    into :idList;
    if ((NEW.ID not in (:idList))) then
      EXCEPTION CUSTOM_EXCEPTION( 'violation of PRIMARY or UNIQUE KEY constraint "UQ_TYPEREQCRIT_NAME"');
  END
COMMIT;
 END^

SET TERM ; ^


ALTER TRIGGER "CHK_UQ_TYPEREQCRIT_NAME" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger COUNT_SIGN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "COUNT_SIGN" 
after insert or update or delete on DigestSign  
AS

  DECLARE DocId NUMERIC(18,0);
  DECLARE OldDocId NUMERIC(18,0);
 BEGIN
  if ((inserting or updating)) then
    if ((new.SignType = 0)) then
      select dg.Document_id
      from Digest dg where dg.Id = new.Digest_id
      into :DocId;
    else
      select da.Document_id
      from DocAttachEx da where da.Id = new.DocAttachEx_id
      into :DocId;
  if ((updating or deleting)) then
    if ((old.SignType = 0)) then
      select dg.Document_id
      from Digest dg where dg.Id = old.Digest_id
      into :OldDocId;
    else
      OldDocId = GetDocIDForAttachID(old.DocAttachEx_id);
  if (inserting) then
    update Document d set d.Sign_cnt = d.Sign_cnt + 1 where d.Id = :DocId;
  ELSE IF (updating) then
    if ((:DocId <> :OldDocId)) then
    BEGIN
      update Document d set d.Sign_cnt = d.Sign_cnt + 1 where d.Id = :DocId;
      update Document d set d.Sign_cnt = d.Sign_cnt - 1 where d.Id = :OldDocId;
    END
  else
    update Document d set d.Sign_cnt = d.Sign_cnt - 1 where d.Id = :OldDocId;
 END^

SET TERM ; ^


ALTER TRIGGER "COUNT_SIGN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DEL_DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DEL_DOCATTACHEX" AFTER DELETE ON DOCATTACHEX  
AS

 BEGIN
  update document d set d.attach_cnt = d.attach_cnt - 1 
    where d.id=old.document_id;
 END^

SET TERM ; ^


ALTER TRIGGER "DEL_DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DELETE_DOCATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DELETE_DOCATTACH" before delete on DOCATTACH  
AS

  DECLARE result numeric(18, 4);
  DECLARE TaskJournalId numeric(15,0);
 BEGIN
    result = old.version + 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if ((:TaskJournalId is not null)) then
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action)
    values (:result, dbms_transaction.local_transaction_id, 49, :TaskJournalId, old.id, 2);
 END^

SET TERM ; ^

ALTER TRIGGER "DELETE_DOCATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DELETE_DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DELETE_DOCATTACHEX" before delete on DOCATTACHEX  
AS

  DECLARE result numeric(18, 4);
  DECLARE TaskJournalId numeric(15,0);
 BEGIN
    result = old.version + 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if ((:TaskJournalId is not null)) then
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action)
    values (:result, dbms_transaction.local_transaction_id, 2, :TaskJournalId, old.id, 2);
 END^

SET TERM ; ^

ALTER TRIGGER "DELETE_DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DELETE_MAILATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DELETE_MAILATTACH" before delete on MAILATTACH  
AS

  DECLARE result numeric(18, 4);
  DECLARE TaskJournalId numeric(15,0);
 BEGIN
    result = old.version + 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if ((:TaskJournalId is not null)) then
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action)
    values (:result, dbms_transaction.local_transaction_id, 66, :TaskJournalId, old.id, 2);
 END^

SET TERM ; ^

ALTER TRIGGER "DELETE_MAILATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DELETE_REFATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DELETE_REFATTACH" before delete on REFATTACH  
AS

  DECLARE result numeric(18, 4);
  DECLARE TaskJournalId numeric(15,0);
 BEGIN
    result = old.version + 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if ((:TaskJournalId is not null)) then
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action)
    values (:result, dbms_transaction.local_transaction_id, 253, :TaskJournalId, old.id, 2);
 END^

SET TERM ; ^

ALTER TRIGGER "DELETE_REFATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger DLT_PLAN3PURCHASELINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "DLT_PLAN3PURCHASELINE" before delete
 on PLAN3PURCHASELINE  
AS

 BEGIN
  update plan3purchasegoods g set g.plan3purchaselinepos=null
    where g.plan3purchasedoc_id=old.plan3purchasedoc_id and g.plan3purchaselinepos=old.pos;
 END^

SET TERM ; ^


ALTER TRIGGER "DLT_PLAN3PURCHASELINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger INS_DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "INS_DOCATTACHEX" AFTER INSERT ON DOCATTACHEX  
AS

 BEGIN
  update document d set d.attach_cnt = d.attach_cnt + 1 
    where d.id=new.document_id;
 END^

SET TERM ; ^


ALTER TRIGGER "INS_DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger INS_GOODSGROUP_TREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "INS_GOODSGROUP_TREE" after insert
 on goodsgroup /*referencing old as old new as new*/  
AS

 DECLARE vtree varchar(255);
 BEGIN
  begin
    select tree
    from goodsgroup_tree where group_id=new.parent_id
    into :vtree;
  exception
    when no_data_found then
      vtree = '/';
  end
  insert into goodsgroup_tree (group_id, tree)
    values(new.id, :vtree||new.code||'/');
 END^

SET TERM ; ^


ALTER TRIGGER "INS_GOODSGROUP_TREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger INS_ISCONTRACTOR_ORGACCOUNT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "INS_ISCONTRACTOR_ORGACCOUNT" 
 before insert or update on OrgAccount  
AS

 BEGIN
  if ((old.ORG_ID is null) or (old.ORG_ID<>new.ORG_ID)) then
    select o.IsContractor
    from Org o where o.ID=new.ORG_ID
    into new.IsContractor;
 END^

SET TERM ; ^


ALTER TRIGGER "INS_ISCONTRACTOR_ORGACCOUNT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger INS_ORGCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "INS_ORGCHILD" AFTER INSERT
 ON org  
AS

 BEGIN
  IF ((NEW.parent_id IS NOT NULL AND NEW.parent_id <> NEW.id)) THEN
  BEGIN
    INSERT INTO orgchild(org_id, child_id)
      VALUES(NEW.parent_id, NEW.id);
    FOR cur IN (SELECT org_id FROM orgchild
                WHERE child_id = NEW.parent_id)
    DO
    BEGIN
      INSERT INTO orgchild(org_id, child_id)
         VALUES (cur.org_id, NEW.id);
    END
  END
 END^

SET TERM ; ^


ALTER TRIGGER "INS_ORGCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger INS_TER_TREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "INS_TER_TREE" after insert
 on territory /*referencing old as old new as new*/  
AS

 DECLARE vtree varchar(255);
 DECLARE vpath varchar(512);
 BEGIN
  begin
    select tree, path
    from ter_tree where ter_id=new.parent_id
    into :vtree, :vpath;
    vpath = :vpath||', '||new.caption;
  exception
    when no_data_found then
      vtree = '/';
      vpath = new.caption;
  end
  insert into ter_tree (ter_id, tree, path)
    values (new.id, :vtree||new.code||'/', :vpath);
 END^

SET TERM ; ^


ALTER TRIGGER "INS_TER_TREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ABANDONEDREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ABANDONEDREASON" AFTER INSERT OR UPDATE OR DELETE ON ABANDONEDREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 174;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ABANDONEDREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ALTGOODSGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ALTGOODSGROUP" AFTER INSERT OR UPDATE OR DELETE ON ALTGOODSGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 142;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ALTGOODSGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ALTGOODSGROUPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ALTGOODSGROUPTYPE" AFTER INSERT OR UPDATE OR DELETE ON ALTGOODSGROUPTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 141;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ALTGOODSGROUPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ANYDATA
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ANYDATA" AFTER INSERT OR UPDATE OR DELETE ON ANYDATA /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 43;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ANYDATA" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$APPMODULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$APPMODULE" AFTER INSERT OR UPDATE OR DELETE ON APPMODULE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 98;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$APPMODULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$APPOBJ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$APPOBJ" AFTER INSERT OR UPDATE OR DELETE ON APPOBJ /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 99;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$APPOBJ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$APPOBJPROP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$APPOBJPROP" AFTER INSERT OR UPDATE OR DELETE ON APPOBJPROP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 100;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$APPOBJPROP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$APPOINTMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$APPOINTMENT" AFTER INSERT OR UPDATE OR DELETE ON APPOINTMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 256;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$APPOINTMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$AUCTIONBID
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$AUCTIONBID" AFTER INSERT OR UPDATE OR DELETE ON AUCTIONBID /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 255;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$AUCTIONBID" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$AUCTIONLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$AUCTIONLOG" AFTER INSERT OR UPDATE OR DELETE ON AUCTIONLOG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 254;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$AUCTIONLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BANK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BANK" AFTER INSERT OR UPDATE OR DELETE ON BANK /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 36;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BANK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BANKGUARANTEEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BANKGUARANTEEDOC" AFTER INSERT OR UPDATE OR DELETE ON BANKGUARANTEEDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 221;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BANKGUARANTEEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BANKGUARANTEEREFDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BANKGUARANTEEREFDOC" AFTER INSERT OR UPDATE OR DELETE ON BANKGUARANTEEREFDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 222;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BANKGUARANTEEREFDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BANKGUARANTEEREFREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BANKGUARANTEEREFREASON" AFTER INSERT OR UPDATE OR DELETE ON BANKGUARANTEEREFREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 220;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BANKGUARANTEEREFREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BUDGCODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BUDGCODE" AFTER INSERT OR UPDATE OR DELETE ON BUDGCODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 114;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BUDGCODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BUDGET" AFTER INSERT OR UPDATE OR DELETE ON BUDGET /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 80;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BUDGETLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BUDGETLINE" AFTER INSERT OR UPDATE OR DELETE ON BUDGETLINE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 116;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BUDGETLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$BUDGETSTAGE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$BUDGETSTAGE" AFTER INSERT OR UPDATE OR DELETE ON BUDGETSTAGE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 121;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$BUDGETSTAGE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CACHELIST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CACHELIST" AFTER INSERT OR UPDATE OR DELETE ON CACHELIST /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 94;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CACHELIST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CAVILDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CAVILDOC" AFTER INSERT OR UPDATE OR DELETE ON CAVILDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 305;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CAVILDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CAVILTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CAVILTYPE" AFTER INSERT OR UPDATE OR DELETE ON CAVILTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 304;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CAVILTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CERTINTERCHANGEREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CERTINTERCHANGEREQUEST" AFTER INSERT OR UPDATE OR DELETE ON CERTINTERCHANGEREQUEST /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 258;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CERTINTERCHANGEREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CERTREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CERTREQUEST" AFTER INSERT OR UPDATE OR DELETE ON CERTREQUEST /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 257;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CERTREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CERTREVOKEREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CERTREVOKEREQUEST" AFTER INSERT OR UPDATE OR DELETE ON CERTREVOKEREQUEST /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 259;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CERTREVOKEREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLAIMDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLAIMDOC" AFTER INSERT OR UPDATE OR DELETE ON CLAIMDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 213;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLAIMDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLAIMPAYFACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLAIMPAYFACT" AFTER INSERT OR UPDATE OR DELETE ON CLAIMPAYFACT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 214;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLAIMPAYFACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLAIMPENALTYCHANGEDOCINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLAIMPENALTYCHANGEDOCINFO" AFTER INSERT OR UPDATE OR DELETE ON CLAIMPENALTYCHANGEDOCINFO /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 215;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLAIMPENALTYCHANGEDOCINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLASSOPER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLASSOPER" AFTER INSERT OR UPDATE OR DELETE ON CLASSOPER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 21;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLASSOPER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLIENTOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLIENTOBJECT" AFTER INSERT OR UPDATE OR DELETE ON CLIENTOBJECT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 39;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLIENTOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLIENTOBJECTCOMMENTS" AFTER INSERT OR UPDATE OR DELETE ON CLIENTOBJECTCOMMENTS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 83;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLIENTOBJECTCOMMENTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLNDDAY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLNDDAY" AFTER INSERT OR UPDATE OR DELETE ON CLNDDAY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 97;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLNDDAY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLNDDAYTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLNDDAYTYPE" AFTER INSERT OR UPDATE OR DELETE ON CLNDDAYTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 95;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLNDDAYTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CLNDTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CLNDTYPE" AFTER INSERT OR UPDATE OR DELETE ON CLNDTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 96;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CLNDTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CODETYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CODETYPE" AFTER INSERT OR UPDATE OR DELETE ON CODETYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 113;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CODETYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$COMMEMBER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$COMMEMBER" AFTER INSERT OR UPDATE OR DELETE ON COMMEMBER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 244;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$COMMEMBER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$COMMISSION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$COMMISSION" AFTER INSERT OR UPDATE OR DELETE ON COMMISSION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 243;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$COMMISSION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$COMPLAINTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$COMPLAINTDOC" AFTER INSERT OR UPDATE OR DELETE ON COMPLAINTDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 241;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$COMPLAINTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONFCONCLUSIONCONTRACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONFCONCLUSIONCONTRACT" AFTER INSERT OR UPDATE OR DELETE ON CONFCONCLUSIONCONTRACT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 281;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONFCONCLUSIONCONTRACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONPAYFACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONPAYFACT" AFTER INSERT OR UPDATE OR DELETE ON CONPAYFACT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 179;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONPAYFACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONSOLIDDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONSOLIDDOC" AFTER INSERT OR UPDATE OR DELETE ON CONSOLIDDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 250;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONSOLIDDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONSTRUCTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONSTRUCTION" AFTER INSERT OR UPDATE OR DELETE ON CONSTRUCTION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 177;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONSTRUCTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTCARDDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTCARDDOC" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTCARDDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 198;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTCARDDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTDOC" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 178;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTEXECDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTEXECDOC" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTEXECDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 180;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTEXECDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTREASON" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 155;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTREASON_DOCLINES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTREASON_DOCLINES" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTREASON_DOCLINES /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 156;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTREASON_DOCLINES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTRACTTEMPLATEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTRACTTEMPLATEDOC" AFTER INSERT OR UPDATE OR DELETE ON CONTRACTTEMPLATEDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 203;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTRACTTEMPLATEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTYPE" AFTER INSERT OR UPDATE OR DELETE ON CONTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 175;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CONTYPEATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CONTYPEATTACH" AFTER INSERT OR UPDATE OR DELETE ON CONTYPEATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 176;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CONTYPEATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$COUNTRY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$COUNTRY" AFTER INSERT OR UPDATE OR DELETE ON COUNTRY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 145;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$COUNTRY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CRLFILE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CRLFILE" AFTER INSERT OR UPDATE OR DELETE ON CRLFILE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 268;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CRLFILE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CRLPOINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CRLPOINT" AFTER INSERT OR UPDATE OR DELETE ON CRLPOINT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 267;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CRLPOINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CURHISTORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CURHISTORY" AFTER INSERT OR UPDATE OR DELETE ON CURHISTORY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 149;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CURHISTORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$CURRENCY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$CURRENCY" AFTER INSERT OR UPDATE OR DELETE ON CURRENCY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 148;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$CURRENCY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DATAOBJECTCHANGELOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DATAOBJECTCHANGELOG" AFTER INSERT OR UPDATE OR DELETE ON DATAOBJECTCHANGELOG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 381;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DATAOBJECTCHANGELOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DATASOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DATASOURCE" AFTER INSERT OR UPDATE OR DELETE ON DATASOURCE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 87;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DATASOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DBCONNECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DBCONNECT" AFTER INSERT OR UPDATE OR DELETE ON DBCONNECT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 52;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DBCONNECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DBCONSTRAINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DBCONSTRAINT" AFTER INSERT OR UPDATE OR DELETE ON DBCONSTRAINT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 13;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DBCONSTRAINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DECREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DECREASON" AFTER INSERT OR UPDATE OR DELETE ON DECREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 82;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DECREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DELIVERYBASIS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DELIVERYBASIS" AFTER INSERT OR UPDATE OR DELETE ON DELIVERYBASIS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 158;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DELIVERYBASIS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DESCGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DESCGROUP" AFTER INSERT OR UPDATE OR DELETE ON DESCGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 59;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DESCGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DESCRIPTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DESCRIPTION" AFTER INSERT OR UPDATE OR DELETE ON DESCRIPTION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 60;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DESCRIPTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DESCRIPTIONCACHE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DESCRIPTIONCACHE" AFTER INSERT OR UPDATE OR DELETE ON DESCRIPTIONCACHE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 154;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DESCRIPTIONCACHE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DEVIATIONFACTFOUNDATION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DEVIATIONFACTFOUNDATION" AFTER INSERT OR UPDATE OR DELETE ON DEVIATIONFACTFOUNDATION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 342;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DEVIATIONFACTFOUNDATION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DIGEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DIGEST" AFTER INSERT OR UPDATE OR DELETE ON DIGEST /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 72;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DIGEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DIGESTSIGN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DIGESTSIGN" AFTER INSERT OR UPDATE OR DELETE ON DIGESTSIGN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 73;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DIGESTSIGN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DISPSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DISPSTATUS" AFTER INSERT OR UPDATE OR DELETE ON DISPSTATUS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 17;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DISPSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCACTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCACTION" AFTER INSERT OR UPDATE OR DELETE ON DOCACTION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 22;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCACTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCATTACH" AFTER INSERT OR UPDATE OR DELETE ON DOCATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 49;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCATTACHEX" AFTER INSERT OR UPDATE OR DELETE ON DOCATTACHEX /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 2;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCCATEGORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCCATEGORY" AFTER INSERT OR UPDATE OR DELETE ON DOCCATEGORY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 67;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCCATEGORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCCLASS_DISPSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCCLASS_DISPSTATUS" AFTER INSERT OR UPDATE OR DELETE ON DOCCLASS_DISPSTATUS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 55;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCCLASS_DISPSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCCOMMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCCOMMENT" AFTER INSERT OR UPDATE OR DELETE ON DOCCOMMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 53;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCCOMMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCCUSTOMFIELDS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCCUSTOMFIELDS" AFTER INSERT OR UPDATE OR DELETE ON DOCCUSTOMFIELDS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 54;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCCUSTOMFIELDS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCDIGESTRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCDIGESTRULE" AFTER INSERT OR UPDATE OR DELETE ON DOCDIGESTRULE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 78;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCDIGESTRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCEVENT" AFTER INSERT OR UPDATE OR DELETE ON DOCEVENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 20;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCEVERRLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCEVERRLOG" AFTER INSERT OR UPDATE OR DELETE ON DOCEVERRLOG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 101;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCEVERRLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCEXCHANGESCHEME
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCEXCHANGESCHEME" AFTER INSERT OR UPDATE OR DELETE ON DOCEXCHANGESCHEME /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 63;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCEXCHANGESCHEME" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCFLAGCATEGORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCFLAGCATEGORY" AFTER INSERT OR UPDATE OR DELETE ON DOCFLAGCATEGORY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 119;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCFLAGCATEGORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCFLAGTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCFLAGTYPE" AFTER INSERT OR UPDATE OR DELETE ON DOCFLAGTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 120;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCFLAGTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCGROUP" AFTER INSERT OR UPDATE OR DELETE ON DOCGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 24;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCREQ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCREQ" AFTER INSERT OR UPDATE OR DELETE ON DOCREQ /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 247;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCRETENTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCRETENTION" AFTER INSERT OR UPDATE OR DELETE ON DOCRETENTION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 68;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCRETENTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCRETENTIONSTATITEMS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCRETENTIONSTATITEMS" AFTER INSERT OR UPDATE OR DELETE ON DOCRETENTIONSTATITEMS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 91;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCRETENTIONSTATITEMS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCRETENTIONSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCRETENTIONSTATUS" AFTER INSERT OR UPDATE OR DELETE ON DOCRETENTIONSTATUS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 90;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCRETENTIONSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCSTATUS" AFTER INSERT OR UPDATE OR DELETE ON DOCSTATUS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 19;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCUMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCUMENT" AFTER INSERT OR UPDATE OR DELETE ON DOCUMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 23;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, old.DOCUMENTCLASS_ID, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, new.DOCUMENTCLASS_ID, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)and (new.DOCUMENTCLASS_ID=old.DOCUMENTCLASS_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, old.DOCUMENTCLASS_ID, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCUMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCUMENTCLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCUMENTCLASS" AFTER INSERT OR UPDATE OR DELETE ON DOCUMENTCLASS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 18;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCUMENTCLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOCUMENTREPORTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOCUMENTREPORTS" AFTER INSERT OR UPDATE OR DELETE ON DOCUMENTREPORTS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 58;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOCUMENTREPORTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$DOMEN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$DOMEN" AFTER INSERT OR UPDATE OR DELETE ON DOMEN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 108;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$DOMEN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$EQUALITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$EQUALITY" AFTER INSERT OR UPDATE OR DELETE ON EQUALITY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 218;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$EQUALITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$EQUALITYCODES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$EQUALITYCODES" AFTER INSERT OR UPDATE OR DELETE ON EQUALITYCODES /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 219;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$EQUALITYCODES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ESCHECKRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ESCHECKRULE" AFTER INSERT OR UPDATE OR DELETE ON ESCHECKRULE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 79;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ESCHECKRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ESTIMATE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ESTIMATE" AFTER INSERT OR UPDATE OR DELETE ON ESTIMATE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 115;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ESTIMATE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ETP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ETP" AFTER INSERT OR UPDATE OR DELETE ON ETP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 194;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ETP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ETPATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ETPATTACH" AFTER INSERT OR UPDATE OR DELETE ON ETPATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 197;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ETPATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ETPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ETPTYPE" AFTER INSERT OR UPDATE OR DELETE ON ETPTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 193;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ETPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FACTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FACTDOC" AFTER INSERT OR UPDATE OR DELETE ON FACTDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 226;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FACTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FACTDOCTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FACTDOCTYPE" AFTER INSERT OR UPDATE OR DELETE ON FACTDOCTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 225;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FACTDOCTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FETCHMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FETCHMODE" AFTER INSERT OR UPDATE OR DELETE ON FETCHMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 303;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FETCHMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FGROUP" AFTER INSERT OR UPDATE OR DELETE ON FGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 70;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FGROUPATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FGROUPATTACH" AFTER INSERT OR UPDATE OR DELETE ON FGROUPATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 71;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FGROUPATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FGROUPHEADER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FGROUPHEADER" AFTER INSERT OR UPDATE OR DELETE ON FGROUPHEADER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 69;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FGROUPHEADER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FINSRC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FINSRC" AFTER INSERT OR UPDATE OR DELETE ON FINSRC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 117;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FINSRC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FINSRCSATISFY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FINSRCSATISFY" AFTER INSERT OR UPDATE OR DELETE ON FINSRCSATISFY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 341;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FINSRCSATISFY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FORMATCONVERTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FORMATCONVERTER" AFTER INSERT OR UPDATE OR DELETE ON FORMATCONVERTER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 382;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FORMATCONVERTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FUNCAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FUNCAT" AFTER INSERT OR UPDATE OR DELETE ON FUNCAT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 47;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FUNCAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$FUNUNIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$FUNUNIT" AFTER INSERT OR UPDATE OR DELETE ON FUNUNIT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 5;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$FUNUNIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GCREGISTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GCREGISTER" AFTER INSERT OR UPDATE OR DELETE ON GCREGISTER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 118;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GCREGISTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODS" AFTER INSERT OR UPDATE OR DELETE ON GOODS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 137;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSBAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSBAN" AFTER INSERT OR UPDATE OR DELETE ON GOODSBAN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 384;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSBAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSBANGOODSOKPD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSBANGOODSOKPD" AFTER INSERT OR UPDATE OR DELETE ON GOODSBANGOODSOKPD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 386;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSBANGOODSOKPD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSBANPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSBANPURCHASEMODE" AFTER INSERT OR UPDATE OR DELETE ON GOODSBANPURCHASEMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 385;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSBANPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSBRANCH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSBRANCH" AFTER INSERT OR UPDATE OR DELETE ON GOODSBRANCH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 195;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSBRANCH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSGROUP" AFTER INSERT OR UPDATE OR DELETE ON GOODSGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 135;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSGROUPDOCDETAIL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSGROUPDOCDETAIL" AFTER INSERT OR UPDATE OR DELETE ON GOODSGROUPDOCDETAIL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 140;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSGROUPDOCDETAIL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSGROUPPURCHASEMODE" AFTER INSERT OR UPDATE OR DELETE ON GOODSGROUPPURCHASEMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 162;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSGROUPPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKDP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKDP" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKDP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 133;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKDP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKDPCOUNTRYPREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKDPCOUNTRYPREF" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKDPCOUNTRYPREF /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 168;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKDPCOUNTRYPREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKDPPURCHASEMODE" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKDPPURCHASEMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 167;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKDPPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKPD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKPD" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKPD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 134;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKPD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKPDCOUNTRYPREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKPDCOUNTRYPREF" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKPDCOUNTRYPREF /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 170;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKPDCOUNTRYPREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKPDPURCHASEMODE" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKPDPURCHASEMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 169;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKPDPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSOKVED
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSOKVED" AFTER INSERT OR UPDATE OR DELETE ON GOODSOKVED /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 132;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSOKVED" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GOODSPRICE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GOODSPRICE" AFTER INSERT OR UPDATE OR DELETE ON GOODSPRICE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 138;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GOODSPRICE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GRANTINVESTMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GRANTINVESTMENT" AFTER INSERT OR UPDATE OR DELETE ON GRANTINVESTMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 128;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GRANTINVESTMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$GROUPPROP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$GROUPPROP" AFTER INSERT OR UPDATE OR DELETE ON GROUPPROP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 136;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$GROUPPROP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$HISTORYMODIFY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$HISTORYMODIFY" AFTER INSERT OR UPDATE OR DELETE ON HISTORYMODIFY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 102;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$HISTORYMODIFY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$INDUSTRYCODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$INDUSTRYCODE" AFTER INSERT OR UPDATE OR DELETE ON INDUSTRYCODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 127;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$INDUSTRYCODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$INSTITUTIONLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$INSTITUTIONLINE" AFTER INSERT OR UPDATE OR DELETE ON INSTITUTIONLINE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 129;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$INSTITUTIONLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$INTERBUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$INTERBUDGET" AFTER INSERT OR UPDATE OR DELETE ON INTERBUDGET /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 112;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$INTERBUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$INVOICEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$INVOICEDOC" AFTER INSERT OR UPDATE OR DELETE ON INVOICEDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 184;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$INVOICEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$JAVACLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$JAVACLASS" AFTER INSERT OR UPDATE OR DELETE ON JAVACLASS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 25;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$JAVACLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$KBKLINEFIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$KBKLINEFIT" AFTER INSERT OR UPDATE OR DELETE ON KBKLINEFIT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 126;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$KBKLINEFIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$KLADR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$KLADR" AFTER INSERT OR UPDATE OR DELETE ON KLADR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 387;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$KLADR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$KLADRSTREET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$KLADRSTREET" AFTER INSERT OR UPDATE OR DELETE ON KLADRSTREET /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 388;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$KLADRSTREET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LEDGER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LEDGER" AFTER INSERT OR UPDATE OR DELETE ON LEDGER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 217;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LEDGER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LIABILITYCREDENTIAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LIABILITYCREDENTIAL" AFTER INSERT OR UPDATE OR DELETE ON LIABILITYCREDENTIAL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 123;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LIABILITYCREDENTIAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LIABILITYEXPENSE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LIABILITYEXPENSE" AFTER INSERT OR UPDATE OR DELETE ON LIABILITYEXPENSE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 124;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LIABILITYEXPENSE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LIABILITYEXPENSE_DOCLINES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LIABILITYEXPENSE_DOCLINES" AFTER INSERT OR UPDATE OR DELETE ON LIABILITYEXPENSE_DOCLINES /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 125;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LIABILITYEXPENSE_DOCLINES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LIABILITYGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LIABILITYGROUP" AFTER INSERT OR UPDATE OR DELETE ON LIABILITYGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 122;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LIABILITYGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$LICTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$LICTYPE" AFTER INSERT OR UPDATE OR DELETE ON LICTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 34;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$LICTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MAIL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MAIL" AFTER INSERT OR UPDATE OR DELETE ON MAIL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 65;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MAIL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MAILATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MAILATTACH" AFTER INSERT OR UPDATE OR DELETE ON MAILATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 66;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MAILATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MAILRECEIVERGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MAILRECEIVERGROUP" AFTER INSERT OR UPDATE OR DELETE ON MAILRECEIVERGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 309;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MAILRECEIVERGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MAILRECEIVERGROUP_RECEIVER" AFTER INSERT OR UPDATE OR DELETE ON MAILRECEIVERGROUP_RECEIVER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 310;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MAILRECEIVERGROUP_RECEIVER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MENU
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MENU" AFTER INSERT OR UPDATE OR DELETE ON MENU /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 40;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MENU" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MENUITEM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MENUITEM" AFTER INSERT OR UPDATE OR DELETE ON MENUITEM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 41;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.MENU_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.MENU_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.MENU_ID=old.MENU_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.MENU_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MENUITEM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MENUITEMWEB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MENUITEMWEB" AFTER INSERT OR UPDATE OR DELETE ON MENUITEMWEB /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 110;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.MENU_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.MENU_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.MENU_ID=old.MENU_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.MENU_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MENUITEMWEB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$METACONSTRAINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$METACONSTRAINT" AFTER INSERT OR UPDATE OR DELETE ON METACONSTRAINT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 92;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$METACONSTRAINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$METAOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$METAOBJECT" AFTER INSERT OR UPDATE OR DELETE ON METAOBJECT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 93;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$METAOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MSG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MSG" AFTER INSERT OR UPDATE OR DELETE ON MSG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 29;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MSG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MSGLINKTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MSGLINKTYPE" AFTER INSERT OR UPDATE OR DELETE ON MSGLINKTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 27;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MSGLINKTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MSGQUEUE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MSGQUEUE" AFTER INSERT OR UPDATE OR DELETE ON MSGQUEUE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 30;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MSGQUEUE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$MSGSITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$MSGSITE" AFTER INSERT OR UPDATE OR DELETE ON MSGSITE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 28;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$MSGSITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NECESSITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NECESSITY" AFTER INSERT OR UPDATE OR DELETE ON NECESSITY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 183;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NECESSITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTICEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTICEDOC" AFTER INSERT OR UPDATE OR DELETE ON NOTICEDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 239;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTICEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTICEEMAILORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTICEEMAILORG" AFTER INSERT OR UPDATE OR DELETE ON NOTICEEMAILORG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 240;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTICEEMAILORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTIFYMSG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTIFYMSG" AFTER INSERT OR UPDATE OR DELETE ON NOTIFYMSG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 106;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTIFYMSG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTIFYMSGEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTIFYMSGEVENT" AFTER INSERT OR UPDATE OR DELETE ON NOTIFYMSGEVENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 105;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTIFYMSGEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTIFYMSGGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTIFYMSGGROUP" AFTER INSERT OR UPDATE OR DELETE ON NOTIFYMSGGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 104;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTIFYMSGGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NOTIFYMSGRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NOTIFYMSGRULE" AFTER INSERT OR UPDATE OR DELETE ON NOTIFYMSGRULE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 107;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NOTIFYMSGRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NUMGENERATOR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NUMGENERATOR" AFTER INSERT OR UPDATE OR DELETE ON NUMGENERATOR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 15;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NUMGENERATOR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NUMPREFIX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NUMPREFIX" AFTER INSERT OR UPDATE OR DELETE ON NUMPREFIX /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 88;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NUMPREFIX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$NUMSEQUENCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$NUMSEQUENCE" AFTER INSERT OR UPDATE OR DELETE ON NUMSEQUENCE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 14;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$NUMSEQUENCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OFFERDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OFFERDOC" AFTER INSERT OR UPDATE OR DELETE ON OFFERDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 224;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OFFERDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OFRREQREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OFRREQREASON" AFTER INSERT OR UPDATE OR DELETE ON OFRREQREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 157;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OFRREQREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OFRRETREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OFRRETREASON" AFTER INSERT OR UPDATE OR DELETE ON OFRRETREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 223;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OFRRETREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OIDREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OIDREF" AFTER INSERT OR UPDATE OR DELETE ON OIDREF /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 77;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OIDREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OKTMO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OKTMO" AFTER INSERT OR UPDATE OR DELETE ON OKTMO /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 383;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OKTMO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OLAPQUERY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OLAPQUERY" AFTER INSERT OR UPDATE OR DELETE ON OLAPQUERY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 269;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OLAPQUERY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OOSORGROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OOSORGROLE" AFTER INSERT OR UPDATE OR DELETE ON OOSORGROLE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 151;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OOSORGROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OOS223PURCHASENOTICEINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OOS223PURCHASENOTICEINFO" AFTER INSERT OR UPDATE OR DELETE ON OOS223PURCHASENOTICEINFO /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 389;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OOS223PURCHASENOTICEINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OOS223PURCHNOTICELOTINFO" AFTER INSERT OR UPDATE OR DELETE ON OOS223PURCHNOTICELOTINFO /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 390;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OOS223PURCHNOTICELOTINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$OPERTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$OPERTYPE" AFTER INSERT OR UPDATE OR DELETE ON OPERTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 16;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$OPERTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORDERDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORDERDOC" AFTER INSERT OR UPDATE OR DELETE ON ORDERDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 171;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, old.DOCUMENTCLASS_ID, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, new.DOCUMENTCLASS_ID, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)and (new.DOCUMENTCLASS_ID=old.DOCUMENTCLASS_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, old.DOCUMENTCLASS_ID, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORDERDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORDERSUMMARY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORDERSUMMARY" AFTER INSERT OR UPDATE OR DELETE ON ORDERSUMMARY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 173;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORDERSUMMARY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORG" AFTER INSERT OR UPDATE OR DELETE ON ORG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 33;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.ISCONTRACTOR, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.ISCONTRACTOR, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.ISCONTRACTOR=old.ISCONTRACTOR)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.ISCONTRACTOR, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGACCOUNT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGACCOUNT" AFTER INSERT OR UPDATE OR DELETE ON ORGACCOUNT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 38;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.ISCONTRACTOR, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.ISCONTRACTOR, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.ISCONTRACTOR=old.ISCONTRACTOR)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.ISCONTRACTOR, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGACCOUNT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGACCTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGACCTYPE" AFTER INSERT OR UPDATE OR DELETE ON ORGACCTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 37;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGACCTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGADDKPP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGADDKPP" AFTER INSERT OR UPDATE OR DELETE ON ORGADDKPP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 391;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGADDKPP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGCONCCONT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGCONCCONT" AFTER INSERT OR UPDATE OR DELETE ON ORGCONCCONT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 152;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGCONCCONT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGETP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGETP" AFTER INSERT OR UPDATE OR DELETE ON ORGETP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 196;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGETP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGFORM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGFORM" AFTER INSERT OR UPDATE OR DELETE ON ORGFORM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 150;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGFORM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGOOS223FZUSER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGOOS223FZUSER" AFTER INSERT OR UPDATE OR DELETE ON ORGOOS223FZUSER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 321;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGOOS223FZUSER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGROLE" AFTER INSERT OR UPDATE OR DELETE ON ORGROLE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 35;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGSTATUS" AFTER INSERT OR UPDATE OR DELETE ON ORGSTATUS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 143;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ORGUNFAIR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ORGUNFAIR" AFTER INSERT OR UPDATE OR DELETE ON ORGUNFAIR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 144;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ORGUNFAIR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PACKTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PACKTYPE" AFTER INSERT OR UPDATE OR DELETE ON PACKTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 139;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PACKTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PANEL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PANEL" AFTER INSERT OR UPDATE OR DELETE ON PANEL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 61;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PANEL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PANELITEM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PANELITEM" AFTER INSERT OR UPDATE OR DELETE ON PANELITEM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 62;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.PANEL_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.PANEL_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.PANEL_ID=old.PANEL_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.PANEL_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PANELITEM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PAYCONDITION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PAYCONDITION" AFTER INSERT OR UPDATE OR DELETE ON PAYCONDITION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 182;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PAYCONDITION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PERSON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PERSON" AFTER INSERT OR UPDATE OR DELETE ON PERSON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 103;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PERSON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PERSONAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PERSONAL" AFTER INSERT OR UPDATE OR DELETE ON PERSONAL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 242;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PERSONAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLACEMENTFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLACEMENTFEATURE" AFTER INSERT OR UPDATE OR DELETE ON PLACEMENTFEATURE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 163;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLACEMENTFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLACEMENTFEATUREPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLACEMENTFEATUREPM" AFTER INSERT OR UPDATE OR DELETE ON PLACEMENTFEATUREPM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 164;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLACEMENTFEATUREPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLACINGWAY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLACINGWAY" AFTER INSERT OR UPDATE OR DELETE ON PLACINGWAY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 160;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLACINGWAY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLANDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLANDOC" AFTER INSERT OR UPDATE OR DELETE ON PLANDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 235;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLANDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLANPOSITIONCHANGEREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLANPOSITIONCHANGEREASON" AFTER INSERT OR UPDATE OR DELETE ON PLANPOSITIONCHANGEREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 199;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLANPOSITIONCHANGEREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2ARRANGEMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2ARRANGEMENT" AFTER INSERT OR UPDATE OR DELETE ON PLAN2ARRANGEMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 202;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2ARRANGEMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2CHANGEREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2CHANGEREASON" AFTER INSERT OR UPDATE OR DELETE ON PLAN2CHANGEREASON /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 212;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2CHANGEREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2DOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2DOC" AFTER INSERT OR UPDATE OR DELETE ON PLAN2DOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 200;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2DOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2GOODS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2GOODS" AFTER INSERT OR UPDATE OR DELETE ON PLAN2GOODS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 201;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2GOODS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2LEDGER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2LEDGER" AFTER INSERT OR UPDATE OR DELETE ON PLAN2LEDGER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 204;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2LEDGER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSEXTNUMBER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSEXTNUMBER" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSEXTNUMBER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 211;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSEXTNUMBER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSFEATURE" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSFEATURE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 210;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSKBK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSKBK" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSKBK /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 207;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSKBK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSKBKYEAR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSKBKYEAR" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSKBKYEAR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 208;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSKBKYEAR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSOKVED
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSOKVED" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSOKVED /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 206;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSOKVED" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSPOSITION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSPOSITION" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSPOSITION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 205;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSPOSITION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN2OOSPRODUCT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN2OOSPRODUCT" AFTER INSERT OR UPDATE OR DELETE ON PLAN2OOSPRODUCT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 209;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN2OOSPRODUCT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN3DOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN3DOC" AFTER INSERT OR UPDATE OR DELETE ON PLAN3DOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 252;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN3DOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PLAN3PURCHASEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PLAN3PURCHASEDOC" AFTER INSERT OR UPDATE OR DELETE ON PLAN3PURCHASEDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 251;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PLAN3PURCHASEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PREFERENCEGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PREFERENCEGROUP" AFTER INSERT OR UPDATE OR DELETE ON PREFERENCEGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 165;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PREFERENCEGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PREFERENCEGROUPFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PREFERENCEGROUPFEATURE" AFTER INSERT OR UPDATE OR DELETE ON PREFERENCEGROUPFEATURE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 166;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PREFERENCEGROUPFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PROCTREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PROCTREE" AFTER INSERT OR UPDATE OR DELETE ON PROCTREE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 26;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PROCTREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PROCUREMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PROCUREMENT" AFTER INSERT OR UPDATE OR DELETE ON PROCUREMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 401;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PROCUREMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PROPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PROPTYPE" AFTER INSERT OR UPDATE OR DELETE ON PROPTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 131;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PROPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PURCHASECARRY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PURCHASECARRY" AFTER INSERT OR UPDATE OR DELETE ON PURCHASECARRY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 237;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PURCHASECARRY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PURCHASEMETHOD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PURCHASEMETHOD" AFTER INSERT OR UPDATE OR DELETE ON PURCHASEMETHOD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 361;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PURCHASEMETHOD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PURCHASEMODE" AFTER INSERT OR UPDATE OR DELETE ON PURCHASEMODE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 159;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PURCHASEPLAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PURCHASEPLAN" AFTER INSERT OR UPDATE OR DELETE ON PURCHASEPLAN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 236;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PURCHASEPLAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$PURCHASEPLANDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$PURCHASEPLANDOC" AFTER INSERT OR UPDATE OR DELETE ON PURCHASEPLANDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 234;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$PURCHASEPLANDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$QUALREQ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$QUALREQ" AFTER INSERT OR UPDATE OR DELETE ON QUALREQ /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 246;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$QUALREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RECOILDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RECOILDOC" AFTER INSERT OR UPDATE OR DELETE ON RECOILDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 238;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RECOILDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REFATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REFATTACH" AFTER INSERT OR UPDATE OR DELETE ON REFATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 253;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REFATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REFERENCECLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REFERENCECLASS" AFTER INSERT OR UPDATE OR DELETE ON REFERENCECLASS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 48;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REFERENCECLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REFINANCINGRATE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REFINANCINGRATE" AFTER INSERT OR UPDATE OR DELETE ON REFINANCINGRATE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 216;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REFINANCINGRATE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REFUSALFACTFOUNDATION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REFUSALFACTFOUNDATION" AFTER INSERT OR UPDATE OR DELETE ON REFUSALFACTFOUNDATION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 181;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REFUSALFACTFOUNDATION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPDOCUMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPDOCUMENT" AFTER INSERT OR UPDATE OR DELETE ON REPDOCUMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 187;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPDOCUMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPFIELD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPFIELD" AFTER INSERT OR UPDATE OR DELETE ON REPFIELD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 57;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPFIELD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPFORM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPFORM" AFTER INSERT OR UPDATE OR DELETE ON REPFORM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 56;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPFORM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPFRAGMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPFRAGMENT" AFTER INSERT OR UPDATE OR DELETE ON REPFRAGMENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 186;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPFRAGMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPFRAGMENTCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPFRAGMENTCHILD" AFTER INSERT OR UPDATE OR DELETE ON REPFRAGMENTCHILD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 188;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPFRAGMENTCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPORT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPORT" AFTER INSERT OR UPDATE OR DELETE ON REPORT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 86;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPORT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPPROFILE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPPROFILE" AFTER INSERT OR UPDATE OR DELETE ON REPPROFILE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 64;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPPROFILE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPSOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPSOURCE" AFTER INSERT OR UPDATE OR DELETE ON REPSOURCE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 185;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPSOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REPTEMPLATEATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REPTEMPLATEATTACH" AFTER INSERT OR UPDATE OR DELETE ON REPTEMPLATEATTACH /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 189;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REPTEMPLATEATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REQUESTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REQUESTDOC" AFTER INSERT OR UPDATE OR DELETE ON REQUESTDOC /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 161;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.BUDGET_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.BUDGET_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.BUDGET_ID=old.BUDGET_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.BUDGET_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REQUESTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REQUIREMENTTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REQUIREMENTTYPE" AFTER INSERT OR UPDATE OR DELETE ON REQUIREMENTTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 306;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REQUIREMENTTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$REQUIREMENTTYPEPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$REQUIREMENTTYPEPM" AFTER INSERT OR UPDATE OR DELETE ON REQUIREMENTTYPEPM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 307;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$REQUIREMENTTYPEPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RESERVEDBUDGETLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RESERVEDBUDGETLINE" AFTER INSERT OR UPDATE OR DELETE ON RESERVEDBUDGETLINE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 172;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RESERVEDBUDGETLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RESPONSIBILITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RESPONSIBILITY" AFTER INSERT OR UPDATE OR DELETE ON RESPONSIBILITY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 245;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RESPONSIBILITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RNP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RNP" AFTER INSERT OR UPDATE OR DELETE ON RNP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 153;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RNP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$ROLEREGISTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$ROLEREGISTER" AFTER INSERT OR UPDATE OR DELETE ON ROLEREGISTER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 89;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$ROLEREGISTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPL" AFTER INSERT OR UPDATE OR DELETE ON RPL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 308;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPLOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPLOBJECT" AFTER INSERT OR UPDATE OR DELETE ON RPLOBJECT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 32;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPLOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPLRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPLRULE" AFTER INSERT OR UPDATE OR DELETE ON RPLRULE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 3;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPLRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPLSITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPLSITE" AFTER INSERT OR UPDATE OR DELETE ON RPLSITE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 4;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPLSITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPLTABLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPLTABLE" AFTER INSERT OR UPDATE OR DELETE ON RPLTABLE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 31;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPLTABLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RPLTABLEPLUGIN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RPLTABLEPLUGIN" AFTER INSERT OR UPDATE OR DELETE ON RPLTABLEPLUGIN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 1;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RPLTABLEPLUGIN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RULEREQUISITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RULEREQUISITE" AFTER INSERT OR UPDATE OR DELETE ON RULEREQUISITE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 109;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RULEREQUISITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$RULESCRIPT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$RULESCRIPT" AFTER INSERT OR UPDATE OR DELETE ON RULESCRIPT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 111;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$RULESCRIPT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SCHEXPDOCS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SCHEXPDOCS" AFTER INSERT OR UPDATE OR DELETE ON SCHEXPDOCS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 76;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SCHEXPDOCS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SCHPLAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SCHPLAN" AFTER INSERT OR UPDATE OR DELETE ON SCHPLAN /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 51;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SCHPLAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SCHTASK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SCHTASK" AFTER INSERT OR UPDATE OR DELETE ON SCHTASK /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 50;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SCHTASK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SERVERACTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SERVERACTION" AFTER INSERT OR UPDATE OR DELETE ON SERVERACTION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 11;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SERVERACTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SERVERERROR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SERVERERROR" AFTER INSERT OR UPDATE OR DELETE ON SERVERERROR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 12;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SERVERERROR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SERVERPROCESSOR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SERVERPROCESSOR" AFTER INSERT OR UPDATE OR DELETE ON SERVERPROCESSOR /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 10;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SERVERPROCESSOR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SERVERPROVIDER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SERVERPROVIDER" AFTER INSERT OR UPDATE OR DELETE ON SERVERPROVIDER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 9;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SERVERPROVIDER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SIGNEXPORTLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SIGNEXPORTLOG" AFTER INSERT OR UPDATE OR DELETE ON SIGNEXPORTLOG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 75;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SIGNEXPORTLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SIGNFORMAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SIGNFORMAT" AFTER INSERT OR UPDATE OR DELETE ON SIGNFORMAT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 260;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SIGNFORMAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SIGNTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SIGNTYPE" AFTER INSERT OR UPDATE OR DELETE ON SIGNTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 261;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SIGNTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$STATISTICSSOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$STATISTICSSOURCE" AFTER INSERT OR UPDATE OR DELETE ON STATISTICSSOURCE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 190;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$STATISTICSSOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$STOREDDOCUMENTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$STOREDDOCUMENTS" AFTER INSERT OR UPDATE OR DELETE ON STOREDDOCUMENTS /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 227;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$STOREDDOCUMENTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SUPPORTCRYPTOLIB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SUPPORTCRYPTOLIB" AFTER INSERT OR UPDATE OR DELETE ON SUPPORTCRYPTOLIB /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 262;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SUPPORTCRYPTOLIB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SUPPORTCRYPTOLIBFORMAT" AFTER INSERT OR UPDATE OR DELETE ON SUPPORTCRYPTOLIBFORMAT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 264;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SUPPORTCRYPTOLIBFORMAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SUPPORTCRYPTOLIBPARAM" AFTER INSERT OR UPDATE OR DELETE ON SUPPORTCRYPTOLIBPARAM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 263;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SUPPORTCRYPTOLIBPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SYSEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SYSEVENT" AFTER INSERT OR UPDATE OR DELETE ON SYSEVENT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 84;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SYSEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SYSPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SYSPARAM" AFTER INSERT OR UPDATE OR DELETE ON SYSPARAM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 8;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SYSPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SYSRIGHT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SYSRIGHT" AFTER INSERT OR UPDATE OR DELETE ON SYSRIGHT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 46;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SYSRIGHT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$SYSUSER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$SYSUSER" AFTER INSERT OR UPDATE OR DELETE ON SYSUSER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 7;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$SYSUSER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TASKJOURNAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TASKJOURNAL" AFTER INSERT OR UPDATE OR DELETE ON TASKJOURNAL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 44;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TASKJOURNAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDER" AFTER INSERT OR UPDATE OR DELETE ON TENDER /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 231;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDERCRITERION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDERCRITERION" AFTER INSERT OR UPDATE OR DELETE ON TENDERCRITERION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 228;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDERCRITERION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDERCRITERIONCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDERCRITERIONCHILD" AFTER INSERT OR UPDATE OR DELETE ON TENDERCRITERIONCHILD /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 230;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDERCRITERIONCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDERCRITERIONPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDERCRITERIONPM" AFTER INSERT OR UPDATE OR DELETE ON TENDERCRITERIONPM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 229;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDERCRITERIONPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDERLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDERLINE" AFTER INSERT OR UPDATE OR DELETE ON TENDERLINE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 232;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDERLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TENDERLINECOMM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TENDERLINECOMM" AFTER INSERT OR UPDATE OR DELETE ON TENDERLINECOMM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 233;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TENDERLINECOMM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TERRITORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TERRITORY" AFTER INSERT OR UPDATE OR DELETE ON TERRITORY /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 147;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TERRITORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TERTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TERTYPE" AFTER INSERT OR UPDATE OR DELETE ON TERTYPE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 146;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TERTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TYPEDOCREQGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TYPEDOCREQGROUP" AFTER INSERT OR UPDATE OR DELETE ON TYPEDOCREQGROUP /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 248;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TYPEDOCREQGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$TYPEREQCRIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$TYPEREQCRIT" AFTER INSERT OR UPDATE OR DELETE ON TYPEREQCRIT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 249;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$TYPEREQCRIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$UNIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$UNIT" AFTER INSERT OR UPDATE OR DELETE ON UNIT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 130;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$UNIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$UPDPACKAGE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$UPDPACKAGE" AFTER INSERT OR UPDATE OR DELETE ON UPDPACKAGE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 85;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$UPDPACKAGE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USERBUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USERBUDGET" AFTER INSERT OR UPDATE OR DELETE ON USERBUDGET /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 81;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USERBUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USERCERT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USERCERT" AFTER INSERT OR UPDATE OR DELETE ON USERCERT /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 74;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, old.SYSUSER_ID, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, new.SYSUSER_ID, 0, 0, 0, 0);    if ((updating and not(1=1 and (new.SYSUSER_ID=old.SYSUSER_ID)))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, old.SYSUSER_ID, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USERCERT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USERORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USERORG" AFTER INSERT OR UPDATE OR DELETE ON USERORG /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 6;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USERORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USERROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USERROLE" AFTER INSERT OR UPDATE OR DELETE ON USERROLE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 45;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USERROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USERSESSION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USERSESSION" AFTER INSERT OR UPDATE OR DELETE ON USERSESSION /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 42;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USERSESSION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USESCRYPTOLIB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USESCRYPTOLIB" AFTER INSERT OR UPDATE OR DELETE ON USESCRYPTOLIB /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 265;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USESCRYPTOLIB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$USESCRYPTOLIBPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$USESCRYPTOLIBPARAM" AFTER INSERT OR UPDATE OR DELETE ON USESCRYPTOLIBPARAM /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 266;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$USESCRYPTOLIBPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$WEBSTATCACHE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$WEBSTATCACHE" AFTER INSERT OR UPDATE OR DELETE ON WEBSTATCACHE /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 191;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$WEBSTATCACHE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger RPL$WEBSTATCACHEVAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "RPL$WEBSTATCACHEVAL" AFTER INSERT OR UPDATE OR DELETE ON WEBSTATCACHEVAL /*REFERENCING NEW AS NEW OLD AS OLD*/  
AS
 DECLARE ltable_id numeric(15); DECLARE mutation_index numeric(18, 4);
  BEGIN   ltable_id = 192;  if ((deleting)) then     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, old.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);  else   begin     insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )       values (:ltable_id, new.ID, current_transaction_id,999999999999999, 0, 0, 0, 0, 0);    if ((updating and not(1=1 ))) then       insert into RPLLOG (rpltable_id, record_id, transaction_id,generation, FIELD1_VALUE, FIELD2_VALUE, FIELD3_VALUE, FIELD4_VALUE, FIELD5_VALUE )         values (:ltable_id, old.ID, current_transaction_id, 999999999999999, 0, 0, 0, 0, 0);   end
  END^

SET TERM ; ^

ALTER TRIGGER "RPL$WEBSTATCACHEVAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_CASC_GOODSPROP_SEQORDER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_CASC_GOODSPROP_SEQORDER" 
  after update on groupprop  
AS

  BEGIN
IF (new.seqorder<>old.seqorder or new.group_id<>old.group_id) THEN
  execute STATEMENT ('update goodsprop set group_id=' || new.group_id
    || ', seqorder=' || new.seqorder
    || ' where group_id=' || old.group_id 
    || ' and seqorder=' || old.seqorder);
  END^

SET TERM ; ^


ALTER TRIGGER "UPD_CASC_GOODSPROP_SEQORDER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_DOCATTACHEX" AFTER UPDATE ON DOCATTACHEX  
AS

 BEGIN
  update document d set d.attach_cnt = d.attach_cnt + 1 
    where d.id=new.document_id;
  update document d set d.attach_cnt = d.attach_cnt - 1 
    where d.id=old.document_id;
 END^

SET TERM ; ^


ALTER TRIGGER "UPD_DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_GOODSGROUP_TREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_GOODSGROUP_TREE" after update
 on goodsgroup /*referencing old as old new as new*/  
AS

 DECLARE vtree varchar(255);
 DECLARE otree varchar(255);
 BEGIN
  vtree = '/';
  begin
    select tree
    from goodsgroup_tree where group_id=new.parent_id
    into :vtree;
  exception
    when no_data_found then
      vtree = '/';
  end
  vtree = :vtree||new.code||'/';
  otree = '/';
  begin
    select tree
    from goodsgroup_tree where group_id=old.parent_id
    into :otree;
  exception
    when no_data_found then
      otree = '/';
  end
  otree = :otree||old.code||'/';
  FOR vr IN ( select group_id, SUBSTRING(tree FROM CHAR_LENGTH(:otree)+1) as tree
   from goodsgroup_tree where tree like :otree||'%')
  DO
  BEGIN
    update goodsgroup_tree set tree = :vtree||vr.tree where group_id = vr.group_id;
  END
 END^

SET TERM ; ^


ALTER TRIGGER "UPD_GOODSGROUP_TREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_ISCONTRACTOR_ORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_ISCONTRACTOR_ORG" 
 after update on Org  
AS

 BEGIN
  update OrgAccount oa set oa.IsContractor=new.IsContractor
    where oa.ORG_ID=new.ID and oa.IsContractor<>new.IsContractor;
 END^

SET TERM ; ^


ALTER TRIGGER "UPD_ISCONTRACTOR_ORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_ORGCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_ORGCHILD" AFTER UPDATE
 ON org  
AS
 
  DECLARE topid numeric(18, 4);
 BEGIN
  IF ((new.parent_id IS NOT NULL)) THEN
    IF ((old.parent_id IS NOT NULL)) THEN
      IF ((new.parent_id <> old.parent_id)) THEN
      BEGIN
        SELECT DISTINCT org_id
        FROM orgchild 
          WHERE org_id NOT IN (SELECT child_id FROM orgchild)
        INTO :topid;  
        DELETE FROM orgchild 
          WHERE org_id IN (SELECT org_id FROM orgchild WHERE child_id = old.parent_id AND org_id <> :topid)
            AND ((child_id = new.id) OR child_id IN (SELECT child_id FROM orgchild WHERE org_id = new.id));
        IF ((new.parent_id = :topid)) THEN
          DELETE FROM orgchild WHERE 
            org_id = old.parent_id AND (child_id = new.id OR child_id IN
              (SELECT child_id FROM orgchild WHERE org_id = new.id));
        ELSE
          IF ((old.parent_id = :topid)) THEN
            INSERT INTO orgchild(org_id, child_id)
              SELECT (SELECT new.parent_id FROM dual), child_id FROM orgchild
              WHERE org_id = old.parent_id AND (child_id = new.id OR child_id IN
                (SELECT child_id FROM orgchild WHERE org_id = new.id));
          ELSE
            UPDATE orgchild SET org_id = new.parent_id WHERE 
              org_id = old.parent_id AND (child_id = new.id OR child_id IN
                (SELECT child_id FROM orgchild WHERE org_id = new.id));
        INSERT INTO orgchild(org_id, child_id)
          SELECT par.org_id, ch.child_id FROM 
           (SELECT org_id FROM orgchild WHERE child_id = new.parent_id AND org_id <> :topid) par,
           (SELECT child_id FROM orgchild WHERE org_id = new.id UNION SELECT new.id FROM dual) ch;
      END
    ELSE
      IF ((new.parent_id <> new.id)) THEN
      BEGIN
        INSERT INTO orgchild(org_id, child_id)
          VALUES(new.parent_id, new.id);
        FOR cur IN (SELECT child_id FROM orgchild
          WHERE org_id = new.id)
        DO
        BEGIN
          INSERT INTO orgchild(org_id, child_id)
            VALUES (new.parent_id, cur.child_id);
        END
        FOR cur IN (SELECT org_id FROM orgchild
                    WHERE child_id = new.parent_id)
        DO
        BEGIN
          INSERT INTO orgchild(org_id, child_id)
            VALUES (cur.org_id, new.id);
          FOR cur1 IN (SELECT child_id FROM orgchild
            WHERE org_id = new.id)
          DO
          BEGIN
            INSERT INTO orgchild(org_id, child_id)
              VALUES (cur.org_id, cur1.child_id);
          END
        END
      END
  ELSE
    IF ((old.parent_id IS NOT NULL)) THEN
      DELETE FROM orgchild WHERE org_id = new.id OR child_id = new.id;
 END^

SET TERM ; ^


ALTER TRIGGER "UPD_ORGCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger UPD_TER_TREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "UPD_TER_TREE" after update
 on territory /*referencing old as old new as new*/  
AS

 DECLARE vtree varchar(255);
 DECLARE vpath varchar(512);
 DECLARE otree varchar(255);
 DECLARE opath varchar(512);
 BEGIN
  vtree = '/';
  begin
    select tree, path
    from ter_tree where ter_id=new.parent_id
    into :vtree, :vpath;
    vpath = :vpath||', '||new.caption;
  exception
    when no_data_found then
      vtree = '/';
      vpath = new.caption;
  end
  vtree = :vtree||new.code||'/';
  otree = '/';
  begin
    select tree, path
    from ter_tree where ter_id=old.parent_id
    into :otree, :opath;
    opath = :opath||', '||old.caption;
  exception
    when no_data_found then
      otree = '/';
      opath = old.caption;
  end
  otree = :otree||old.code||'/';
  FOR vr IN ( select ter_id, SUBSTRING(tree FROM CHAR_LENGTH(:otree)+1) as tree, SUBSTRING(path FROM CHAR_LENGTH(:opath)+1) as path
   from ter_tree where tree like :otree||'%')
  DO
  BEGIN
    update ter_tree set tree = :vtree||vr.tree, path = :vpath||vr.path where ter_id = vr.ter_id;
  END
 END^

SET TERM ; ^


ALTER TRIGGER "UPD_TER_TREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ABANDONEDREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ABANDONEDREASON" before insert or update on ABANDONEDREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ABANDONEDREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ALTGOODSGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ALTGOODSGROUP" before insert or update on ALTGOODSGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ALTGOODSGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ALTGOODSGROUPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ALTGOODSGROUPTYPE" before insert or update on ALTGOODSGROUPTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ALTGOODSGROUPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ANYDATA
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ANYDATA" before insert or update on ANYDATA  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ANYDATA" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_APPMODULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_APPMODULE" before insert or update on APPMODULE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_APPMODULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_APPOBJ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_APPOBJ" before insert or update on APPOBJ  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_APPOBJ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_APPOBJPROP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_APPOBJPROP" before insert or update on APPOBJPROP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_APPOBJPROP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_APPOINTMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_APPOINTMENT" before insert or update on APPOINTMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_APPOINTMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_AUCTIONBID
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_AUCTIONBID" before insert or update on AUCTIONBID  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_AUCTIONBID" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_AUCTIONLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_AUCTIONLOG" before insert or update on AUCTIONLOG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_AUCTIONLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BANK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BANK" before insert or update on BANK  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BANK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BANKGUARANTEEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BANKGUARANTEEDOC" before insert or update on BANKGUARANTEEDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BANKGUARANTEEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BANKGUARANTEEREFDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BANKGUARANTEEREFDOC" before insert or update on BANKGUARANTEEREFDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BANKGUARANTEEREFDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BANKGUARANTEEREFREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BANKGUARANTEEREFREASON" before insert or update on BANKGUARANTEEREFREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BANKGUARANTEEREFREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BUDGCODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BUDGCODE" before insert or update on BUDGCODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BUDGCODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BUDGET" before insert or update on BUDGET  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BUDGETLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BUDGETLINE" before insert or update on BUDGETLINE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BUDGETLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_BUDGETSTAGE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_BUDGETSTAGE" before insert or update on BUDGETSTAGE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_BUDGETSTAGE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CACHELIST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CACHELIST" before insert or update on CACHELIST  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CACHELIST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CAVILDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CAVILDOC" before insert or update on CAVILDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CAVILDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CAVILTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CAVILTYPE" before insert or update on CAVILTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CAVILTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CERTINTERCHANGEREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CERTINTERCHANGEREQUEST" before insert or update on CERTINTERCHANGEREQUEST  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CERTINTERCHANGEREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CERTREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CERTREQUEST" before insert or update on CERTREQUEST  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CERTREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CERTREVOKEREQUEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CERTREVOKEREQUEST" before insert or update on CERTREVOKEREQUEST  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CERTREVOKEREQUEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLAIMDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLAIMDOC" before insert or update on CLAIMDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLAIMDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLAIMPAYFACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLAIMPAYFACT" before insert or update on CLAIMPAYFACT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLAIMPAYFACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLAIMPENALTYCHANGEDOCINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLAIMPENALTYCHANGEDOCINFO" before insert or update on CLAIMPENALTYCHANGEDOCINFO  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLAIMPENALTYCHANGEDOCINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLASSOPER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLASSOPER" before insert or update on CLASSOPER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLASSOPER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLIENTOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLIENTOBJECT" before insert or update on CLIENTOBJECT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLIENTOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLIENTOBJECTCOMMENTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLIENTOBJECTCOMMENTS" before insert or update on CLIENTOBJECTCOMMENTS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLIENTOBJECTCOMMENTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLNDDAY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLNDDAY" before insert or update on CLNDDAY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLNDDAY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLNDDAYTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLNDDAYTYPE" before insert or update on CLNDDAYTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLNDDAYTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CLNDTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CLNDTYPE" before insert or update on CLNDTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CLNDTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CODETYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CODETYPE" before insert or update on CODETYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CODETYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_COMMEMBER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_COMMEMBER" before insert or update on COMMEMBER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_COMMEMBER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_COMMISSION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_COMMISSION" before insert or update on COMMISSION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_COMMISSION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_COMPLAINTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_COMPLAINTDOC" before insert or update on COMPLAINTDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_COMPLAINTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONFCONCLUSIONCONTRACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONFCONCLUSIONCONTRACT" before insert or update on CONFCONCLUSIONCONTRACT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONFCONCLUSIONCONTRACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONPAYFACT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONPAYFACT" before insert or update on CONPAYFACT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONPAYFACT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONSOLIDDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONSOLIDDOC" before insert or update on CONSOLIDDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONSOLIDDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONSTRUCTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONSTRUCTION" before insert or update on CONSTRUCTION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONSTRUCTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTCARDDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTCARDDOC" before insert or update on CONTRACTCARDDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTCARDDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTDOC" before insert or update on CONTRACTDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTEXECDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTEXECDOC" before insert or update on CONTRACTEXECDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTEXECDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTREASON" before insert or update on CONTRACTREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTREASON_DOCLINES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTREASON_DOCLINES" before insert or update on CONTRACTREASON_DOCLINES  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTREASON_DOCLINES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTRACTTEMPLATEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTRACTTEMPLATEDOC" before insert or update on CONTRACTTEMPLATEDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTRACTTEMPLATEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTYPE" before insert or update on CONTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CONTYPEATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CONTYPEATTACH" before insert or update on CONTYPEATTACH  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CONTYPEATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_COUNTRY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_COUNTRY" before insert or update on COUNTRY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_COUNTRY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CRLFILE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CRLFILE" before insert or update on CRLFILE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CRLFILE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CRLPOINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CRLPOINT" before insert or update on CRLPOINT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CRLPOINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CURHISTORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CURHISTORY" before insert or update on CURHISTORY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CURHISTORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_CURRENCY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_CURRENCY" before insert or update on CURRENCY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_CURRENCY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DATAOBJECTCHANGELOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DATAOBJECTCHANGELOG" before insert or update on DATAOBJECTCHANGELOG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DATAOBJECTCHANGELOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DATASOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DATASOURCE" before insert or update on DATASOURCE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DATASOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DBCONNECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DBCONNECT" before insert or update on DBCONNECT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DBCONNECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DBCONSTRAINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DBCONSTRAINT" before insert or update on DBCONSTRAINT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DBCONSTRAINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DECREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DECREASON" before insert or update on DECREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DECREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DELIVERYBASIS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DELIVERYBASIS" before insert or update on DELIVERYBASIS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DELIVERYBASIS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DESCGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DESCGROUP" before insert or update on DESCGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DESCGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DESCRIPTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DESCRIPTION" before insert or update on DESCRIPTION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DESCRIPTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DESCRIPTIONCACHE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DESCRIPTIONCACHE" before insert or update on DESCRIPTIONCACHE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DESCRIPTIONCACHE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DEVIATIONFACTFOUNDATION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DEVIATIONFACTFOUNDATION" before insert or update on DEVIATIONFACTFOUNDATION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DEVIATIONFACTFOUNDATION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DIGEST
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DIGEST" before insert or update on DIGEST  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DIGEST" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DIGESTSIGN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DIGESTSIGN" before insert or update on DIGESTSIGN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DIGESTSIGN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DISPSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DISPSTATUS" before insert or update on DISPSTATUS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DISPSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCACTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCACTION" before insert or update on DOCACTION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCACTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCATTACH" before insert or update on DOCATTACH  
AS

  DECLARE TaskJournalId NUMERIC(15,0);
  DECLARE RecordAction NUMERIC(1,0);
 BEGIN
 if (inserting) then 
 begin 
   if ((new.version is null or (new.version < 1))) then 
     new.version = 1; 
end 
else 
  if ((new.version IS NULL or (new.version <= old.version))) then 
    new.version = coalesce(old.version, 0) + 1; 
  if (inserting) then 
    RecordAction = 0;
  else 
    RecordAction = 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if (:TaskJournalId is not null) then 
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action) 
    values (new.version, dbms_transaction.local_transaction_id, 49, :TaskJournalId, new.id, :RecordAction);
 END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCATTACHEX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCATTACHEX" before insert or update on DOCATTACHEX  
AS

  DECLARE TaskJournalId NUMERIC(15,0);
  DECLARE RecordAction NUMERIC(1,0);
 BEGIN
 if (inserting) then 
 begin 
   if ((new.version is null or (new.version < 1))) then 
     new.version = 1; 
end 
else 
  if ((new.version IS NULL or (new.version <= old.version))) then 
    new.version = coalesce(old.version, 0) + 1; 
  if (inserting) then 
    RecordAction = 0;
  else 
    RecordAction = 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id;
  if (:TaskJournalId is not null) then
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action) 
    values (new.version, dbms_transaction.local_transaction_id, 2, :TaskJournalId, new.id, :RecordAction);
 END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCATTACHEX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCCATEGORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCCATEGORY" before insert or update on DOCCATEGORY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCCATEGORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCCLASS_DISPSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCCLASS_DISPSTATUS" before insert or update on DOCCLASS_DISPSTATUS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCCLASS_DISPSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCCOMMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCCOMMENT" before insert or update on DOCCOMMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCCOMMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCCUSTOMFIELDS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCCUSTOMFIELDS" before insert or update on DOCCUSTOMFIELDS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCCUSTOMFIELDS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCDIGESTRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCDIGESTRULE" before insert or update on DOCDIGESTRULE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCDIGESTRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCEVENT" before insert or update on DOCEVENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCEVERRLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCEVERRLOG" before insert or update on DOCEVERRLOG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCEVERRLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCEXCHANGESCHEME
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCEXCHANGESCHEME" before insert or update on DOCEXCHANGESCHEME  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCEXCHANGESCHEME" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCFLAGCATEGORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCFLAGCATEGORY" before insert or update on DOCFLAGCATEGORY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCFLAGCATEGORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCFLAGTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCFLAGTYPE" before insert or update on DOCFLAGTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCFLAGTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCGROUP" before insert or update on DOCGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCREQ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCREQ" before insert or update on DOCREQ  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCRETENTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCRETENTION" before insert or update on DOCRETENTION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCRETENTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCRETENTIONSTATITEMS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCRETENTIONSTATITEMS" before insert or update on DOCRETENTIONSTATITEMS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCRETENTIONSTATITEMS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCRETENTIONSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCRETENTIONSTATUS" before insert or update on DOCRETENTIONSTATUS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCRETENTIONSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCSTATUS" before insert or update on DOCSTATUS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCUMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCUMENT" before insert or update on DOCUMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCUMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCUMENTCLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCUMENTCLASS" before insert or update on DOCUMENTCLASS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCUMENTCLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOCUMENTREPORTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOCUMENTREPORTS" before insert or update on DOCUMENTREPORTS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOCUMENTREPORTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_DOMEN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_DOMEN" before insert or update on DOMEN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_DOMEN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_EQUALITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_EQUALITY" before insert or update on EQUALITY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_EQUALITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_EQUALITYCODES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_EQUALITYCODES" before insert or update on EQUALITYCODES  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_EQUALITYCODES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ESCHECKRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ESCHECKRULE" before insert or update on ESCHECKRULE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ESCHECKRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ESTIMATE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ESTIMATE" before insert or update on ESTIMATE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ESTIMATE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ETP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ETP" before insert or update on ETP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ETP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ETPATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ETPATTACH" before insert or update on ETPATTACH  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ETPATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ETPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ETPTYPE" before insert or update on ETPTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ETPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FACTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FACTDOC" before insert or update on FACTDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FACTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FACTDOCTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FACTDOCTYPE" before insert or update on FACTDOCTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FACTDOCTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FETCHMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FETCHMODE" before insert or update on FETCHMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FETCHMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FGROUP" before insert or update on FGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FGROUPATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FGROUPATTACH" before insert or update on FGROUPATTACH  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FGROUPATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FGROUPHEADER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FGROUPHEADER" before insert or update on FGROUPHEADER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FGROUPHEADER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FINSRC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FINSRC" before insert or update on FINSRC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FINSRC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FINSRCSATISFY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FINSRCSATISFY" before insert or update on FINSRCSATISFY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FINSRCSATISFY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FORMATCONVERTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FORMATCONVERTER" before insert or update on FORMATCONVERTER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FORMATCONVERTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FUNCAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FUNCAT" before insert or update on FUNCAT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FUNCAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_FUNUNIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_FUNUNIT" before insert or update on FUNUNIT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_FUNUNIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GCREGISTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GCREGISTER" before insert or update on GCREGISTER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GCREGISTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODS" before insert or update on GOODS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSBAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSBAN" before insert or update on GOODSBAN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSBAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSBANGOODSOKPD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSBANGOODSOKPD" before insert or update on GOODSBANGOODSOKPD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSBANGOODSOKPD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSBANPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSBANPURCHASEMODE" before insert or update on GOODSBANPURCHASEMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSBANPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSBRANCH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSBRANCH" before insert or update on GOODSBRANCH  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSBRANCH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSGROUP" before insert or update on GOODSGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSGROUPDOCDETAIL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSGROUPDOCDETAIL" before insert or update on GOODSGROUPDOCDETAIL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSGROUPDOCDETAIL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSGROUPPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSGROUPPURCHASEMODE" before insert or update on GOODSGROUPPURCHASEMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSGROUPPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKDP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKDP" before insert or update on GOODSOKDP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKDP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKDPCOUNTRYPREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKDPCOUNTRYPREF" before insert or update on GOODSOKDPCOUNTRYPREF  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKDPCOUNTRYPREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKDPPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKDPPURCHASEMODE" before insert or update on GOODSOKDPPURCHASEMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKDPPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKPD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKPD" before insert or update on GOODSOKPD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKPD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKPDCOUNTRYPREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKPDCOUNTRYPREF" before insert or update on GOODSOKPDCOUNTRYPREF  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKPDCOUNTRYPREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKPDPURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKPDPURCHASEMODE" before insert or update on GOODSOKPDPURCHASEMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKPDPURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSOKVED
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSOKVED" before insert or update on GOODSOKVED  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSOKVED" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GOODSPRICE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GOODSPRICE" before insert or update on GOODSPRICE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GOODSPRICE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GRANTINVESTMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GRANTINVESTMENT" before insert or update on GRANTINVESTMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GRANTINVESTMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_GROUPPROP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_GROUPPROP" before insert or update on GROUPPROP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_GROUPPROP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_HISTORYMODIFY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_HISTORYMODIFY" before insert or update on HISTORYMODIFY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_HISTORYMODIFY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_INDUSTRYCODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_INDUSTRYCODE" before insert or update on INDUSTRYCODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_INDUSTRYCODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_INSTITUTIONLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_INSTITUTIONLINE" before insert or update on INSTITUTIONLINE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_INSTITUTIONLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_INTERBUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_INTERBUDGET" before insert or update on INTERBUDGET  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_INTERBUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_INVOICEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_INVOICEDOC" before insert or update on INVOICEDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_INVOICEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_JAVACLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_JAVACLASS" before insert or update on JAVACLASS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_JAVACLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_KBKLINEFIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_KBKLINEFIT" before insert or update on KBKLINEFIT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_KBKLINEFIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_KLADR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_KLADR" before insert or update on KLADR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_KLADR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_KLADRSTREET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_KLADRSTREET" before insert or update on KLADRSTREET  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_KLADRSTREET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LEDGER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LEDGER" before insert or update on LEDGER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LEDGER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LIABILITYCREDENTIAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LIABILITYCREDENTIAL" before insert or update on LIABILITYCREDENTIAL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LIABILITYCREDENTIAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LIABILITYEXPENSE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LIABILITYEXPENSE" before insert or update on LIABILITYEXPENSE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LIABILITYEXPENSE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LIABILITYEXPENSE_DOCLINES
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LIABILITYEXPENSE_DOCLINES" before insert or update on LIABILITYEXPENSE_DOCLINES  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LIABILITYEXPENSE_DOCLINES" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LIABILITYGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LIABILITYGROUP" before insert or update on LIABILITYGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LIABILITYGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_LICTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_LICTYPE" before insert or update on LICTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_LICTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MAIL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MAIL" before insert or update on MAIL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MAIL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MAILATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MAILATTACH" before insert or update on MAILATTACH  
AS

  DECLARE TaskJournalId NUMERIC(15,0);
  DECLARE RecordAction NUMERIC(1,0);
 BEGIN
 if (inserting) then 
 begin 
   if ((new.version is null or (new.version < 1))) then 
     new.version = 1; 
end 
else 
  if ((new.version IS NULL or (new.version <= old.version))) then 
    new.version = coalesce(old.version, 0) + 1; 
  if (inserting) then 
    RecordAction = 0; 
  else 
    RecordAction = 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if (:TaskJournalId is not null) then 
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action) 
    values (new.version, dbms_transaction.local_transaction_id, 66, :TaskJournalId, new.id, :RecordAction);
 END^

SET TERM ; ^

ALTER TRIGGER "VER_MAILATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MAILRECEIVERGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MAILRECEIVERGROUP" before insert or update on MAILRECEIVERGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MAILRECEIVERGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MAILRECEIVERGROUP_RECEIVER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MAILRECEIVERGROUP_RECEIVER" before insert or update on MAILRECEIVERGROUP_RECEIVER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MAILRECEIVERGROUP_RECEIVER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MENU
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MENU" before insert or update on MENU  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MENU" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MENUITEM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MENUITEM" before insert or update on MENUITEM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MENUITEM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MENUITEMWEB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MENUITEMWEB" before insert or update on MENUITEMWEB  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MENUITEMWEB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_METACONSTRAINT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_METACONSTRAINT" before insert or update on METACONSTRAINT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_METACONSTRAINT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_METAOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_METAOBJECT" before insert or update on METAOBJECT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_METAOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MSG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MSG" before insert or update on MSG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MSG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MSGLINKTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MSGLINKTYPE" before insert or update on MSGLINKTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MSGLINKTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MSGQUEUE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MSGQUEUE" before insert or update on MSGQUEUE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MSGQUEUE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_MSGSITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_MSGSITE" before insert or update on MSGSITE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_MSGSITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NECESSITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NECESSITY" before insert or update on NECESSITY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NECESSITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTICEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTICEDOC" before insert or update on NOTICEDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTICEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTICEEMAILORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTICEEMAILORG" before insert or update on NOTICEEMAILORG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTICEEMAILORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTIFYMSG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTIFYMSG" before insert or update on NOTIFYMSG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTIFYMSG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTIFYMSGEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTIFYMSGEVENT" before insert or update on NOTIFYMSGEVENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTIFYMSGEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTIFYMSGGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTIFYMSGGROUP" before insert or update on NOTIFYMSGGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTIFYMSGGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NOTIFYMSGRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NOTIFYMSGRULE" before insert or update on NOTIFYMSGRULE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NOTIFYMSGRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NUMGENERATOR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NUMGENERATOR" before insert or update on NUMGENERATOR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NUMGENERATOR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NUMPREFIX
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NUMPREFIX" before insert or update on NUMPREFIX  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NUMPREFIX" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_NUMSEQUENCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_NUMSEQUENCE" before insert or update on NUMSEQUENCE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_NUMSEQUENCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OFFERDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OFFERDOC" before insert or update on OFFERDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OFFERDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OFRREQREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OFRREQREASON" before insert or update on OFRREQREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OFRREQREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OFRRETREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OFRRETREASON" before insert or update on OFRRETREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OFRRETREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OIDREF
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OIDREF" before insert or update on OIDREF  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OIDREF" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OKTMO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OKTMO" before insert or update on OKTMO  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OKTMO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OLAPQUERY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OLAPQUERY" before insert or update on OLAPQUERY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OLAPQUERY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OOSORGROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OOSORGROLE" before insert or update on OOSORGROLE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OOSORGROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OOS223PURCHASENOTICEINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OOS223PURCHASENOTICEINFO" before insert or update on OOS223PURCHASENOTICEINFO  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OOS223PURCHASENOTICEINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OOS223PURCHNOTICELOTINFO
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OOS223PURCHNOTICELOTINFO" before insert or update on OOS223PURCHNOTICELOTINFO  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OOS223PURCHNOTICELOTINFO" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_OPERTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_OPERTYPE" before insert or update on OPERTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_OPERTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORDERDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORDERDOC" before insert or update on ORDERDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORDERDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORDERSUMMARY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORDERSUMMARY" before insert or update on ORDERSUMMARY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORDERSUMMARY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORG" before insert or update on ORG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGACCOUNT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGACCOUNT" before insert or update on ORGACCOUNT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGACCOUNT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGACCTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGACCTYPE" before insert or update on ORGACCTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGACCTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGADDKPP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGADDKPP" before insert or update on ORGADDKPP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGADDKPP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGCONCCONT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGCONCCONT" before insert or update on ORGCONCCONT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGCONCCONT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGETP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGETP" before insert or update on ORGETP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGETP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGFORM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGFORM" before insert or update on ORGFORM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGFORM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGOOS223FZUSER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGOOS223FZUSER" before insert or update on ORGOOS223FZUSER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGOOS223FZUSER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGROLE" before insert or update on ORGROLE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGSTATUS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGSTATUS" before insert or update on ORGSTATUS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGSTATUS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ORGUNFAIR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ORGUNFAIR" before insert or update on ORGUNFAIR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ORGUNFAIR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PACKTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PACKTYPE" before insert or update on PACKTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PACKTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PANEL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PANEL" before insert or update on PANEL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PANEL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PANELITEM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PANELITEM" before insert or update on PANELITEM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PANELITEM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PAYCONDITION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PAYCONDITION" before insert or update on PAYCONDITION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PAYCONDITION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PERSON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PERSON" before insert or update on PERSON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PERSON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PERSONAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PERSONAL" before insert or update on PERSONAL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PERSONAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLACEMENTFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLACEMENTFEATURE" before insert or update on PLACEMENTFEATURE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLACEMENTFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLACEMENTFEATUREPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLACEMENTFEATUREPM" before insert or update on PLACEMENTFEATUREPM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLACEMENTFEATUREPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLACINGWAY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLACINGWAY" before insert or update on PLACINGWAY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLACINGWAY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLANDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLANDOC" before insert or update on PLANDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLANDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLANPOSITIONCHANGEREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLANPOSITIONCHANGEREASON" before insert or update on PLANPOSITIONCHANGEREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLANPOSITIONCHANGEREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2ARRANGEMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2ARRANGEMENT" before insert or update on PLAN2ARRANGEMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2ARRANGEMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2CHANGEREASON
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2CHANGEREASON" before insert or update on PLAN2CHANGEREASON  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2CHANGEREASON" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2DOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2DOC" before insert or update on PLAN2DOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2DOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2GOODS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2GOODS" before insert or update on PLAN2GOODS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2GOODS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2LEDGER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2LEDGER" before insert or update on PLAN2LEDGER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2LEDGER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSEXTNUMBER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSEXTNUMBER" before insert or update on PLAN2OOSEXTNUMBER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSEXTNUMBER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSFEATURE" before insert or update on PLAN2OOSFEATURE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSKBK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSKBK" before insert or update on PLAN2OOSKBK  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSKBK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSKBKYEAR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSKBKYEAR" before insert or update on PLAN2OOSKBKYEAR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSKBKYEAR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSOKVED
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSOKVED" before insert or update on PLAN2OOSOKVED  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSOKVED" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSPOSITION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSPOSITION" before insert or update on PLAN2OOSPOSITION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSPOSITION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN2OOSPRODUCT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN2OOSPRODUCT" before insert or update on PLAN2OOSPRODUCT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN2OOSPRODUCT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN3DOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN3DOC" before insert or update on PLAN3DOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN3DOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PLAN3PURCHASEDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PLAN3PURCHASEDOC" before insert or update on PLAN3PURCHASEDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PLAN3PURCHASEDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PREFERENCEGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PREFERENCEGROUP" before insert or update on PREFERENCEGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PREFERENCEGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PREFERENCEGROUPFEATURE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PREFERENCEGROUPFEATURE" before insert or update on PREFERENCEGROUPFEATURE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PREFERENCEGROUPFEATURE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PROCTREE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PROCTREE" before insert or update on PROCTREE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PROCTREE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PROCUREMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PROCUREMENT" before insert or update on PROCUREMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PROCUREMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PROPTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PROPTYPE" before insert or update on PROPTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PROPTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PURCHASECARRY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PURCHASECARRY" before insert or update on PURCHASECARRY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PURCHASECARRY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PURCHASEMETHOD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PURCHASEMETHOD" before insert or update on PURCHASEMETHOD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PURCHASEMETHOD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PURCHASEMODE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PURCHASEMODE" before insert or update on PURCHASEMODE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PURCHASEMODE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PURCHASEPLAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PURCHASEPLAN" before insert or update on PURCHASEPLAN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PURCHASEPLAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_PURCHASEPLANDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_PURCHASEPLANDOC" before insert or update on PURCHASEPLANDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_PURCHASEPLANDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_QUALREQ
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_QUALREQ" before insert or update on QUALREQ  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_QUALREQ" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RECOILDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RECOILDOC" before insert or update on RECOILDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RECOILDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REFATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REFATTACH" before insert or update on REFATTACH  
AS

  DECLARE TaskJournalId NUMERIC(15,0);
  DECLARE RecordAction NUMERIC(1,0);
 BEGIN
 if (inserting) then 
 begin 
   if ((new.version is null or (new.version < 1))) then 
     new.version = 1; 
end 
else 
  if ((new.version IS NULL or (new.version <= old.version))) then 
    new.version = coalesce(old.version, 0) + 1; 
  if (inserting) then 
    RecordAction = 0; 
  else 
    RecordAction = 1;
  TaskJournalId = RPLTRANSACTION.get_task_journal_id; 
  if (:TaskJournalId is not null) then 
    insert into RplVersionLog (Ver, Num_Transaction, RplTable_Id, TaskJournal_Id, Record_Id, Record_Action) 
    values (new.version, dbms_transaction.local_transaction_id, 253, :TaskJournalId, new.id, :RecordAction);
 END^

SET TERM ; ^

ALTER TRIGGER "VER_REFATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REFERENCECLASS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REFERENCECLASS" before insert or update on REFERENCECLASS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REFERENCECLASS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REFINANCINGRATE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REFINANCINGRATE" before insert or update on REFINANCINGRATE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REFINANCINGRATE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REFUSALFACTFOUNDATION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REFUSALFACTFOUNDATION" before insert or update on REFUSALFACTFOUNDATION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REFUSALFACTFOUNDATION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPDOCUMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPDOCUMENT" before insert or update on REPDOCUMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPDOCUMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPFIELD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPFIELD" before insert or update on REPFIELD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPFIELD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPFORM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPFORM" before insert or update on REPFORM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPFORM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPFRAGMENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPFRAGMENT" before insert or update on REPFRAGMENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPFRAGMENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPFRAGMENTCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPFRAGMENTCHILD" before insert or update on REPFRAGMENTCHILD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPFRAGMENTCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPORT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPORT" before insert or update on REPORT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPORT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPPROFILE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPPROFILE" before insert or update on REPPROFILE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPPROFILE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPSOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPSOURCE" before insert or update on REPSOURCE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPSOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REPTEMPLATEATTACH
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REPTEMPLATEATTACH" before insert or update on REPTEMPLATEATTACH  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REPTEMPLATEATTACH" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REQUESTDOC
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REQUESTDOC" before insert or update on REQUESTDOC  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REQUESTDOC" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REQUIREMENTTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REQUIREMENTTYPE" before insert or update on REQUIREMENTTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REQUIREMENTTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_REQUIREMENTTYPEPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_REQUIREMENTTYPEPM" before insert or update on REQUIREMENTTYPEPM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_REQUIREMENTTYPEPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RESERVEDBUDGETLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RESERVEDBUDGETLINE" before insert or update on RESERVEDBUDGETLINE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RESERVEDBUDGETLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RESPONSIBILITY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RESPONSIBILITY" before insert or update on RESPONSIBILITY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RESPONSIBILITY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RNP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RNP" before insert or update on RNP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RNP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_ROLEREGISTER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_ROLEREGISTER" before insert or update on ROLEREGISTER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_ROLEREGISTER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPL" before insert or update on RPL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPLOBJECT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPLOBJECT" before insert or update on RPLOBJECT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPLOBJECT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPLRULE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPLRULE" before insert or update on RPLRULE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPLRULE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPLSITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPLSITE" before insert or update on RPLSITE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPLSITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPLTABLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPLTABLE" before insert or update on RPLTABLE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPLTABLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RPLTABLEPLUGIN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RPLTABLEPLUGIN" before insert or update on RPLTABLEPLUGIN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RPLTABLEPLUGIN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RULEREQUISITE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RULEREQUISITE" before insert or update on RULEREQUISITE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RULEREQUISITE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_RULESCRIPT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_RULESCRIPT" before insert or update on RULESCRIPT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_RULESCRIPT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SCHEXPDOCS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SCHEXPDOCS" before insert or update on SCHEXPDOCS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SCHEXPDOCS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SCHPLAN
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SCHPLAN" before insert or update on SCHPLAN  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SCHPLAN" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SCHTASK
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SCHTASK" before insert or update on SCHTASK  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SCHTASK" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SERVERACTION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SERVERACTION" before insert or update on SERVERACTION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SERVERACTION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SERVERERROR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SERVERERROR" before insert or update on SERVERERROR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SERVERERROR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SERVERPROCESSOR
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SERVERPROCESSOR" before insert or update on SERVERPROCESSOR  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SERVERPROCESSOR" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SERVERPROVIDER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SERVERPROVIDER" before insert or update on SERVERPROVIDER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SERVERPROVIDER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SIGNEXPORTLOG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SIGNEXPORTLOG" before insert or update on SIGNEXPORTLOG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SIGNEXPORTLOG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SIGNFORMAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SIGNFORMAT" before insert or update on SIGNFORMAT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SIGNFORMAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SIGNTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SIGNTYPE" before insert or update on SIGNTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SIGNTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_STATISTICSSOURCE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_STATISTICSSOURCE" before insert or update on STATISTICSSOURCE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_STATISTICSSOURCE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_STOREDDOCUMENTS
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_STOREDDOCUMENTS" before insert or update on STOREDDOCUMENTS  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_STOREDDOCUMENTS" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SUPPORTCRYPTOLIB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SUPPORTCRYPTOLIB" before insert or update on SUPPORTCRYPTOLIB  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SUPPORTCRYPTOLIB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SUPPORTCRYPTOLIBFORMAT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SUPPORTCRYPTOLIBFORMAT" before insert or update on SUPPORTCRYPTOLIBFORMAT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SUPPORTCRYPTOLIBFORMAT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SUPPORTCRYPTOLIBPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SUPPORTCRYPTOLIBPARAM" before insert or update on SUPPORTCRYPTOLIBPARAM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SUPPORTCRYPTOLIBPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SYSEVENT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SYSEVENT" before insert or update on SYSEVENT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SYSEVENT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SYSPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SYSPARAM" before insert or update on SYSPARAM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SYSPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SYSRIGHT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SYSRIGHT" before insert or update on SYSRIGHT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SYSRIGHT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_SYSUSER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_SYSUSER" before insert or update on SYSUSER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_SYSUSER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TASKJOURNAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TASKJOURNAL" before insert or update on TASKJOURNAL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TASKJOURNAL" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDER
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDER" before insert or update on TENDER  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDER" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDERCRITERION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDERCRITERION" before insert or update on TENDERCRITERION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDERCRITERION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDERCRITERIONCHILD
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDERCRITERIONCHILD" before insert or update on TENDERCRITERIONCHILD  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDERCRITERIONCHILD" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDERCRITERIONPM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDERCRITERIONPM" before insert or update on TENDERCRITERIONPM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDERCRITERIONPM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDERLINE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDERLINE" before insert or update on TENDERLINE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDERLINE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TENDERLINECOMM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TENDERLINECOMM" before insert or update on TENDERLINECOMM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TENDERLINECOMM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TERRITORY
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TERRITORY" before insert or update on TERRITORY  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TERRITORY" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TERTYPE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TERTYPE" before insert or update on TERTYPE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TERTYPE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TYPEDOCREQGROUP
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TYPEDOCREQGROUP" before insert or update on TYPEDOCREQGROUP  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TYPEDOCREQGROUP" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_TYPEREQCRIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_TYPEREQCRIT" before insert or update on TYPEREQCRIT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_TYPEREQCRIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_UNIT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_UNIT" before insert or update on UNIT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_UNIT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_UPDPACKAGE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_UPDPACKAGE" before insert or update on UPDPACKAGE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_UPDPACKAGE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USERBUDGET
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USERBUDGET" before insert or update on USERBUDGET  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USERBUDGET" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USERCERT
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USERCERT" before insert or update on USERCERT  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USERCERT" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USERORG
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USERORG" before insert or update on USERORG  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USERORG" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USERROLE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USERROLE" before insert or update on USERROLE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USERROLE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USERSESSION
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USERSESSION" before insert or update on USERSESSION  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USERSESSION" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USESCRYPTOLIB
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USESCRYPTOLIB" before insert or update on USESCRYPTOLIB  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USESCRYPTOLIB" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_USESCRYPTOLIBPARAM
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_USESCRYPTOLIBPARAM" before insert or update on USESCRYPTOLIBPARAM  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_USESCRYPTOLIBPARAM" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_WEBSTATCACHE
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_WEBSTATCACHE" before insert or update on WEBSTATCACHE  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_WEBSTATCACHE" ACTIVE;
--------------------------------------------------------
--  DDL for Trigger VER_WEBSTATCACHEVAL
--------------------------------------------------------

  SET TERM ^ ;

CREATE OR ALTER TRIGGER "VER_WEBSTATCACHEVAL" before insert or update on WEBSTATCACHEVAL  
AS

  BEGIN
IF (new.version IS NULL or (new.version <= old.version)) THEN
    new.version = coalesce(old.version, 0) + 1;
  END^

SET TERM ; ^

ALTER TRIGGER "VER_WEBSTATCACHEVAL" ACTIVE;
