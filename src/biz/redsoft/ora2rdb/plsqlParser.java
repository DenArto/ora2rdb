// Generated from plsql.g4 by ANTLR 4.5.2
package biz.redsoft.ora2rdb;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, A_LETTER=2, ADD=3, AFTER=4, AGENT=5, AGGREGATE=6, ALL=7, ALTER=8, 
		ANALYZE=9, AND=10, ANY=11, ARCHIVE=12, ARRAY=13, AS=14, ASC=15, ASSOCIATE=16, 
		AT=17, ATTRIBUTE=18, AUDIT=19, AUTHID=20, AUTO=21, AUTOMATIC=22, AUTONOMOUS_TRANSACTION=23, 
		BASIC=24, BASICFILE=25, BATCH=26, BEFORE=27, BEGIN=28, BETWEEN=29, BFILE=30, 
		BINARY_DOUBLE=31, BINARY_FLOAT=32, BINARY_INTEGER=33, BLOB=34, BLOCK=35, 
		BODY=36, BOOLEAN=37, BOTH=38, BREADTH=39, BUFFER_POOL=40, BULK=41, BY=42, 
		BYTE=43, C_LETTER=44, CACHE=45, CALL=46, CANONICAL=47, CASCADE=48, CASE=49, 
		CAST=50, CELL_FLASH_CACHE=51, CHAR=52, CHAR_CS=53, CHARACTER=54, CHECK=55, 
		CHR=56, CHUNK=57, CLOB=58, CLOSE=59, CLUSTER=60, COLLECT=61, COLUMNS=62, 
		COMMENT=63, COMMIT=64, COMMITTED=65, COMPATIBILITY=66, COMPILE=67, COMPOUND=68, 
		COMPRESS=69, CONNECT=70, CONNECT_BY_ROOT=71, CONSTANT=72, CONSTRAINT=73, 
		CONSTRAINTS=74, CONSTRUCTOR=75, CONTENT=76, CONTEXT=77, CONTINUE=78, CONVERT=79, 
		CORRUPT_XID=80, CORRUPT_XID_ALL=81, COST=82, COUNT=83, CREATE=84, CREATION=85, 
		CROSS=86, CUBE=87, CURRENT=88, CURRENT_USER=89, CURSOR=90, CUSTOMDATUM=91, 
		CYCLE=92, DATA=93, DATABASE=94, DATE=95, DAY=96, DB_ROLE_CHANGE=97, DBTIMEZONE=98, 
		DDL=99, DEBUG=100, DEC=101, DECIMAL=102, DECLARE=103, DECOMPOSE=104, DECREMENT=105, 
		DEDUPLICATE=106, DEFAULT=107, DEFAULTS=108, DEFERRED=109, DEFINER=110, 
		DELETE=111, DEPTH=112, DESC=113, DETERMINISTIC=114, DIMENSION=115, DISABLE=116, 
		DISASSOCIATE=117, DISTINCT=118, DOCUMENT=119, DOUBLE=120, DROP=121, DSINTERVAL_UNCONSTRAINED=122, 
		EACH=123, ELEMENT=124, ELSE=125, ELSIF=126, EMPTY=127, ENABLE=128, ENCODING=129, 
		END=130, ENTITYESCAPING=131, ERRORS=132, ESCAPE=133, EVALNAME=134, EXCEPTION=135, 
		EXCEPTION_INIT=136, EXCEPTIONS=137, EXCLUDE=138, EXCLUSIVE=139, EXECUTE=140, 
		EXISTS=141, EXIT=142, EXPLAIN=143, EXTERNAL=144, EXTRACT=145, FAILURE=146, 
		FALSE=147, FETCH=148, FILESYSTEM_LIKE_LOGGING=149, FINAL=150, FIRST=151, 
		FIRST_VALUE=152, FLASH_CACHE=153, FLOAT=154, FOLLOWING=155, FOLLOWS=156, 
		FOR=157, FORALL=158, FORCE=159, FREELIST=160, FREELISTS=161, FROM=162, 
		FULL=163, FUNCTION=164, GOTO=165, GRANT=166, GROUP=167, GROUPS=168, GROUPING=169, 
		HASH=170, HAVING=171, HIDE=172, HIGH=173, HOUR=174, IF=175, IGNORE=176, 
		IMMEDIATE=177, IN=178, INCLUDE=179, INCLUDING=180, INCREMENT=181, INDENT=182, 
		INDEX=183, INDEXED=184, INDICATOR=185, INDICES=186, INFINITE=187, INITIAL=188, 
		INITRANS=189, INLINE=190, INNER=191, INOUT=192, INSERT=193, INSTANTIABLE=194, 
		INSTEAD=195, INT=196, INTEGER=197, INTERSECT=198, INTERVAL=199, INTO=200, 
		INVALIDATE=201, IS=202, ISOLATION=203, ITERATE=204, JAVA=205, JOIN=206, 
		KEEP=207, KEEP_DUPLICATES=208, LANGUAGE=209, LAST=210, LAST_VALUE=211, 
		LEADING=212, LEFT=213, LEVEL=214, LIBRARY=215, LIKE=216, LIKE2=217, LIKE4=218, 
		LIKEC=219, LIMIT=220, LOB=221, LOCAL=222, LOCK=223, LOCKED=224, LOG=225, 
		LOGGING=226, LOGOFF=227, LOGON=228, LONG=229, LOOP=230, LOW=231, MAIN=232, 
		MAP=233, MATCHED=234, MAXEXTENTS=235, MAXTRANS=236, MAXVALUE=237, MEASURES=238, 
		MEDIUM=239, MEMBER=240, MERGE=241, MINEXTENTS=242, MINUS=243, MINUTE=244, 
		MINVALUE=245, MLSLABEL=246, MODE=247, MODEL=248, MODIFY=249, MONTH=250, 
		MULTISET=251, NAME=252, NAN=253, NATURAL=254, NATURALN=255, NAV=256, NCHAR=257, 
		NCHAR_CS=258, NCLOB=259, NESTED=260, NEW=261, NEXT=262, NO=263, NOAUDIT=264, 
		NOCACHE=265, NOCOMPRESS=266, NOCOPY=267, NOCYCLE=268, NOENTITYESCAPING=269, 
		NOLOGGING=270, NOMAXVALUE=271, NOMINVALUE=272, NONE=273, NOORDER=274, 
		NOSCHEMACHECK=275, NOT=276, NOWAIT=277, NULL=278, NULLS=279, NUMBER=280, 
		NUMERIC=281, NVARCHAR2=282, OBJECT=283, OF=284, OFF=285, OID=286, OLD=287, 
		OLTP=288, ON=289, ONLY=290, OPEN=291, OPTION=292, OR=293, ORADATA=294, 
		ORDER=295, ORDINALITY=296, OSERROR=297, OUT=298, OUTER=299, OVER=300, 
		OVERRIDING=301, PACKAGE=302, PARALLEL_ENABLE=303, PARAMETERS=304, PARENT=305, 
		PARTITION=306, PASSING=307, PATH=308, PCTFREE=309, PCTINCREASE=310, PCTUSED=311, 
		PERCENT_ROWTYPE=312, PERCENT_TYPE=313, PIPELINED=314, PIVOT=315, PLAN=316, 
		PLS_INTEGER=317, POSITIVE=318, POSITIVEN=319, PRAGMA=320, PRECEDING=321, 
		PRECISION=322, PRESENT=323, PRIOR=324, PROCEDURE=325, QUERY=326, RAISE=327, 
		RANGE=328, RAW=329, READ=330, READS=331, REAL=332, RECORD=333, RECYCLE=334, 
		REF=335, REFERENCE=336, REFERENCING=337, REJECT=338, RELIES_ON=339, RENAME=340, 
		REPLACE=341, RESPECT=342, RESTRICT_REFERENCES=343, RESULT=344, RESULT_CACHE=345, 
		RETURN=346, RETURNING=347, REUSE=348, REVERSE=349, REVOKE=350, RIGHT=351, 
		ROLLBACK=352, ROLLUP=353, ROW=354, ROWID=355, ROWS=356, RULES=357, SAMPLE=358, 
		SAVE=359, SAVEPOINT=360, SCHEMA=361, SCHEMACHECK=362, SCN=363, SEARCH=364, 
		SECOND=365, SECUREFILE=366, SEED=367, SEGMENT=368, SELECT=369, SELF=370, 
		SEQUENCE=371, SEQUENTIAL=372, SERIALIZABLE=373, SERIALLY_REUSABLE=374, 
		SERVERERROR=375, SESSIONTIMEZONE=376, SET=377, SETS=378, SETTINGS=379, 
		SHARE=380, SHOW=381, SHUTDOWN=382, SIBLINGS=383, SIGNTYPE=384, SIMPLE_INTEGER=385, 
		SINGLE=386, SIZE=387, SKIP_=388, SMALLINT=389, SNAPSHOT=390, SOME=391, 
		SPECIFICATION=392, SQLDATA=393, SQLERROR=394, STANDALONE=395, START=396, 
		STARTUP=397, STATEMENT=398, STATEMENT_ID=399, STATIC=400, STATISTICS=401, 
		STORAGE=402, STORE=403, STRING=404, SUBMULTISET=405, SUBPARTITION=406, 
		SUBSTITUTABLE=407, SUBTYPE=408, SUCCESS=409, SUSPEND=410, TABLE=411, TABLESPACE=412, 
		THE=413, THEN=414, TIME=415, TIMESTAMP=416, TIMESTAMP_LTZ_UNCONSTRAINED=417, 
		TIMESTAMP_TZ_UNCONSTRAINED=418, TIMESTAMP_UNCONSTRAINED=419, TIMEZONE_ABBR=420, 
		TIMEZONE_HOUR=421, TIMEZONE_MINUTE=422, TIMEZONE_REGION=423, TO=424, TRAILING=425, 
		TRANSACTION=426, TRANSLATE=427, TREAT=428, TRIGGER=429, TRIM=430, TRUE=431, 
		TRUNCATE=432, TYPE=433, UNBOUNDED=434, UNDER=435, UNION=436, UNIQUE=437, 
		UNLIMITED=438, UNPIVOT=439, UNTIL=440, UPDATE=441, UPDATED=442, UPSERT=443, 
		UROWID=444, USE=445, USING=446, VALIDATE=447, VALUE=448, VALUES=449, VARCHAR=450, 
		VARCHAR2=451, VARIABLE=452, VARRAY=453, VARYING=454, VERSION=455, VERSIONS=456, 
		WAIT=457, WARNING=458, WELLFORMED=459, WHEN=460, WHENEVER=461, WHERE=462, 
		WHILE=463, WITH=464, WITHIN=465, WORK=466, WRITE=467, XML=468, XMLAGG=469, 
		XMLATTRIBUTES=470, XMLCAST=471, XMLCOLATTVAL=472, XMLELEMENT=473, XMLEXISTS=474, 
		XMLFOREST=475, XMLNAMESPACES=476, XMLPARSE=477, XMLPI=478, XMLQUERY=479, 
		XMLROOT=480, XMLSERIALIZE=481, XMLTABLE=482, YEAR=483, YES=484, YMINTERVAL_UNCONSTRAINED=485, 
		ZONE=486, PREDICTION=487, PREDICTION_BOUNDS=488, PREDICTION_COST=489, 
		PREDICTION_DETAILS=490, PREDICTION_PROBABILITY=491, PREDICTION_SET=492, 
		CUME_DIST=493, DENSE_RANK=494, LISTAGG=495, PERCENT_RANK=496, PERCENTILE_CONT=497, 
		PERCENTILE_DISC=498, RANK=499, AVG=500, CORR=501, LAG=502, LEAD=503, MAX=504, 
		MEDIAN=505, MIN=506, NTILE=507, RATIO_TO_REPORT=508, ROW_NUMBER=509, SUM=510, 
		VARIANCE=511, REGR_=512, STDDEV=513, VAR_=514, COVAR_=515, NATIONAL_CHAR_STRING_LIT=516, 
		BIT_STRING_LIT=517, HEX_STRING_LIT=518, DOUBLE_PERIOD=519, PERIOD=520, 
		UNSIGNED_INTEGER=521, APPROXIMATE_NUM_LIT=522, CHAR_STRING=523, DELIMITED_ID=524, 
		PERCENT=525, AMPERSAND=526, LEFT_PAREN=527, RIGHT_PAREN=528, DOUBLE_ASTERISK=529, 
		ASTERISK=530, PLUS_SIGN=531, MINUS_SIGN=532, COMMA=533, SOLIDUS=534, AT_SIGN=535, 
		ASSIGN_OP=536, BINDVAR=537, COLON=538, SEMICOLON=539, LESS_THAN_OR_EQUALS_OP=540, 
		LESS_THAN_OP=541, GREATER_THAN_OR_EQUALS_OP=542, NOT_EQUAL_OP=543, CARRET_OPERATOR_PART=544, 
		TILDE_OPERATOR_PART=545, EXCLAMATION_OPERATOR_PART=546, GREATER_THAN_OP=547, 
		CONCATENATION_OP=548, VERTICAL_BAR=549, EQUALS_OP=550, LEFT_BRACKET=551, 
		RIGHT_BRACKET=552, INTRODUCER=553, SPACES=554, SINGLE_LINE_COMMENT=555, 
		MULTI_LINE_COMMENT=556, PROMPT=557, SQL92_RESERVED_ALL=558, SQL92_RESERVED_ALTER=559, 
		SQL92_RESERVED_AND=560, SQL92_RESERVED_ANY=561, SQL92_RESERVED_AS=562, 
		SQL92_RESERVED_ASC=563, SQL92_RESERVED_BEGIN=564, SQL92_RESERVED_BETWEEN=565, 
		SQL92_RESERVED_BY=566, SQL92_RESERVED_CASE=567, SQL92_RESERVED_CHECK=568, 
		PLSQL_RESERVED_CLUSTERS=569, PLSQL_RESERVED_COLAUTH=570, PLSQL_RESERVED_COMPRESS=571, 
		SQL92_RESERVED_CONNECT=572, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=573, PLSQL_RESERVED_CRASH=574, 
		SQL92_RESERVED_CREATE=575, SQL92_RESERVED_CURRENT=576, SQL92_RESERVED_CURSOR=577, 
		SQL92_RESERVED_DATE=578, SQL92_RESERVED_DECLARE=579, SQL92_RESERVED_DEFAULT=580, 
		SQL92_RESERVED_DELETE=581, SQL92_RESERVED_DESC=582, SQL92_RESERVED_DISTINCT=583, 
		SQL92_RESERVED_DROP=584, SQL92_RESERVED_ELSE=585, SQL92_RESERVED_END=586, 
		SQL92_RESERVED_EXCEPTION=587, PLSQL_RESERVED_EXCLUSIVE=588, SQL92_RESERVED_EXISTS=589, 
		SQL92_RESERVED_FALSE=590, SQL92_RESERVED_FETCH=591, SQL92_RESERVED_FOR=592, 
		SQL92_RESERVED_FROM=593, SQL92_RESERVED_GOTO=594, SQL92_RESERVED_GRANT=595, 
		SQL92_RESERVED_GROUP=596, SQL92_RESERVED_HAVING=597, PLSQL_RESERVED_IDENTIFIED=598, 
		PLSQL_RESERVED_IF=599, SQL92_RESERVED_IN=600, PLSQL_RESERVED_INDEX=601, 
		PLSQL_RESERVED_INDEXES=602, SQL92_RESERVED_INSERT=603, SQL92_RESERVED_INTERSECT=604, 
		SQL92_RESERVED_INTO=605, SQL92_RESERVED_IS=606, SQL92_RESERVED_LIKE=607, 
		PLSQL_RESERVED_LOCK=608, PLSQL_RESERVED_MINUS=609, PLSQL_RESERVED_MODE=610, 
		PLSQL_RESERVED_NOCOMPRESS=611, SQL92_RESERVED_NOT=612, PLSQL_RESERVED_NOWAIT=613, 
		SQL92_RESERVED_NULL=614, SQL92_RESERVED_OF=615, SQL92_RESERVED_ON=616, 
		SQL92_RESERVED_OPTION=617, SQL92_RESERVED_OR=618, SQL92_RESERVED_ORDER=619, 
		SQL92_RESERVED_OVERLAPS=620, SQL92_RESERVED_PRIOR=621, SQL92_RESERVED_PROCEDURE=622, 
		SQL92_RESERVED_PUBLIC=623, PLSQL_RESERVED_RESOURCE=624, SQL92_RESERVED_REVOKE=625, 
		SQL92_RESERVED_SELECT=626, PLSQL_RESERVED_SHARE=627, SQL92_RESERVED_SIZE=628, 
		PLSQL_RESERVED_START=629, PLSQL_RESERVED_TABAUTH=630, SQL92_RESERVED_TABLE=631, 
		SQL92_RESERVED_THE=632, SQL92_RESERVED_THEN=633, SQL92_RESERVED_TO=634, 
		SQL92_RESERVED_TRUE=635, SQL92_RESERVED_UNION=636, SQL92_RESERVED_UNIQUE=637, 
		SQL92_RESERVED_UPDATE=638, SQL92_RESERVED_VALUES=639, SQL92_RESERVED_VIEW=640, 
		PLSQL_RESERVED_VIEWS=641, SQL92_RESERVED_WHEN=642, SQL92_RESERVED_WHERE=643, 
		SQL92_RESERVED_WITH=644, PLSQL_NON_RESERVED_USING=645, PLSQL_NON_RESERVED_MODEL=646, 
		PLSQL_NON_RESERVED_ELSIF=647, PLSQL_NON_RESERVED_PIVOT=648, PLSQL_NON_RESERVED_UNPIVOT=649, 
		REGULAR_ID=650, ZV=651;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_create_table = 4, RULE_physical_properties = 5, 
		RULE_deferred_segment_creation = 6, RULE_segment_attributes_clause = 7, 
		RULE_physical_attributes_clause = 8, RULE_storage_clause = 9, RULE_table_compression = 10, 
		RULE_logging_clause = 11, RULE_lob_storage_clause = 12, RULE_lob_storage_parameters = 13, 
		RULE_lob_parameters = 14, RULE_lob_deduplicate_clause = 15, RULE_lob_compression_clause = 16, 
		RULE_drop_function = 17, RULE_alter_function = 18, RULE_create_function_body = 19, 
		RULE_parallel_enable_clause = 20, RULE_partition_by_clause = 21, RULE_result_cache_clause = 22, 
		RULE_relies_on_part = 23, RULE_streaming_clause = 24, RULE_drop_package = 25, 
		RULE_alter_package = 26, RULE_create_package = 27, RULE_package_body = 28, 
		RULE_package_spec = 29, RULE_package_obj_spec = 30, RULE_procedure_spec = 31, 
		RULE_function_spec = 32, RULE_package_obj_body = 33, RULE_drop_procedure = 34, 
		RULE_alter_procedure = 35, RULE_create_procedure_body = 36, RULE_drop_trigger = 37, 
		RULE_alter_trigger = 38, RULE_create_trigger = 39, RULE_trigger_follows_clause = 40, 
		RULE_trigger_when_clause = 41, RULE_simple_dml_trigger = 42, RULE_for_each_row = 43, 
		RULE_compound_dml_trigger = 44, RULE_non_dml_trigger = 45, RULE_trigger_body = 46, 
		RULE_routine_clause = 47, RULE_compound_trigger_block = 48, RULE_timing_point_section = 49, 
		RULE_non_dml_event = 50, RULE_dml_event_clause = 51, RULE_dml_event_element = 52, 
		RULE_dml_event_nested_clause = 53, RULE_referencing_clause = 54, RULE_referencing_element = 55, 
		RULE_drop_type = 56, RULE_alter_type = 57, RULE_compile_type_clause = 58, 
		RULE_replace_type_clause = 59, RULE_alter_method_spec = 60, RULE_alter_method_element = 61, 
		RULE_alter_attribute_definition = 62, RULE_attribute_definition = 63, 
		RULE_alter_collection_clauses = 64, RULE_dependent_handling_clause = 65, 
		RULE_dependent_exceptions_part = 66, RULE_create_type = 67, RULE_type_definition = 68, 
		RULE_object_type_def = 69, RULE_object_as_part = 70, RULE_object_under_part = 71, 
		RULE_nested_table_type_def = 72, RULE_sqlj_object_type = 73, RULE_type_body = 74, 
		RULE_type_body_elements = 75, RULE_map_order_func_declaration = 76, RULE_subprog_decl_in_type = 77, 
		RULE_proc_decl_in_type = 78, RULE_func_decl_in_type = 79, RULE_constructor_declaration = 80, 
		RULE_modifier_clause = 81, RULE_object_member_spec = 82, RULE_sqlj_object_type_attr = 83, 
		RULE_element_spec = 84, RULE_element_spec_options = 85, RULE_subprogram_spec = 86, 
		RULE_type_procedure_spec = 87, RULE_type_function_spec = 88, RULE_constructor_spec = 89, 
		RULE_map_order_function_spec = 90, RULE_pragma_clause = 91, RULE_pragma_elements = 92, 
		RULE_type_elements_parameter = 93, RULE_drop_sequence = 94, RULE_alter_sequence = 95, 
		RULE_create_sequence = 96, RULE_sequence_spec = 97, RULE_sequence_start_clause = 98, 
		RULE_invoker_rights_clause = 99, RULE_compiler_parameters_clause = 100, 
		RULE_call_spec = 101, RULE_java_spec = 102, RULE_c_spec = 103, RULE_c_agent_in_clause = 104, 
		RULE_c_parameters_clause = 105, RULE_parameter = 106, RULE_default_value_part = 107, 
		RULE_declare_spec = 108, RULE_variable_declaration = 109, RULE_subtype_declaration = 110, 
		RULE_cursor_declaration = 111, RULE_parameter_spec = 112, RULE_exception_declaration = 113, 
		RULE_pragma_declaration = 114, RULE_record_declaration = 115, RULE_record_type_dec = 116, 
		RULE_field_spec = 117, RULE_record_var_dec = 118, RULE_table_declaration = 119, 
		RULE_table_type_dec = 120, RULE_table_indexed_by_part = 121, RULE_varray_type_def = 122, 
		RULE_table_var_dec = 123, RULE_seq_of_statements = 124, RULE_label_declaration = 125, 
		RULE_statement = 126, RULE_assignment_statement = 127, RULE_continue_statement = 128, 
		RULE_exit_statement = 129, RULE_goto_statement = 130, RULE_if_statement = 131, 
		RULE_elsif_part = 132, RULE_else_part = 133, RULE_loop_statement = 134, 
		RULE_cursor_loop_param = 135, RULE_forall_statement = 136, RULE_bounds_clause = 137, 
		RULE_between_bound = 138, RULE_lower_bound = 139, RULE_upper_bound = 140, 
		RULE_null_statement = 141, RULE_raise_statement = 142, RULE_return_statement = 143, 
		RULE_function_call = 144, RULE_body = 145, RULE_exception_clause = 146, 
		RULE_exception_handler = 147, RULE_trigger_block = 148, RULE_block = 149, 
		RULE_sql_statement = 150, RULE_execute_immediate = 151, RULE_dynamic_returning_clause = 152, 
		RULE_data_manipulation_language_statements = 153, RULE_cursor_manipulation_statements = 154, 
		RULE_close_statement = 155, RULE_open_statement = 156, RULE_fetch_statement = 157, 
		RULE_open_for_statement = 158, RULE_transaction_control_statements = 159, 
		RULE_set_transaction_command = 160, RULE_set_constraint_command = 161, 
		RULE_commit_statement = 162, RULE_write_clause = 163, RULE_rollback_statement = 164, 
		RULE_savepoint_statement = 165, RULE_explain_statement = 166, RULE_select_statement = 167, 
		RULE_subquery_factoring_clause = 168, RULE_factoring_element = 169, RULE_search_clause = 170, 
		RULE_cycle_clause = 171, RULE_subquery = 172, RULE_subquery_operation_part = 173, 
		RULE_subquery_basic_elements = 174, RULE_query_block = 175, RULE_selected_element = 176, 
		RULE_from_clause = 177, RULE_select_list_elements = 178, RULE_table_ref_list = 179, 
		RULE_table_ref = 180, RULE_table_ref_aux = 181, RULE_join_clause = 182, 
		RULE_join_on_part = 183, RULE_join_using_part = 184, RULE_outer_join_type = 185, 
		RULE_query_partition_clause = 186, RULE_flashback_query_clause = 187, 
		RULE_pivot_clause = 188, RULE_pivot_element = 189, RULE_pivot_for_clause = 190, 
		RULE_pivot_in_clause = 191, RULE_pivot_in_clause_element = 192, RULE_pivot_in_clause_elements = 193, 
		RULE_unpivot_clause = 194, RULE_unpivot_in_clause = 195, RULE_unpivot_in_elements = 196, 
		RULE_hierarchical_query_clause = 197, RULE_start_part = 198, RULE_group_by_clause = 199, 
		RULE_group_by_elements = 200, RULE_rollup_cube_clause = 201, RULE_grouping_sets_clause = 202, 
		RULE_grouping_sets_elements = 203, RULE_having_clause = 204, RULE_model_clause = 205, 
		RULE_cell_reference_options = 206, RULE_return_rows_clause = 207, RULE_reference_model = 208, 
		RULE_main_model = 209, RULE_model_column_clauses = 210, RULE_model_column_partition_part = 211, 
		RULE_model_column_list = 212, RULE_model_column = 213, RULE_model_rules_clause = 214, 
		RULE_model_rules_part = 215, RULE_model_rules_element = 216, RULE_cell_assignment = 217, 
		RULE_model_iterate_clause = 218, RULE_until_part = 219, RULE_order_by_clause = 220, 
		RULE_order_by_elements = 221, RULE_for_update_clause = 222, RULE_for_update_of_part = 223, 
		RULE_for_update_options = 224, RULE_update_statement = 225, RULE_update_set_clause = 226, 
		RULE_column_based_update_set_clause = 227, RULE_delete_statement = 228, 
		RULE_insert_statement = 229, RULE_single_table_insert = 230, RULE_multi_table_insert = 231, 
		RULE_multi_table_element = 232, RULE_conditional_insert_clause = 233, 
		RULE_conditional_insert_when_part = 234, RULE_conditional_insert_else_part = 235, 
		RULE_insert_into_clause = 236, RULE_values_clause = 237, RULE_merge_statement = 238, 
		RULE_merge_update_clause = 239, RULE_merge_element = 240, RULE_merge_update_delete_part = 241, 
		RULE_merge_insert_clause = 242, RULE_selected_tableview = 243, RULE_lock_table_statement = 244, 
		RULE_wait_nowait_part = 245, RULE_lock_table_element = 246, RULE_lock_mode = 247, 
		RULE_general_table_ref = 248, RULE_static_returning_clause = 249, RULE_error_logging_clause = 250, 
		RULE_error_logging_into_part = 251, RULE_error_logging_reject_part = 252, 
		RULE_dml_table_expression_clause = 253, RULE_table_collection_expression = 254, 
		RULE_subquery_restriction_clause = 255, RULE_sample_clause = 256, RULE_seed_part = 257, 
		RULE_cursor_expression = 258, RULE_expression_list = 259, RULE_condition = 260, 
		RULE_condition_wrapper = 261, RULE_expression = 262, RULE_expression_wrapper = 263, 
		RULE_logical_and_expression = 264, RULE_negated_expression = 265, RULE_equality_expression = 266, 
		RULE_multiset_expression = 267, RULE_multiset_type = 268, RULE_relational_expression = 269, 
		RULE_compound_expression = 270, RULE_like_type = 271, RULE_like_escape_part = 272, 
		RULE_in_elements = 273, RULE_between_elements = 274, RULE_concatenation = 275, 
		RULE_concatenation_wrapper = 276, RULE_additive_expression = 277, RULE_multiply_expression = 278, 
		RULE_datetime_expression = 279, RULE_interval_expression = 280, RULE_model_expression = 281, 
		RULE_model_expression_element = 282, RULE_single_column_for_loop = 283, 
		RULE_for_like_part = 284, RULE_for_increment_decrement_type = 285, RULE_multi_column_for_loop = 286, 
		RULE_unary_expression = 287, RULE_case_statement = 288, RULE_simple_case_statement = 289, 
		RULE_simple_case_when_part = 290, RULE_searched_case_statement = 291, 
		RULE_searched_case_when_part = 292, RULE_case_else_part = 293, RULE_atom = 294, 
		RULE_expression_or_vector = 295, RULE_vector_expr = 296, RULE_quantified_expression = 297, 
		RULE_standard_function = 298, RULE_over_clause_keyword = 299, RULE_within_or_over_clause_keyword = 300, 
		RULE_standard_prediction_function_keyword = 301, RULE_over_clause = 302, 
		RULE_windowing_clause = 303, RULE_windowing_type = 304, RULE_windowing_elements = 305, 
		RULE_using_clause = 306, RULE_using_element = 307, RULE_collect_order_by_part = 308, 
		RULE_within_or_over_part = 309, RULE_cost_matrix_clause = 310, RULE_xml_passing_clause = 311, 
		RULE_xml_attributes_clause = 312, RULE_xml_namespaces_clause = 313, RULE_xml_table_column = 314, 
		RULE_xml_general_default_part = 315, RULE_xml_multiuse_expression_element = 316, 
		RULE_xmlroot_param_version_part = 317, RULE_xmlroot_param_standalone_part = 318, 
		RULE_xmlserialize_param_enconding_part = 319, RULE_xmlserialize_param_version_part = 320, 
		RULE_xmlserialize_param_ident_part = 321, RULE_sql_plus_command = 322, 
		RULE_whenever_command = 323, RULE_set_command = 324, RULE_exit_command = 325, 
		RULE_prompt_command = 326, RULE_partition_extension_clause = 327, RULE_column_alias = 328, 
		RULE_table_alias = 329, RULE_alias_quoted_string = 330, RULE_where_clause = 331, 
		RULE_current_of_clause = 332, RULE_into_clause = 333, RULE_xml_column_name = 334, 
		RULE_cost_class_name = 335, RULE_attribute_name = 336, RULE_savepoint_name = 337, 
		RULE_rollback_segment_name = 338, RULE_table_var_name = 339, RULE_schema_name = 340, 
		RULE_routine_name = 341, RULE_package_name = 342, RULE_implementation_type_name = 343, 
		RULE_parameter_name = 344, RULE_reference_model_name = 345, RULE_main_model_name = 346, 
		RULE_aggregate_function_name = 347, RULE_query_name = 348, RULE_constraint_name = 349, 
		RULE_label_name = 350, RULE_type_name = 351, RULE_sequence_name = 352, 
		RULE_exception_name = 353, RULE_function_name = 354, RULE_procedure_name = 355, 
		RULE_trigger_name = 356, RULE_variable_name = 357, RULE_index_name = 358, 
		RULE_cursor_name = 359, RULE_record_name = 360, RULE_collection_name = 361, 
		RULE_link_name = 362, RULE_column_name = 363, RULE_tableview_name = 364, 
		RULE_char_set_name = 365, RULE_keep_clause = 366, RULE_function_argument = 367, 
		RULE_function_argument_analytic = 368, RULE_function_argument_modeling = 369, 
		RULE_respect_or_ignore_nulls = 370, RULE_argument = 371, RULE_type_spec = 372, 
		RULE_datatype = 373, RULE_precision_part = 374, RULE_native_datatype_element = 375, 
		RULE_bind_variable = 376, RULE_general_element = 377, RULE_general_element_part = 378, 
		RULE_table_element = 379, RULE_constant = 380, RULE_numeric = 381, RULE_numeric_negative = 382, 
		RULE_quoted_string = 383, RULE_id = 384, RULE_id_expression = 385, RULE_not_equal_op = 386, 
		RULE_greater_than_or_equals_op = 387, RULE_less_than_or_equals_op = 388, 
		RULE_concatenation_op = 389, RULE_outer_join_sign = 390, RULE_regular_id = 391;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"create_table", "physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
		"physical_attributes_clause", "storage_clause", "table_compression", "logging_clause", 
		"lob_storage_clause", "lob_storage_parameters", "lob_parameters", "lob_deduplicate_clause", 
		"lob_compression_clause", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "package_body", "package_spec", "package_obj_spec", 
		"procedure_spec", "function_spec", "package_obj_body", "drop_procedure", 
		"alter_procedure", "create_procedure_body", "drop_trigger", "alter_trigger", 
		"create_trigger", "trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
		"for_each_row", "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
		"routine_clause", "compound_trigger_block", "timing_point_section", "non_dml_event", 
		"dml_event_clause", "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
		"referencing_element", "drop_type", "alter_type", "compile_type_clause", 
		"replace_type_clause", "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
		"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
		"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "body", "exception_clause", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"multiset_expression", "multiset_type", "relational_expression", "compound_expression", 
		"like_type", "like_escape_part", "in_elements", "between_elements", "concatenation", 
		"concatenation_wrapper", "additive_expression", "multiply_expression", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "partition_extension_clause", 
		"column_alias", "table_alias", "alias_quoted_string", "where_clause", 
		"current_of_clause", "into_clause", "xml_column_name", "cost_class_name", 
		"attribute_name", "savepoint_name", "rollback_segment_name", "table_var_name", 
		"schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
		"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
		"exception_name", "function_name", "procedure_name", "trigger_name", "variable_name", 
		"index_name", "cursor_name", "record_name", "collection_name", "link_name", 
		"column_name", "tableview_name", "char_set_name", "keep_clause", "function_argument", 
		"function_argument_analytic", "function_argument_modeling", "respect_or_ignore_nulls", 
		"argument", "type_spec", "datatype", "precision_part", "native_datatype_element", 
		"bind_variable", "general_element", "general_element_part", "table_element", 
		"constant", "numeric", "numeric_negative", "quoted_string", "id", "id_expression", 
		"not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
		"concatenation_op", "outer_join_sign", "regular_id"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'..'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'.'", null, null, null, null, "'%'", "'&'", "'('", 
		"')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", null, 
		"':'", "';'", "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", "'>'", 
		"'||'", "'|'", "'='", "'['", "']'", "'_'", null, null, null, null, "'all'", 
		"'alter'", "'and'", "'any'", "'as'", "'asc'", "'begin'", "'between'", 
		"'by'", "'case'", "'check'", "'clusters'", "'colauth'", "'compress'", 
		"'connect'", "'connect_by_root'", "'crash'", "'create'", "'current'", 
		"'cursor'", "'date'", "'declare'", "'default'", "'delete'", "'desc'", 
		"'distinct'", "'drop'", "'else'", "'end'", "'exception'", "'exclusive'", 
		"'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", "'grant'", 
		"'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", "'indexes'", 
		"'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", "'minus'", 
		"'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", "'on'", 
		"'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'", 
		"'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
		"'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'", 
		"'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'", 
		"'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'", 
		null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", 
		"ANALYZE", "AND", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", 
		"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
		"BASIC", "BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", 
		"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", 
		"BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BULK", "BY", "BYTE", "C_LETTER", 
		"CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", "CELL_FLASH_CACHE", 
		"CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CHUNK", "CLOB", "CLOSE", 
		"CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPOUND", "COMPRESS", "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", 
		"CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", 
		"CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", 
		"CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", 
		"CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", 
		"DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", 
		"DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", 
		"DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", 
		"DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", 
		"ENTITYESCAPING", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
		"FINAL", "FIRST", "FIRST_VALUE", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
		"FOLLOWS", "FOR", "FORALL", "FORCE", "FREELIST", "FREELISTS", "FROM", 
		"FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", "HASH", 
		"HAVING", "HIDE", "HIGH", "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", 
		"INFINITE", "INITIAL", "INITRANS", "INLINE", "INNER", "INOUT", "INSERT", 
		"INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", 
		"INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", 
		"KEEP_DUPLICATES", "LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", 
		"LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOB", 
		"LOCAL", "LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGON", "LONG", 
		"LOOP", "LOW", "MAIN", "MAP", "MATCHED", "MAXEXTENTS", "MAXTRANS", "MAXVALUE", 
		"MEASURES", "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINUS", "MINUTE", 
		"MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", 
		"NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", 
		"NESTED", "NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", 
		"NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", "NOMAXVALUE", "NOMINVALUE", 
		"NONE", "NOORDER", "NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", "NULLS", 
		"NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
		"OLTP", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", 
		"OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", 
		"PARAMETERS", "PARENT", "PARTITION", "PASSING", "PATH", "PCTFREE", "PCTINCREASE", 
		"PCTUSED", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", 
		"PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", 
		"PRESENT", "PRIOR", "PROCEDURE", "QUERY", "RAISE", "RANGE", "RAW", "READ", 
		"READS", "REAL", "RECORD", "RECYCLE", "REF", "REFERENCE", "REFERENCING", 
		"REJECT", "RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", 
		"RESULT", "RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", 
		"RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", 
		"SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", 
		"SECUREFILE", "SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
		"SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", 
		"SET", "SETS", "SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", 
		"SIMPLE_INTEGER", "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", 
		"SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", "START", "STARTUP", 
		"STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STORAGE", "STORE", 
		"STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
		"SUSPEND", "TABLE", "TABLESPACE", "THE", "THEN", "TIME", "TIMESTAMP", 
		"TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRIM", 
		"TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
		"UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", "USE", "USING", 
		"VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", 
		"VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", "WELLFORMED", "WHEN", 
		"WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "WRITE", "XML", 
		"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
		"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", 
		"XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
		"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
		"NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
		"PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", 
		"PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", 
		"ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
		"ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", 
		"SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", 
		"SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
		"PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", 
		"SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", 
		"SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT", 
		"SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", 
		"SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
		"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", 
		"SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
		"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
		"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
		"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
		"ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(785); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(784);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				}
				setState(787); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CELL_FLASH_CACHE) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CHUNK) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEDUPLICATE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FREELIST - 128)) | (1L << (FREELISTS - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPS - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HIGH - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INITIAL - 128)) | (1L << (INITRANS - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEEP_DUPLICATES - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOB - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGGING - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (LOW - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXEXTENTS - 192)) | (1L << (MAXTRANS - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEDIUM - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINEXTENTS - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)) | (1L << (NOCOMPRESS - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NOLOGGING - 256)) | (1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (OLTP - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PCTFREE - 256)) | (1L << (PCTINCREASE - 256)) | (1L << (PCTUSED - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIOR - 320)) | (1L << (PROCEDURE - 320)) | (1L << (QUERY - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (READS - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (RECYCLE - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SECUREFILE - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SIZE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (START - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STORAGE - 384)) | (1L << (STORE - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (TABLESPACE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHEN - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHERE - 448)) | (1L << (WHILE - 448)) | (1L << (WITH - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (BIT_STRING_LIT - 512)) | (1L << (HEX_STRING_LIT - 512)) | (1L << (DOUBLE_PERIOD - 512)) | (1L << (PERIOD - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (PERCENT - 512)) | (1L << (AMPERSAND - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (RIGHT_PAREN - 512)) | (1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)) | (1L << (SQL92_RESERVED_AND - 512)) | (1L << (SQL92_RESERVED_ANY - 512)) | (1L << (SQL92_RESERVED_AS - 512)) | (1L << (SQL92_RESERVED_ASC - 512)) | (1L << (SQL92_RESERVED_BEGIN - 512)) | (1L << (SQL92_RESERVED_BETWEEN - 512)) | (1L << (SQL92_RESERVED_BY - 512)) | (1L << (SQL92_RESERVED_CASE - 512)) | (1L << (SQL92_RESERVED_CHECK - 512)) | (1L << (PLSQL_RESERVED_CLUSTERS - 512)) | (1L << (PLSQL_RESERVED_COLAUTH - 512)) | (1L << (PLSQL_RESERVED_COMPRESS - 512)) | (1L << (SQL92_RESERVED_CONNECT - 512)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1L << (PLSQL_RESERVED_CRASH - 512)) | (1L << (SQL92_RESERVED_CREATE - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SQL92_RESERVED_CURRENT - 576)) | (1L << (SQL92_RESERVED_CURSOR - 576)) | (1L << (SQL92_RESERVED_DATE - 576)) | (1L << (SQL92_RESERVED_DECLARE - 576)) | (1L << (SQL92_RESERVED_DEFAULT - 576)) | (1L << (SQL92_RESERVED_DELETE - 576)) | (1L << (SQL92_RESERVED_DESC - 576)) | (1L << (SQL92_RESERVED_DISTINCT - 576)) | (1L << (SQL92_RESERVED_DROP - 576)) | (1L << (SQL92_RESERVED_ELSE - 576)) | (1L << (SQL92_RESERVED_END - 576)) | (1L << (SQL92_RESERVED_EXCEPTION - 576)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 576)) | (1L << (SQL92_RESERVED_EXISTS - 576)) | (1L << (SQL92_RESERVED_FALSE - 576)) | (1L << (SQL92_RESERVED_FETCH - 576)) | (1L << (SQL92_RESERVED_FOR - 576)) | (1L << (SQL92_RESERVED_FROM - 576)) | (1L << (SQL92_RESERVED_GOTO - 576)) | (1L << (SQL92_RESERVED_GRANT - 576)) | (1L << (SQL92_RESERVED_GROUP - 576)) | (1L << (SQL92_RESERVED_HAVING - 576)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)) | (1L << (PLSQL_RESERVED_RESOURCE - 576)) | (1L << (SQL92_RESERVED_REVOKE - 576)) | (1L << (SQL92_RESERVED_SELECT - 576)) | (1L << (PLSQL_RESERVED_SHARE - 576)) | (1L << (SQL92_RESERVED_SIZE - 576)) | (1L << (PLSQL_RESERVED_START - 576)) | (1L << (PLSQL_RESERVED_TABAUTH - 576)) | (1L << (SQL92_RESERVED_TABLE - 576)) | (1L << (SQL92_RESERVED_THE - 576)) | (1L << (SQL92_RESERVED_THEN - 576)) | (1L << (SQL92_RESERVED_TO - 576)) | (1L << (SQL92_RESERVED_TRUE - 576)) | (1L << (SQL92_RESERVED_UNION - 576)) | (1L << (SQL92_RESERVED_UNIQUE - 576)) | (1L << (SQL92_RESERVED_UPDATE - 576)) | (1L << (SQL92_RESERVED_VALUES - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SQL92_RESERVED_VIEW - 640)) | (1L << (PLSQL_RESERVED_VIEWS - 640)) | (1L << (SQL92_RESERVED_WHEN - 640)) | (1L << (SQL92_RESERVED_WHERE - 640)) | (1L << (SQL92_RESERVED_WITH - 640)) | (1L << (PLSQL_NON_RESERVED_USING - 640)) | (1L << (PLSQL_NON_RESERVED_MODEL - 640)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 640)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 640)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CREATE - 84)) | (1L << (DELETE - 84)) | (1L << (DROP - 84)) | (1L << (EXPLAIN - 84)))) != 0) || ((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & ((1L << (FUNCTION - 164)) | (1L << (INSERT - 164)) | (1L << (LOCK - 164)))) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(789);
				unit_statement();
				}
				}
				setState(794);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(795);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (CREATE - 84)) | (1L << (DELETE - 84)) | (1L << (DROP - 84)) | (1L << (EXIT - 84)) | (1L << (EXPLAIN - 84)))) != 0) || ((((_la - 164)) & ~0x3f) == 0 && ((1L << (_la - 164)) & ((1L << (FUNCTION - 164)) | (1L << (INSERT - 164)) | (1L << (LOCK - 164)))) != 0) || _la==MERGE || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PROCEDURE - 325)) | (1L << (SELECT - 325)) | (1L << (SET - 325)))) != 0) || ((((_la - 441)) & ~0x3f) == 0 && ((1L << (_la - 441)) & ((1L << (UPDATE - 441)) | (1L << (WHENEVER - 441)) | (1L << (WITH - 441)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (LEFT_PAREN - 527)) | (1L << (SOLIDUS - 527)) | (1L << (PROMPT - 527)))) != 0)) {
				{
				setState(799);
				switch (_input.LA(1)) {
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(797);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(798);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(803);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(804);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(806);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(807);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(808);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(809);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(810);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(811);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(812);
				create_function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(813);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(814);
				create_package();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(815);
				create_table();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(816);
				create_sequence();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(817);
				create_trigger();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(818);
				create_type();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(819);
				drop_function();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(820);
				drop_package();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(821);
				drop_procedure();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(822);
				drop_sequence();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(823);
				drop_trigger();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(824);
				drop_type();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(825);
				data_manipulation_language_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public List<Lob_storage_clauseContext> lob_storage_clause() {
			return getRuleContexts(Lob_storage_clauseContext.class);
		}
		public Lob_storage_clauseContext lob_storage_clause(int i) {
			return getRuleContext(Lob_storage_clauseContext.class,i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(828);
			match(CREATE);
			setState(829);
			match(TABLE);
			setState(833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(830);
				schema_name();
				setState(831);
				match(PERIOD);
				}
				break;
			}
			setState(835);
			tableview_name();
			setState(836);
			match(LEFT_PAREN);
			setState(837);
			field_spec();
			setState(842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(838);
				match(COMMA);
				setState(839);
				field_spec();
				}
				}
				setState(844);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(845);
			match(RIGHT_PAREN);
			setState(847);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (LOGGING - 226)) | (1L << (MAXTRANS - 226)) | (1L << (NOCOMPRESS - 226)) | (1L << (NOLOGGING - 226)))) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (PCTFREE - 309)) | (1L << (PCTUSED - 309)) | (1L << (SEGMENT - 309)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(846);
				physical_properties();
				}
			}

			setState(852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOB) {
				{
				{
				setState(849);
				lob_storage_clause();
				}
				}
				setState(854);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(855);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_properties(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(858);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(857);
				deferred_segment_creation();
				}
			}

			setState(860);
			segment_attributes_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(plsqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeferred_segment_creation(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(862);
			match(SEGMENT);
			setState(863);
			match(CREATION);
			setState(864);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSegment_attributes_clause(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_segment_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(869); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(869);
				switch (_input.LA(1)) {
				case COMPRESS:
				case FILESYSTEM_LIKE_LOGGING:
				case INITRANS:
				case LOGGING:
				case MAXTRANS:
				case NOCOMPRESS:
				case NOLOGGING:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
					{
					setState(866);
					physical_attributes_clause();
					}
					break;
				case TABLESPACE:
					{
					setState(867);
					match(TABLESPACE);
					setState(868);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(871); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (LOGGING - 226)) | (1L << (MAXTRANS - 226)) | (1L << (NOCOMPRESS - 226)) | (1L << (NOLOGGING - 226)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public List<TerminalNode> PCTFREE() { return getTokens(plsqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(plsqlParser.PCTFREE, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(plsqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(plsqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(plsqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(plsqlParser.INITRANS, i);
		}
		public List<TerminalNode> MAXTRANS() { return getTokens(plsqlParser.MAXTRANS); }
		public TerminalNode MAXTRANS(int i) {
			return getToken(plsqlParser.MAXTRANS, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_attributes_clause(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(884); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(884);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(873);
						match(PCTFREE);
						setState(874);
						match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(875);
						match(PCTUSED);
						setState(876);
						match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(877);
						match(INITRANS);
						setState(878);
						match(UNSIGNED_INTEGER);
						}
						break;
					case MAXTRANS:
						{
						setState(879);
						match(MAXTRANS);
						setState(880);
						match(UNSIGNED_INTEGER);
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(881);
						table_compression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(882);
						logging_clause();
						}
						break;
					case STORAGE:
						{
						setState(883);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(886); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(plsqlParser.STORAGE, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(plsqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(plsqlParser.INITIAL, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(plsqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(plsqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(plsqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(plsqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> MAXEXTENTS() { return getTokens(plsqlParser.MAXEXTENTS); }
		public TerminalNode MAXEXTENTS(int i) {
			return getToken(plsqlParser.MAXEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(plsqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(plsqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(plsqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(plsqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(plsqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(plsqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(plsqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(plsqlParser.GROUPS, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(plsqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(plsqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(plsqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(plsqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> CELL_FLASH_CACHE() { return getTokens(plsqlParser.CELL_FLASH_CACHE); }
		public TerminalNode CELL_FLASH_CACHE(int i) {
			return getToken(plsqlParser.CELL_FLASH_CACHE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(plsqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(plsqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(plsqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(plsqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(plsqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(plsqlParser.RECYCLE, i);
		}
		public List<TerminalNode> NONE() { return getTokens(plsqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(plsqlParser.NONE, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStorage_clause(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888);
			match(STORAGE);
			setState(889);
			match(LEFT_PAREN);
			setState(911); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(911);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(890);
					match(INITIAL);
					setState(891);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NEXT:
					{
					setState(892);
					match(NEXT);
					setState(893);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MINEXTENTS:
					{
					setState(894);
					match(MINEXTENTS);
					setState(895);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MAXEXTENTS:
					{
					setState(896);
					match(MAXEXTENTS);
					setState(897);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(898);
					match(PCTINCREASE);
					setState(899);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(900);
					match(FREELISTS);
					setState(901);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(902);
					match(FREELIST);
					setState(903);
					match(GROUPS);
					setState(904);
					match(UNSIGNED_INTEGER);
					}
					break;
				case BUFFER_POOL:
					{
					setState(905);
					match(BUFFER_POOL);
					setState(906);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(907);
					match(FLASH_CACHE);
					setState(908);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case CELL_FLASH_CACHE:
					{
					setState(909);
					match(CELL_FLASH_CACHE);
					setState(910);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(913); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || _la==CELL_FLASH_CACHE || ((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (FLASH_CACHE - 153)) | (1L << (FREELIST - 153)) | (1L << (FREELISTS - 153)) | (1L << (INITIAL - 153)))) != 0) || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (MAXEXTENTS - 235)) | (1L << (MINEXTENTS - 235)) | (1L << (NEXT - 235)))) != 0) || _la==PCTINCREASE );
			setState(915);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(plsqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(plsqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(plsqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(plsqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_compression(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_table_compression);
		int _la;
		try {
			setState(930);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(917);
				match(COMPRESS);
				setState(927);
				switch (_input.LA(1)) {
				case BASIC:
					{
					setState(918);
					match(BASIC);
					}
					break;
				case FOR:
					{
					setState(919);
					match(FOR);
					setState(925);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(920);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(921);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(923);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(922);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case COMPRESS:
				case FILESYSTEM_LIKE_LOGGING:
				case INITRANS:
				case LOB:
				case LOGGING:
				case MAXTRANS:
				case NOCOMPRESS:
				case NOLOGGING:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
				case TABLESPACE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(929);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(plsqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(plsqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogging_clause(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(932);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<Lob_storage_parametersContext> lob_storage_parameters() {
			return getRuleContexts(Lob_storage_parametersContext.class);
		}
		public Lob_storage_parametersContext lob_storage_parameters(int i) {
			return getRuleContext(Lob_storage_parametersContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(plsqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(plsqlParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(plsqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(plsqlParser.BASICFILE, i);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_clause(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_lob_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(934);
			match(LOB);
			setState(935);
			match(LEFT_PAREN);
			setState(936);
			id();
			setState(941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(937);
				match(COMMA);
				setState(938);
				id();
				}
				}
				setState(943);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(944);
			match(RIGHT_PAREN);
			setState(945);
			match(STORE);
			setState(946);
			match(AS);
			setState(952); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(952);
				switch (_input.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					setState(947);
					_la = _input.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case LEFT_PAREN:
					{
					setState(948);
					match(LEFT_PAREN);
					setState(949);
					lob_storage_parameters();
					setState(950);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(954); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BASICFILE || _la==SECUREFILE || _la==LEFT_PAREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Lob_parametersContext> lob_parameters() {
			return getRuleContexts(Lob_parametersContext.class);
		}
		public Lob_parametersContext lob_parameters(int i) {
			return getRuleContext(Lob_parametersContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_parameters(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_lob_storage_parameters);
		int _la;
		try {
			setState(967);
			switch (_input.LA(1)) {
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(962); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(962);
					switch (_input.LA(1)) {
					case TABLESPACE:
						{
						setState(956);
						match(TABLESPACE);
						setState(957);
						id();
						}
						break;
					case CACHE:
					case CHUNK:
					case COMPRESS:
					case DEDUPLICATE:
					case DISABLE:
					case ENABLE:
					case KEEP_DUPLICATES:
					case NOCACHE:
					case NOCOMPRESS:
						{
						setState(958);
						lob_parameters();
						setState(960);
						_la = _input.LA(1);
						if (_la==STORAGE) {
							{
							setState(959);
							storage_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(964); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CHUNK || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (COMPRESS - 69)) | (1L << (DEDUPLICATE - 69)) | (1L << (DISABLE - 69)) | (1L << (ENABLE - 69)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (KEEP_DUPLICATES - 208)) | (1L << (NOCACHE - 208)) | (1L << (NOCOMPRESS - 208)))) != 0) || _la==TABLESPACE );
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(966);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_parametersContext extends ParserRuleContext {
		public List<TerminalNode> STORAGE() { return getTokens(plsqlParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(plsqlParser.STORAGE, i);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> CHUNK() { return getTokens(plsqlParser.CHUNK); }
		public TerminalNode CHUNK(int i) {
			return getToken(plsqlParser.CHUNK, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(plsqlParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(plsqlParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_parameters(this);
		}
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_lob_parameters);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(986); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(986);
					switch (_input.LA(1)) {
					case DISABLE:
					case ENABLE:
						{
						setState(969);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(970);
						match(STORAGE);
						setState(971);
						match(IN);
						setState(972);
						match(ROW);
						}
						break;
					case CHUNK:
						{
						setState(973);
						match(CHUNK);
						setState(974);
						match(UNSIGNED_INTEGER);
						}
						break;
					case DEDUPLICATE:
					case KEEP_DUPLICATES:
						{
						setState(975);
						lob_deduplicate_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(976);
						lob_compression_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(981);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
						case 1:
							{
							setState(977);
							match(CACHE);
							}
							break;
						case 2:
							{
							setState(978);
							match(NOCACHE);
							}
							break;
						case 3:
							{
							setState(979);
							match(CACHE);
							setState(980);
							match(READS);
							}
							break;
						}
						setState(984);
						_la = _input.LA(1);
						if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
							{
							setState(983);
							logging_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(988); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(plsqlParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(plsqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_deduplicate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_deduplicate_clause(this);
		}
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(990);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_compression_clauseContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(plsqlParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Lob_compression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_compression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_compression_clause(this);
		}
	}

	public final Lob_compression_clauseContext lob_compression_clause() throws RecognitionException {
		Lob_compression_clauseContext _localctx = new Lob_compression_clauseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_lob_compression_clause);
		int _la;
		try {
			setState(997);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(992);
				match(COMPRESS);
				setState(994);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(993);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(996);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(999);
			match(DROP);
			setState(1000);
			match(FUNCTION);
			setState(1001);
			function_name();
			setState(1002);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1004);
			match(ALTER);
			setState(1005);
			match(FUNCTION);
			setState(1006);
			function_name();
			setState(1007);
			match(COMPILE);
			setState(1009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1008);
				match(DEBUG);
				}
				break;
			}
			setState(1014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1011);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			}
			setState(1019);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1017);
				match(REUSE);
				setState(1018);
				match(SETTINGS);
				}
			}

			setState(1021);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1028);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1023);
				match(CREATE);
				setState(1026);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1024);
					match(OR);
					setState(1025);
					match(REPLACE);
					}
				}

				}
			}

			setState(1030);
			match(FUNCTION);
			setState(1031);
			function_name();
			setState(1043);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1032);
				match(LEFT_PAREN);
				setState(1033);
				parameter();
				setState(1038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1034);
					match(COMMA);
					setState(1035);
					parameter();
					}
					}
					setState(1040);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1041);
				match(RIGHT_PAREN);
				}
			}

			setState(1045);
			match(RETURN);
			setState(1046);
			type_spec();
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1051);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1047);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1048);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1049);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1050);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				{
				setState(1057);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1056);
					match(PIPELINED);
					}
				}

				setState(1059);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1061);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1060);
						match(DECLARE);
						}
					}

					setState(1066);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
						{
						{
						setState(1063);
						declare_spec();
						}
						}
						setState(1068);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1069);
					body();
					}
					break;
				case 2:
					{
					setState(1070);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1073);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1074);
				match(USING);
				setState(1075);
				implementation_type_name();
				}
				break;
			}
			setState(1078);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1080);
			match(PARALLEL_ENABLE);
			setState(1082);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1081);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1084);
			match(LEFT_PAREN);
			setState(1085);
			match(PARTITION);
			setState(1086);
			expression();
			setState(1087);
			match(BY);
			setState(1101);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(1088);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(1089);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1090);
				match(LEFT_PAREN);
				setState(1091);
				column_name();
				setState(1096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1092);
					match(COMMA);
					setState(1093);
					column_name();
					}
					}
					setState(1098);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1099);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1104);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(1103);
				streaming_clause();
				}
			}

			setState(1106);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1108);
			match(RESULT_CACHE);
			setState(1110);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(1109);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1112);
			match(RELIES_ON);
			setState(1113);
			match(LEFT_PAREN);
			setState(1114);
			tableview_name();
			setState(1119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1115);
				match(COMMA);
				setState(1116);
				tableview_name();
				}
				}
				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1122);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1124);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1125);
			expression();
			setState(1126);
			match(BY);
			setState(1127);
			match(LEFT_PAREN);
			setState(1128);
			column_name();
			setState(1133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1129);
				match(COMMA);
				setState(1130);
				column_name();
				}
				}
				setState(1135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1136);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1138);
			match(DROP);
			setState(1139);
			match(PACKAGE);
			setState(1141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1140);
				match(BODY);
				}
				break;
			}
			setState(1143);
			package_name();
			setState(1144);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1146);
			match(ALTER);
			setState(1147);
			match(PACKAGE);
			setState(1148);
			package_name();
			setState(1149);
			match(COMPILE);
			setState(1151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1150);
				match(DEBUG);
				}
				break;
			}
			setState(1154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(1153);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1156);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,57,_ctx);
			}
			setState(1164);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1162);
				match(REUSE);
				setState(1163);
				match(SETTINGS);
				}
			}

			setState(1166);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1168);
			match(CREATE);
			setState(1171);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1169);
				match(OR);
				setState(1170);
				match(REPLACE);
				}
			}

			setState(1173);
			match(PACKAGE);
			setState(1176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1174);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1175);
				package_body();
				}
				break;
			}
			setState(1178);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1180);
			match(BODY);
			setState(1181);
			package_name();
			setState(1182);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1183);
				package_obj_body();
				}
				}
				setState(1188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1195);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1189);
				match(BEGIN);
				setState(1190);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1191);
				match(END);
				setState(1193);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					setState(1192);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1197);
			package_name();
			setState(1199);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1198);
				invoker_rights_clause();
				}
			}

			setState(1201);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1202);
				package_obj_spec();
				}
				}
				setState(1207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1208);
			match(END);
			setState(1210);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1209);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_package_obj_spec);
		try {
			setState(1220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1212);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1213);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1214);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1215);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1216);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1217);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1218);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1219);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			match(PROCEDURE);
			setState(1223);
			procedure_name();
			setState(1235);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1224);
				match(LEFT_PAREN);
				setState(1225);
				parameter();
				setState(1230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1226);
					match(COMMA);
					setState(1227);
					parameter();
					}
					}
					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1233);
				match(RIGHT_PAREN);
				}
			}

			setState(1237);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1239);
			match(FUNCTION);
			setState(1240);
			function_name();
			setState(1252);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1241);
				match(LEFT_PAREN);
				setState(1242);
				parameter();
				setState(1247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1243);
					match(COMMA);
					setState(1244);
					parameter();
					}
					}
					setState(1249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1250);
				match(RIGHT_PAREN);
				}
			}

			setState(1254);
			match(RETURN);
			setState(1255);
			type_spec();
			setState(1256);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_package_obj_body);
		try {
			setState(1268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1258);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1259);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1260);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1261);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1262);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1263);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1264);
				create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1265);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1266);
				procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1267);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(DROP);
			setState(1271);
			match(PROCEDURE);
			setState(1272);
			procedure_name();
			setState(1273);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1275);
			match(ALTER);
			setState(1276);
			match(PROCEDURE);
			setState(1277);
			procedure_name();
			setState(1278);
			match(COMPILE);
			setState(1280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1279);
				match(DEBUG);
				}
				break;
			}
			setState(1285);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1282);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1287);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			setState(1290);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1288);
				match(REUSE);
				setState(1289);
				match(SETTINGS);
				}
			}

			setState(1292);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1299);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1294);
				match(CREATE);
				setState(1297);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1295);
					match(OR);
					setState(1296);
					match(REPLACE);
					}
				}

				}
			}

			setState(1301);
			match(PROCEDURE);
			setState(1302);
			procedure_name();
			setState(1314);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1303);
				match(LEFT_PAREN);
				setState(1304);
				parameter();
				setState(1309);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1305);
					match(COMMA);
					setState(1306);
					parameter();
					}
					}
					setState(1311);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1312);
				match(RIGHT_PAREN);
				}
			}

			setState(1317);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1316);
				invoker_rights_clause();
				}
			}

			setState(1319);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1321);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1320);
					match(DECLARE);
					}
				}

				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1323);
					declare_spec();
					}
					}
					setState(1328);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1329);
				body();
				}
				break;
			case 2:
				{
				setState(1330);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1331);
				match(EXTERNAL);
				}
				break;
			}
			setState(1334);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(DROP);
			setState(1337);
			match(TRIGGER);
			setState(1338);
			trigger_name();
			setState(1339);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(ALTER);
			setState(1342);
			match(TRIGGER);
			setState(1343);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1362);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1344);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1345);
				match(RENAME);
				setState(1346);
				match(TO);
				setState(1347);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1348);
				match(COMPILE);
				setState(1350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					setState(1349);
					match(DEBUG);
					}
					break;
				}
				setState(1355);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1352);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1357);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
				}
				setState(1360);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1358);
					match(REUSE);
					setState(1359);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1364);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(CREATE);
			setState(1369);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1367);
				match(OR);
				setState(1368);
				match(REPLACE);
				}
			}

			setState(1371);
			match(TRIGGER);
			setState(1372);
			trigger_name();
			setState(1376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1373);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1374);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1375);
				non_dml_trigger();
				}
				break;
			}
			setState(1379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1378);
				trigger_follows_clause();
				}
				break;
			}
			setState(1382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1381);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1385);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1384);
				trigger_when_clause();
				}
			}

			setState(1387);
			trigger_body();
			setState(1388);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			match(FOLLOWS);
			setState(1391);
			trigger_name();
			setState(1396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1392);
				match(COMMA);
				setState(1393);
				trigger_name();
				}
				}
				setState(1398);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1399);
			match(WHEN);
			setState(1400);
			match(LEFT_PAREN);
			setState(1401);
			condition();
			setState(1402);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1408);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1404);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1405);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1406);
				match(INSTEAD);
				setState(1407);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1410);
			dml_event_clause();
			setState(1412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(1411);
				referencing_clause();
				}
				break;
			}
			setState(1415);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1414);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1417);
			match(FOR);
			setState(1418);
			match(EACH);
			setState(1419);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1421);
			match(FOR);
			setState(1422);
			dml_event_clause();
			setState(1424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1423);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1426);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1427);
			non_dml_event();
			setState(1432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1428);
				match(OR);
				setState(1429);
				non_dml_event();
				}
				}
				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1435);
			match(ON);
			setState(1443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1436);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1437);
					schema_name();
					setState(1438);
					match(PERIOD);
					}
					break;
				}
				setState(1442);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_trigger_body);
		try {
			setState(1450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1445);
				match(COMPOUND);
				setState(1446);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1447);
				match(CALL);
				setState(1448);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1449);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			routine_name();
			setState(1454);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1453);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1456);
			match(COMPOUND);
			setState(1457);
			match(TRIGGER);
			setState(1461);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1458);
					declare_spec();
					}
					} 
				}
				setState(1463);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
			}
			setState(1465); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1464);
				timing_point_section();
				}
				}
				setState(1467); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1469);
			match(END);
			setState(1470);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_timing_point_section);
		try {
			setState(1508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1472);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1473);
				match(STATEMENT);
				setState(1474);
				match(IS);
				setState(1475);
				trigger_block();
				setState(1476);
				match(BEFORE);
				setState(1477);
				match(STATEMENT);
				setState(1478);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1480);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1481);
				match(EACH);
				setState(1482);
				match(ROW);
				setState(1483);
				match(IS);
				setState(1484);
				trigger_block();
				setState(1485);
				match(BEFORE);
				setState(1486);
				match(EACH);
				setState(1487);
				match(ROW);
				setState(1488);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1490);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1491);
				match(STATEMENT);
				setState(1492);
				match(IS);
				setState(1493);
				trigger_block();
				setState(1494);
				match(AFTER);
				setState(1495);
				match(STATEMENT);
				setState(1496);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1498);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1499);
				match(EACH);
				setState(1500);
				match(ROW);
				setState(1501);
				match(IS);
				setState(1502);
				trigger_block();
				setState(1503);
				match(AFTER);
				setState(1504);
				match(EACH);
				setState(1505);
				match(ROW);
				setState(1506);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_non_dml_event);
		try {
			setState(1536);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1510);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1511);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1512);
				match(ASSOCIATE);
				setState(1513);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1514);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1515);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1516);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1517);
				match(DISASSOCIATE);
				setState(1518);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1519);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1520);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1521);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1522);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1523);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1524);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1525);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1526);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1527);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1528);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1529);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1530);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1531);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1532);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1533);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1534);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1535);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1538);
			dml_event_element();
			setState(1543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1539);
				match(OR);
				setState(1540);
				dml_event_element();
				}
				}
				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1546);
			match(ON);
			setState(1548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(1547);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1550);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1562);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1553);
				match(OF);
				setState(1554);
				column_name();
				setState(1559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1555);
					match(COMMA);
					setState(1556);
					column_name();
					}
					}
					setState(1561);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1564);
			match(NESTED);
			setState(1565);
			match(TABLE);
			setState(1566);
			tableview_name();
			setState(1567);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1569);
			match(REFERENCING);
			setState(1571); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1570);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1573); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,111,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1575);
			_la = _input.LA(1);
			if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (NEW - 261)) | (1L << (OLD - 261)) | (1L << (PARENT - 261)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1576);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1578);
			match(DROP);
			setState(1579);
			match(TYPE);
			setState(1581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1580);
				match(BODY);
				}
				break;
			}
			setState(1583);
			type_name();
			setState(1585);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1584);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1587);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1589);
			match(ALTER);
			setState(1590);
			match(TYPE);
			setState(1591);
			type_name();
			setState(1597);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1592);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1593);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1594);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1595);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1596);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1600);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1599);
				dependent_handling_clause();
				}
			}

			setState(1602);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1604);
			match(COMPILE);
			setState(1606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1605);
				match(DEBUG);
				}
				break;
			}
			setState(1609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1608);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1614);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1611);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1616);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,118,_ctx);
			}
			setState(1619);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1617);
				match(REUSE);
				setState(1618);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1621);
			match(REPLACE);
			setState(1623);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1622);
				invoker_rights_clause();
				}
			}

			setState(1625);
			match(AS);
			setState(1626);
			match(OBJECT);
			setState(1627);
			match(LEFT_PAREN);
			setState(1628);
			object_member_spec();
			setState(1633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1629);
				match(COMMA);
				setState(1630);
				object_member_spec();
				}
				}
				setState(1635);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1636);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1638);
			alter_method_element();
			setState(1643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1639);
				match(COMMA);
				setState(1640);
				alter_method_element();
				}
				}
				setState(1645);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1646);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1649);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1647);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1648);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1651);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1652);
			match(ATTRIBUTE);
			setState(1665);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1653);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1654);
				match(LEFT_PAREN);
				setState(1655);
				attribute_definition();
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1656);
					match(COMMA);
					setState(1657);
					attribute_definition();
					}
					}
					setState(1662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1663);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			attribute_name();
			setState(1669);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1668);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			match(MODIFY);
			setState(1677);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1672);
				match(LIMIT);
				setState(1673);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1674);
				match(ELEMENT);
				setState(1675);
				match(TYPE);
				setState(1676);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1695);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1679);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1680);
				match(CASCADE);
				setState(1690);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1681);
					match(CONVERT);
					setState(1682);
					match(TO);
					setState(1683);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1685);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1684);
						match(NOT);
						}
					}

					setState(1687);
					match(INCLUDING);
					setState(1688);
					match(TABLE);
					setState(1689);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1693);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1692);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1697);
				match(FORCE);
				}
			}

			setState(1700);
			match(EXCEPTIONS);
			setState(1701);
			match(INTO);
			setState(1702);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(CREATE);
			setState(1707);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1705);
				match(OR);
				setState(1706);
				match(REPLACE);
				}
			}

			setState(1709);
			match(TYPE);
			setState(1712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1710);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1711);
				type_body();
				}
				break;
			}
			setState(1714);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			type_name();
			setState(1719);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1717);
				match(OID);
				setState(1718);
				match(CHAR_STRING);
				}
			}

			setState(1722);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1721);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1725);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1724);
				invoker_rights_clause();
				}
			}

			setState(1729);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1727);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1728);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1732);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1731);
				sqlj_object_type();
				}
			}

			setState(1745);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1734);
				match(LEFT_PAREN);
				setState(1735);
				object_member_spec();
				setState(1740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1736);
					match(COMMA);
					setState(1737);
					object_member_spec();
					}
					}
					setState(1742);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1743);
				match(RIGHT_PAREN);
				}
			}

			setState(1750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1747);
				modifier_clause();
				}
				}
				setState(1752);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1753);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1757);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1754);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1755);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1756);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1759);
			match(UNDER);
			setState(1760);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1762);
			match(TABLE);
			setState(1763);
			match(OF);
			setState(1764);
			type_spec();
			setState(1767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1765);
				match(NOT);
				setState(1766);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1769);
			match(EXTERNAL);
			setState(1770);
			match(NAME);
			setState(1771);
			expression();
			setState(1772);
			match(LANGUAGE);
			setState(1773);
			match(JAVA);
			setState(1774);
			match(USING);
			setState(1775);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			match(BODY);
			setState(1778);
			type_name();
			setState(1779);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1780);
			type_body_elements();
			setState(1785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1781);
				match(COMMA);
				setState(1782);
				type_body_elements();
				}
				}
				setState(1787);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1788);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_type_body_elements);
		try {
			setState(1792);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1790);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1791);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1795);
			match(MEMBER);
			setState(1796);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1802);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1799);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1800);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1801);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			match(PROCEDURE);
			setState(1805);
			procedure_name();
			setState(1806);
			match(LEFT_PAREN);
			setState(1807);
			type_elements_parameter();
			setState(1812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1808);
				match(COMMA);
				setState(1809);
				type_elements_parameter();
				}
				}
				setState(1814);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1815);
			match(RIGHT_PAREN);
			setState(1816);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1817);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1819);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1818);
					match(DECLARE);
					}
				}

				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1821);
					declare_spec();
					}
					}
					setState(1826);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1827);
				body();
				setState(1828);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			match(FUNCTION);
			setState(1833);
			function_name();
			setState(1845);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1834);
				match(LEFT_PAREN);
				setState(1835);
				type_elements_parameter();
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1836);
					match(COMMA);
					setState(1837);
					type_elements_parameter();
					}
					}
					setState(1842);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1843);
				match(RIGHT_PAREN);
				}
			}

			setState(1847);
			match(RETURN);
			setState(1848);
			type_spec();
			setState(1849);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1850);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1852);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1851);
					match(DECLARE);
					}
				}

				setState(1857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1854);
					declare_spec();
					}
					}
					setState(1859);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1860);
				body();
				setState(1861);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1866);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1865);
				match(FINAL);
				}
			}

			setState(1869);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1868);
				match(INSTANTIABLE);
				}
			}

			setState(1871);
			match(CONSTRUCTOR);
			setState(1872);
			match(FUNCTION);
			setState(1873);
			type_spec();
			setState(1891);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1874);
				match(LEFT_PAREN);
				{
				setState(1875);
				match(SELF);
				setState(1876);
				match(IN);
				setState(1877);
				match(OUT);
				setState(1878);
				type_spec();
				setState(1879);
				match(COMMA);
				}
				setState(1881);
				type_elements_parameter();
				setState(1886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1882);
					match(COMMA);
					setState(1883);
					type_elements_parameter();
					}
					}
					setState(1888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1889);
				match(RIGHT_PAREN);
				}
			}

			setState(1893);
			match(RETURN);
			setState(1894);
			match(SELF);
			setState(1895);
			match(AS);
			setState(1896);
			match(RESULT);
			setState(1897);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1911);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1898);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1900);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1899);
					match(DECLARE);
					}
				}

				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1902);
					declare_spec();
					}
					}
					setState(1907);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1908);
				body();
				setState(1909);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1913);
				match(NOT);
				}
			}

			setState(1916);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_object_member_spec);
		int _la;
		try {
			setState(1924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1918);
				id();
				setState(1919);
				type_spec();
				setState(1921);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1920);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1923);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926);
			match(EXTERNAL);
			setState(1927);
			match(NAME);
			setState(1928);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1930);
				modifier_clause();
				}
				break;
			}
			setState(1934); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1933);
				element_spec_options();
				}
				}
				setState(1936); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (MAP - 233)) | (1L << (MEMBER - 233)) | (1L << (ORDER - 233)))) != 0) || _la==STATIC );
			setState(1940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1938);
				match(COMMA);
				setState(1939);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_element_spec_options);
		try {
			setState(1945);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1942);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1943);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1944);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1950);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1948);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1949);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			match(PROCEDURE);
			setState(1953);
			procedure_name();
			setState(1954);
			match(LEFT_PAREN);
			setState(1955);
			type_elements_parameter();
			setState(1960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1956);
				match(COMMA);
				setState(1957);
				type_elements_parameter();
				}
				}
				setState(1962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1963);
			match(RIGHT_PAREN);
			setState(1966);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1964);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1965);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			match(FUNCTION);
			setState(1969);
			function_name();
			setState(1981);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1970);
				match(LEFT_PAREN);
				setState(1971);
				type_elements_parameter();
				setState(1976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1972);
					match(COMMA);
					setState(1973);
					type_elements_parameter();
					}
					}
					setState(1978);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1979);
				match(RIGHT_PAREN);
				}
			}

			setState(1983);
			match(RETURN);
			setState(1988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(1984);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1985);
				match(SELF);
				setState(1986);
				match(AS);
				setState(1987);
				match(RESULT);
				}
				break;
			}
			setState(1998);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1990);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1991);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1992);
				match(EXTERNAL);
				setState(1994);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1993);
					match(VARIABLE);
					}
				}

				setState(1996);
				match(NAME);
				setState(1997);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2001);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2000);
				match(FINAL);
				}
			}

			setState(2004);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2003);
				match(INSTANTIABLE);
				}
			}

			setState(2006);
			match(CONSTRUCTOR);
			setState(2007);
			match(FUNCTION);
			setState(2008);
			type_spec();
			setState(2026);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2009);
				match(LEFT_PAREN);
				{
				setState(2010);
				match(SELF);
				setState(2011);
				match(IN);
				setState(2012);
				match(OUT);
				setState(2013);
				type_spec();
				setState(2014);
				match(COMMA);
				}
				setState(2016);
				type_elements_parameter();
				setState(2021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2017);
					match(COMMA);
					setState(2018);
					type_elements_parameter();
					}
					}
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2024);
				match(RIGHT_PAREN);
				}
			}

			setState(2028);
			match(RETURN);
			setState(2029);
			match(SELF);
			setState(2030);
			match(AS);
			setState(2031);
			match(RESULT);
			setState(2034);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2032);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2033);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2036);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2037);
			match(MEMBER);
			setState(2038);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2040);
			match(PRAGMA);
			setState(2041);
			match(RESTRICT_REFERENCES);
			setState(2042);
			match(LEFT_PAREN);
			setState(2043);
			pragma_elements();
			setState(2048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2044);
				match(COMMA);
				setState(2045);
				pragma_elements();
				}
				}
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2051);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_pragma_elements);
		try {
			setState(2055);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2053);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2054);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			parameter_name();
			setState(2058);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(DROP);
			setState(2061);
			match(SEQUENCE);
			setState(2062);
			sequence_name();
			setState(2063);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2065);
			match(ALTER);
			setState(2066);
			match(SEQUENCE);
			setState(2067);
			sequence_name();
			setState(2069); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2068);
				sequence_spec();
				}
				}
				setState(2071); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (MINVALUE - 245)) | (1L << (NOCACHE - 245)) | (1L << (NOCYCLE - 245)) | (1L << (NOMAXVALUE - 245)) | (1L << (NOMINVALUE - 245)) | (1L << (NOORDER - 245)) | (1L << (ORDER - 245)))) != 0) );
			setState(2073);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(CREATE);
			setState(2076);
			match(SEQUENCE);
			setState(2077);
			sequence_name();
			setState(2082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (MINVALUE - 245)) | (1L << (NOCACHE - 245)) | (1L << (NOCYCLE - 245)) | (1L << (NOMAXVALUE - 245)) | (1L << (NOMINVALUE - 245)) | (1L << (NOORDER - 245)) | (1L << (ORDER - 245)))) != 0) || _la==START) {
				{
				setState(2080);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2078);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2079);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2085);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_sequence_spec);
		try {
			setState(2103);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2087);
				match(INCREMENT);
				setState(2088);
				match(BY);
				setState(2089);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2090);
				match(MAXVALUE);
				setState(2091);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2092);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2093);
				match(MINVALUE);
				setState(2094);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2095);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2096);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2097);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2098);
				match(CACHE);
				setState(2099);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2100);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2101);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2102);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2105);
			match(START);
			setState(2106);
			match(WITH);
			setState(2107);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			match(AUTHID);
			setState(2110);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			id();
			setState(2113);
			match(EQUALS_OP);
			setState(2114);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2116);
			match(LANGUAGE);
			setState(2119);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2117);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2118);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2121);
			match(JAVA);
			setState(2122);
			match(NAME);
			setState(2123);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2125);
			match(C_LETTER);
			setState(2128);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2126);
				match(NAME);
				setState(2127);
				match(CHAR_STRING);
				}
			}

			setState(2130);
			match(LIBRARY);
			setState(2131);
			id();
			setState(2133);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2132);
				c_agent_in_clause();
				}
			}

			setState(2137);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2135);
				match(WITH);
				setState(2136);
				match(CONTEXT);
				}
			}

			setState(2140);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2139);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			match(AGENT);
			setState(2143);
			match(IN);
			setState(2144);
			match(LEFT_PAREN);
			setState(2145);
			expression();
			setState(2150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2146);
				match(COMMA);
				setState(2147);
				expression();
				}
				}
				setState(2152);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2153);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			match(PARAMETERS);
			setState(2156);
			match(LEFT_PAREN);
			setState(2168);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2157);
				expression();
				setState(2162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2158);
					match(COMMA);
					setState(2159);
					expression();
					}
					}
					setState(2164);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2165);
				match(PERIOD);
				setState(2166);
				match(PERIOD);
				setState(2167);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2170);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2172);
			parameter_name();
			setState(2176);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2173);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					} 
				}
				setState(2178);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,198,_ctx);
			}
			setState(2180);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2179);
				type_spec();
				}
			}

			setState(2183);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2182);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2186);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_declare_spec);
		try {
			setState(2197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2188);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2189);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2190);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2191);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2192);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2193);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2194);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2195);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2196);
				create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			variable_name();
			setState(2201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2200);
				match(CONSTANT);
				}
				break;
			}
			setState(2203);
			type_spec();
			setState(2206);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2204);
				match(NOT);
				setState(2205);
				match(NULL);
				}
			}

			setState(2209);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2208);
				default_value_part();
				}
			}

			setState(2211);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2213);
			match(SUBTYPE);
			setState(2214);
			type_name();
			setState(2215);
			match(IS);
			setState(2216);
			type_spec();
			setState(2222);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2217);
				match(RANGE);
				setState(2218);
				expression();
				setState(2219);
				match(T__0);
				setState(2220);
				expression();
				}
			}

			setState(2226);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2224);
				match(NOT);
				setState(2225);
				match(NULL);
				}
			}

			setState(2228);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2230);
			match(CURSOR);
			setState(2231);
			cursor_name();
			setState(2243);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2232);
				match(LEFT_PAREN);
				setState(2233);
				parameter_spec();
				setState(2238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2234);
					match(COMMA);
					setState(2235);
					parameter_spec();
					}
					}
					setState(2240);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2241);
				match(RIGHT_PAREN);
				}
			}

			setState(2247);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2245);
				match(RETURN);
				setState(2246);
				type_spec();
				}
			}

			setState(2251);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2249);
				match(IS);
				setState(2250);
				select_statement();
				}
			}

			setState(2253);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			parameter_name();
			setState(2260);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2257);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2256);
					match(IN);
					}
				}

				setState(2259);
				type_spec();
				}
			}

			setState(2263);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2262);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265);
			exception_name();
			setState(2266);
			match(EXCEPTION);
			setState(2267);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2269);
			match(PRAGMA);
			setState(2300);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2270);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2271);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2272);
				match(EXCEPTION_INIT);
				setState(2273);
				match(LEFT_PAREN);
				setState(2274);
				exception_name();
				setState(2275);
				match(COMMA);
				setState(2276);
				numeric_negative();
				setState(2277);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2279);
				match(INLINE);
				setState(2280);
				match(LEFT_PAREN);
				setState(2281);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2282);
				match(COMMA);
				setState(2283);
				expression();
				setState(2284);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2286);
				match(RESTRICT_REFERENCES);
				setState(2287);
				match(LEFT_PAREN);
				setState(2290);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2288);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2289);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2294); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2292);
					match(COMMA);
					setState(2293);
					id();
					}
					}
					setState(2296); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2298);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2302);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_record_declaration);
		try {
			setState(2306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2304);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2305);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2308);
			match(TYPE);
			setState(2309);
			type_name();
			setState(2310);
			match(IS);
			setState(2329);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2311);
				match(RECORD);
				setState(2312);
				match(LEFT_PAREN);
				setState(2313);
				field_spec();
				setState(2318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2314);
					match(COMMA);
					setState(2315);
					field_spec();
					}
					}
					setState(2320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2321);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2323);
				match(REF);
				setState(2324);
				match(CURSOR);
				setState(2327);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2325);
					match(RETURN);
					setState(2326);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2331);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2333);
			column_name();
			setState(2335);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2334);
				type_spec();
				}
			}

			setState(2339);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2337);
				match(NOT);
				setState(2338);
				match(NULL);
				}
			}

			setState(2342);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2341);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344);
			record_name();
			setState(2345);
			type_name();
			setState(2346);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2347);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2349);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2350);
				table_var_dec();
				}
				break;
			}
			setState(2353);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355);
			match(TYPE);
			setState(2356);
			type_name();
			setState(2357);
			match(IS);
			setState(2369);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2358);
				match(TABLE);
				setState(2359);
				match(OF);
				setState(2360);
				type_spec();
				setState(2362);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2361);
					table_indexed_by_part();
					}
				}

				setState(2366);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2364);
					match(NOT);
					setState(2365);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2368);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2373);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2371);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2372);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2375);
			match(BY);
			setState(2376);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2381);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2378);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2379);
				match(VARYING);
				setState(2380);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2383);
			match(LEFT_PAREN);
			setState(2384);
			expression();
			setState(2385);
			match(RIGHT_PAREN);
			setState(2386);
			match(OF);
			setState(2387);
			type_spec();
			setState(2390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2388);
				match(NOT);
				setState(2389);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			table_var_name();
			setState(2393);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2399);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2395);
					statement();
					setState(2396);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2398);
					label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2401); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITH - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2403);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2404);
			match(LESS_THAN_OP);
			setState(2405);
			label_name();
			setState(2406);
			match(GREATER_THAN_OP);
			setState(2407);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_statement);
		try {
			setState(2432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2409);
				match(CREATE);
				setState(2410);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2411);
				match(ALTER);
				setState(2412);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2413);
				match(GRANT);
				setState(2414);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2415);
				match(TRUNCATE);
				setState(2416);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2417);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2418);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2419);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2420);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2421);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2422);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2423);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2424);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2425);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2426);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2427);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2428);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2429);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2430);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2431);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2434);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2435);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2438);
			match(ASSIGN_OP);
			setState(2439);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			match(CONTINUE);
			setState(2443);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2442);
				label_name();
				}
			}

			setState(2447);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2445);
				match(WHEN);
				setState(2446);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			match(EXIT);
			setState(2451);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2450);
				label_name();
				}
			}

			setState(2455);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2453);
				match(WHEN);
				setState(2454);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2457);
			match(GOTO);
			setState(2458);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2460);
			match(IF);
			setState(2461);
			condition();
			setState(2462);
			match(THEN);
			setState(2463);
			seq_of_statements();
			setState(2467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2464);
				elsif_part();
				}
				}
				setState(2469);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2471);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2470);
				else_part();
				}
			}

			setState(2473);
			match(END);
			setState(2474);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(ELSIF);
			setState(2477);
			condition();
			setState(2478);
			match(THEN);
			setState(2479);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(ELSE);
			setState(2482);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2484);
				label_name();
				}
				break;
			}
			setState(2491);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2487);
				match(WHILE);
				setState(2488);
				condition();
				}
				break;
			case FOR:
				{
				setState(2489);
				match(FOR);
				setState(2490);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2493);
			match(LOOP);
			setState(2494);
			seq_of_statements();
			setState(2495);
			match(END);
			setState(2496);
			match(LOOP);
			setState(2498);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2497);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2500);
				index_name();
				setState(2501);
				match(IN);
				setState(2503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2502);
					match(REVERSE);
					}
					break;
				}
				setState(2505);
				lower_bound();
				setState(2506);
				match(T__0);
				setState(2507);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2509);
				record_name();
				setState(2510);
				match(IN);
				setState(2519);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2511);
					cursor_name();
					setState(2513);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2512);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2515);
					match(LEFT_PAREN);
					setState(2516);
					select_statement();
					setState(2517);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2523);
			match(FORALL);
			setState(2524);
			index_name();
			setState(2525);
			match(IN);
			setState(2526);
			bounds_clause();
			setState(2527);
			sql_statement();
			setState(2530);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2528);
				match(SAVE);
				setState(2529);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_bounds_clause);
		int _la;
		try {
			setState(2545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2532);
				lower_bound();
				setState(2533);
				match(T__0);
				setState(2534);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2536);
				match(INDICES);
				setState(2537);
				match(OF);
				setState(2538);
				collection_name();
				setState(2540);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2539);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2542);
				match(VALUES);
				setState(2543);
				match(OF);
				setState(2544);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2547);
			match(BETWEEN);
			setState(2548);
			lower_bound();
			setState(2549);
			match(AND);
			setState(2550);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2552);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2556);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			match(RAISE);
			setState(2560);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2559);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(RETURN);
			setState(2564);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIOR - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2563);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				setState(2566);
				match(CALL);
				}
				break;
			}
			setState(2569);
			routine_name();
			setState(2571);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2570);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2573);
			match(BEGIN);
			setState(2574);
			seq_of_statements();
			setState(2576);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2575);
				exception_clause();
				}
			}

			setState(2578);
			match(END);
			setState(2580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2579);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_clause(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2582);
			match(EXCEPTION);
			setState(2584); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2583);
				exception_handler();
				}
				}
				setState(2586); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2588);
			match(WHEN);
			setState(2589);
			exception_name();
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2590);
				match(OR);
				setState(2591);
				exception_name();
				}
				}
				setState(2596);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2597);
			match(THEN);
			setState(2598);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2608);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2601);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2600);
					match(DECLARE);
					}
				}

				setState(2604); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2603);
					declare_spec();
					}
					}
					setState(2606); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID );
				}
			}

			setState(2610);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2612);
				match(DECLARE);
				}
			}

			setState(2616); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2615);
				declare_spec();
				}
				}
				setState(2618); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PROCEDURE - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID );
			setState(2620);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_sql_statement);
		try {
			setState(2626);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2622);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2623);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2624);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2625);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			match(EXECUTE);
			setState(2629);
			match(IMMEDIATE);
			setState(2630);
			expression();
			setState(2640);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2631);
				into_clause();
				setState(2633);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2632);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2635);
				using_clause();
				setState(2637);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2636);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2639);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2643);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_data_manipulation_language_statements);
		try {
			setState(2652);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2645);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2646);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2647);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2648);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2649);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2650);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2651);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_cursor_manipulation_statements);
		try {
			setState(2658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2654);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2655);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2656);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2657);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2660);
			match(CLOSE);
			setState(2661);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			match(OPEN);
			setState(2664);
			cursor_name();
			setState(2666);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2665);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2668);
			match(FETCH);
			setState(2669);
			cursor_name();
			setState(2690);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2670);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2671);
				variable_name();
				setState(2676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2672);
					match(COMMA);
					setState(2673);
					variable_name();
					}
					}
					setState(2678);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2679);
				match(BULK);
				setState(2680);
				match(COLLECT);
				setState(2681);
				match(INTO);
				setState(2682);
				variable_name();
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2683);
					match(COMMA);
					setState(2684);
					variable_name();
					}
					}
					setState(2689);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			match(OPEN);
			setState(2693);
			variable_name();
			setState(2694);
			match(FOR);
			setState(2697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2695);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2696);
				expression();
				}
				break;
			}
			setState(2700);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2699);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_transaction_control_statements);
		try {
			setState(2707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2702);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2703);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2704);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2705);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2706);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2709);
			match(SET);
			setState(2710);
			match(TRANSACTION);
			setState(2724);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2711);
				match(READ);
				setState(2712);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2713);
				match(ISOLATION);
				setState(2714);
				match(LEVEL);
				setState(2718);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2715);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2716);
					match(READ);
					setState(2717);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2720);
				match(USE);
				setState(2721);
				match(ROLLBACK);
				setState(2722);
				match(SEGMENT);
				setState(2723);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2728);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2726);
				match(NAME);
				setState(2727);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2730);
			match(SET);
			setState(2731);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2741);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2732);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2733);
				constraint_name();
				setState(2738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2734);
					match(COMMA);
					setState(2735);
					constraint_name();
					}
					}
					setState(2740);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2743);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			match(COMMIT);
			setState(2747);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2746);
				match(WORK);
				}
			}

			setState(2762);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2749);
				match(COMMENT);
				setState(2750);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2751);
				match(FORCE);
				setState(2760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2752);
					match(CORRUPT_XID);
					setState(2753);
					expression();
					}
					break;
				case 2:
					{
					setState(2754);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2755);
					expression();
					setState(2758);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2756);
						match(COMMA);
						setState(2757);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2765);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2764);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			match(WRITE);
			setState(2769);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2768);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2772);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2771);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(ROLLBACK);
			setState(2776);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2775);
				match(WORK);
				}
			}

			setState(2785);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2778);
				match(TO);
				setState(2780);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2779);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2782);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2783);
				match(FORCE);
				setState(2784);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			match(SAVEPOINT);
			setState(2788);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2790);
			match(EXPLAIN);
			setState(2791);
			match(PLAN);
			setState(2796);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2792);
				match(SET);
				setState(2793);
				match(STATEMENT_ID);
				setState(2794);
				match(EQUALS_OP);
				setState(2795);
				quoted_string();
				}
			}

			setState(2800);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2798);
				match(INTO);
				setState(2799);
				tableview_name();
				}
			}

			setState(2802);
			match(FOR);
			setState(2808);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2803);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2804);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2805);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2806);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2807);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2810);
				subquery_factoring_clause();
				}
			}

			setState(2813);
			subquery();
			setState(2818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2816);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2814);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2815);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821);
			match(WITH);
			setState(2822);
			factoring_element();
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2823);
				match(COMMA);
				setState(2824);
				factoring_element();
				}
				}
				setState(2829);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			query_name();
			setState(2842);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2831);
				match(LEFT_PAREN);
				setState(2832);
				column_name();
				setState(2837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2833);
					match(COMMA);
					setState(2834);
					column_name();
					}
					}
					setState(2839);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2840);
				match(RIGHT_PAREN);
				}
			}

			setState(2844);
			match(AS);
			setState(2845);
			match(LEFT_PAREN);
			setState(2846);
			subquery();
			setState(2848);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2847);
				order_by_clause();
				}
			}

			setState(2850);
			match(RIGHT_PAREN);
			setState(2852);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2851);
				search_clause();
				}
			}

			setState(2855);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2854);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2857);
			match(SEARCH);
			setState(2858);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2859);
			match(FIRST);
			setState(2860);
			match(BY);
			setState(2861);
			column_name();
			setState(2863);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2862);
				match(ASC);
				}
			}

			setState(2866);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2865);
				match(DESC);
				}
			}

			setState(2870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2868);
				match(NULLS);
				setState(2869);
				match(FIRST);
				}
				break;
			}
			setState(2874);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2872);
				match(NULLS);
				setState(2873);
				match(LAST);
				}
			}

			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2876);
				match(COMMA);
				setState(2877);
				column_name();
				setState(2879);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2878);
					match(ASC);
					}
				}

				setState(2882);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2881);
					match(DESC);
					}
				}

				setState(2886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(2884);
					match(NULLS);
					setState(2885);
					match(FIRST);
					}
					break;
				}
				setState(2890);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2888);
					match(NULLS);
					setState(2889);
					match(LAST);
					}
				}

				}
				}
				setState(2896);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2897);
			match(SET);
			setState(2898);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2900);
			match(CYCLE);
			setState(2901);
			column_name();
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2902);
				match(COMMA);
				setState(2903);
				column_name();
				}
				}
				setState(2908);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2909);
			match(SET);
			setState(2910);
			column_name();
			setState(2911);
			match(TO);
			setState(2912);
			expression();
			setState(2913);
			match(DEFAULT);
			setState(2914);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			subquery_basic_elements();
			setState(2920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(2917);
				subquery_operation_part();
				}
				}
				setState(2922);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2923);
				match(UNION);
				setState(2925);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2924);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2927);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2928);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2931);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_subquery_basic_elements);
		try {
			setState(2938);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2933);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2934);
				match(LEFT_PAREN);
				setState(2935);
				subquery();
				setState(2936);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			match(SELECT);
			setState(2942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2941);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(2953);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2944);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2945);
				selected_element();
				setState(2950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2946);
					match(COMMA);
					setState(2947);
					selected_element();
					}
					}
					setState(2952);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2956);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2955);
				into_clause();
				}
			}

			setState(2958);
			from_clause();
			setState(2960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(2959);
				where_clause();
				}
				break;
			}
			setState(2963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2962);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(2965);
				group_by_clause();
				}
				break;
			}
			setState(2969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(2968);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2971);
			select_list_elements();
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(2972);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			match(FROM);
			setState(2976);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_select_list_elements);
		try {
			setState(2983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2978);
				tableview_name();
				setState(2979);
				match(PERIOD);
				setState(2980);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2982);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2985);
			table_ref();
			setState(2990);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2986);
					match(COMMA);
					setState(2987);
					table_ref();
					}
					} 
				}
				setState(2992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			table_ref_aux();
			setState(2997);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2994);
					join_clause();
					}
					} 
				}
				setState(2999);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
			}
			setState(3002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3000);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3001);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(3004);
				dml_table_expression_clause();
				setState(3007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3005);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3006);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3009);
				match(LEFT_PAREN);
				setState(3010);
				table_ref();
				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3011);
					subquery_operation_part();
					}
					}
					setState(3016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3017);
				match(RIGHT_PAREN);
				setState(3020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					setState(3018);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3019);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3022);
				match(ONLY);
				setState(3023);
				match(LEFT_PAREN);
				setState(3024);
				dml_table_expression_clause();
				setState(3025);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(3027);
				dml_table_expression_clause();
				setState(3030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3028);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3029);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			}
			setState(3037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3034);
					flashback_query_clause();
					}
					} 
				}
				setState(3039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,336,_ctx);
			}
			setState(3041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(3040);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3043);
				query_partition_clause();
				}
			}

			setState(3047);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3046);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3051);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3049);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3050);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3053);
			match(JOIN);
			setState(3054);
			table_ref_aux();
			setState(3056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				setState(3055);
				query_partition_clause();
				}
				break;
			}
			setState(3062);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3060);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3058);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3059);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3064);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			match(ON);
			setState(3066);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3068);
			match(USING);
			setState(3069);
			match(LEFT_PAREN);
			setState(3070);
			column_name();
			setState(3075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3071);
				match(COMMA);
				setState(3072);
				column_name();
				}
				}
				setState(3077);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3078);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3082);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3081);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3084);
			match(PARTITION);
			setState(3085);
			match(BY);
			setState(3099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3086);
				match(LEFT_PAREN);
				setState(3087);
				subquery();
				setState(3088);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3090);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3091);
				expression();
				setState(3096);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3092);
						match(COMMA);
						setState(3093);
						expression();
						}
						} 
					}
					setState(3098);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3109);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3101);
				match(VERSIONS);
				setState(3102);
				match(BETWEEN);
				setState(3103);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3104);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3105);
				match(AS);
				setState(3106);
				match(OF);
				setState(3107);
				_la = _input.LA(1);
				if ( !(((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (SCN - 363)) | (1L << (SNAPSHOT - 363)) | (1L << (TIMESTAMP - 363)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3108);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			match(PIVOT);
			setState(3113);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3112);
				match(XML);
				}
			}

			setState(3115);
			match(LEFT_PAREN);
			setState(3116);
			pivot_element();
			setState(3121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3117);
				match(COMMA);
				setState(3118);
				pivot_element();
				}
				}
				setState(3123);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3124);
			pivot_for_clause();
			setState(3125);
			pivot_in_clause();
			setState(3126);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3128);
			aggregate_function_name();
			setState(3129);
			match(LEFT_PAREN);
			setState(3130);
			expression();
			setState(3131);
			match(RIGHT_PAREN);
			setState(3133);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3132);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			match(FOR);
			setState(3148);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3136);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3137);
				match(LEFT_PAREN);
				setState(3138);
				column_name();
				setState(3143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3139);
					match(COMMA);
					setState(3140);
					column_name();
					}
					}
					setState(3145);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3146);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3150);
			match(IN);
			setState(3151);
			match(LEFT_PAREN);
			setState(3169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3152);
				subquery();
				}
				break;
			case 2:
				{
				setState(3153);
				match(ANY);
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3154);
					match(COMMA);
					setState(3155);
					match(ANY);
					}
					}
					setState(3160);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3161);
				pivot_in_clause_element();
				setState(3166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3162);
					match(COMMA);
					setState(3163);
					pivot_in_clause_element();
					}
					}
					setState(3168);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3171);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			pivot_in_clause_elements();
			setState(3175);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3174);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_pivot_in_clause_elements);
		try {
			setState(3179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3177);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3178);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3181);
			match(UNPIVOT);
			setState(3184);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3182);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3183);
				match(NULLS);
				}
			}

			setState(3186);
			match(LEFT_PAREN);
			setState(3199);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3187);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3188);
				match(LEFT_PAREN);
				setState(3189);
				column_name();
				setState(3194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3190);
					match(COMMA);
					setState(3191);
					column_name();
					}
					}
					setState(3196);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3197);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3201);
			pivot_for_clause();
			setState(3202);
			unpivot_in_clause();
			setState(3203);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			match(IN);
			setState(3206);
			match(LEFT_PAREN);
			setState(3207);
			unpivot_in_elements();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3208);
				match(COMMA);
				setState(3209);
				unpivot_in_elements();
				}
				}
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3215);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3229);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3217);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3218);
				match(LEFT_PAREN);
				setState(3219);
				column_name();
				setState(3224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3220);
					match(COMMA);
					setState(3221);
					column_name();
					}
					}
					setState(3226);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3227);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3246);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3231);
				match(AS);
				setState(3244);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3232);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3233);
					match(LEFT_PAREN);
					setState(3234);
					constant();
					setState(3239);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3235);
						match(COMMA);
						setState(3236);
						constant();
						}
						}
						setState(3241);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3242);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_hierarchical_query_clause);
		try {
			setState(3265);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3248);
				match(CONNECT);
				setState(3249);
				match(BY);
				setState(3251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3250);
					match(NOCYCLE);
					}
					break;
				}
				setState(3253);
				condition();
				setState(3255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3254);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3257);
				start_part();
				setState(3258);
				match(CONNECT);
				setState(3259);
				match(BY);
				setState(3261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3260);
					match(NOCYCLE);
					}
					break;
				}
				setState(3263);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			match(START);
			setState(3268);
			match(WITH);
			setState(3269);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_group_by_clause);
		try {
			int _alt;
			setState(3297);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3271);
				match(GROUP);
				setState(3272);
				match(BY);
				setState(3273);
				group_by_elements();
				setState(3278);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3274);
						match(COMMA);
						setState(3275);
						group_by_elements();
						}
						} 
					}
					setState(3280);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
				}
				setState(3282);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3281);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3284);
				having_clause();
				setState(3295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(3285);
					match(GROUP);
					setState(3286);
					match(BY);
					setState(3287);
					group_by_elements();
					setState(3292);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3288);
							match(COMMA);
							setState(3289);
							group_by_elements();
							}
							} 
						}
						setState(3294);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,374,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_group_by_elements);
		try {
			setState(3302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3299);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3300);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3301);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3304);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3305);
			match(LEFT_PAREN);
			setState(3306);
			grouping_sets_elements();
			setState(3311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3307);
				match(COMMA);
				setState(3308);
				grouping_sets_elements();
				}
				}
				setState(3313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3314);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(GROUPING);
			setState(3317);
			match(SETS);
			setState(3318);
			match(LEFT_PAREN);
			setState(3319);
			grouping_sets_elements();
			setState(3324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3320);
				match(COMMA);
				setState(3321);
				grouping_sets_elements();
				}
				}
				setState(3326);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3327);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_grouping_sets_elements);
		try {
			setState(3332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3329);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3330);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3331);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			match(HAVING);
			setState(3335);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3337);
			match(MODEL);
			setState(3341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3338);
				cell_reference_options();
				}
				}
				setState(3343);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3345);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3344);
				return_rows_clause();
				}
			}

			setState(3350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3347);
				reference_model();
				}
				}
				setState(3352);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3353);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_cell_reference_options);
		int _la;
		try {
			setState(3363);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3355);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3356);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3357);
				match(UNIQUE);
				setState(3361);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3358);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3359);
					match(SINGLE);
					setState(3360);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3365);
			match(RETURN);
			setState(3366);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3367);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			match(REFERENCE);
			setState(3370);
			reference_model_name();
			setState(3371);
			match(ON);
			setState(3372);
			match(LEFT_PAREN);
			setState(3373);
			subquery();
			setState(3374);
			match(RIGHT_PAREN);
			setState(3375);
			model_column_clauses();
			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3376);
				cell_reference_options();
				}
				}
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3382);
				match(MAIN);
				setState(3383);
				main_model_name();
				}
			}

			setState(3386);
			model_column_clauses();
			setState(3390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3387);
				cell_reference_options();
				}
				}
				setState(3392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3393);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3395);
				model_column_partition_part();
				}
			}

			setState(3398);
			match(DIMENSION);
			setState(3399);
			match(BY);
			setState(3400);
			model_column_list();
			setState(3401);
			match(MEASURES);
			setState(3402);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(PARTITION);
			setState(3405);
			match(BY);
			setState(3406);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3408);
			match(LEFT_PAREN);
			setState(3409);
			model_column();
			setState(3414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3410);
				match(COMMA);
				setState(3411);
				model_column();
				}
				}
				setState(3416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3417);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			expression();
			setState(3421);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3420);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3423);
				model_rules_part();
				}
			}

			setState(3426);
			match(LEFT_PAREN);
			setState(3427);
			model_rules_element();
			setState(3432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3428);
				match(COMMA);
				setState(3429);
				model_rules_element();
				}
				}
				setState(3434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3435);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437);
			match(RULES);
			setState(3443);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3438);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3439);
				match(UPSERT);
				setState(3441);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3440);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3447);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3445);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3446);
				match(ORDER);
				}
			}

			setState(3450);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3449);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3452);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3453);
				match(UPSERT);
				setState(3455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(3454);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3459);
			cell_assignment();
			setState(3461);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3460);
				order_by_clause();
				}
			}

			setState(3463);
			match(EQUALS_OP);
			setState(3464);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3468);
			match(ITERATE);
			setState(3469);
			match(LEFT_PAREN);
			setState(3470);
			expression();
			setState(3471);
			match(RIGHT_PAREN);
			setState(3473);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3472);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3475);
			match(UNTIL);
			setState(3476);
			match(LEFT_PAREN);
			setState(3477);
			condition();
			setState(3478);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			match(ORDER);
			setState(3482);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3481);
				match(SIBLINGS);
				}
			}

			setState(3484);
			match(BY);
			setState(3485);
			order_by_elements();
			setState(3490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3486);
				match(COMMA);
				setState(3487);
				order_by_elements();
				}
				}
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3493);
			expression();
			setState(3495);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3494);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3499);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3497);
				match(NULLS);
				setState(3498);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3501);
			match(FOR);
			setState(3502);
			match(UPDATE);
			setState(3504);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3503);
				for_update_of_part();
				}
			}

			setState(3507);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3506);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			match(OF);
			setState(3510);
			column_name();
			setState(3515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3511);
				match(COMMA);
				setState(3512);
				column_name();
				}
				}
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_for_update_options);
		try {
			setState(3523);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				match(SKIP_);
				setState(3519);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3520);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3521);
				match(WAIT);
				setState(3522);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3525);
			match(UPDATE);
			setState(3526);
			general_table_ref();
			setState(3527);
			update_set_clause();
			setState(3529);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3528);
				where_clause();
				}
			}

			setState(3532);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3531);
				static_returning_clause();
				}
			}

			setState(3535);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3534);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3537);
			match(SET);
			setState(3553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3538);
				column_based_update_set_clause();
				setState(3543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3539);
					match(COMMA);
					setState(3540);
					column_based_update_set_clause();
					}
					}
					setState(3545);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3546);
				match(VALUE);
				setState(3547);
				match(LEFT_PAREN);
				setState(3548);
				id();
				setState(3549);
				match(RIGHT_PAREN);
				setState(3550);
				match(EQUALS_OP);
				setState(3551);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3572);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3555);
				column_name();
				setState(3556);
				match(EQUALS_OP);
				setState(3557);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3559);
				match(LEFT_PAREN);
				setState(3560);
				column_name();
				setState(3565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3561);
					match(COMMA);
					setState(3562);
					column_name();
					}
					}
					setState(3567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3568);
				match(RIGHT_PAREN);
				setState(3569);
				match(EQUALS_OP);
				setState(3570);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3574);
			match(DELETE);
			setState(3576);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3575);
				match(FROM);
				}
			}

			setState(3578);
			general_table_ref();
			setState(3580);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3579);
				where_clause();
				}
			}

			setState(3583);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3582);
				static_returning_clause();
				}
			}

			setState(3586);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3585);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			match(INSERT);
			setState(3591);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3589);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3590);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			insert_into_clause();
			setState(3599);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3594);
				values_clause();
				setState(3596);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3595);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3598);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3602);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3601);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3604);
				match(ALL);
				setState(3606); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3605);
					multi_table_element();
					}
					}
					setState(3608); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3610);
				conditional_insert_clause();
				}
				break;
			}
			setState(3613);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			insert_into_clause();
			setState(3617);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3616);
				values_clause();
				}
			}

			setState(3620);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3619);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3622);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3626); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3625);
				conditional_insert_when_part();
				}
				}
				setState(3628); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3631);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3630);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3633);
			match(WHEN);
			setState(3634);
			condition();
			setState(3635);
			match(THEN);
			setState(3637); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3636);
				multi_table_element();
				}
				}
				setState(3639); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(ELSE);
			setState(3643); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3642);
				multi_table_element();
				}
				}
				setState(3645); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			match(INTO);
			setState(3648);
			general_table_ref();
			setState(3660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3649);
				match(LEFT_PAREN);
				setState(3650);
				column_name();
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3651);
					match(COMMA);
					setState(3652);
					column_name();
					}
					}
					setState(3657);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3658);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			match(VALUES);
			setState(3663);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			match(MERGE);
			setState(3666);
			match(INTO);
			setState(3667);
			tableview_name();
			setState(3669);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3668);
				table_alias();
				}
			}

			setState(3671);
			match(USING);
			setState(3672);
			selected_tableview();
			setState(3673);
			match(ON);
			setState(3674);
			match(LEFT_PAREN);
			setState(3675);
			condition();
			setState(3676);
			match(RIGHT_PAREN);
			setState(3685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3677);
				merge_update_clause();
				setState(3679);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3678);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3681);
				merge_insert_clause();
				setState(3683);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3682);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3688);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3687);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(WHEN);
			setState(3691);
			match(MATCHED);
			setState(3692);
			match(THEN);
			setState(3693);
			match(UPDATE);
			setState(3694);
			match(SET);
			setState(3695);
			merge_element();
			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3696);
				match(COMMA);
				setState(3697);
				merge_element();
				}
				}
				setState(3702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3704);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3703);
				where_clause();
				}
			}

			setState(3707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3706);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			column_name();
			setState(3710);
			match(EQUALS_OP);
			setState(3711);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			match(DELETE);
			setState(3714);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3716);
			match(WHEN);
			setState(3717);
			match(NOT);
			setState(3718);
			match(MATCHED);
			setState(3719);
			match(THEN);
			setState(3720);
			match(INSERT);
			setState(3732);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3721);
				match(LEFT_PAREN);
				setState(3722);
				column_name();
				setState(3727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3723);
					match(COMMA);
					setState(3724);
					column_name();
					}
					}
					setState(3729);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3730);
				match(RIGHT_PAREN);
				}
			}

			setState(3734);
			match(VALUES);
			setState(3735);
			expression_list();
			setState(3737);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3736);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3744);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3739);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3740);
				match(LEFT_PAREN);
				setState(3741);
				select_statement();
				setState(3742);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3747);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3746);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			match(LOCK);
			setState(3750);
			match(TABLE);
			setState(3751);
			lock_table_element();
			setState(3756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3752);
				match(COMMA);
				setState(3753);
				lock_table_element();
				}
				}
				setState(3758);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3759);
			match(IN);
			setState(3760);
			lock_mode();
			setState(3761);
			match(MODE);
			setState(3763);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3762);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_wait_nowait_part);
		try {
			setState(3768);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3765);
				match(WAIT);
				setState(3766);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3767);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			tableview_name();
			setState(3772);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3771);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_lock_mode);
		int _la;
		try {
			setState(3786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3774);
				match(ROW);
				setState(3775);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3776);
				match(ROW);
				setState(3777);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3778);
				match(SHARE);
				setState(3780);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3779);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3782);
				match(SHARE);
				setState(3783);
				match(ROW);
				setState(3784);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3785);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3788);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3789);
				match(ONLY);
				setState(3790);
				match(LEFT_PAREN);
				setState(3791);
				dml_table_expression_clause();
				setState(3792);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3796);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3799);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3800);
			expression();
			setState(3805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3801);
				match(COMMA);
				setState(3802);
				expression();
				}
				}
				setState(3807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3808);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			match(LOG);
			setState(3811);
			match(ERRORS);
			setState(3813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3812);
				error_logging_into_part();
				}
				break;
			}
			setState(3816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3815);
				expression_wrapper();
				}
				break;
			}
			setState(3819);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3818);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(INTO);
			setState(3822);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3824);
			match(REJECT);
			setState(3825);
			match(LIMIT);
			setState(3828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3826);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3827);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3842);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3830);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3831);
				match(LEFT_PAREN);
				setState(3832);
				select_statement();
				setState(3834);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3833);
					subquery_restriction_clause();
					}
				}

				setState(3836);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3838);
				tableview_name();
				setState(3840);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3839);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3844);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3845);
				match(LEFT_PAREN);
				setState(3846);
				subquery();
				setState(3847);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3849);
				match(LEFT_PAREN);
				setState(3850);
				expression();
				setState(3851);
				match(RIGHT_PAREN);
				setState(3855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(3852);
					match(LEFT_PAREN);
					setState(3853);
					match(PLUS_SIGN);
					setState(3854);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3859);
			match(WITH);
			setState(3868);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3860);
				match(READ);
				setState(3861);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3862);
				match(CHECK);
				setState(3863);
				match(OPTION);
				setState(3866);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3864);
					match(CONSTRAINT);
					setState(3865);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			match(SAMPLE);
			setState(3872);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3871);
				match(BLOCK);
				}
			}

			setState(3874);
			match(LEFT_PAREN);
			setState(3875);
			expression();
			setState(3878);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3876);
				match(COMMA);
				setState(3877);
				expression();
				}
			}

			setState(3880);
			match(RIGHT_PAREN);
			setState(3882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3881);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			match(SEED);
			setState(3885);
			match(LEFT_PAREN);
			setState(3886);
			expression();
			setState(3887);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(CURSOR);
			setState(3890);
			match(LEFT_PAREN);
			setState(3891);
			subquery();
			setState(3892);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			match(LEFT_PAREN);
			setState(3896);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIOR - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3895);
				expression();
				}
			}

			setState(3902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3898);
				match(COMMA);
				setState(3899);
				expression();
				}
				}
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3905);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3907);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition_wrapper(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3909);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_expression);
		try {
			int _alt;
			setState(3920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3911);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3912);
				logical_and_expression();
				setState(3917);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3913);
						match(OR);
						setState(3914);
						logical_and_expression();
						}
						} 
					}
					setState(3919);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_wrapper(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(plsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(plsqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogical_and_expression(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			negated_expression();
			setState(3929);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3925);
					match(AND);
					setState(3926);
					negated_expression();
					}
					} 
				}
				setState(3931);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNegated_expression(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_negated_expression);
		try {
			setState(3935);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3932);
				match(NOT);
				setState(3933);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3934);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(plsqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(plsqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(plsqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(plsqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(plsqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(plsqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(plsqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(plsqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(plsqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(plsqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(plsqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(plsqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(plsqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(plsqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(plsqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(plsqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(plsqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(plsqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(plsqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(plsqlParser.ONLY, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEquality_expression(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			multiset_expression();
			setState(3971);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3938);
					match(IS);
					setState(3940);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3939);
						match(NOT);
						}
					}

					setState(3967);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(3942);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(3943);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(3944);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(3945);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(3946);
						match(A_LETTER);
						setState(3947);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(3948);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(3949);
						match(OF);
						setState(3951);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(3950);
							match(TYPE);
							}
						}

						setState(3953);
						match(LEFT_PAREN);
						setState(3955);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
						case 1:
							{
							setState(3954);
							match(ONLY);
							}
							break;
						}
						setState(3957);
						type_spec();
						setState(3962);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(3958);
							match(COMMA);
							setState(3959);
							type_spec();
							}
							}
							setState(3964);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(3965);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(3973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3974);
			relational_expression();
			setState(3981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(3975);
				multiset_type();
				setState(3977);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(3976);
					match(OF);
					}
				}

				setState(3979);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3983);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			compound_expression();
			setState(3997);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3992);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
					case 1:
						{
						setState(3986);
						match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(3987);
						not_equal_op();
						}
						break;
					case 3:
						{
						setState(3988);
						match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(3989);
						match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(3990);
						less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(3991);
						greater_than_or_equals_op();
						}
						break;
					}
					setState(3994);
					compound_expression();
					}
					} 
				}
				setState(3999);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			concatenation();
			setState(4015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4002);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4001);
					match(NOT);
					}
				}

				setState(4013);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4004);
					match(IN);
					setState(4005);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4006);
					match(BETWEEN);
					setState(4007);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(4008);
					like_type();
					setState(4009);
					concatenation();
					setState(4011);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
					case 1:
						{
						setState(4010);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			_la = _input.LA(1);
			if ( !(((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (LIKE - 216)) | (1L << (LIKE2 - 216)) | (1L << (LIKE4 - 216)) | (1L << (LIKEC - 216)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4019);
			match(ESCAPE);
			setState(4020);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_in_elements);
		int _la;
		try {
			setState(4040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4022);
				match(LEFT_PAREN);
				setState(4023);
				subquery();
				setState(4024);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4026);
				match(LEFT_PAREN);
				setState(4027);
				concatenation_wrapper();
				setState(4032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4028);
					match(COMMA);
					setState(4029);
					concatenation_wrapper();
					}
					}
					setState(4034);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4035);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4037);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4038);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4039);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4042);
			concatenation();
			setState(4043);
			match(AND);
			setState(4044);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4046);
			additive_expression();
			setState(4052);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4047);
					concatenation_op();
					setState(4048);
					additive_expression();
					}
					} 
				}
				setState(4054);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_wrapper(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_expression(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4057);
			multiply_expression();
			setState(4062);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4058);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4059);
					multiply_expression();
					}
					} 
				}
				setState(4064);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_expression(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			datetime_expression();
			setState(4070);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,496,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4066);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4067);
					datetime_expression();
					}
					} 
				}
				setState(4072);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,496,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatetime_expression(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4073);
			model_expression();
			setState(4082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4074);
				match(AT);
				setState(4079);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4075);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4076);
					match(TIME);
					setState(4077);
					match(ZONE);
					setState(4078);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4081);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_interval_expression);
		int _la;
		try {
			setState(4108);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4084);
				match(DAY);
				setState(4089);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4085);
					match(LEFT_PAREN);
					setState(4086);
					concatenation_wrapper();
					setState(4087);
					match(RIGHT_PAREN);
					}
				}

				setState(4091);
				match(TO);
				setState(4092);
				match(SECOND);
				setState(4097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(4093);
					match(LEFT_PAREN);
					setState(4094);
					concatenation_wrapper();
					setState(4095);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4099);
				match(YEAR);
				setState(4104);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4100);
					match(LEFT_PAREN);
					setState(4101);
					concatenation_wrapper();
					setState(4102);
					match(RIGHT_PAREN);
					}
				}

				setState(4106);
				match(TO);
				setState(4107);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4110);
			unary_expression();
			setState(4115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				setState(4111);
				match(LEFT_BRACKET);
				setState(4112);
				model_expression_element();
				setState(4113);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_model_expression_element);
		int _la;
		try {
			setState(4140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4117);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4118);
					condition_wrapper();
					}
					break;
				}
				setState(4128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4121);
					match(COMMA);
					setState(4124);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
					case 1:
						{
						setState(4122);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4123);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4130);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4131);
				single_column_for_loop();
				setState(4136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4132);
					match(COMMA);
					setState(4133);
					single_column_for_loop();
					}
					}
					setState(4138);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4139);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			match(FOR);
			setState(4143);
			column_name();
			setState(4156);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4144);
				match(IN);
				setState(4145);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4147);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4146);
					for_like_part();
					}
				}

				setState(4149);
				match(FROM);
				setState(4150);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4151);
				match(TO);
				setState(4152);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4153);
				for_increment_decrement_type();
				setState(4154);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4158);
			match(LIKE);
			setState(4159);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			match(FOR);
			setState(4164);
			match(LEFT_PAREN);
			setState(4165);
			column_name();
			setState(4170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4166);
				match(COMMA);
				setState(4167);
				column_name();
				}
				}
				setState(4172);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4173);
			match(RIGHT_PAREN);
			setState(4174);
			match(IN);
			setState(4175);
			match(LEFT_PAREN);
			setState(4188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4176);
				subquery();
				}
				break;
			case 2:
				{
				setState(4177);
				match(LEFT_PAREN);
				setState(4178);
				expression_list();
				setState(4183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4179);
					match(COMMA);
					setState(4180);
					expression_list();
					}
					}
					setState(4185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4186);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4190);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_unary_expression);
		try {
			setState(4210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4192);
				match(MINUS_SIGN);
				setState(4193);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4194);
				match(PLUS_SIGN);
				setState(4195);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4196);
				match(PRIOR);
				setState(4197);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4198);
				match(CONNECT_BY_ROOT);
				setState(4199);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4200);
				match(NEW);
				setState(4201);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4202);
				match(DISTINCT);
				setState(4203);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4204);
				match(ALL);
				setState(4205);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4206);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4207);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4208);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4209);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_case_statement);
		try {
			setState(4214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4212);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4213);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4217);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4216);
				label_name();
				}
			}

			setState(4219);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4220);
			atom();
			setState(4222); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4221);
				simple_case_when_part();
				}
				}
				setState(4224); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4227);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4226);
				case_else_part();
				}
			}

			setState(4229);
			match(END);
			setState(4231);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4230);
				match(CASE);
				}
			}

			setState(4234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(4233);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4236);
			match(WHEN);
			setState(4237);
			expression_wrapper();
			setState(4238);
			match(THEN);
			setState(4241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				setState(4239);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4240);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4244);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (DELIMITED_ID - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4243);
				label_name();
				}
			}

			setState(4246);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4248); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4247);
				searched_case_when_part();
				}
				}
				setState(4250); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4253);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4252);
				case_else_part();
				}
			}

			setState(4255);
			match(END);
			setState(4257);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4256);
				match(CASE);
				}
			}

			setState(4260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4259);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			match(WHEN);
			setState(4263);
			condition_wrapper();
			setState(4264);
			match(THEN);
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4265);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4266);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4269);
			match(ELSE);
			setState(4272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4270);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4271);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_atom);
		try {
			int _alt;
			setState(4294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4274);
				table_element();
				setState(4275);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4277);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4278);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4279);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4280);
				match(LEFT_PAREN);
				setState(4292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
				case 1:
					{
					setState(4281);
					subquery();
					setState(4282);
					match(RIGHT_PAREN);
					setState(4286);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4283);
							subquery_operation_part();
							}
							} 
						}
						setState(4288);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,529,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4289);
					expression_or_vector();
					setState(4290);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4296);
			expression();
			setState(4298);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4297);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(COMMA);
			setState(4301);
			expression();
			setState(4306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4302);
				match(COMMA);
				setState(4303);
				expression();
				}
				}
				setState(4308);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4310);
				match(LEFT_PAREN);
				setState(4311);
				subquery();
				setState(4312);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4314);
				match(LEFT_PAREN);
				setState(4315);
				expression_wrapper();
				setState(4316);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4320);
				over_clause_keyword();
				setState(4321);
				function_argument_analytic();
				setState(4323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
				case 1:
					{
					setState(4322);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4325);
				regular_id();
				setState(4326);
				function_argument_modeling();
				setState(4328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(4327);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4330);
				match(COUNT);
				setState(4331);
				match(LEFT_PAREN);
				setState(4337);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4332);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4334);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
					case 1:
						{
						setState(4333);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					setState(4336);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4339);
				match(RIGHT_PAREN);
				setState(4341);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(4340);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4343);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4344);
				match(LEFT_PAREN);
				setState(4351);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
				case 1:
					{
					setState(4345);
					match(MULTISET);
					setState(4346);
					match(LEFT_PAREN);
					setState(4347);
					subquery();
					setState(4348);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4350);
					concatenation_wrapper();
					}
					break;
				}
				setState(4353);
				match(AS);
				setState(4354);
				type_spec();
				setState(4355);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4357);
				match(CHR);
				setState(4358);
				match(LEFT_PAREN);
				setState(4359);
				concatenation_wrapper();
				setState(4360);
				match(USING);
				setState(4361);
				match(NCHAR_CS);
				setState(4362);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4364);
				match(COLLECT);
				setState(4365);
				match(LEFT_PAREN);
				setState(4367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(4366);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4369);
				concatenation_wrapper();
				setState(4371);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4370);
					collect_order_by_part();
					}
				}

				setState(4373);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4375);
				within_or_over_clause_keyword();
				setState(4376);
				function_argument();
				setState(4378); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4377);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4380); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,543,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4382);
				match(DECOMPOSE);
				setState(4383);
				match(LEFT_PAREN);
				setState(4384);
				concatenation_wrapper();
				setState(4386);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4385);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4388);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4390);
				match(EXTRACT);
				setState(4391);
				match(LEFT_PAREN);
				setState(4392);
				regular_id();
				setState(4393);
				match(FROM);
				setState(4394);
				concatenation_wrapper();
				setState(4395);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4397);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4398);
				function_argument_analytic();
				setState(4400);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4399);
					respect_or_ignore_nulls();
					}
				}

				setState(4402);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4404);
				standard_prediction_function_keyword();
				setState(4405);
				match(LEFT_PAREN);
				setState(4406);
				expression_wrapper();
				setState(4411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4407);
					match(COMMA);
					setState(4408);
					expression_wrapper();
					}
					}
					setState(4413);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4415);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4414);
					cost_matrix_clause();
					}
				}

				setState(4418);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4417);
					using_clause();
					}
				}

				setState(4420);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4422);
				match(TRANSLATE);
				setState(4423);
				match(LEFT_PAREN);
				setState(4424);
				expression_wrapper();
				setState(4427);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4425);
					match(USING);
					setState(4426);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4429);
					match(COMMA);
					setState(4430);
					expression_wrapper();
					}
					}
					setState(4435);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4436);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4438);
				match(TREAT);
				setState(4439);
				match(LEFT_PAREN);
				setState(4440);
				expression_wrapper();
				setState(4441);
				match(AS);
				setState(4443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
				case 1:
					{
					setState(4442);
					match(REF);
					}
					break;
				}
				setState(4445);
				type_spec();
				setState(4446);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4448);
				match(TRIM);
				setState(4449);
				match(LEFT_PAREN);
				setState(4457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(4451);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4450);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(4454);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4453);
						quoted_string();
						}
					}

					setState(4456);
					match(FROM);
					}
					break;
				}
				setState(4459);
				concatenation_wrapper();
				setState(4460);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4462);
				match(XMLAGG);
				setState(4463);
				match(LEFT_PAREN);
				setState(4464);
				expression_wrapper();
				setState(4466);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4465);
					order_by_clause();
					}
				}

				setState(4468);
				match(RIGHT_PAREN);
				setState(4471);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4469);
					match(PERIOD);
					setState(4470);
					general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4473);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4474);
				match(LEFT_PAREN);
				setState(4475);
				xml_multiuse_expression_element();
				setState(4480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4476);
					match(COMMA);
					setState(4477);
					xml_multiuse_expression_element();
					}
					}
					setState(4482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4483);
				match(RIGHT_PAREN);
				setState(4486);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4484);
					match(PERIOD);
					setState(4485);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4488);
				match(XMLELEMENT);
				setState(4489);
				match(LEFT_PAREN);
				setState(4491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(4490);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4493);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4496);
				expression_wrapper();
				setState(4499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(4497);
					match(COMMA);
					setState(4498);
					xml_attributes_clause();
					}
					break;
				}
				setState(4508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4501);
					match(COMMA);
					setState(4502);
					expression_wrapper();
					setState(4504);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
						{
						setState(4503);
						column_alias();
						}
					}

					}
					}
					setState(4510);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4511);
				match(RIGHT_PAREN);
				setState(4514);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4512);
					match(PERIOD);
					setState(4513);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4516);
				match(XMLEXISTS);
				setState(4517);
				match(LEFT_PAREN);
				setState(4518);
				expression_wrapper();
				setState(4520);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4519);
					xml_passing_clause();
					}
				}

				setState(4522);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4524);
				match(XMLPARSE);
				setState(4525);
				match(LEFT_PAREN);
				setState(4526);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4527);
				concatenation_wrapper();
				setState(4529);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4528);
					match(WELLFORMED);
					}
				}

				setState(4531);
				match(RIGHT_PAREN);
				setState(4534);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4532);
					match(PERIOD);
					setState(4533);
					general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4536);
				match(XMLPI);
				setState(4537);
				match(LEFT_PAREN);
				setState(4542);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4538);
					match(NAME);
					setState(4539);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4540);
					match(EVALNAME);
					setState(4541);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4546);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4544);
					match(COMMA);
					setState(4545);
					concatenation_wrapper();
					}
				}

				setState(4548);
				match(RIGHT_PAREN);
				setState(4551);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4549);
					match(PERIOD);
					setState(4550);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4553);
				match(XMLQUERY);
				setState(4554);
				match(LEFT_PAREN);
				setState(4555);
				concatenation_wrapper();
				setState(4557);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4556);
					xml_passing_clause();
					}
				}

				setState(4559);
				match(RETURNING);
				setState(4560);
				match(CONTENT);
				setState(4564);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4561);
					match(NULL);
					setState(4562);
					match(ON);
					setState(4563);
					match(EMPTY);
					}
				}

				setState(4566);
				match(RIGHT_PAREN);
				setState(4569);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4567);
					match(PERIOD);
					setState(4568);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4571);
				match(XMLROOT);
				setState(4572);
				match(LEFT_PAREN);
				setState(4573);
				concatenation_wrapper();
				setState(4574);
				xmlroot_param_version_part();
				setState(4577);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4575);
					match(COMMA);
					setState(4576);
					xmlroot_param_standalone_part();
					}
				}

				setState(4579);
				match(RIGHT_PAREN);
				setState(4582);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4580);
					match(PERIOD);
					setState(4581);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4584);
				match(XMLSERIALIZE);
				setState(4585);
				match(LEFT_PAREN);
				setState(4586);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4587);
				concatenation_wrapper();
				setState(4590);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4588);
					match(AS);
					setState(4589);
					type_spec();
					}
				}

				setState(4593);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4592);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4596);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4595);
					xmlserialize_param_version_part();
					}
				}

				setState(4599);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4598);
					xmlserialize_param_ident_part();
					}
				}

				setState(4603);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4601);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4602);
					match(DEFAULTS);
					}
				}

				setState(4605);
				match(RIGHT_PAREN);
				setState(4608);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4606);
					match(PERIOD);
					setState(4607);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4610);
				match(XMLTABLE);
				setState(4611);
				match(LEFT_PAREN);
				setState(4613);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4612);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4615);
				concatenation_wrapper();
				setState(4617);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4616);
					xml_passing_clause();
					}
				}

				setState(4624);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4619);
					match(COLUMNS);
					setState(4620);
					xml_table_column();
					{
					setState(4621);
					match(COMMA);
					setState(4622);
					xml_table_column();
					}
					}
				}

				setState(4626);
				match(RIGHT_PAREN);
				setState(4629);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4627);
					match(PERIOD);
					setState(4628);
					general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4633);
			_la = _input.LA(1);
			if ( !(((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (AVG - 500)) | (1L << (CORR - 500)) | (1L << (LAG - 500)) | (1L << (LEAD - 500)) | (1L << (MAX - 500)) | (1L << (MEDIAN - 500)) | (1L << (MIN - 500)) | (1L << (NTILE - 500)) | (1L << (RATIO_TO_REPORT - 500)) | (1L << (ROW_NUMBER - 500)) | (1L << (SUM - 500)) | (1L << (VARIANCE - 500)) | (1L << (REGR_ - 500)) | (1L << (STDDEV - 500)) | (1L << (VAR_ - 500)) | (1L << (COVAR_ - 500)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4635);
			_la = _input.LA(1);
			if ( !(((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (CUME_DIST - 493)) | (1L << (DENSE_RANK - 493)) | (1L << (LISTAGG - 493)) | (1L << (PERCENT_RANK - 493)) | (1L << (PERCENTILE_CONT - 493)) | (1L << (PERCENTILE_DISC - 493)) | (1L << (RANK - 493)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4637);
			_la = _input.LA(1);
			if ( !(((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (PREDICTION - 487)) | (1L << (PREDICTION_BOUNDS - 487)) | (1L << (PREDICTION_COST - 487)) | (1L << (PREDICTION_DETAILS - 487)) | (1L << (PREDICTION_PROBABILITY - 487)) | (1L << (PREDICTION_SET - 487)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4639);
			match(OVER);
			setState(4640);
			match(LEFT_PAREN);
			setState(4642);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4641);
				query_partition_clause();
				}
			}

			setState(4648);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4644);
				order_by_clause();
				setState(4646);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4645);
					windowing_clause();
					}
				}

				}
			}

			setState(4650);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4652);
			windowing_type();
			setState(4659);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4653);
				match(BETWEEN);
				setState(4654);
				windowing_elements();
				setState(4655);
				match(AND);
				setState(4656);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4658);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_windowing_elements);
		int _la;
		try {
			setState(4670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4663);
				match(UNBOUNDED);
				setState(4664);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4665);
				match(CURRENT);
				setState(4666);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4667);
				concatenation_wrapper();
				setState(4668);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4672);
			match(USING);
			setState(4682);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4673);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4674);
				using_element();
				setState(4679);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4675);
						match(COMMA);
						setState(4676);
						using_element();
						}
						} 
					}
					setState(4681);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4684);
				match(IN);
				setState(4686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4685);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4688);
				match(OUT);
				}
				break;
			}
			setState(4691);
			select_list_elements();
			setState(4693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				setState(4692);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4695);
			match(ORDER);
			setState(4696);
			match(BY);
			setState(4697);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_within_or_over_part);
		try {
			setState(4706);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4699);
				match(WITHIN);
				setState(4700);
				match(GROUP);
				setState(4701);
				match(LEFT_PAREN);
				setState(4702);
				order_by_clause();
				setState(4703);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4705);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4708);
			match(COST);
			setState(4726);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4709);
				match(MODEL);
				setState(4711);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4710);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4713);
				match(LEFT_PAREN);
				setState(4714);
				cost_class_name();
				setState(4719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4715);
					match(COMMA);
					setState(4716);
					cost_class_name();
					}
					}
					setState(4721);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4722);
				match(RIGHT_PAREN);
				setState(4723);
				match(VALUES);
				setState(4724);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4728);
			match(PASSING);
			setState(4731);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(4729);
				match(BY);
				setState(4730);
				match(VALUE);
				}
			}

			setState(4733);
			expression_wrapper();
			setState(4735);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4734);
				column_alias();
				}
			}

			{
			setState(4737);
			match(COMMA);
			setState(4738);
			expression_wrapper();
			setState(4740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				{
				setState(4739);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4742);
			match(XMLATTRIBUTES);
			setState(4743);
			match(LEFT_PAREN);
			setState(4745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4744);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4747);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4750);
			xml_multiuse_expression_element();
			setState(4755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4751);
				match(COMMA);
				setState(4752);
				xml_multiuse_expression_element();
				}
				}
				setState(4757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4758);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			match(XMLNAMESPACES);
			setState(4761);
			match(LEFT_PAREN);
			setState(4765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				setState(4762);
				concatenation_wrapper();
				setState(4763);
				column_alias();
				}
				break;
			}
			setState(4773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4767);
				match(COMMA);
				setState(4768);
				concatenation_wrapper();
				setState(4769);
				column_alias();
				}
				}
				setState(4775);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4777);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4776);
				xml_general_default_part();
				}
			}

			setState(4779);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4781);
			xml_column_name();
			setState(4792);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4782);
				match(FOR);
				setState(4783);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4784);
				type_spec();
				setState(4787);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4785);
					match(PATH);
					setState(4786);
					concatenation_wrapper();
					}
				}

				setState(4790);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4789);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4794);
			match(DEFAULT);
			setState(4795);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4797);
			expression();
			setState(4804);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4798);
				match(AS);
				setState(4802);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4799);
					id_expression();
					}
					break;
				case 2:
					{
					setState(4800);
					match(EVALNAME);
					setState(4801);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4806);
			match(VERSION);
			setState(4810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				{
				setState(4807);
				match(NO);
				setState(4808);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(4809);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4812);
			match(STANDALONE);
			setState(4818);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4813);
				match(YES);
				}
				break;
			case NO:
				{
				setState(4814);
				match(NO);
				setState(4816);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4815);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4820);
			match(ENCODING);
			setState(4821);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4823);
			match(VERSION);
			setState(4824);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4834);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4826);
				match(NO);
				setState(4827);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4828);
				match(INDENT);
				setState(4832);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4829);
					match(SIZE);
					setState(4830);
					match(EQUALS_OP);
					setState(4831);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4841);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(4836);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(4837);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(4838);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(4839);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(4840);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4844);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(4843);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4846);
			match(WHENEVER);
			setState(4847);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4853);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(4848);
				match(EXIT);
				setState(4849);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4850);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(4851);
				match(CONTINUE);
				setState(4852);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4855);
			match(SET);
			setState(4856);
			regular_id();
			setState(4862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(4857);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(4858);
				match(ON);
				}
				break;
			case 3:
				{
				setState(4859);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(4860);
				numeric();
				}
				break;
			case 5:
				{
				setState(4861);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4864);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(plsqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4866);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4870);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4869);
				match(FOR);
				}
			}

			setState(4872);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_column_alias);
		int _la;
		try {
			setState(4882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4875);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4874);
					match(AS);
					}
				}

				setState(4879);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4877);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(4878);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4881);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4884);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4885);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4888);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4890);
			match(WHERE);
			setState(4893);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4891);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4892);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			match(CURRENT);
			setState(4896);
			match(OF);
			setState(4897);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_into_clause);
		int _la;
		try {
			setState(4919);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4899);
				match(INTO);
				setState(4900);
				variable_name();
				setState(4905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4901);
					match(COMMA);
					setState(4902);
					variable_name();
					}
					}
					setState(4907);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				match(BULK);
				setState(4909);
				match(COLLECT);
				setState(4910);
				match(INTO);
				setState(4911);
				variable_name();
				setState(4916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4912);
					match(COMMA);
					setState(4913);
					variable_name();
					}
					}
					setState(4918);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_xml_column_name);
		try {
			setState(4923);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4921);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4922);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937);
			id();
			setState(4942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4938);
				match(PERIOD);
				setState(4939);
				id_expression();
				}
				}
				setState(4944);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4947);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4945);
				match(AT_SIGN);
				setState(4946);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4949);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4951);
			id();
			setState(4954);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4952);
				match(PERIOD);
				setState(4953);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4956);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4958);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4960);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4962);
			id();
			setState(4967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4963);
				match(PERIOD);
				setState(4964);
				id_expression();
				}
				}
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4970);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4972);
			id();
			setState(4977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4973);
				match(PERIOD);
				setState(4974);
				id_expression();
				}
				}
				setState(4979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4982);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4980);
				match(AT_SIGN);
				setState(4981);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4986);
			id_expression();
			setState(4991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4987);
				match(PERIOD);
				setState(4988);
				id_expression();
				}
				}
				setState(4993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4994);
			id_expression();
			setState(4999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4995);
				match(PERIOD);
				setState(4996);
				id_expression();
				}
				}
				setState(5001);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5002);
			id();
			setState(5007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5003);
				match(PERIOD);
				setState(5004);
				id_expression();
				}
				}
				setState(5009);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5010);
			id();
			setState(5013);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5011);
				match(PERIOD);
				setState(5012);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5015);
			id();
			setState(5018);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5016);
				match(PERIOD);
				setState(5017);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			id();
			setState(5023);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5021);
				match(PERIOD);
				setState(5022);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_variable_name);
		int _la;
		try {
			setState(5035);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5027);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5025);
					match(INTRODUCER);
					setState(5026);
					char_set_name();
					}
				}

				setState(5029);
				id_expression();
				setState(5032);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5030);
					match(PERIOD);
					setState(5031);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5034);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_cursor_name);
		try {
			setState(5041);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5039);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5040);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_record_name);
		try {
			setState(5045);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5043);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5044);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5047);
			id();
			setState(5050);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5048);
				match(PERIOD);
				setState(5049);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			id();
			setState(5059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5055);
				match(PERIOD);
				setState(5056);
				id_expression();
				}
				}
				setState(5061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5062);
			id();
			setState(5065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5063);
				match(PERIOD);
				setState(5064);
				id_expression();
				}
				break;
			}
			setState(5070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5067);
				match(AT_SIGN);
				setState(5068);
				link_name();
				}
				break;
			case 2:
				{
				setState(5069);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5072);
			id_expression();
			setState(5077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5073);
				match(PERIOD);
				setState(5074);
				id_expression();
				}
				}
				setState(5079);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5080);
			match(KEEP);
			setState(5081);
			match(LEFT_PAREN);
			setState(5082);
			match(DENSE_RANK);
			setState(5083);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5084);
			order_by_clause();
			setState(5085);
			match(RIGHT_PAREN);
			setState(5087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5086);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(LEFT_PAREN);
			setState(5091);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIOR - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5090);
				argument();
				}
			}

			setState(5097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5093);
				match(COMMA);
				setState(5094);
				argument();
				}
				}
				setState(5099);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5100);
			match(RIGHT_PAREN);
			setState(5102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5101);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5104);
			match(LEFT_PAREN);
			setState(5109);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIOR - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5105);
				argument();
				setState(5107);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5106);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5111);
				match(COMMA);
				setState(5112);
				argument();
				setState(5114);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5113);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5120);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5121);
			match(RIGHT_PAREN);
			setState(5123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5122);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			match(LEFT_PAREN);
			setState(5126);
			column_name();
			setState(5139);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5127);
				match(COMMA);
				setState(5130);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5128);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5129);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5137);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5132);
					match(COMMA);
					setState(5135);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5133);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5134);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5141);
			match(USING);
			setState(5161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(5142);
				tableview_name();
				setState(5143);
				match(PERIOD);
				setState(5144);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5146);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5147);
				expression();
				setState(5149);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
					{
					setState(5148);
					column_alias();
					}
				}

				setState(5158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5151);
					match(COMMA);
					setState(5152);
					expression();
					setState(5154);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INOUT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERVAL - 192)) | (1L << (INVALIDATE - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NONE - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PIPELINED - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (VALIDATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (VALUE - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHILE - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (INTRODUCER - 512)))) != 0) || _la==REGULAR_ID) {
						{
						setState(5153);
						column_alias();
						}
					}

					}
					}
					setState(5160);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5163);
			match(RIGHT_PAREN);
			setState(5165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5164);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5167);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5168);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5170);
				id();
				setState(5171);
				match(EQUALS_OP);
				setState(5172);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5176);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_type_spec);
		int _la;
		try {
			setState(5186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5178);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5179);
					match(REF);
					}
					break;
				}
				setState(5182);
				type_name();
				setState(5184);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5183);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_datatype);
		int _la;
		try {
			setState(5216);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5188);
				native_datatype_element();
				setState(5190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5189);
					precision_part();
					}
					break;
				}
				setState(5198);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5192);
					match(WITH);
					setState(5194);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5193);
						match(LOCAL);
						}
					}

					setState(5196);
					match(TIME);
					setState(5197);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5200);
				match(INTERVAL);
				setState(5201);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5206);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5202);
					match(LEFT_PAREN);
					setState(5203);
					expression_wrapper();
					setState(5204);
					match(RIGHT_PAREN);
					}
				}

				setState(5208);
				match(TO);
				setState(5209);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5210);
					match(LEFT_PAREN);
					setState(5211);
					expression_wrapper();
					setState(5212);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5218);
			match(LEFT_PAREN);
			setState(5221);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(5219);
				numeric();
				}
				break;
			case ASTERISK:
				{
				setState(5220);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5225);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5223);
				match(COMMA);
				setState(5224);
				numeric();
				}
			}

			setState(5228);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5227);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(5230);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_native_datatype_element);
		int _la;
		try {
			setState(5292);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5232);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5233);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5234);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5235);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5236);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5237);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5238);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5239);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5240);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5241);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5242);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5243);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5244);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5245);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5246);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5247);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5248);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5249);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5250);
				match(DOUBLE);
				setState(5252);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5251);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5254);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5255);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5256);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5257);
				match(LONG);
				setState(5259);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5258);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5261);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5262);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5263);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5264);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5265);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5266);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5267);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5268);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5269);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5270);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5271);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5272);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5273);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5274);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5275);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5276);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5277);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5278);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5279);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5280);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5281);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5282);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5283);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5284);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5285);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5286);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5287);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5288);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5289);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5290);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5291);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_bind_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5297);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5294);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5295);
				match(COLON);
				setState(5296);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5300);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5299);
					match(INDICATOR);
					}
				}

				setState(5305);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5302);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5303);
					match(COLON);
					setState(5304);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5309);
				match(PERIOD);
				setState(5310);
				general_element_part();
				}
				}
				setState(5315);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5316);
			general_element_part();
			setState(5321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5317);
				match(PERIOD);
				setState(5318);
				general_element_part();
				}
				}
				setState(5323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5326);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5324);
				match(INTRODUCER);
				setState(5325);
				char_set_name();
				}
			}

			setState(5328);
			id_expression();
			setState(5333);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5329);
					match(PERIOD);
					setState(5330);
					id_expression();
					}
					} 
				}
				setState(5335);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			}
			setState(5337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				{
				setState(5336);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5339);
				match(INTRODUCER);
				setState(5340);
				char_set_name();
				}
			}

			setState(5343);
			id_expression();
			setState(5348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5344);
				match(PERIOD);
				setState(5345);
				id_expression();
				}
				}
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_constant);
		int _la;
		try {
			setState(5413);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5351);
				match(TIMESTAMP);
				setState(5354);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5352);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5353);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(5356);
					match(AT);
					setState(5357);
					match(TIME);
					setState(5358);
					match(ZONE);
					setState(5359);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5362);
				match(INTERVAL);
				setState(5366);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5363);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5364);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5365);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5368);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(5369);
					match(LEFT_PAREN);
					setState(5372);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5370);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5371);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5379);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5374);
						match(COMMA);
						setState(5377);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5375);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5376);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5381);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5384);
					match(TO);
					setState(5397);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5385);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5386);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5387);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5388);
						match(SECOND);
						setState(5395);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
						case 1:
							{
							setState(5389);
							match(LEFT_PAREN);
							setState(5392);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5390);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5391);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5394);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5401);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5402);
				match(DATE);
				setState(5403);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5404);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5405);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5406);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5407);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5408);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5409);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5410);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5411);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5412);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5415);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric_negative(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5417);
			match(MINUS_SIGN);
			setState(5418);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5420);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5424);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5422);
				match(INTRODUCER);
				setState(5423);
				char_set_name();
				}
			}

			setState(5426);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_id_expression);
		try {
			setState(5430);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5428);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5429);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_not_equal_op);
		try {
			setState(5439);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5432);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5433);
				match(LESS_THAN_OP);
				setState(5434);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5435);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5436);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5437);
				match(CARRET_OPERATOR_PART);
				setState(5438);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_greater_than_or_equals_op);
		try {
			setState(5444);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5441);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5442);
				match(GREATER_THAN_OP);
				setState(5443);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_less_than_or_equals_op);
		try {
			setState(5449);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5446);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5447);
				match(LESS_THAN_OP);
				setState(5448);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_concatenation_op);
		try {
			setState(5454);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5451);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5452);
				match(VERTICAL_BAR);
				setState(5453);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			match(LEFT_PAREN);
			setState(5457);
			match(PLUS_SIGN);
			setState(5458);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			_la = _input.LA(1);
			if ( !(((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (A_LETTER - 2)) | (1L << (ADD - 2)) | (1L << (AFTER - 2)) | (1L << (AGENT - 2)) | (1L << (AGGREGATE - 2)) | (1L << (ANALYZE - 2)) | (1L << (ARRAY - 2)) | (1L << (ASSOCIATE - 2)) | (1L << (AT - 2)) | (1L << (ATTRIBUTE - 2)) | (1L << (AUDIT - 2)) | (1L << (AUTHID - 2)) | (1L << (AUTO - 2)) | (1L << (AUTOMATIC - 2)) | (1L << (AUTONOMOUS_TRANSACTION - 2)) | (1L << (BATCH - 2)) | (1L << (BEFORE - 2)) | (1L << (BFILE - 2)) | (1L << (BINARY_DOUBLE - 2)) | (1L << (BINARY_FLOAT - 2)) | (1L << (BINARY_INTEGER - 2)) | (1L << (BLOB - 2)) | (1L << (BLOCK - 2)) | (1L << (BODY - 2)) | (1L << (BOOLEAN - 2)) | (1L << (BOTH - 2)) | (1L << (BULK - 2)) | (1L << (BYTE - 2)) | (1L << (C_LETTER - 2)) | (1L << (CALL - 2)) | (1L << (CANONICAL - 2)) | (1L << (CASCADE - 2)) | (1L << (CAST - 2)) | (1L << (CHAR - 2)) | (1L << (CHAR_CS - 2)) | (1L << (CHARACTER - 2)) | (1L << (CHR - 2)) | (1L << (CLOB - 2)) | (1L << (CLOSE - 2)) | (1L << (CLUSTER - 2)) | (1L << (COLLECT - 2)) | (1L << (COLUMNS - 2)) | (1L << (COMMENT - 2)) | (1L << (COMMIT - 2)) | (1L << (COMMITTED - 2)))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (COMPATIBILITY - 66)) | (1L << (COMPILE - 66)) | (1L << (COMPOUND - 66)) | (1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (ENTITYESCAPING - 131)) | (1L << (ERRORS - 131)) | (1L << (ESCAPE - 131)) | (1L << (EVALNAME - 131)) | (1L << (EXCEPTION_INIT - 131)) | (1L << (EXCEPTIONS - 131)) | (1L << (EXCLUDE - 131)) | (1L << (EXECUTE - 131)) | (1L << (EXIT - 131)) | (1L << (EXPLAIN - 131)) | (1L << (EXTERNAL - 131)) | (1L << (EXTRACT - 131)) | (1L << (FAILURE - 131)) | (1L << (FINAL - 131)) | (1L << (FIRST - 131)) | (1L << (FIRST_VALUE - 131)) | (1L << (FLOAT - 131)) | (1L << (FOLLOWING - 131)) | (1L << (FOLLOWS - 131)) | (1L << (FORALL - 131)) | (1L << (FORCE - 131)) | (1L << (FULL - 131)) | (1L << (FUNCTION - 131)) | (1L << (GROUPING - 131)) | (1L << (HASH - 131)) | (1L << (HIDE - 131)) | (1L << (HOUR - 131)) | (1L << (IGNORE - 131)) | (1L << (IMMEDIATE - 131)) | (1L << (INCLUDE - 131)) | (1L << (INCLUDING - 131)) | (1L << (INCREMENT - 131)) | (1L << (INDENT - 131)) | (1L << (INDEXED - 131)) | (1L << (INDICATOR - 131)) | (1L << (INDICES - 131)) | (1L << (INFINITE - 131)) | (1L << (INLINE - 131)) | (1L << (INNER - 131)) | (1L << (INOUT - 131)) | (1L << (INSTANTIABLE - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (INSTEAD - 195)) | (1L << (INT - 195)) | (1L << (INTEGER - 195)) | (1L << (INTERVAL - 195)) | (1L << (INVALIDATE - 195)) | (1L << (ISOLATION - 195)) | (1L << (ITERATE - 195)) | (1L << (JAVA - 195)) | (1L << (JOIN - 195)) | (1L << (KEEP - 195)) | (1L << (LANGUAGE - 195)) | (1L << (LAST - 195)) | (1L << (LAST_VALUE - 195)) | (1L << (LEADING - 195)) | (1L << (LEFT - 195)) | (1L << (LEVEL - 195)) | (1L << (LIBRARY - 195)) | (1L << (LIKE2 - 195)) | (1L << (LIKE4 - 195)) | (1L << (LIKEC - 195)) | (1L << (LIMIT - 195)) | (1L << (LOCAL - 195)) | (1L << (LOCKED - 195)) | (1L << (LOG - 195)) | (1L << (LOGOFF - 195)) | (1L << (LOGON - 195)) | (1L << (LONG - 195)) | (1L << (LOOP - 195)) | (1L << (MAIN - 195)) | (1L << (MAP - 195)) | (1L << (MATCHED - 195)) | (1L << (MAXVALUE - 195)) | (1L << (MEASURES - 195)) | (1L << (MEMBER - 195)) | (1L << (MERGE - 195)) | (1L << (MINUTE - 195)) | (1L << (MINVALUE - 195)) | (1L << (MLSLABEL - 195)) | (1L << (MODEL - 195)) | (1L << (MODIFY - 195)) | (1L << (MONTH - 195)) | (1L << (MULTISET - 195)) | (1L << (NAME - 195)) | (1L << (NAN - 195)) | (1L << (NATURAL - 195)) | (1L << (NATURALN - 195)) | (1L << (NAV - 195)) | (1L << (NCHAR - 195)) | (1L << (NCHAR_CS - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NCLOB - 259)) | (1L << (NESTED - 259)) | (1L << (NEW - 259)) | (1L << (NO - 259)) | (1L << (NOAUDIT - 259)) | (1L << (NOCOPY - 259)) | (1L << (NOCYCLE - 259)) | (1L << (NOENTITYESCAPING - 259)) | (1L << (NONE - 259)) | (1L << (NOSCHEMACHECK - 259)) | (1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (PRESENT - 323)) | (1L << (RAISE - 323)) | (1L << (RANGE - 323)) | (1L << (RAW - 323)) | (1L << (READ - 323)) | (1L << (REAL - 323)) | (1L << (RECORD - 323)) | (1L << (REF - 323)) | (1L << (REFERENCE - 323)) | (1L << (REFERENCING - 323)) | (1L << (REJECT - 323)) | (1L << (RELIES_ON - 323)) | (1L << (RENAME - 323)) | (1L << (REPLACE - 323)) | (1L << (RESPECT - 323)) | (1L << (RESTRICT_REFERENCES - 323)) | (1L << (RESULT - 323)) | (1L << (RESULT_CACHE - 323)) | (1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (SKIP_ - 388)) | (1L << (SMALLINT - 388)) | (1L << (SNAPSHOT - 388)) | (1L << (SOME - 388)) | (1L << (SPECIFICATION - 388)) | (1L << (SQLDATA - 388)) | (1L << (SQLERROR - 388)) | (1L << (STANDALONE - 388)) | (1L << (STARTUP - 388)) | (1L << (STATEMENT - 388)) | (1L << (STATEMENT_ID - 388)) | (1L << (STATIC - 388)) | (1L << (STATISTICS - 388)) | (1L << (STRING - 388)) | (1L << (SUBMULTISET - 388)) | (1L << (SUBPARTITION - 388)) | (1L << (SUBSTITUTABLE - 388)) | (1L << (SUBTYPE - 388)) | (1L << (SUCCESS - 388)) | (1L << (SUSPEND - 388)) | (1L << (TIME - 388)) | (1L << (TIMESTAMP - 388)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 388)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 388)) | (1L << (TIMESTAMP_UNCONSTRAINED - 388)) | (1L << (TIMEZONE_ABBR - 388)) | (1L << (TIMEZONE_HOUR - 388)) | (1L << (TIMEZONE_MINUTE - 388)) | (1L << (TIMEZONE_REGION - 388)) | (1L << (TRAILING - 388)) | (1L << (TRANSACTION - 388)) | (1L << (TRANSLATE - 388)) | (1L << (TREAT - 388)) | (1L << (TRIGGER - 388)) | (1L << (TRIM - 388)) | (1L << (TRUNCATE - 388)) | (1L << (TYPE - 388)) | (1L << (UNBOUNDED - 388)) | (1L << (UNDER - 388)) | (1L << (UNLIMITED - 388)) | (1L << (UNTIL - 388)) | (1L << (UPDATED - 388)) | (1L << (UPSERT - 388)) | (1L << (UROWID - 388)) | (1L << (USE - 388)) | (1L << (VALIDATE - 388)) | (1L << (VALUE - 388)) | (1L << (VARCHAR - 388)) | (1L << (VARCHAR2 - 388)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (VARIABLE - 452)) | (1L << (VARRAY - 452)) | (1L << (VARYING - 452)) | (1L << (VERSION - 452)) | (1L << (VERSIONS - 452)) | (1L << (WAIT - 452)) | (1L << (WARNING - 452)) | (1L << (WELLFORMED - 452)) | (1L << (WHENEVER - 452)) | (1L << (WHILE - 452)) | (1L << (WITHIN - 452)) | (1L << (WORK - 452)) | (1L << (WRITE - 452)) | (1L << (XML - 452)) | (1L << (XMLAGG - 452)) | (1L << (XMLATTRIBUTES - 452)) | (1L << (XMLCAST - 452)) | (1L << (XMLCOLATTVAL - 452)) | (1L << (XMLELEMENT - 452)) | (1L << (XMLEXISTS - 452)) | (1L << (XMLFOREST - 452)) | (1L << (XMLNAMESPACES - 452)) | (1L << (XMLPARSE - 452)) | (1L << (XMLPI - 452)) | (1L << (XMLQUERY - 452)) | (1L << (XMLROOT - 452)) | (1L << (XMLSERIALIZE - 452)) | (1L << (XMLTABLE - 452)) | (1L << (YEAR - 452)) | (1L << (YES - 452)) | (1L << (YMINTERVAL_UNCONSTRAINED - 452)) | (1L << (ZONE - 452)) | (1L << (PREDICTION - 452)) | (1L << (PREDICTION_BOUNDS - 452)) | (1L << (PREDICTION_COST - 452)) | (1L << (PREDICTION_DETAILS - 452)) | (1L << (PREDICTION_PROBABILITY - 452)) | (1L << (PREDICTION_SET - 452)) | (1L << (CUME_DIST - 452)) | (1L << (DENSE_RANK - 452)) | (1L << (LISTAGG - 452)) | (1L << (PERCENT_RANK - 452)) | (1L << (PERCENTILE_CONT - 452)) | (1L << (PERCENTILE_DISC - 452)) | (1L << (RANK - 452)) | (1L << (AVG - 452)) | (1L << (CORR - 452)) | (1L << (LAG - 452)) | (1L << (LEAD - 452)) | (1L << (MAX - 452)) | (1L << (MEDIAN - 452)) | (1L << (MIN - 452)) | (1L << (NTILE - 452)) | (1L << (RATIO_TO_REPORT - 452)) | (1L << (ROW_NUMBER - 452)) | (1L << (SUM - 452)) | (1L << (VARIANCE - 452)) | (1L << (REGR_ - 452)) | (1L << (STDDEV - 452)) | (1L << (VAR_ - 452)) | (1L << (COVAR_ - 452)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u028d\u1559\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\3\2\6"+
		"\2\u0314\n\2\r\2\16\2\u0315\3\3\7\3\u0319\n\3\f\3\16\3\u031c\13\3\3\3"+
		"\3\3\3\4\3\4\7\4\u0322\n\4\f\4\16\4\u0325\13\4\3\4\3\4\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u033d"+
		"\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0344\n\6\3\6\3\6\3\6\3\6\3\6\7\6\u034b\n"+
		"\6\f\6\16\6\u034e\13\6\3\6\3\6\5\6\u0352\n\6\3\6\7\6\u0355\n\6\f\6\16"+
		"\6\u0358\13\6\3\6\3\6\3\7\5\7\u035d\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3"+
		"\t\3\t\6\t\u0368\n\t\r\t\16\t\u0369\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\6\n\u0377\n\n\r\n\16\n\u0378\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\6\13\u0392\n\13\r\13\16\13\u0393\3\13\3\13\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\5\f\u039e\n\f\5\f\u03a0\n\f\5\f\u03a2\n\f\3\f\5\f\u03a5\n"+
		"\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16\7\16\u03ae\n\16\f\16\16\16\u03b1\13"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\6\16\u03bb\n\16\r\16\16\16"+
		"\u03bc\3\17\3\17\3\17\3\17\5\17\u03c3\n\17\6\17\u03c5\n\17\r\17\16\17"+
		"\u03c6\3\17\5\17\u03ca\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\5\20\u03d8\n\20\3\20\5\20\u03db\n\20\6\20\u03dd\n\20"+
		"\r\20\16\20\u03de\3\21\3\21\3\22\3\22\5\22\u03e5\n\22\3\22\5\22\u03e8"+
		"\n\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u03f4\n\24"+
		"\3\24\7\24\u03f7\n\24\f\24\16\24\u03fa\13\24\3\24\3\24\5\24\u03fe\n\24"+
		"\3\24\3\24\3\25\3\25\3\25\5\25\u0405\n\25\5\25\u0407\n\25\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\7\25\u040f\n\25\f\25\16\25\u0412\13\25\3\25\3\25\5"+
		"\25\u0416\n\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u041e\n\25\f\25\16\25"+
		"\u0421\13\25\3\25\5\25\u0424\n\25\3\25\3\25\5\25\u0428\n\25\3\25\7\25"+
		"\u042b\n\25\f\25\16\25\u042e\13\25\3\25\3\25\5\25\u0432\n\25\3\25\3\25"+
		"\3\25\5\25\u0437\n\25\3\25\3\25\3\26\3\26\5\26\u043d\n\26\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0449\n\27\f\27\16\27\u044c"+
		"\13\27\3\27\3\27\5\27\u0450\n\27\3\27\5\27\u0453\n\27\3\27\3\27\3\30\3"+
		"\30\5\30\u0459\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u0460\n\31\f\31\16\31"+
		"\u0463\13\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u046e\n"+
		"\32\f\32\16\32\u0471\13\32\3\32\3\32\3\33\3\33\3\33\5\33\u0478\n\33\3"+
		"\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\5\34\u0482\n\34\3\34\5\34\u0485"+
		"\n\34\3\34\7\34\u0488\n\34\f\34\16\34\u048b\13\34\3\34\3\34\5\34\u048f"+
		"\n\34\3\34\3\34\3\35\3\35\3\35\5\35\u0496\n\35\3\35\3\35\3\35\5\35\u049b"+
		"\n\35\3\35\3\35\3\36\3\36\3\36\3\36\7\36\u04a3\n\36\f\36\16\36\u04a6\13"+
		"\36\3\36\3\36\3\36\3\36\5\36\u04ac\n\36\5\36\u04ae\n\36\3\37\3\37\5\37"+
		"\u04b2\n\37\3\37\3\37\7\37\u04b6\n\37\f\37\16\37\u04b9\13\37\3\37\3\37"+
		"\5\37\u04bd\n\37\3 \3 \3 \3 \3 \3 \3 \3 \5 \u04c7\n \3!\3!\3!\3!\3!\3"+
		"!\7!\u04cf\n!\f!\16!\u04d2\13!\3!\3!\5!\u04d6\n!\3!\3!\3\"\3\"\3\"\3\""+
		"\3\"\3\"\7\"\u04e0\n\"\f\"\16\"\u04e3\13\"\3\"\3\"\5\"\u04e7\n\"\3\"\3"+
		"\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u04f7\n#\3$\3$\3$\3$\3$\3"+
		"%\3%\3%\3%\3%\5%\u0503\n%\3%\7%\u0506\n%\f%\16%\u0509\13%\3%\3%\5%\u050d"+
		"\n%\3%\3%\3&\3&\3&\5&\u0514\n&\5&\u0516\n&\3&\3&\3&\3&\3&\3&\7&\u051e"+
		"\n&\f&\16&\u0521\13&\3&\3&\5&\u0525\n&\3&\5&\u0528\n&\3&\3&\5&\u052c\n"+
		"&\3&\7&\u052f\n&\f&\16&\u0532\13&\3&\3&\3&\5&\u0537\n&\3&\3&\3\'\3\'\3"+
		"\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0549\n(\3(\7(\u054c\n(\f(\16"+
		"(\u054f\13(\3(\3(\5(\u0553\n(\5(\u0555\n(\3(\3(\3)\3)\3)\5)\u055c\n)\3"+
		")\3)\3)\3)\3)\5)\u0563\n)\3)\5)\u0566\n)\3)\5)\u0569\n)\3)\5)\u056c\n"+
		")\3)\3)\3)\3*\3*\3*\3*\7*\u0575\n*\f*\16*\u0578\13*\3+\3+\3+\3+\3+\3,"+
		"\3,\3,\3,\5,\u0583\n,\3,\3,\5,\u0587\n,\3,\5,\u058a\n,\3-\3-\3-\3-\3."+
		"\3.\3.\5.\u0593\n.\3/\3/\3/\3/\7/\u0599\n/\f/\16/\u059c\13/\3/\3/\3/\3"+
		"/\3/\5/\u05a3\n/\3/\5/\u05a6\n/\3\60\3\60\3\60\3\60\3\60\5\60\u05ad\n"+
		"\60\3\61\3\61\5\61\u05b1\n\61\3\62\3\62\3\62\7\62\u05b6\n\62\f\62\16\62"+
		"\u05b9\13\62\3\62\6\62\u05bc\n\62\r\62\16\62\u05bd\3\62\3\62\3\62\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u05e7\n\63\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0603\n\64\3\65\3\65\3\65"+
		"\7\65\u0608\n\65\f\65\16\65\u060b\13\65\3\65\3\65\5\65\u060f\n\65\3\65"+
		"\3\65\3\66\3\66\3\66\3\66\3\66\7\66\u0618\n\66\f\66\16\66\u061b\13\66"+
		"\5\66\u061d\n\66\3\67\3\67\3\67\3\67\3\67\38\38\68\u0626\n8\r8\168\u0627"+
		"\39\39\39\3:\3:\3:\5:\u0630\n:\3:\3:\5:\u0634\n:\3:\3:\3;\3;\3;\3;\3;"+
		"\3;\3;\3;\5;\u0640\n;\3;\5;\u0643\n;\3;\3;\3<\3<\5<\u0649\n<\3<\5<\u064c"+
		"\n<\3<\7<\u064f\n<\f<\16<\u0652\13<\3<\3<\5<\u0656\n<\3=\3=\5=\u065a\n"+
		"=\3=\3=\3=\3=\3=\3=\7=\u0662\n=\f=\16=\u0665\13=\3=\3=\3>\3>\3>\7>\u066c"+
		"\n>\f>\16>\u066f\13>\3?\3?\3?\5?\u0674\n?\3@\3@\3@\3@\3@\3@\3@\7@\u067d"+
		"\n@\f@\16@\u0680\13@\3@\3@\5@\u0684\n@\3A\3A\5A\u0688\nA\3B\3B\3B\3B\3"+
		"B\3B\5B\u0690\nB\3C\3C\3C\3C\3C\3C\5C\u0698\nC\3C\3C\3C\5C\u069d\nC\3"+
		"C\5C\u06a0\nC\5C\u06a2\nC\3D\5D\u06a5\nD\3D\3D\3D\3D\3E\3E\3E\5E\u06ae"+
		"\nE\3E\3E\3E\5E\u06b3\nE\3E\3E\3F\3F\3F\5F\u06ba\nF\3F\5F\u06bd\nF\3G"+
		"\5G\u06c0\nG\3G\3G\5G\u06c4\nG\3G\5G\u06c7\nG\3G\3G\3G\3G\7G\u06cd\nG"+
		"\fG\16G\u06d0\13G\3G\3G\5G\u06d4\nG\3G\7G\u06d7\nG\fG\16G\u06da\13G\3"+
		"H\3H\3H\3H\5H\u06e0\nH\3I\3I\3I\3J\3J\3J\3J\3J\5J\u06ea\nJ\3K\3K\3K\3"+
		"K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3L\7L\u06fa\nL\fL\16L\u06fd\13L\3L\3L\3M"+
		"\3M\5M\u0703\nM\3N\3N\3N\3N\3O\3O\3O\3O\5O\u070d\nO\3P\3P\3P\3P\3P\3P"+
		"\7P\u0715\nP\fP\16P\u0718\13P\3P\3P\3P\3P\5P\u071e\nP\3P\7P\u0721\nP\f"+
		"P\16P\u0724\13P\3P\3P\3P\5P\u0729\nP\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0731\nQ\fQ"+
		"\16Q\u0734\13Q\3Q\3Q\5Q\u0738\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u073f\nQ\3Q\7Q\u0742"+
		"\nQ\fQ\16Q\u0745\13Q\3Q\3Q\3Q\5Q\u074a\nQ\3R\5R\u074d\nR\3R\5R\u0750\n"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\7R\u075f\nR\fR\16R\u0762\13R"+
		"\3R\3R\5R\u0766\nR\3R\3R\3R\3R\3R\3R\3R\5R\u076f\nR\3R\7R\u0772\nR\fR"+
		"\16R\u0775\13R\3R\3R\3R\5R\u077a\nR\3S\5S\u077d\nS\3S\3S\3T\3T\3T\5T\u0784"+
		"\nT\3T\5T\u0787\nT\3U\3U\3U\3U\3V\5V\u078e\nV\3V\6V\u0791\nV\rV\16V\u0792"+
		"\3V\3V\5V\u0797\nV\3W\3W\3W\5W\u079c\nW\3X\3X\3X\5X\u07a1\nX\3Y\3Y\3Y"+
		"\3Y\3Y\3Y\7Y\u07a9\nY\fY\16Y\u07ac\13Y\3Y\3Y\3Y\5Y\u07b1\nY\3Z\3Z\3Z\3"+
		"Z\3Z\3Z\7Z\u07b9\nZ\fZ\16Z\u07bc\13Z\3Z\3Z\5Z\u07c0\nZ\3Z\3Z\3Z\3Z\3Z"+
		"\5Z\u07c7\nZ\3Z\3Z\3Z\3Z\5Z\u07cd\nZ\3Z\3Z\5Z\u07d1\nZ\3[\5[\u07d4\n["+
		"\3[\5[\u07d7\n[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\7[\u07e6\n[\f["+
		"\16[\u07e9\13[\3[\3[\5[\u07ed\n[\3[\3[\3[\3[\3[\3[\5[\u07f5\n[\3\\\3\\"+
		"\3\\\3\\\3]\3]\3]\3]\3]\3]\7]\u0801\n]\f]\16]\u0804\13]\3]\3]\3^\3^\5"+
		"^\u080a\n^\3_\3_\3_\3`\3`\3`\3`\3`\3a\3a\3a\3a\6a\u0818\na\ra\16a\u0819"+
		"\3a\3a\3b\3b\3b\3b\3b\7b\u0823\nb\fb\16b\u0826\13b\3b\3b\3c\3c\3c\3c\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u083a\nc\3d\3d\3d\3d\3e\3e\3e\3"+
		"f\3f\3f\3f\3g\3g\3g\5g\u084a\ng\3h\3h\3h\3h\3i\3i\3i\5i\u0853\ni\3i\3"+
		"i\3i\5i\u0858\ni\3i\3i\5i\u085c\ni\3i\5i\u085f\ni\3j\3j\3j\3j\3j\3j\7"+
		"j\u0867\nj\fj\16j\u086a\13j\3j\3j\3k\3k\3k\3k\3k\7k\u0873\nk\fk\16k\u0876"+
		"\13k\3k\3k\3k\5k\u087b\nk\3k\3k\3l\3l\7l\u0881\nl\fl\16l\u0884\13l\3l"+
		"\5l\u0887\nl\3l\5l\u088a\nl\3m\3m\3m\3n\3n\3n\3n\3n\3n\3n\3n\3n\5n\u0898"+
		"\nn\3o\3o\5o\u089c\no\3o\3o\3o\5o\u08a1\no\3o\5o\u08a4\no\3o\3o\3p\3p"+
		"\3p\3p\3p\3p\3p\3p\3p\5p\u08b1\np\3p\3p\5p\u08b5\np\3p\3p\3q\3q\3q\3q"+
		"\3q\3q\7q\u08bf\nq\fq\16q\u08c2\13q\3q\3q\5q\u08c6\nq\3q\3q\5q\u08ca\n"+
		"q\3q\3q\5q\u08ce\nq\3q\3q\3r\3r\5r\u08d4\nr\3r\5r\u08d7\nr\3r\5r\u08da"+
		"\nr\3s\3s\3s\3s\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t"+
		"\3t\3t\3t\5t\u08f5\nt\3t\3t\6t\u08f9\nt\rt\16t\u08fa\3t\3t\5t\u08ff\n"+
		"t\3t\3t\3u\3u\5u\u0905\nu\3v\3v\3v\3v\3v\3v\3v\3v\7v\u090f\nv\fv\16v\u0912"+
		"\13v\3v\3v\3v\3v\3v\3v\5v\u091a\nv\5v\u091c\nv\3v\3v\3w\3w\5w\u0922\n"+
		"w\3w\3w\5w\u0926\nw\3w\5w\u0929\nw\3x\3x\3x\3x\3x\3y\3y\5y\u0932\ny\3"+
		"y\3y\3z\3z\3z\3z\3z\3z\3z\5z\u093d\nz\3z\3z\5z\u0941\nz\3z\5z\u0944\n"+
		"z\3{\3{\5{\u0948\n{\3{\3{\3{\3|\3|\3|\5|\u0950\n|\3|\3|\3|\3|\3|\3|\3"+
		"|\5|\u0959\n|\3}\3}\3}\3~\3~\3~\3~\6~\u0962\n~\r~\16~\u0963\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080"+
		"\u0983\n\u0080\3\u0081\3\u0081\5\u0081\u0987\n\u0081\3\u0081\3\u0081\3"+
		"\u0081\3\u0082\3\u0082\5\u0082\u098e\n\u0082\3\u0082\3\u0082\5\u0082\u0992"+
		"\n\u0082\3\u0083\3\u0083\5\u0083\u0996\n\u0083\3\u0083\3\u0083\5\u0083"+
		"\u099a\n\u0083\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\7\u0085\u09a4\n\u0085\f\u0085\16\u0085\u09a7\13\u0085\3\u0085"+
		"\5\u0085\u09aa\n\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0088\5\u0088\u09b8\n\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u09be\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\5\u0088\u09c5\n\u0088\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u09ca\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\5\u0089\u09d4\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u09da\n\u0089\5\u0089\u09dc\n\u0089\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u09e5\n\u008a\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u09ef\n\u008b\3"+
		"\u008b\3\u008b\3\u008b\5\u008b\u09f4\n\u008b\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090"+
		"\3\u0090\5\u0090\u0a03\n\u0090\3\u0091\3\u0091\5\u0091\u0a07\n\u0091\3"+
		"\u0092\5\u0092\u0a0a\n\u0092\3\u0092\3\u0092\5\u0092\u0a0e\n\u0092\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0a13\n\u0093\3\u0093\3\u0093\5\u0093\u0a17\n"+
		"\u0093\3\u0094\3\u0094\6\u0094\u0a1b\n\u0094\r\u0094\16\u0094\u0a1c\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\7\u0095\u0a23\n\u0095\f\u0095\16\u0095"+
		"\u0a26\13\u0095\3\u0095\3\u0095\3\u0095\3\u0096\5\u0096\u0a2c\n\u0096"+
		"\3\u0096\6\u0096\u0a2f\n\u0096\r\u0096\16\u0096\u0a30\5\u0096\u0a33\n"+
		"\u0096\3\u0096\3\u0096\3\u0097\5\u0097\u0a38\n\u0097\3\u0097\6\u0097\u0a3b"+
		"\n\u0097\r\u0097\16\u0097\u0a3c\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\5\u0098\u0a45\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\5\u0099\u0a4c\n\u0099\3\u0099\3\u0099\5\u0099\u0a50\n\u0099\3\u0099\5"+
		"\u0099\u0a53\n\u0099\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0a5f\n\u009b\3\u009c\3\u009c\3"+
		"\u009c\3\u009c\5\u009c\u0a65\n\u009c\3\u009d\3\u009d\3\u009d\3\u009e\3"+
		"\u009e\3\u009e\5\u009e\u0a6d\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\7\u009f\u0a75\n\u009f\f\u009f\16\u009f\u0a78\13\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0a80\n\u009f\f"+
		"\u009f\16\u009f\u0a83\13\u009f\5\u009f\u0a85\n\u009f\3\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a8c\n\u00a0\3\u00a0\5\u00a0\u0a8f\n\u00a0"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0a96\n\u00a1\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2"+
		"\u0aa1\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0aa7\n\u00a2\3"+
		"\u00a2\3\u00a2\5\u00a2\u0aab\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\7\u00a3\u0ab3\n\u00a3\f\u00a3\16\u00a3\u0ab6\13\u00a3\5"+
		"\u00a3\u0ab8\n\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\5\u00a4\u0abe\n\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0ac9\n\u00a4\5\u00a4\u0acb\n\u00a4\5\u00a4\u0acd\n\u00a4\3\u00a4"+
		"\5\u00a4\u0ad0\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u0ad4\n\u00a5\3\u00a5\5"+
		"\u00a5\u0ad7\n\u00a5\3\u00a6\3\u00a6\5\u00a6\u0adb\n\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0adf\n\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0ae4\n\u00a6\3"+
		"\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\5\u00a8\u0aef\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0af3\n\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0afb\n\u00a8\3\u00a9\5"+
		"\u00a9\u0afe\n\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0b03\n\u00a9\f\u00a9"+
		"\16\u00a9\u0b06\13\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0b0c"+
		"\n\u00aa\f\u00aa\16\u00aa\u0b0f\13\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\7\u00ab\u0b16\n\u00ab\f\u00ab\16\u00ab\u0b19\13\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u0b1d\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u0b23\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b27\n\u00ab\3\u00ab\5\u00ab\u0b2a"+
		"\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b32"+
		"\n\u00ac\3\u00ac\5\u00ac\u0b35\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b39\n"+
		"\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b3d\n\u00ac\3\u00ac\3\u00ac\3\u00ac\5"+
		"\u00ac\u0b42\n\u00ac\3\u00ac\5\u00ac\u0b45\n\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0b49\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b4d\n\u00ac\7\u00ac\u0b4f\n\u00ac"+
		"\f\u00ac\16\u00ac\u0b52\13\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\7\u00ad\u0b5b\n\u00ad\f\u00ad\16\u00ad\u0b5e\13\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae"+
		"\7\u00ae\u0b69\n\u00ae\f\u00ae\16\u00ae\u0b6c\13\u00ae\3\u00af\3\u00af"+
		"\5\u00af\u0b70\n\u00af\3\u00af\3\u00af\5\u00af\u0b74\n\u00af\3\u00af\3"+
		"\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0b7d\n\u00b0\3"+
		"\u00b1\3\u00b1\5\u00b1\u0b81\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7"+
		"\u00b1\u0b87\n\u00b1\f\u00b1\16\u00b1\u0b8a\13\u00b1\5\u00b1\u0b8c\n\u00b1"+
		"\3\u00b1\5\u00b1\u0b8f\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u0b93\n\u00b1\3"+
		"\u00b1\5\u00b1\u0b96\n\u00b1\3\u00b1\5\u00b1\u0b99\n\u00b1\3\u00b1\5\u00b1"+
		"\u0b9c\n\u00b1\3\u00b2\3\u00b2\5\u00b2\u0ba0\n\u00b2\3\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0baa\n\u00b4\3"+
		"\u00b5\3\u00b5\3\u00b5\7\u00b5\u0baf\n\u00b5\f\u00b5\16\u00b5\u0bb2\13"+
		"\u00b5\3\u00b6\3\u00b6\7\u00b6\u0bb6\n\u00b6\f\u00b6\16\u00b6\u0bb9\13"+
		"\u00b6\3\u00b6\3\u00b6\5\u00b6\u0bbd\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5"+
		"\u00b7\u0bc2\n\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0bc7\n\u00b7\f\u00b7"+
		"\16\u00b7\u0bca\13\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0bcf\n\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7"+
		"\u0bd9\n\u00b7\5\u00b7\u0bdb\n\u00b7\3\u00b7\7\u00b7\u0bde\n\u00b7\f\u00b7"+
		"\16\u00b7\u0be1\13\u00b7\3\u00b7\5\u00b7\u0be4\n\u00b7\3\u00b8\5\u00b8"+
		"\u0be7\n\u00b8\3\u00b8\5\u00b8\u0bea\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u0bee"+
		"\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0bf3\n\u00b8\3\u00b8\3\u00b8"+
		"\7\u00b8\u0bf7\n\u00b8\f\u00b8\16\u00b8\u0bfa\13\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0c04\n\u00ba"+
		"\f\u00ba\16\u00ba\u0c07\13\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb"+
		"\u0c0d\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c19\n\u00bc\f\u00bc\16\u00bc\u0c1c"+
		"\13\u00bc\5\u00bc\u0c1e\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0c28\n\u00bd\3\u00be\3\u00be\5\u00be"+
		"\u0c2c\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0c32\n\u00be\f"+
		"\u00be\16\u00be\u0c35\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0c40\n\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u0c48\n\u00c0\f\u00c0\16\u00c0"+
		"\u0c4b\13\u00c0\3\u00c0\3\u00c0\5\u00c0\u0c4f\n\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0c57\n\u00c1\f\u00c1\16\u00c1"+
		"\u0c5a\13\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0c5f\n\u00c1\f\u00c1"+
		"\16\u00c1\u0c62\13\u00c1\5\u00c1\u0c64\n\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\5\u00c2\u0c6a\n\u00c2\3\u00c3\3\u00c3\5\u00c3\u0c6e\n\u00c3\3"+
		"\u00c4\3\u00c4\3\u00c4\5\u00c4\u0c73\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\7\u00c4\u0c7b\n\u00c4\f\u00c4\16\u00c4\u0c7e\13"+
		"\u00c4\3\u00c4\3\u00c4\5\u00c4\u0c82\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0c8d\n\u00c5\f"+
		"\u00c5\16\u00c5\u0c90\13\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\7\u00c6\u0c99\n\u00c6\f\u00c6\16\u00c6\u0c9c\13\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u0ca0\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\7\u00c6\u0ca8\n\u00c6\f\u00c6\16\u00c6\u0cab\13\u00c6"+
		"\3\u00c6\3\u00c6\5\u00c6\u0caf\n\u00c6\5\u00c6\u0cb1\n\u00c6\3\u00c7\3"+
		"\u00c7\3\u00c7\5\u00c7\u0cb6\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0cba\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0cc0\n\u00c7\3\u00c7\3\u00c7"+
		"\5\u00c7\u0cc4\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0ccf\n\u00c9\f\u00c9\16\u00c9\u0cd2"+
		"\13\u00c9\3\u00c9\5\u00c9\u0cd5\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\7\u00c9\u0cdd\n\u00c9\f\u00c9\16\u00c9\u0ce0\13\u00c9"+
		"\5\u00c9\u0ce2\n\u00c9\5\u00c9\u0ce4\n\u00c9\3\u00ca\3\u00ca\3\u00ca\5"+
		"\u00ca\u0ce9\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0cf0"+
		"\n\u00cb\f\u00cb\16\u00cb\u0cf3\13\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0cfd\n\u00cc\f\u00cc\16\u00cc"+
		"\u0d00\13\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0d07"+
		"\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\7\u00cf\u0d0e\n\u00cf"+
		"\f\u00cf\16\u00cf\u0d11\13\u00cf\3\u00cf\5\u00cf\u0d14\n\u00cf\3\u00cf"+
		"\7\u00cf\u0d17\n\u00cf\f\u00cf\16\u00cf\u0d1a\13\u00cf\3\u00cf\3\u00cf"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0d24\n\u00d0"+
		"\5\u00d0\u0d26\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u0d34\n\u00d2"+
		"\f\u00d2\16\u00d2\u0d37\13\u00d2\3\u00d3\3\u00d3\5\u00d3\u0d3b\n\u00d3"+
		"\3\u00d3\3\u00d3\7\u00d3\u0d3f\n\u00d3\f\u00d3\16\u00d3\u0d42\13\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d4\5\u00d4\u0d47\n\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\7\u00d6\u0d57\n\u00d6\f\u00d6\16\u00d6\u0d5a\13\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u0d60\n\u00d7\3\u00d8\5\u00d8"+
		"\u0d63\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0d69\n\u00d8\f"+
		"\u00d8\16\u00d8\u0d6c\13\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\5\u00d9\u0d74\n\u00d9\5\u00d9\u0d76\n\u00d9\3\u00d9\3\u00d9\5"+
		"\u00d9\u0d7a\n\u00d9\3\u00d9\5\u00d9\u0d7d\n\u00d9\3\u00da\3\u00da\3\u00da"+
		"\5\u00da\u0d82\n\u00da\5\u00da\u0d84\n\u00da\3\u00da\3\u00da\5\u00da\u0d88"+
		"\n\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\5\u00dc\u0d94\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00de\3\u00de\5\u00de\u0d9d\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\7\u00de\u0da3\n\u00de\f\u00de\16\u00de\u0da6\13\u00de\3\u00df"+
		"\3\u00df\5\u00df\u0daa\n\u00df\3\u00df\3\u00df\5\u00df\u0dae\n\u00df\3"+
		"\u00e0\3\u00e0\3\u00e0\5\u00e0\u0db3\n\u00e0\3\u00e0\5\u00e0\u0db6\n\u00e0"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0dbc\n\u00e1\f\u00e1\16\u00e1"+
		"\u0dbf\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0dc6"+
		"\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0dcc\n\u00e3\3\u00e3"+
		"\5\u00e3\u0dcf\n\u00e3\3\u00e3\5\u00e3\u0dd2\n\u00e3\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\7\u00e4\u0dd8\n\u00e4\f\u00e4\16\u00e4\u0ddb\13\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0de4\n"+
		"\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\7\u00e5\u0dee\n\u00e5\f\u00e5\16\u00e5\u0df1\13\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u0df7\n\u00e5\3\u00e6\3\u00e6\5\u00e6\u0dfb\n"+
		"\u00e6\3\u00e6\3\u00e6\5\u00e6\u0dff\n\u00e6\3\u00e6\5\u00e6\u0e02\n\u00e6"+
		"\3\u00e6\5\u00e6\u0e05\n\u00e6\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0e0a\n"+
		"\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u0e0f\n\u00e8\3\u00e8\5\u00e8\u0e12"+
		"\n\u00e8\3\u00e8\5\u00e8\u0e15\n\u00e8\3\u00e9\3\u00e9\6\u00e9\u0e19\n"+
		"\u00e9\r\u00e9\16\u00e9\u0e1a\3\u00e9\5\u00e9\u0e1e\n\u00e9\3\u00e9\3"+
		"\u00e9\3\u00ea\3\u00ea\5\u00ea\u0e24\n\u00ea\3\u00ea\5\u00ea\u0e27\n\u00ea"+
		"\3\u00eb\5\u00eb\u0e2a\n\u00eb\3\u00eb\6\u00eb\u0e2d\n\u00eb\r\u00eb\16"+
		"\u00eb\u0e2e\3\u00eb\5\u00eb\u0e32\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\6\u00ec\u0e38\n\u00ec\r\u00ec\16\u00ec\u0e39\3\u00ed\3\u00ed\6\u00ed"+
		"\u0e3e\n\u00ed\r\u00ed\16\u00ed\u0e3f\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\7\u00ee\u0e48\n\u00ee\f\u00ee\16\u00ee\u0e4b\13\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u0e4f\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e58\n\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e62\n\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u0e66\n\u00f0\5\u00f0\u0e68\n\u00f0\3\u00f0\5\u00f0\u0e6b"+
		"\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\7\u00f1\u0e75\n\u00f1\f\u00f1\16\u00f1\u0e78\13\u00f1\3\u00f1\5\u00f1"+
		"\u0e7b\n\u00f1\3\u00f1\5\u00f1\u0e7e\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3"+
		"\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u0e90\n\u00f4\f\u00f4\16\u00f4"+
		"\u0e93\13\u00f4\3\u00f4\3\u00f4\5\u00f4\u0e97\n\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u0e9c\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u0ea3\n\u00f5\3\u00f5\5\u00f5\u0ea6\n\u00f5\3\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\7\u00f6\u0ead\n\u00f6\f\u00f6\16\u00f6\u0eb0\13"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0eb6\n\u00f6\3\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u0ebb\n\u00f7\3\u00f8\3\u00f8\5\u00f8\u0ebf\n\u00f8"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0ec7\n\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0ecd\n\u00f9\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0ed5\n\u00fa\3\u00fa\5\u00fa"+
		"\u0ed8\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u0ede\n\u00fb\f"+
		"\u00fb\16\u00fb\u0ee1\13\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc"+
		"\5\u00fc\u0ee8\n\u00fc\3\u00fc\5\u00fc\u0eeb\n\u00fc\3\u00fc\5\u00fc\u0eee"+
		"\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe"+
		"\u0ef7\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0efd\n\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0f03\n\u00ff\5\u00ff\u0f05\n\u00ff"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\5\u0100\u0f12\n\u0100\5\u0100\u0f14\n\u0100\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u0f1d\n\u0101\5"+
		"\u0101\u0f1f\n\u0101\3\u0102\3\u0102\5\u0102\u0f23\n\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\5\u0102\u0f29\n\u0102\3\u0102\3\u0102\5\u0102\u0f2d\n"+
		"\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0105\3\u0105\5\u0105\u0f3b\n\u0105\3\u0105\3\u0105"+
		"\7\u0105\u0f3f\n\u0105\f\u0105\16\u0105\u0f42\13\u0105\3\u0105\3\u0105"+
		"\3\u0106\3\u0106\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108"+
		"\u0f4e\n\u0108\f\u0108\16\u0108\u0f51\13\u0108\5\u0108\u0f53\n\u0108\3"+
		"\u0109\3\u0109\3\u010a\3\u010a\3\u010a\7\u010a\u0f5a\n\u010a\f\u010a\16"+
		"\u010a\u0f5d\13\u010a\3\u010b\3\u010b\3\u010b\5\u010b\u0f62\n\u010b\3"+
		"\u010c\3\u010c\3\u010c\5\u010c\u0f67\n\u010c\3\u010c\3\u010c\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u0f72\n\u010c\3"+
		"\u010c\3\u010c\5\u010c\u0f76\n\u010c\3\u010c\3\u010c\3\u010c\7\u010c\u0f7b"+
		"\n\u010c\f\u010c\16\u010c\u0f7e\13\u010c\3\u010c\3\u010c\5\u010c\u0f82"+
		"\n\u010c\7\u010c\u0f84\n\u010c\f\u010c\16\u010c\u0f87\13\u010c\3\u010d"+
		"\3\u010d\3\u010d\5\u010d\u0f8c\n\u010d\3\u010d\3\u010d\5\u010d\u0f90\n"+
		"\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\5\u010f\u0f9b\n\u010f\3\u010f\7\u010f\u0f9e\n\u010f\f\u010f\16"+
		"\u010f\u0fa1\13\u010f\3\u0110\3\u0110\5\u0110\u0fa5\n\u0110\3\u0110\3"+
		"\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u0fae\n\u0110\5"+
		"\u0110\u0fb0\n\u0110\5\u0110\u0fb2\n\u0110\3\u0111\3\u0111\3\u0112\3\u0112"+
		"\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\7\u0113\u0fc1\n\u0113\f\u0113\16\u0113\u0fc4\13\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\5\u0113\u0fcb\n\u0113\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u0fd5\n\u0115\f\u0115"+
		"\16\u0115\u0fd8\13\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\7\u0117"+
		"\u0fdf\n\u0117\f\u0117\16\u0117\u0fe2\13\u0117\3\u0118\3\u0118\3\u0118"+
		"\7\u0118\u0fe7\n\u0118\f\u0118\16\u0118\u0fea\13\u0118\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0ff2\n\u0119\3\u0119\5\u0119"+
		"\u0ff5\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u0ffc\n"+
		"\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1004\n"+
		"\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u100b\n\u011a\3"+
		"\u011a\3\u011a\5\u011a\u100f\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3"+
		"\u011b\5\u011b\u1016\n\u011b\3\u011c\3\u011c\5\u011c\u101a\n\u011c\3\u011c"+
		"\3\u011c\3\u011c\5\u011c\u101f\n\u011c\7\u011c\u1021\n\u011c\f\u011c\16"+
		"\u011c\u1024\13\u011c\3\u011c\3\u011c\3\u011c\7\u011c\u1029\n\u011c\f"+
		"\u011c\16\u011c\u102c\13\u011c\3\u011c\5\u011c\u102f\n\u011c\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1036\n\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u103f\n\u011d\3\u011e\3"+
		"\u011e\3\u011e\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\7\u0120\u104b\n\u0120\f\u0120\16\u0120\u104e\13\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\7\u0120\u1058\n\u0120"+
		"\f\u0120\16\u0120\u105b\13\u0120\3\u0120\3\u0120\5\u0120\u105f\n\u0120"+
		"\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u1075\n\u0121\3\u0122\3\u0122\5\u0122\u1079\n"+
		"\u0122\3\u0123\5\u0123\u107c\n\u0123\3\u0123\3\u0123\3\u0123\6\u0123\u1081"+
		"\n\u0123\r\u0123\16\u0123\u1082\3\u0123\5\u0123\u1086\n\u0123\3\u0123"+
		"\3\u0123\5\u0123\u108a\n\u0123\3\u0123\5\u0123\u108d\n\u0123\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1094\n\u0124\3\u0125\5\u0125\u1097"+
		"\n\u0125\3\u0125\3\u0125\6\u0125\u109b\n\u0125\r\u0125\16\u0125\u109c"+
		"\3\u0125\5\u0125\u10a0\n\u0125\3\u0125\3\u0125\5\u0125\u10a4\n\u0125\3"+
		"\u0125\5\u0125\u10a7\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5"+
		"\u0126\u10ae\n\u0126\3\u0127\3\u0127\3\u0127\5\u0127\u10b3\n\u0127\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\7\u0128\u10bf\n\u0128\f\u0128\16\u0128\u10c2\13\u0128\3\u0128\3\u0128"+
		"\3\u0128\5\u0128\u10c7\n\u0128\5\u0128\u10c9\n\u0128\3\u0129\3\u0129\5"+
		"\u0129\u10cd\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u10d3\n\u012a"+
		"\f\u012a\16\u012a\u10d6\13\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u10e1\n\u012b\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u10e6\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u10eb\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u10f1\n\u012c\3\u012c\5"+
		"\u012c\u10f4\n\u012c\3\u012c\3\u012c\5\u012c\u10f8\n\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1102\n\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1112\n\u012c\3\u012c"+
		"\3\u012c\5\u012c\u1116\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\6\u012c\u111d\n\u012c\r\u012c\16\u012c\u111e\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u1125\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1133"+
		"\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c"+
		"\u113c\n\u012c\f\u012c\16\u012c\u113f\13\u012c\3\u012c\5\u012c\u1142\n"+
		"\u012c\3\u012c\5\u012c\u1145\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u114e\n\u012c\3\u012c\3\u012c\7\u012c\u1152"+
		"\n\u012c\f\u012c\16\u012c\u1155\13\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u115e\n\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u1166\n\u012c\3\u012c\5\u012c\u1169\n"+
		"\u012c\3\u012c\5\u012c\u116c\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u1175\n\u012c\3\u012c\3\u012c\3\u012c\5"+
		"\u012c\u117a\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1181"+
		"\n\u012c\f\u012c\16\u012c\u1184\13\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u1189\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u118e\n\u012c\3\u012c\5"+
		"\u012c\u1191\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1196\n\u012c\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u119b\n\u012c\7\u012c\u119d\n\u012c\f\u012c\16"+
		"\u012c\u11a0\13\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11a5\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11ab\n\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11b4\n\u012c\3\u012c\3"+
		"\u012c\3\u012c\5\u012c\u11b9\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\5\u012c\u11c1\n\u012c\3\u012c\3\u012c\5\u012c\u11c5\n\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u11ca\n\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u11d0\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\5\u012c\u11d7\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11dc\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u11e4\n\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u11e9\n\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u11f1\n\u012c\3\u012c\5\u012c\u11f4\n\u012c"+
		"\3\u012c\5\u012c\u11f7\n\u012c\3\u012c\5\u012c\u11fa\n\u012c\3\u012c\3"+
		"\u012c\5\u012c\u11fe\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1203\n\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u1208\n\u012c\3\u012c\3\u012c\5\u012c"+
		"\u120c\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1213\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1218\n\u012c\5\u012c\u121a\n\u012c"+
		"\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u1225\n\u0130\3\u0130\3\u0130\5\u0130\u1229\n\u0130\5\u0130\u122b"+
		"\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\5\u0131\u1236\n\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1241\n\u0133\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\7\u0134\u1248\n\u0134\f\u0134\16\u0134\u124b"+
		"\13\u0134\5\u0134\u124d\n\u0134\3\u0135\3\u0135\5\u0135\u1251\n\u0135"+
		"\3\u0135\5\u0135\u1254\n\u0135\3\u0135\3\u0135\5\u0135\u1258\n\u0135\3"+
		"\u0136\3\u0136\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\5\u0137\u1265\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138"+
		"\u126a\n\u0138\3\u0138\3\u0138\3\u0138\3\u0138\7\u0138\u1270\n\u0138\f"+
		"\u0138\16\u0138\u1273\13\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138"+
		"\u1279\n\u0138\3\u0139\3\u0139\3\u0139\5\u0139\u127e\n\u0139\3\u0139\3"+
		"\u0139\5\u0139\u1282\n\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1287\n\u0139"+
		"\3\u013a\3\u013a\3\u013a\5\u013a\u128c\n\u013a\3\u013a\5\u013a\u128f\n"+
		"\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u1294\n\u013a\f\u013a\16\u013a"+
		"\u1297\13\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\5\u013b\u12a0\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b\7\u013b\u12a6\n"+
		"\u013b\f\u013b\16\u013b\u12a9\13\u013b\3\u013b\5\u013b\u12ac\n\u013b\3"+
		"\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c"+
		"\u12b6\n\u013c\3\u013c\5\u013c\u12b9\n\u013c\5\u013c\u12bb\n\u013c\3\u013d"+
		"\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u12c5"+
		"\n\u013e\5\u013e\u12c7\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u12cd\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u12d3\n\u0140\5"+
		"\u0140\u12d5\n\u0140\3\u0141\3\u0141\3\u0141\3\u0142\3\u0142\3\u0142\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u12e3\n\u0143\5"+
		"\u0143\u12e5\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u12ec"+
		"\n\u0144\3\u0144\5\u0144\u12ef\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\5\u0145\u12f8\n\u0145\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u1301\n\u0146\3\u0147\3\u0147"+
		"\3\u0148\3\u0148\3\u0149\3\u0149\5\u0149\u1309\n\u0149\3\u0149\3\u0149"+
		"\3\u014a\5\u014a\u130e\n\u014a\3\u014a\3\u014a\5\u014a\u1312\n\u014a\3"+
		"\u014a\5\u014a\u1315\n\u014a\3\u014b\3\u014b\5\u014b\u1319\n\u014b\3\u014c"+
		"\3\u014c\3\u014d\3\u014d\3\u014d\5\u014d\u1320\n\u014d\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\7\u014f\u132a\n\u014f"+
		"\f\u014f\16\u014f\u132d\13\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\7\u014f\u1335\n\u014f\f\u014f\16\u014f\u1338\13\u014f\5\u014f"+
		"\u133a\n\u014f\3\u0150\3\u0150\5\u0150\u133e\n\u0150\3\u0151\3\u0151\3"+
		"\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0155\3\u0155\3\u0156"+
		"\3\u0156\3\u0157\3\u0157\3\u0157\7\u0157\u134f\n\u0157\f\u0157\16\u0157"+
		"\u1352\13\u0157\3\u0157\3\u0157\5\u0157\u1356\n\u0157\3\u0158\3\u0158"+
		"\3\u0159\3\u0159\3\u0159\5\u0159\u135d\n\u0159\3\u015a\3\u015a\3\u015b"+
		"\3\u015b\3\u015c\3\u015c\3\u015d\3\u015d\3\u015d\7\u015d\u1368\n\u015d"+
		"\f\u015d\16\u015d\u136b\13\u015d\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f"+
		"\7\u015f\u1372\n\u015f\f\u015f\16\u015f\u1375\13\u015f\3\u015f\3\u015f"+
		"\5\u015f\u1379\n\u015f\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\7\u0161"+
		"\u1380\n\u0161\f\u0161\16\u0161\u1383\13\u0161\3\u0162\3\u0162\3\u0162"+
		"\7\u0162\u1388\n\u0162\f\u0162\16\u0162\u138b\13\u0162\3\u0163\3\u0163"+
		"\3\u0163\7\u0163\u1390\n\u0163\f\u0163\16\u0163\u1393\13\u0163\3\u0164"+
		"\3\u0164\3\u0164\5\u0164\u1398\n\u0164\3\u0165\3\u0165\3\u0165\5\u0165"+
		"\u139d\n\u0165\3\u0166\3\u0166\3\u0166\5\u0166\u13a2\n\u0166\3\u0167\3"+
		"\u0167\5\u0167\u13a6\n\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u13ab\n\u0167"+
		"\3\u0167\5\u0167\u13ae\n\u0167\3\u0168\3\u0168\3\u0169\3\u0169\5\u0169"+
		"\u13b4\n\u0169\3\u016a\3\u016a\5\u016a\u13b8\n\u016a\3\u016b\3\u016b\3"+
		"\u016b\5\u016b\u13bd\n\u016b\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d\7"+
		"\u016d\u13c4\n\u016d\f\u016d\16\u016d\u13c7\13\u016d\3\u016e\3\u016e\3"+
		"\u016e\5\u016e\u13cc\n\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u13d1\n\u016e"+
		"\3\u016f\3\u016f\3\u016f\7\u016f\u13d6\n\u016f\f\u016f\16\u016f\u13d9"+
		"\13\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170"+
		"\u13e2\n\u0170\3\u0171\3\u0171\5\u0171\u13e6\n\u0171\3\u0171\3\u0171\7"+
		"\u0171\u13ea\n\u0171\f\u0171\16\u0171\u13ed\13\u0171\3\u0171\3\u0171\5"+
		"\u0171\u13f1\n\u0171\3\u0172\3\u0172\3\u0172\5\u0172\u13f6\n\u0172\5\u0172"+
		"\u13f8\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u13fd\n\u0172\7\u0172\u13ff"+
		"\n\u0172\f\u0172\16\u0172\u1402\13\u0172\3\u0172\3\u0172\5\u0172\u1406"+
		"\n\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u140d\n\u0173"+
		"\3\u0173\3\u0173\3\u0173\5\u0173\u1412\n\u0173\5\u0173\u1414\n\u0173\5"+
		"\u0173\u1416\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3"+
		"\u0173\3\u0173\5\u0173\u1420\n\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u1425"+
		"\n\u0173\7\u0173\u1427\n\u0173\f\u0173\16\u0173\u142a\13\u0173\5\u0173"+
		"\u142c\n\u0173\3\u0173\3\u0173\5\u0173\u1430\n\u0173\3\u0174\3\u0174\3"+
		"\u0174\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u1439\n\u0175\3\u0175\3"+
		"\u0175\3\u0176\3\u0176\5\u0176\u143f\n\u0176\3\u0176\3\u0176\5\u0176\u1443"+
		"\n\u0176\5\u0176\u1445\n\u0176\3\u0177\3\u0177\5\u0177\u1449\n\u0177\3"+
		"\u0177\3\u0177\5\u0177\u144d\n\u0177\3\u0177\3\u0177\5\u0177\u1451\n\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1459\n\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1461\n\u0177"+
		"\5\u0177\u1463\n\u0177\3\u0178\3\u0178\3\u0178\5\u0178\u1468\n\u0178\3"+
		"\u0178\3\u0178\5\u0178\u146c\n\u0178\3\u0178\5\u0178\u146f\n\u0178\3\u0178"+
		"\3\u0178\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\5\u0179\u1487\n\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\5\u0179\u148e\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\5\u0179\u14af\n\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u14b4\n\u017a\3"+
		"\u017a\5\u017a\u14b7\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u14bc\n\u017a"+
		"\5\u017a\u14be\n\u017a\3\u017a\3\u017a\7\u017a\u14c2\n\u017a\f\u017a\16"+
		"\u017a\u14c5\13\u017a\3\u017b\3\u017b\3\u017b\7\u017b\u14ca\n\u017b\f"+
		"\u017b\16\u017b\u14cd\13\u017b\3\u017c\3\u017c\5\u017c\u14d1\n\u017c\3"+
		"\u017c\3\u017c\3\u017c\7\u017c\u14d6\n\u017c\f\u017c\16\u017c\u14d9\13"+
		"\u017c\3\u017c\5\u017c\u14dc\n\u017c\3\u017d\3\u017d\5\u017d\u14e0\n\u017d"+
		"\3\u017d\3\u017d\3\u017d\7\u017d\u14e5\n\u017d\f\u017d\16\u017d\u14e8"+
		"\13\u017d\3\u017e\3\u017e\3\u017e\5\u017e\u14ed\n\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\5\u017e\u14f3\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u14f9\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u14ff\n"+
		"\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1504\n\u017e\5\u017e\u1506\n\u017e"+
		"\3\u017e\5\u017e\u1509\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1513\n\u017e\3\u017e\5\u017e\u1516\n"+
		"\u017e\5\u017e\u1518\n\u017e\5\u017e\u151a\n\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u1528\n\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0181"+
		"\3\u0181\3\u0182\3\u0182\5\u0182\u1533\n\u0182\3\u0182\3\u0182\3\u0183"+
		"\3\u0183\5\u0183\u1539\n\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\5\u0184\u1542\n\u0184\3\u0185\3\u0185\3\u0185\5\u0185"+
		"\u1547\n\u0185\3\u0186\3\u0186\3\u0186\5\u0186\u154c\n\u0186\3\u0187\3"+
		"\u0187\3\u0187\5\u0187\u1551\n\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3"+
		"\u0189\3\u0189\3\u0189\2\2\u018a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\2[\3\2\u021d\u021d\4\2oo\u00b3\u00b3\4\2\u01b8\u01b8"+
		"\u020b\u020b\5\2mm\u00d1\u00d1\u0150\u0150\5\2mm\u00d1\u00d1\u0113\u0113"+
		"\4\2\16\16\u0148\u0148\4\2\u00af\u00af\u00e9\u00e9\5\2\u0097\u0097\u00e4"+
		"\u00e4\u0110\u0110\4\2\33\33\u0170\u0170\4\2vv\u0082\u0082\4\2ll\u00d2"+
		"\u00d2\5\2\u00af\u00af\u00e9\u00e9\u00f1\u00f1\4\2\20\20\u00cc\u00cc\4"+
		"\2\b\b\u013c\u013c\4\2\u00ac\u00ac\u014a\u014a\4\2>>\u0129\u0129\5\2&"+
		"&\u0130\u0130\u018a\u018a\4\2\6\6\35\35\5\2qq\u00c3\u00c3\u01bb\u01bb"+
		"\5\2\u0107\u0107\u0121\u0121\u0133\u0133\4\2\u00a1\u00a1\u01c1\u01c1\4"+
		"\2&&\u018a\u018a\4\2\5\5{{\5\2\5\5{{\u00fb\u00fb\5\2]]\u0128\u0128\u018b"+
		"\u018b\4\2\u00eb\u00eb\u0129\u0129\4\2\u00f2\u00f2\u0192\u0192\5\2\u0098"+
		"\u0098\u00c4\u00c4\u012f\u012f\4\2[[pp\6\2\u00b4\u00b4\u00c2\u00c2\u010d"+
		"\u010d\u012c\u012c\4\2mm\u021a\u021a\3\2\u013a\u013b\3\3\u021d\u021d\3"+
		"\2\u015c\u015d\4\2\u0124\u0124\u01d5\u01d5\3\2KL\4\2\u0117\u0117\u01cb"+
		"\u01cb\4\2\34\34\u00b3\u00b3\4\2))rr\5\2\t\txx\u01b7\u01b7\4\2XX\u0100"+
		"\u0100\5\2\u00a5\u00a5\u00d7\u00d7\u0161\u0161\4\2\u016d\u016d\u01a2\u01a2"+
		"\5\2\u016d\u016d\u0188\u0188\u01a2\u01a2\4\2\u008c\u008c\u00b5\u00b5\4"+
		"\2YY\u0163\u0163\4\2\u00b2\u00b2\u00d1\u00d1\4\2\t\t\u01bc\u01bc\4\2\30"+
		"\30\u0176\u0176\4\2\21\21ss\4\2\u0099\u0099\u00d4\u00d4\4\2\t\t\u0099"+
		"\u0099\4\2\u019d\u019d\u019f\u019f\4\2\u00f2\u00f2\u0197\u0197\3\2\u00da"+
		"\u00dd\3\2\u0215\u0216\4\2\u0214\u0214\u0218\u0218\4\2kk\u00b7\u00b7\6"+
		"\2\t\t\r\r\u008f\u008f\u0189\u0189\4\2\64\64\u01d9\u01d9\4\2xx\u01b7\u01b7"+
		"\4\2\61\61DD\4\2\u009a\u009a\u00d5\u00d5\4\2\67\67\u0104\u0104\5\2((\u00d6"+
		"\u00d6\u01ab\u01ab\4\2\u01da\u01da\u01dd\u01dd\4\2\u0085\u0085\u010f\u010f"+
		"\4\2\u0088\u0088\u00fe\u00fe\4\2NNyy\4\2\u00ae\u00ae\u017f\u017f\3\2\u01f6"+
		"\u0205\3\2\u01ef\u01f5\3\2\u01e9\u01ee\4\2\u014a\u014a\u0166\u0166\4\2"+
		"\u009d\u009d\u0143\u0143\4\2\u0115\u0115\u016c\u016c\4\2\u012b\u012b\u018c"+
		"\u018c\5\2\u0094\u0094\u019b\u019b\u01cc\u01cc\4\2BB\u0162\u0162\5\2B"+
		"B\u0113\u0113\u0162\u0162\4\2\u0134\u0134\u0198\u0198\4\2\u00b2\u00b2"+
		"\u0158\u0158\4\2bb\u01e5\u01e5\4\2\u00fc\u00fc\u016f\u016f\4\2--\66\66"+
		"\6\2bb\u00b0\u00b0\u00f6\u00f6\u016f\u016f\3\2\u020b\u020c\4\2\u0206\u0206"+
		"\u020d\u020dY\2\4\b\13\13\17\17\22\31\34\35 (++-.\60\62\64\64\668::<F"+
		"JUXY[`bhjknptwyz|~\u0081\u0083\u0085\u0088\u008a\u008c\u008e\u008e\u0090"+
		"\u0094\u0098\u009a\u009c\u009e\u00a0\u00a1\u00a5\u00a6\u00ab\u00ac\u00ae"+
		"\u00ae\u00b0\u00b0\u00b2\u00b3\u00b5\u00b8\u00ba\u00bd\u00c0\u00c2\u00c4"+
		"\u00c7\u00c9\u00c9\u00cb\u00cb\u00cd\u00d1\u00d3\u00d9\u00db\u00de\u00e0"+
		"\u00e0\u00e2\u00e3\u00e5\u00e8\u00ea\u00ec\u00ef\u00f0\u00f2\u00f3\u00f6"+
		"\u00f8\u00fa\u0107\u0109\u010a\u010d\u010f\u0113\u0113\u0115\u0115\u0119"+
		"\u011d\u011f\u0121\u0124\u0125\u0128\u0128\u012a\u0136\u013c\u013c\u013e"+
		"\u0145\u0149\u014c\u014e\u014f\u0151\u015f\u0161\u016d\u016f\u016f\u0171"+
		"\u0172\u0174\u0174\u0176\u017d\u017f\u0184\u0186\u018d\u018f\u0193\u0196"+
		"\u019c\u01a1\u01a9\u01ab\u01b0\u01b2\u01b5\u01b8\u01b8\u01ba\u01ba\u01bc"+
		"\u01bf\u01c1\u01c2\u01c4\u01cd\u01cf\u01cf\u01d1\u01d1\u01d3\u0205\u028c"+
		"\u028c\u17c8\2\u0313\3\2\2\2\4\u031a\3\2\2\2\6\u0323\3\2\2\2\b\u033c\3"+
		"\2\2\2\n\u033e\3\2\2\2\f\u035c\3\2\2\2\16\u0360\3\2\2\2\20\u0367\3\2\2"+
		"\2\22\u0376\3\2\2\2\24\u037a\3\2\2\2\26\u03a4\3\2\2\2\30\u03a6\3\2\2\2"+
		"\32\u03a8\3\2\2\2\34\u03c9\3\2\2\2\36\u03dc\3\2\2\2 \u03e0\3\2\2\2\"\u03e7"+
		"\3\2\2\2$\u03e9\3\2\2\2&\u03ee\3\2\2\2(\u0406\3\2\2\2*\u043a\3\2\2\2,"+
		"\u043e\3\2\2\2.\u0456\3\2\2\2\60\u045a\3\2\2\2\62\u0466\3\2\2\2\64\u0474"+
		"\3\2\2\2\66\u047c\3\2\2\28\u0492\3\2\2\2:\u049e\3\2\2\2<\u04af\3\2\2\2"+
		">\u04c6\3\2\2\2@\u04c8\3\2\2\2B\u04d9\3\2\2\2D\u04f6\3\2\2\2F\u04f8\3"+
		"\2\2\2H\u04fd\3\2\2\2J\u0515\3\2\2\2L\u053a\3\2\2\2N\u053f\3\2\2\2P\u0558"+
		"\3\2\2\2R\u0570\3\2\2\2T\u0579\3\2\2\2V\u0582\3\2\2\2X\u058b\3\2\2\2Z"+
		"\u058f\3\2\2\2\\\u0594\3\2\2\2^\u05ac\3\2\2\2`\u05ae\3\2\2\2b\u05b2\3"+
		"\2\2\2d\u05e6\3\2\2\2f\u0602\3\2\2\2h\u0604\3\2\2\2j\u0612\3\2\2\2l\u061e"+
		"\3\2\2\2n\u0623\3\2\2\2p\u0629\3\2\2\2r\u062c\3\2\2\2t\u0637\3\2\2\2v"+
		"\u0646\3\2\2\2x\u0657\3\2\2\2z\u0668\3\2\2\2|\u0670\3\2\2\2~\u0675\3\2"+
		"\2\2\u0080\u0685\3\2\2\2\u0082\u0689\3\2\2\2\u0084\u06a1\3\2\2\2\u0086"+
		"\u06a4\3\2\2\2\u0088\u06aa\3\2\2\2\u008a\u06b6\3\2\2\2\u008c\u06bf\3\2"+
		"\2\2\u008e\u06db\3\2\2\2\u0090\u06e1\3\2\2\2\u0092\u06e4\3\2\2\2\u0094"+
		"\u06eb\3\2\2\2\u0096\u06f3\3\2\2\2\u0098\u0702\3\2\2\2\u009a\u0704\3\2"+
		"\2\2\u009c\u0708\3\2\2\2\u009e\u070e\3\2\2\2\u00a0\u072a\3\2\2\2\u00a2"+
		"\u074c\3\2\2\2\u00a4\u077c\3\2\2\2\u00a6\u0786\3\2\2\2\u00a8\u0788\3\2"+
		"\2\2\u00aa\u078d\3\2\2\2\u00ac\u079b\3\2\2\2\u00ae\u079d\3\2\2\2\u00b0"+
		"\u07a2\3\2\2\2\u00b2\u07b2\3\2\2\2\u00b4\u07d3\3\2\2\2\u00b6\u07f6\3\2"+
		"\2\2\u00b8\u07fa\3\2\2\2\u00ba\u0809\3\2\2\2\u00bc\u080b\3\2\2\2\u00be"+
		"\u080e\3\2\2\2\u00c0\u0813\3\2\2\2\u00c2\u081d\3\2\2\2\u00c4\u0839\3\2"+
		"\2\2\u00c6\u083b\3\2\2\2\u00c8\u083f\3\2\2\2\u00ca\u0842\3\2\2\2\u00cc"+
		"\u0846\3\2\2\2\u00ce\u084b\3\2\2\2\u00d0\u084f\3\2\2\2\u00d2\u0860\3\2"+
		"\2\2\u00d4\u086d\3\2\2\2\u00d6\u087e\3\2\2\2\u00d8\u088b\3\2\2\2\u00da"+
		"\u0897\3\2\2\2\u00dc\u0899\3\2\2\2\u00de\u08a7\3\2\2\2\u00e0\u08b8\3\2"+
		"\2\2\u00e2\u08d1\3\2\2\2\u00e4\u08db\3\2\2\2\u00e6\u08df\3\2\2\2\u00e8"+
		"\u0904\3\2\2\2\u00ea\u0906\3\2\2\2\u00ec\u091f\3\2\2\2\u00ee\u092a\3\2"+
		"\2\2\u00f0\u0931\3\2\2\2\u00f2\u0935\3\2\2\2\u00f4\u0947\3\2\2\2\u00f6"+
		"\u094f\3\2\2\2\u00f8\u095a\3\2\2\2\u00fa\u0961\3\2\2\2\u00fc\u0965\3\2"+
		"\2\2\u00fe\u0982\3\2\2\2\u0100\u0986\3\2\2\2\u0102\u098b\3\2\2\2\u0104"+
		"\u0993\3\2\2\2\u0106\u099b\3\2\2\2\u0108\u099e\3\2\2\2\u010a\u09ae\3\2"+
		"\2\2\u010c\u09b3\3\2\2\2\u010e\u09b7\3\2\2\2\u0110\u09db\3\2\2\2\u0112"+
		"\u09dd\3\2\2\2\u0114\u09f3\3\2\2\2\u0116\u09f5\3\2\2\2\u0118\u09fa\3\2"+
		"\2\2\u011a\u09fc\3\2\2\2\u011c\u09fe\3\2\2\2\u011e\u0a00\3\2\2\2\u0120"+
		"\u0a04\3\2\2\2\u0122\u0a09\3\2\2\2\u0124\u0a0f\3\2\2\2\u0126\u0a18\3\2"+
		"\2\2\u0128\u0a1e\3\2\2\2\u012a\u0a32\3\2\2\2\u012c\u0a37\3\2\2\2\u012e"+
		"\u0a44\3\2\2\2\u0130\u0a46\3\2\2\2\u0132\u0a54\3\2\2\2\u0134\u0a5e\3\2"+
		"\2\2\u0136\u0a64\3\2\2\2\u0138\u0a66\3\2\2\2\u013a\u0a69\3\2\2\2\u013c"+
		"\u0a6e\3\2\2\2\u013e\u0a86\3\2\2\2\u0140\u0a95\3\2\2\2\u0142\u0a97\3\2"+
		"\2\2\u0144\u0aac\3\2\2\2\u0146\u0abb\3\2\2\2\u0148\u0ad1\3\2\2\2\u014a"+
		"\u0ad8\3\2\2\2\u014c\u0ae5\3\2\2\2\u014e\u0ae8\3\2\2\2\u0150\u0afd\3\2"+
		"\2\2\u0152\u0b07\3\2\2\2\u0154\u0b10\3\2\2\2\u0156\u0b2b\3\2\2\2\u0158"+
		"\u0b56\3\2\2\2\u015a\u0b66\3\2\2\2\u015c\u0b73\3\2\2\2\u015e\u0b7c\3\2"+
		"\2\2\u0160\u0b7e\3\2\2\2\u0162\u0b9d\3\2\2\2\u0164\u0ba1\3\2\2\2\u0166"+
		"\u0ba9\3\2\2\2\u0168\u0bab\3\2\2\2\u016a\u0bb3\3\2\2\2\u016c\u0bda\3\2"+
		"\2\2\u016e\u0be6\3\2\2\2\u0170\u0bfb\3\2\2\2\u0172\u0bfe\3\2\2\2\u0174"+
		"\u0c0a\3\2\2\2\u0176\u0c0e\3\2\2\2\u0178\u0c27\3\2\2\2\u017a\u0c29\3\2"+
		"\2\2\u017c\u0c3a\3\2\2\2\u017e\u0c41\3\2\2\2\u0180\u0c50\3\2\2\2\u0182"+
		"\u0c67\3\2\2\2\u0184\u0c6d\3\2\2\2\u0186\u0c6f\3\2\2\2\u0188\u0c87\3\2"+
		"\2\2\u018a\u0c9f\3\2\2\2\u018c\u0cc3\3\2\2\2\u018e\u0cc5\3\2\2\2\u0190"+
		"\u0ce3\3\2\2\2\u0192\u0ce8\3\2\2\2\u0194\u0cea\3\2\2\2\u0196\u0cf6\3\2"+
		"\2\2\u0198\u0d06\3\2\2\2\u019a\u0d08\3\2\2\2\u019c\u0d0b\3\2\2\2\u019e"+
		"\u0d25\3\2\2\2\u01a0\u0d27\3\2\2\2\u01a2\u0d2b\3\2\2\2\u01a4\u0d3a\3\2"+
		"\2\2\u01a6\u0d46\3\2\2\2\u01a8\u0d4e\3\2\2\2\u01aa\u0d52\3\2\2\2\u01ac"+
		"\u0d5d\3\2\2\2\u01ae\u0d62\3\2\2\2\u01b0\u0d6f\3\2\2\2\u01b2\u0d83\3\2"+
		"\2\2\u01b4\u0d8c\3\2\2\2\u01b6\u0d8e\3\2\2\2\u01b8\u0d95\3\2\2\2\u01ba"+
		"\u0d9a\3\2\2\2\u01bc\u0da7\3\2\2\2\u01be\u0daf\3\2\2\2\u01c0\u0db7\3\2"+
		"\2\2\u01c2\u0dc5\3\2\2\2\u01c4\u0dc7\3\2\2\2\u01c6\u0dd3\3\2\2\2\u01c8"+
		"\u0df6\3\2\2\2\u01ca\u0df8\3\2\2\2\u01cc\u0e06\3\2\2\2\u01ce\u0e0b\3\2"+
		"\2\2\u01d0\u0e1d\3\2\2\2\u01d2\u0e21\3\2\2\2\u01d4\u0e29\3\2\2\2\u01d6"+
		"\u0e33\3\2\2\2\u01d8\u0e3b\3\2\2\2\u01da\u0e41\3\2\2\2\u01dc\u0e50\3\2"+
		"\2\2\u01de\u0e53\3\2\2\2\u01e0\u0e6c\3\2\2\2\u01e2\u0e7f\3\2\2\2\u01e4"+
		"\u0e83\3\2\2\2\u01e6\u0e86\3\2\2\2\u01e8\u0ea2\3\2\2\2\u01ea\u0ea7\3\2"+
		"\2\2\u01ec\u0eba\3\2\2\2\u01ee\u0ebc\3\2\2\2\u01f0\u0ecc\3\2\2\2\u01f2"+
		"\u0ed4\3\2\2\2\u01f4\u0ed9\3\2\2\2\u01f6\u0ee4\3\2\2\2\u01f8\u0eef\3\2"+
		"\2\2\u01fa\u0ef2\3\2\2\2\u01fc\u0f04\3\2\2\2\u01fe\u0f06\3\2\2\2\u0200"+
		"\u0f15\3\2\2\2\u0202\u0f20\3\2\2\2\u0204\u0f2e\3\2\2\2\u0206\u0f33\3\2"+
		"\2\2\u0208\u0f38\3\2\2\2\u020a\u0f45\3\2\2\2\u020c\u0f47\3\2\2\2\u020e"+
		"\u0f52\3\2\2\2\u0210\u0f54\3\2\2\2\u0212\u0f56\3\2\2\2\u0214\u0f61\3\2"+
		"\2\2\u0216\u0f63\3\2\2\2\u0218\u0f88\3\2\2\2\u021a\u0f91\3\2\2\2\u021c"+
		"\u0f93\3\2\2\2\u021e\u0fa2\3\2\2\2\u0220\u0fb3\3\2\2\2\u0222\u0fb5\3\2"+
		"\2\2\u0224\u0fca\3\2\2\2\u0226\u0fcc\3\2\2\2\u0228\u0fd0\3\2\2\2\u022a"+
		"\u0fd9\3\2\2\2\u022c\u0fdb\3\2\2\2\u022e\u0fe3\3\2\2\2\u0230\u0feb\3\2"+
		"\2\2\u0232\u100e\3\2\2\2\u0234\u1010\3\2\2\2\u0236\u102e\3\2\2\2\u0238"+
		"\u1030\3\2\2\2\u023a\u1040\3\2\2\2\u023c\u1043\3\2\2\2\u023e\u1045\3\2"+
		"\2\2\u0240\u1074\3\2\2\2\u0242\u1078\3\2\2\2\u0244\u107b\3\2\2\2\u0246"+
		"\u108e\3\2\2\2\u0248\u1096\3\2\2\2\u024a\u10a8\3\2\2\2\u024c\u10af\3\2"+
		"\2\2\u024e\u10c8\3\2\2\2\u0250\u10ca\3\2\2\2\u0252\u10ce\3\2\2\2\u0254"+
		"\u10d7\3\2\2\2\u0256\u1219\3\2\2\2\u0258\u121b\3\2\2\2\u025a\u121d\3\2"+
		"\2\2\u025c\u121f\3\2\2\2\u025e\u1221\3\2\2\2\u0260\u122e\3\2\2\2\u0262"+
		"\u1237\3\2\2\2\u0264\u1240\3\2\2\2\u0266\u1242\3\2\2\2\u0268\u1253\3\2"+
		"\2\2\u026a\u1259\3\2\2\2\u026c\u1264\3\2\2\2\u026e\u1266\3\2\2\2\u0270"+
		"\u127a\3\2\2\2\u0272\u1288\3\2\2\2\u0274\u129a\3\2\2\2\u0276\u12af\3\2"+
		"\2\2\u0278\u12bc\3\2\2\2\u027a\u12bf\3\2\2\2\u027c\u12c8\3\2\2\2\u027e"+
		"\u12ce\3\2\2\2\u0280\u12d6\3\2\2\2\u0282\u12d9\3\2\2\2\u0284\u12e4\3\2"+
		"\2\2\u0286\u12eb\3\2\2\2\u0288\u12f0\3\2\2\2\u028a\u12f9\3\2\2\2\u028c"+
		"\u1302\3\2\2\2\u028e\u1304\3\2\2\2\u0290\u1306\3\2\2\2\u0292\u1314\3\2"+
		"\2\2\u0294\u1318\3\2\2\2\u0296\u131a\3\2\2\2\u0298\u131c\3\2\2\2\u029a"+
		"\u1321\3\2\2\2\u029c\u1339\3\2\2\2\u029e\u133d\3\2\2\2\u02a0\u133f\3\2"+
		"\2\2\u02a2\u1341\3\2\2\2\u02a4\u1343\3\2\2\2\u02a6\u1345\3\2\2\2\u02a8"+
		"\u1347\3\2\2\2\u02aa\u1349\3\2\2\2\u02ac\u134b\3\2\2\2\u02ae\u1357\3\2"+
		"\2\2\u02b0\u1359\3\2\2\2\u02b2\u135e\3\2\2\2\u02b4\u1360\3\2\2\2\u02b6"+
		"\u1362\3\2\2\2\u02b8\u1364\3\2\2\2\u02ba\u136c\3\2\2\2\u02bc\u136e\3\2"+
		"\2\2\u02be\u137a\3\2\2\2\u02c0\u137c\3\2\2\2\u02c2\u1384\3\2\2\2\u02c4"+
		"\u138c\3\2\2\2\u02c6\u1394\3\2\2\2\u02c8\u1399\3\2\2\2\u02ca\u139e\3\2"+
		"\2\2\u02cc\u13ad\3\2\2\2\u02ce\u13af\3\2\2\2\u02d0\u13b3\3\2\2\2\u02d2"+
		"\u13b7\3\2\2\2\u02d4\u13b9\3\2\2\2\u02d6\u13be\3\2\2\2\u02d8\u13c0\3\2"+
		"\2\2\u02da\u13c8\3\2\2\2\u02dc\u13d2\3\2\2\2\u02de\u13da\3\2\2\2\u02e0"+
		"\u13e3\3\2\2\2\u02e2\u13f2\3\2\2\2\u02e4\u1407\3\2\2\2\u02e6\u1431\3\2"+
		"\2\2\u02e8\u1438\3\2\2\2\u02ea\u1444\3\2\2\2\u02ec\u1462\3\2\2\2\u02ee"+
		"\u1464\3\2\2\2\u02f0\u14ae\3\2\2\2\u02f2\u14b3\3\2\2\2\u02f4\u14c6\3\2"+
		"\2\2\u02f6\u14d0\3\2\2\2\u02f8\u14df\3\2\2\2\u02fa\u1527\3\2\2\2\u02fc"+
		"\u1529\3\2\2\2\u02fe\u152b\3\2\2\2\u0300\u152e\3\2\2\2\u0302\u1532\3\2"+
		"\2\2\u0304\u1538\3\2\2\2\u0306\u1541\3\2\2\2\u0308\u1546\3\2\2\2\u030a"+
		"\u154b\3\2\2\2\u030c\u1550\3\2\2\2\u030e\u1552\3\2\2\2\u0310\u1556\3\2"+
		"\2\2\u0312\u0314\n\2\2\2\u0313\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315"+
		"\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\3\3\2\2\2\u0317\u0319\5\b\5\2"+
		"\u0318\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b"+
		"\3\2\2\2\u031b\u031d\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u031e\7\2\2\3\u031e"+
		"\5\3\2\2\2\u031f\u0322\5\b\5\2\u0320\u0322\5\u0286\u0144\2\u0321\u031f"+
		"\3\2\2\2\u0321\u0320\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0323"+
		"\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0323\3\2\2\2\u0326\u0327\7\2"+
		"\2\3\u0327\7\3\2\2\2\u0328\u033d\5&\24\2\u0329\u033d\5\66\34\2\u032a\u033d"+
		"\5H%\2\u032b\u033d\5\u00c0a\2\u032c\u033d\5N(\2\u032d\u033d\5t;\2\u032e"+
		"\u033d\5(\25\2\u032f\u033d\5J&\2\u0330\u033d\58\35\2\u0331\u033d\5\n\6"+
		"\2\u0332\u033d\5\u00c2b\2\u0333\u033d\5P)\2\u0334\u033d\5\u0088E\2\u0335"+
		"\u033d\5$\23\2\u0336\u033d\5\64\33\2\u0337\u033d\5F$\2\u0338\u033d\5\u00be"+
		"`\2\u0339\u033d\5L\'\2\u033a\u033d\5r:\2\u033b\u033d\5\u0134\u009b\2\u033c"+
		"\u0328\3\2\2\2\u033c\u0329\3\2\2\2\u033c\u032a\3\2\2\2\u033c\u032b\3\2"+
		"\2\2\u033c\u032c\3\2\2\2\u033c\u032d\3\2\2\2\u033c\u032e\3\2\2\2\u033c"+
		"\u032f\3\2\2\2\u033c\u0330\3\2\2\2\u033c\u0331\3\2\2\2\u033c\u0332\3\2"+
		"\2\2\u033c\u0333\3\2\2\2\u033c\u0334\3\2\2\2\u033c\u0335\3\2\2\2\u033c"+
		"\u0336\3\2\2\2\u033c\u0337\3\2\2\2\u033c\u0338\3\2\2\2\u033c\u0339\3\2"+
		"\2\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2\u033d\t\3\2\2\2\u033e\u033f"+
		"\7V\2\2\u033f\u0343\7\u019d\2\2\u0340\u0341\5\u02aa\u0156\2\u0341\u0342"+
		"\7\u020a\2\2\u0342\u0344\3\2\2\2\u0343\u0340\3\2\2\2\u0343\u0344\3\2\2"+
		"\2\u0344\u0345\3\2\2\2\u0345\u0346\5\u02da\u016e\2\u0346\u0347\7\u0211"+
		"\2\2\u0347\u034c\5\u00ecw\2\u0348\u0349\7\u0217\2\2\u0349\u034b\5\u00ec"+
		"w\2\u034a\u0348\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2\u034c"+
		"\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e\u034c\3\2\2\2\u034f\u0351\7\u0212"+
		"\2\2\u0350\u0352\5\f\7\2\u0351\u0350\3\2\2\2\u0351\u0352\3\2\2\2\u0352"+
		"\u0356\3\2\2\2\u0353\u0355\5\32\16\2\u0354\u0353\3\2\2\2\u0355\u0358\3"+
		"\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0359\3\2\2\2\u0358"+
		"\u0356\3\2\2\2\u0359\u035a\7\u021d\2\2\u035a\13\3\2\2\2\u035b\u035d\5"+
		"\16\b\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2\u035e"+
		"\u035f\5\20\t\2\u035f\r\3\2\2\2\u0360\u0361\7\u0172\2\2\u0361\u0362\7"+
		"W\2\2\u0362\u0363\t\3\2\2\u0363\17\3\2\2\2\u0364\u0368\5\22\n\2\u0365"+
		"\u0366\7\u019e\2\2\u0366\u0368\5\u0302\u0182\2\u0367\u0364\3\2\2\2\u0367"+
		"\u0365\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2"+
		"\2\2\u036a\21\3\2\2\2\u036b\u036c\7\u0137\2\2\u036c\u0377\7\u020b\2\2"+
		"\u036d\u036e\7\u0139\2\2\u036e\u0377\7\u020b\2\2\u036f\u0370\7\u00bf\2"+
		"\2\u0370\u0377\7\u020b\2\2\u0371\u0372\7\u00ee\2\2\u0372\u0377\7\u020b"+
		"\2\2\u0373\u0377\5\26\f\2\u0374\u0377\5\30\r\2\u0375\u0377\5\24\13\2\u0376"+
		"\u036b\3\2\2\2\u0376\u036d\3\2\2\2\u0376\u036f\3\2\2\2\u0376\u0371\3\2"+
		"\2\2\u0376\u0373\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0375\3\2\2\2\u0377"+
		"\u0378\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\23\3\2\2"+
		"\2\u037a\u037b\7\u0194\2\2\u037b\u0391\7\u0211\2\2\u037c\u037d\7\u00be"+
		"\2\2\u037d\u0392\7\u020b\2\2\u037e\u037f\7\u0108\2\2\u037f\u0392\7\u020b"+
		"\2\2\u0380\u0381\7\u00f4\2\2\u0381\u0392\7\u020b\2\2\u0382\u0383\7\u00ed"+
		"\2\2\u0383\u0392\t\4\2\2\u0384\u0385\7\u0138\2\2\u0385\u0392\7\u020b\2"+
		"\2\u0386\u0387\7\u00a3\2\2\u0387\u0392\7\u020b\2\2\u0388\u0389\7\u00a2"+
		"\2\2\u0389\u038a\7\u00aa\2\2\u038a\u0392\7\u020b\2\2\u038b\u038c\7*\2"+
		"\2\u038c\u0392\t\5\2\2\u038d\u038e\7\u009b\2\2\u038e\u0392\t\6\2\2\u038f"+
		"\u0390\7\65\2\2\u0390\u0392\7m\2\2\u0391\u037c\3\2\2\2\u0391\u037e\3\2"+
		"\2\2\u0391\u0380\3\2\2\2\u0391\u0382\3\2\2\2\u0391\u0384\3\2\2\2\u0391"+
		"\u0386\3\2\2\2\u0391\u0388\3\2\2\2\u0391\u038b\3\2\2\2\u0391\u038d\3\2"+
		"\2\2\u0391\u038f\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0391\3\2\2\2\u0393"+
		"\u0394\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\7\u0212\2\2\u0396\25\3"+
		"\2\2\2\u0397\u03a1\7G\2\2\u0398\u03a2\7\32\2\2\u0399\u039f\7\u009f\2\2"+
		"\u039a\u03a0\7\u0122\2\2\u039b\u039d\t\7\2\2\u039c\u039e\t\b\2\2\u039d"+
		"\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f\u039a\3\2"+
		"\2\2\u039f\u039b\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u0398\3\2\2\2\u03a1"+
		"\u0399\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a5\7\u010c"+
		"\2\2\u03a4\u0397\3\2\2\2\u03a4\u03a3\3\2\2\2\u03a5\27\3\2\2\2\u03a6\u03a7"+
		"\t\t\2\2\u03a7\31\3\2\2\2\u03a8\u03a9\7\u00df\2\2\u03a9\u03aa\7\u0211"+
		"\2\2\u03aa\u03af\5\u0302\u0182\2\u03ab\u03ac\7\u0217\2\2\u03ac\u03ae\5"+
		"\u0302\u0182\2\u03ad\u03ab\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad\3\2"+
		"\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03af\3\2\2\2\u03b2"+
		"\u03b3\7\u0212\2\2\u03b3\u03b4\7\u0195\2\2\u03b4\u03ba\7\20\2\2\u03b5"+
		"\u03bb\t\n\2\2\u03b6\u03b7\7\u0211\2\2\u03b7\u03b8\5\34\17\2\u03b8\u03b9"+
		"\7\u0212\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b5\3\2\2\2\u03ba\u03b6\3\2\2"+
		"\2\u03bb\u03bc\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\33"+
		"\3\2\2\2\u03be\u03bf\7\u019e\2\2\u03bf\u03c5\5\u0302\u0182\2\u03c0\u03c2"+
		"\5\36\20\2\u03c1\u03c3\5\24\13\2\u03c2\u03c1\3\2\2\2\u03c2\u03c3\3\2\2"+
		"\2\u03c3\u03c5\3\2\2\2\u03c4\u03be\3\2\2\2\u03c4\u03c0\3\2\2\2\u03c5\u03c6"+
		"\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8"+
		"\u03ca\5\24\13\2\u03c9\u03c4\3\2\2\2\u03c9\u03c8\3\2\2\2\u03ca\35\3\2"+
		"\2\2\u03cb\u03cc\t\13\2\2\u03cc\u03cd\7\u0194\2\2\u03cd\u03ce\7\u00b4"+
		"\2\2\u03ce\u03dd\7\u0164\2\2\u03cf\u03d0\7;\2\2\u03d0\u03dd\7\u020b\2"+
		"\2\u03d1\u03dd\5 \21\2\u03d2\u03dd\5\"\22\2\u03d3\u03d8\7/\2\2\u03d4\u03d8"+
		"\7\u010b\2\2\u03d5\u03d6\7/\2\2\u03d6\u03d8\7\u014d\2\2\u03d7\u03d3\3"+
		"\2\2\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9"+
		"\u03db\5\30\r\2\u03da\u03d9\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3"+
		"\2\2\2\u03dc\u03cb\3\2\2\2\u03dc\u03cf\3\2\2\2\u03dc\u03d1\3\2\2\2\u03dc"+
		"\u03d2\3\2\2\2\u03dc\u03d7\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03dc\3\2"+
		"\2\2\u03de\u03df\3\2\2\2\u03df\37\3\2\2\2\u03e0\u03e1\t\f\2\2\u03e1!\3"+
		"\2\2\2\u03e2\u03e4\7G\2\2\u03e3\u03e5\t\r\2\2\u03e4\u03e3\3\2\2\2\u03e4"+
		"\u03e5\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e8\7\u010c\2\2\u03e7\u03e2"+
		"\3\2\2\2\u03e7\u03e6\3\2\2\2\u03e8#\3\2\2\2\u03e9\u03ea\7{\2\2\u03ea\u03eb"+
		"\7\u00a6\2\2\u03eb\u03ec\5\u02c6\u0164\2\u03ec\u03ed\7\u021d\2\2\u03ed"+
		"%\3\2\2\2\u03ee\u03ef\7\n\2\2\u03ef\u03f0\7\u00a6\2\2\u03f0\u03f1\5\u02c6"+
		"\u0164\2\u03f1\u03f3\7E\2\2\u03f2\u03f4\7f\2\2\u03f3\u03f2\3\2\2\2\u03f3"+
		"\u03f4\3\2\2\2\u03f4\u03f8\3\2\2\2\u03f5\u03f7\5\u00caf\2\u03f6\u03f5"+
		"\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9"+
		"\u03fd\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u03fc\7\u015e\2\2\u03fc\u03fe"+
		"\7\u017d\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2"+
		"\2\u03ff\u0400\7\u021d\2\2\u0400\'\3\2\2\2\u0401\u0404\7V\2\2\u0402\u0403"+
		"\7\u0127\2\2\u0403\u0405\7\u0157\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3"+
		"\2\2\2\u0405\u0407\3\2\2\2\u0406\u0401\3\2\2\2\u0406\u0407\3\2\2\2\u0407"+
		"\u0408\3\2\2\2\u0408\u0409\7\u00a6\2\2\u0409\u0415\5\u02c6\u0164\2\u040a"+
		"\u040b\7\u0211\2\2\u040b\u0410\5\u00d6l\2\u040c\u040d\7\u0217\2\2\u040d"+
		"\u040f\5\u00d6l\2\u040e\u040c\3\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e"+
		"\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2\u0413"+
		"\u0414\7\u0212\2\2\u0414\u0416\3\2\2\2\u0415\u040a\3\2\2\2\u0415\u0416"+
		"\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\7\u015c\2\2\u0418\u041f\5\u02ea"+
		"\u0176\2\u0419\u041e\5\u00c8e\2\u041a\u041e\5*\26\2\u041b\u041e\5.\30"+
		"\2\u041c\u041e\7t\2\2\u041d\u0419\3\2\2\2\u041d\u041a\3\2\2\2\u041d\u041b"+
		"\3\2\2\2\u041d\u041c\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f"+
		"\u0420\3\2\2\2\u0420\u0436\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0424\7\u013c"+
		"\2\2\u0423\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425"+
		"\u0431\t\16\2\2\u0426\u0428\7i\2\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2"+
		"\2\2\u0428\u042c\3\2\2\2\u0429\u042b\5\u00dan\2\u042a\u0429\3\2\2\2\u042b"+
		"\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f\3\2"+
		"\2\2\u042e\u042c\3\2\2\2\u042f\u0432\5\u0124\u0093\2\u0430\u0432\5\u00cc"+
		"g\2\u0431\u0427\3\2\2\2\u0431\u0430\3\2\2\2\u0432\u0437\3\2\2\2\u0433"+
		"\u0434\t\17\2\2\u0434\u0435\7\u01c0\2\2\u0435\u0437\5\u02b0\u0159\2\u0436"+
		"\u0423\3\2\2\2\u0436\u0433\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u0439\7\u021d"+
		"\2\2\u0439)\3\2\2\2\u043a\u043c\7\u0131\2\2\u043b\u043d\5,\27\2\u043c"+
		"\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d+\3\2\2\2\u043e\u043f\7\u0211"+
		"\2\2\u043f\u0440\7\u0134\2\2\u0440\u0441\5\u020e\u0108\2\u0441\u044f\7"+
		",\2\2\u0442\u0450\7\r\2\2\u0443\u0444\t\20\2\2\u0444\u0445\7\u0211\2\2"+
		"\u0445\u044a\5\u02d8\u016d\2\u0446\u0447\7\u0217\2\2\u0447\u0449\5\u02d8"+
		"\u016d\2\u0448\u0446\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a"+
		"\u044b\3\2\2\2\u044b\u044d\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u044e\7\u0212"+
		"\2\2\u044e\u0450\3\2\2\2\u044f\u0442\3\2\2\2\u044f\u0443\3\2\2\2\u0450"+
		"\u0452\3\2\2\2\u0451\u0453\5\62\32\2\u0452\u0451\3\2\2\2\u0452\u0453\3"+
		"\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\7\u0212\2\2\u0455-\3\2\2\2\u0456"+
		"\u0458\7\u015b\2\2\u0457\u0459\5\60\31\2\u0458\u0457\3\2\2\2\u0458\u0459"+
		"\3\2\2\2\u0459/\3\2\2\2\u045a\u045b\7\u0155\2\2\u045b\u045c\7\u0211\2"+
		"\2\u045c\u0461\5\u02da\u016e\2\u045d\u045e\7\u0217\2\2\u045e\u0460\5\u02da"+
		"\u016e\2\u045f\u045d\3\2\2\2\u0460\u0463\3\2\2\2\u0461\u045f\3\2\2\2\u0461"+
		"\u0462\3\2\2\2\u0462\u0464\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0465\7\u0212"+
		"\2\2\u0465\61\3\2\2\2\u0466\u0467\t\21\2\2\u0467\u0468\5\u020e\u0108\2"+
		"\u0468\u0469\7,\2\2\u0469\u046a\7\u0211\2\2\u046a\u046f\5\u02d8\u016d"+
		"\2\u046b\u046c\7\u0217\2\2\u046c\u046e\5\u02d8\u016d\2\u046d\u046b\3\2"+
		"\2\2\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470"+
		"\u0472\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0473\7\u0212\2\2\u0473\63\3"+
		"\2\2\2\u0474\u0475\7{\2\2\u0475\u0477\7\u0130\2\2\u0476\u0478\7&\2\2\u0477"+
		"\u0476\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\5\u02ae"+
		"\u0158\2\u047a\u047b\7\u021d\2\2\u047b\65\3\2\2\2\u047c\u047d\7\n\2\2"+
		"\u047d\u047e\7\u0130\2\2\u047e\u047f\5\u02ae\u0158\2\u047f\u0481\7E\2"+
		"\2\u0480\u0482\7f\2\2\u0481\u0480\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0484"+
		"\3\2\2\2\u0483\u0485\t\22\2\2\u0484\u0483\3\2\2\2\u0484\u0485\3\2\2\2"+
		"\u0485\u0489\3\2\2\2\u0486\u0488\5\u00caf\2\u0487\u0486\3\2\2\2\u0488"+
		"\u048b\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048e\3\2"+
		"\2\2\u048b\u0489\3\2\2\2\u048c\u048d\7\u015e\2\2\u048d\u048f\7\u017d\2"+
		"\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491"+
		"\7\u021d\2\2\u0491\67\3\2\2\2\u0492\u0495\7V\2\2\u0493\u0494\7\u0127\2"+
		"\2\u0494\u0496\7\u0157\2\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2\u0496"+
		"\u0497\3\2\2\2\u0497\u049a\7\u0130\2\2\u0498\u049b\5<\37\2\u0499\u049b"+
		"\5:\36\2\u049a\u0498\3\2\2\2\u049a\u0499\3\2\2\2\u049a\u049b\3\2\2\2\u049b"+
		"\u049c\3\2\2\2\u049c\u049d\7\u021d\2\2\u049d9\3\2\2\2\u049e\u049f\7&\2"+
		"\2\u049f\u04a0\5\u02ae\u0158\2\u04a0\u04a4\t\16\2\2\u04a1\u04a3\5D#\2"+
		"\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5"+
		"\3\2\2\2\u04a5\u04ad\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a7\u04a8\7\36\2\2"+
		"\u04a8\u04ae\5\u00fa~\2\u04a9\u04ab\7\u0084\2\2\u04aa\u04ac\5\u02ae\u0158"+
		"\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04a7"+
		"\3\2\2\2\u04ad\u04a9\3\2\2\2\u04ae;\3\2\2\2\u04af\u04b1\5\u02ae\u0158"+
		"\2\u04b0\u04b2\5\u00c8e\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2"+
		"\u04b3\3\2\2\2\u04b3\u04b7\t\16\2\2\u04b4\u04b6\5> \2\u04b5\u04b4\3\2"+
		"\2\2\u04b6\u04b9\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8"+
		"\u04ba\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04bc\7\u0084\2\2\u04bb\u04bd"+
		"\5\u02ae\u0158\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd=\3\2\2"+
		"\2\u04be\u04c7\5\u00dco\2\u04bf\u04c7\5\u00dep\2\u04c0\u04c7\5\u00e0q"+
		"\2\u04c1\u04c7\5\u00e4s\2\u04c2\u04c7\5\u00e8u\2\u04c3\u04c7\5\u00f0y"+
		"\2\u04c4\u04c7\5@!\2\u04c5\u04c7\5B\"\2\u04c6\u04be\3\2\2\2\u04c6\u04bf"+
		"\3\2\2\2\u04c6\u04c0\3\2\2\2\u04c6\u04c1\3\2\2\2\u04c6\u04c2\3\2\2\2\u04c6"+
		"\u04c3\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6\u04c5\3\2\2\2\u04c7?\3\2\2\2"+
		"\u04c8\u04c9\7\u0147\2\2\u04c9\u04d5\5\u02c8\u0165\2\u04ca\u04cb\7\u0211"+
		"\2\2\u04cb\u04d0\5\u00d6l\2\u04cc\u04cd\7\u0217\2\2\u04cd\u04cf\5\u00d6"+
		"l\2\u04ce\u04cc\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0"+
		"\u04d1\3\2\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04d4\7\u0212"+
		"\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04ca\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6"+
		"\u04d7\3\2\2\2\u04d7\u04d8\7\u021d\2\2\u04d8A\3\2\2\2\u04d9\u04da\7\u00a6"+
		"\2\2\u04da\u04e6\5\u02c6\u0164\2\u04db\u04dc\7\u0211\2\2\u04dc\u04e1\5"+
		"\u00d6l\2\u04dd\u04de\7\u0217\2\2\u04de\u04e0\5\u00d6l\2\u04df\u04dd\3"+
		"\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2"+
		"\u04e4\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e5\7\u0212\2\2\u04e5\u04e7"+
		"\3\2\2\2\u04e6\u04db\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8"+
		"\u04e9\7\u015c\2\2\u04e9\u04ea\5\u02ea\u0176\2\u04ea\u04eb\7\u021d\2\2"+
		"\u04ebC\3\2\2\2\u04ec\u04f7\5\u00dco\2\u04ed\u04f7\5\u00dep\2\u04ee\u04f7"+
		"\5\u00e0q\2\u04ef\u04f7\5\u00e4s\2\u04f0\u04f7\5\u00e8u\2\u04f1\u04f7"+
		"\5\u00f0y\2\u04f2\u04f7\5J&\2\u04f3\u04f7\5(\25\2\u04f4\u04f7\5@!\2\u04f5"+
		"\u04f7\5B\"\2\u04f6\u04ec\3\2\2\2\u04f6\u04ed\3\2\2\2\u04f6\u04ee\3\2"+
		"\2\2\u04f6\u04ef\3\2\2\2\u04f6\u04f0\3\2\2\2\u04f6\u04f1\3\2\2\2\u04f6"+
		"\u04f2\3\2\2\2\u04f6\u04f3\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f5\3\2"+
		"\2\2\u04f7E\3\2\2\2\u04f8\u04f9\7{\2\2\u04f9\u04fa\7\u0147\2\2\u04fa\u04fb"+
		"\5\u02c8\u0165\2\u04fb\u04fc\7\u021d\2\2\u04fcG\3\2\2\2\u04fd\u04fe\7"+
		"\n\2\2\u04fe\u04ff\7\u0147\2\2\u04ff\u0500\5\u02c8\u0165\2\u0500\u0502"+
		"\7E\2\2\u0501\u0503\7f\2\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503"+
		"\u0507\3\2\2\2\u0504\u0506\5\u00caf\2\u0505\u0504\3\2\2\2\u0506\u0509"+
		"\3\2\2\2\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050c\3\2\2\2\u0509"+
		"\u0507\3\2\2\2\u050a\u050b\7\u015e\2\2\u050b\u050d\7\u017d\2\2\u050c\u050a"+
		"\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\7\u021d\2"+
		"\2\u050fI\3\2\2\2\u0510\u0513\7V\2\2\u0511\u0512\7\u0127\2\2\u0512\u0514"+
		"\7\u0157\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\3\2\2"+
		"\2\u0515\u0510\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518"+
		"\7\u0147\2\2\u0518\u0524\5\u02c8\u0165\2\u0519\u051a\7\u0211\2\2\u051a"+
		"\u051f\5\u00d6l\2\u051b\u051c\7\u0217\2\2\u051c\u051e\5\u00d6l\2\u051d"+
		"\u051b\3\2\2\2\u051e\u0521\3\2\2\2\u051f\u051d\3\2\2\2\u051f\u0520\3\2"+
		"\2\2\u0520\u0522\3\2\2\2\u0521\u051f\3\2\2\2\u0522\u0523\7\u0212\2\2\u0523"+
		"\u0525\3\2\2\2\u0524\u0519\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0527\3\2"+
		"\2\2\u0526\u0528\5\u00c8e\2\u0527\u0526\3\2\2\2\u0527\u0528\3\2\2\2\u0528"+
		"\u0529\3\2\2\2\u0529\u0536\t\16\2\2\u052a\u052c\7i\2\2\u052b\u052a\3\2"+
		"\2\2\u052b\u052c\3\2\2\2\u052c\u0530\3\2\2\2\u052d\u052f\5\u00dan\2\u052e"+
		"\u052d\3\2\2\2\u052f\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2"+
		"\2\2\u0531\u0533\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0537\5\u0124\u0093"+
		"\2\u0534\u0537\5\u00ccg\2\u0535\u0537\7\u0092\2\2\u0536\u052b\3\2\2\2"+
		"\u0536\u0534\3\2\2\2\u0536\u0535\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539"+
		"\7\u021d\2\2\u0539K\3\2\2\2\u053a\u053b\7{\2\2\u053b\u053c\7\u01af\2\2"+
		"\u053c\u053d\5\u02ca\u0166\2\u053d\u053e\7\u021d\2\2\u053eM\3\2\2\2\u053f"+
		"\u0540\7\n\2\2\u0540\u0541\7\u01af\2\2\u0541\u0554\5\u02ca\u0166\2\u0542"+
		"\u0555\t\13\2\2\u0543\u0544\7\u0156\2\2\u0544\u0545\7\u01aa\2\2\u0545"+
		"\u0555\5\u02ca\u0166\2\u0546\u0548\7E\2\2\u0547\u0549\7f\2\2\u0548\u0547"+
		"\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054d\3\2\2\2\u054a\u054c\5\u00caf"+
		"\2\u054b\u054a\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b\3\2\2\2\u054d\u054e"+
		"\3\2\2\2\u054e\u0552\3\2\2\2\u054f\u054d\3\2\2\2\u0550\u0551\7\u015e\2"+
		"\2\u0551\u0553\7\u017d\2\2\u0552\u0550\3\2\2\2\u0552\u0553\3\2\2\2\u0553"+
		"\u0555\3\2\2\2\u0554\u0542\3\2\2\2\u0554\u0543\3\2\2\2\u0554\u0546\3\2"+
		"\2\2\u0555\u0556\3\2\2\2\u0556\u0557\7\u021d\2\2\u0557O\3\2\2\2\u0558"+
		"\u055b\7V\2\2\u0559\u055a\7\u0127\2\2\u055a\u055c\7\u0157\2\2\u055b\u0559"+
		"\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\7\u01af\2"+
		"\2\u055e\u0562\5\u02ca\u0166\2\u055f\u0563\5V,\2\u0560\u0563\5Z.\2\u0561"+
		"\u0563\5\\/\2\u0562\u055f\3\2\2\2\u0562\u0560\3\2\2\2\u0562\u0561\3\2"+
		"\2\2\u0563\u0565\3\2\2\2\u0564\u0566\5R*\2\u0565\u0564\3\2\2\2\u0565\u0566"+
		"\3\2\2\2\u0566\u0568\3\2\2\2\u0567\u0569\t\13\2\2\u0568\u0567\3\2\2\2"+
		"\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2\u056a\u056c\5T+\2\u056b\u056a"+
		"\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\5^\60\2\u056e"+
		"\u056f\7\u021d\2\2\u056fQ\3\2\2\2\u0570\u0571\7\u009e\2\2\u0571\u0576"+
		"\5\u02ca\u0166\2\u0572\u0573\7\u0217\2\2\u0573\u0575\5\u02ca\u0166\2\u0574"+
		"\u0572\3\2\2\2\u0575\u0578\3\2\2\2\u0576\u0574\3\2\2\2\u0576\u0577\3\2"+
		"\2\2\u0577S\3\2\2\2\u0578\u0576\3\2\2\2\u0579\u057a\7\u01ce\2\2\u057a"+
		"\u057b\7\u0211\2\2\u057b\u057c\5\u020a\u0106\2\u057c\u057d\7\u0212\2\2"+
		"\u057dU\3\2\2\2\u057e\u0583\7\35\2\2\u057f\u0583\7\6\2\2\u0580\u0581\7"+
		"\u00c5\2\2\u0581\u0583\7\u011e\2\2\u0582\u057e\3\2\2\2\u0582\u057f\3\2"+
		"\2\2\u0582\u0580\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0586\5h\65\2\u0585"+
		"\u0587\5n8\2\u0586\u0585\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\3\2\2"+
		"\2\u0588\u058a\5X-\2\u0589\u0588\3\2\2\2\u0589\u058a\3\2\2\2\u058aW\3"+
		"\2\2\2\u058b\u058c\7\u009f\2\2\u058c\u058d\7}\2\2\u058d\u058e\7\u0164"+
		"\2\2\u058eY\3\2\2\2\u058f\u0590\7\u009f\2\2\u0590\u0592\5h\65\2\u0591"+
		"\u0593\5n8\2\u0592\u0591\3\2\2\2\u0592\u0593\3\2\2\2\u0593[\3\2\2\2\u0594"+
		"\u0595\t\23\2\2\u0595\u059a\5f\64\2\u0596\u0597\7\u0127\2\2\u0597\u0599"+
		"\5f\64\2\u0598\u0596\3\2\2\2\u0599\u059c\3\2\2\2\u059a\u0598\3\2\2\2\u059a"+
		"\u059b\3\2\2\2\u059b\u059d\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u05a5\7\u0123"+
		"\2\2\u059e\u05a6\7`\2\2\u059f\u05a0\5\u02aa\u0156\2\u05a0\u05a1\7\u020a"+
		"\2\2\u05a1\u05a3\3\2\2\2\u05a2\u059f\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3"+
		"\u05a4\3\2\2\2\u05a4\u05a6\7\u016b\2\2\u05a5\u059e\3\2\2\2\u05a5\u05a2"+
		"\3\2\2\2\u05a6]\3\2\2\2\u05a7\u05a8\7F\2\2\u05a8\u05ad\7\u01af\2\2\u05a9"+
		"\u05aa\7\60\2\2\u05aa\u05ad\5\u0302\u0182\2\u05ab\u05ad\5\u012a\u0096"+
		"\2\u05ac\u05a7\3\2\2\2\u05ac\u05a9\3\2\2\2\u05ac\u05ab\3\2\2\2\u05ad_"+
		"\3\2\2\2\u05ae\u05b0\5\u02ac\u0157\2\u05af\u05b1\5\u02e0\u0171\2\u05b0"+
		"\u05af\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1a\3\2\2\2\u05b2\u05b3\7F\2\2\u05b3"+
		"\u05b7\7\u01af\2\2\u05b4\u05b6\5\u00dan\2\u05b5\u05b4\3\2\2\2\u05b6\u05b9"+
		"\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9"+
		"\u05b7\3\2\2\2\u05ba\u05bc\5d\63\2\u05bb\u05ba\3\2\2\2\u05bc\u05bd\3\2"+
		"\2\2\u05bd\u05bb\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf"+
		"\u05c0\7\u0084\2\2\u05c0\u05c1\5\u02ca\u0166\2\u05c1c\3\2\2\2\u05c2\u05c3"+
		"\7\35\2\2\u05c3\u05c4\7\u0190\2\2\u05c4\u05c5\7\u00cc\2\2\u05c5\u05c6"+
		"\5\u012a\u0096\2\u05c6\u05c7\7\35\2\2\u05c7\u05c8\7\u0190\2\2\u05c8\u05c9"+
		"\7\u021d\2\2\u05c9\u05e7\3\2\2\2\u05ca\u05cb\7\35\2\2\u05cb\u05cc\7}\2"+
		"\2\u05cc\u05cd\7\u0164\2\2\u05cd\u05ce\7\u00cc\2\2\u05ce\u05cf\5\u012a"+
		"\u0096\2\u05cf\u05d0\7\35\2\2\u05d0\u05d1\7}\2\2\u05d1\u05d2\7\u0164\2"+
		"\2\u05d2\u05d3\7\u021d\2\2\u05d3\u05e7\3\2\2\2\u05d4\u05d5\7\6\2\2\u05d5"+
		"\u05d6\7\u0190\2\2\u05d6\u05d7\7\u00cc\2\2\u05d7\u05d8\5\u012a\u0096\2"+
		"\u05d8\u05d9\7\6\2\2\u05d9\u05da\7\u0190\2\2\u05da\u05db\7\u021d\2\2\u05db"+
		"\u05e7\3\2\2\2\u05dc\u05dd\7\6\2\2\u05dd\u05de\7}\2\2\u05de\u05df\7\u0164"+
		"\2\2\u05df\u05e0\7\u00cc\2\2\u05e0\u05e1\5\u012a\u0096\2\u05e1\u05e2\7"+
		"\6\2\2\u05e2\u05e3\7}\2\2\u05e3\u05e4\7\u0164\2\2\u05e4\u05e5\7\u021d"+
		"\2\2\u05e5\u05e7\3\2\2\2\u05e6\u05c2\3\2\2\2\u05e6\u05ca\3\2\2\2\u05e6"+
		"\u05d4\3\2\2\2\u05e6\u05dc\3\2\2\2\u05e7e\3\2\2\2\u05e8\u0603\7\n\2\2"+
		"\u05e9\u0603\7\13\2\2\u05ea\u05eb\7\22\2\2\u05eb\u0603\7\u0193\2\2\u05ec"+
		"\u0603\7\25\2\2\u05ed\u0603\7A\2\2\u05ee\u0603\7V\2\2\u05ef\u05f0\7w\2"+
		"\2\u05f0\u0603\7\u0193\2\2\u05f1\u0603\7{\2\2\u05f2\u0603\7\u00a8\2\2"+
		"\u05f3\u0603\7\u010a\2\2\u05f4\u0603\7\u0156\2\2\u05f5\u0603\7\u0160\2"+
		"\2\u05f6\u0603\7\u01b2\2\2\u05f7\u0603\7e\2\2\u05f8\u0603\7\u018f\2\2"+
		"\u05f9\u0603\7\u0180\2\2\u05fa\u0603\7c\2\2\u05fb\u0603\7\u00e6\2\2\u05fc"+
		"\u0603\7\u00e5\2\2\u05fd\u0603\7\u0179\2\2\u05fe\u0603\7\u019c\2\2\u05ff"+
		"\u0603\7`\2\2\u0600\u0603\7\u016b\2\2\u0601\u0603\7\u009e\2\2\u0602\u05e8"+
		"\3\2\2\2\u0602\u05e9\3\2\2\2\u0602\u05ea\3\2\2\2\u0602\u05ec\3\2\2\2\u0602"+
		"\u05ed\3\2\2\2\u0602\u05ee\3\2\2\2\u0602\u05ef\3\2\2\2\u0602\u05f1\3\2"+
		"\2\2\u0602\u05f2\3\2\2\2\u0602\u05f3\3\2\2\2\u0602\u05f4\3\2\2\2\u0602"+
		"\u05f5\3\2\2\2\u0602\u05f6\3\2\2\2\u0602\u05f7\3\2\2\2\u0602\u05f8\3\2"+
		"\2\2\u0602\u05f9\3\2\2\2\u0602\u05fa\3\2\2\2\u0602\u05fb\3\2\2\2\u0602"+
		"\u05fc\3\2\2\2\u0602\u05fd\3\2\2\2\u0602\u05fe\3\2\2\2\u0602\u05ff\3\2"+
		"\2\2\u0602\u0600\3\2\2\2\u0602\u0601\3\2\2\2\u0603g\3\2\2\2\u0604\u0609"+
		"\5j\66\2\u0605\u0606\7\u0127\2\2\u0606\u0608\5j\66\2\u0607\u0605\3\2\2"+
		"\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c"+
		"\3\2\2\2\u060b\u0609\3\2\2\2\u060c\u060e\7\u0123\2\2\u060d\u060f\5l\67"+
		"\2\u060e\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0611"+
		"\5\u02da\u016e\2\u0611i\3\2\2\2\u0612\u061c\t\24\2\2\u0613\u0614\7\u011e"+
		"\2\2\u0614\u0619\5\u02d8\u016d\2\u0615\u0616\7\u0217\2\2\u0616\u0618\5"+
		"\u02d8\u016d\2\u0617\u0615\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2"+
		"\2\2\u0619\u061a\3\2\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061c"+
		"\u0613\3\2\2\2\u061c\u061d\3\2\2\2\u061dk\3\2\2\2\u061e\u061f\7\u0106"+
		"\2\2\u061f\u0620\7\u019d\2\2\u0620\u0621\5\u02da\u016e\2\u0621\u0622\7"+
		"\u011e\2\2\u0622m\3\2\2\2\u0623\u0625\7\u0153\2\2\u0624\u0626\5p9\2\u0625"+
		"\u0624\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2"+
		"\2\2\u0628o\3\2\2\2\u0629\u062a\t\25\2\2\u062a\u062b\5\u0292\u014a\2\u062b"+
		"q\3\2\2\2\u062c\u062d\7{\2\2\u062d\u062f\7\u01b3\2\2\u062e\u0630\7&\2"+
		"\2\u062f\u062e\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0633"+
		"\5\u02c0\u0161\2\u0632\u0634\t\26\2\2\u0633\u0632\3\2\2\2\u0633\u0634"+
		"\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0636\7\u021d\2\2\u0636s\3\2\2\2\u0637"+
		"\u0638\7\n\2\2\u0638\u0639\7\u01b3\2\2\u0639\u063f\5\u02c0\u0161\2\u063a"+
		"\u0640\5v<\2\u063b\u0640\5x=\2\u063c\u0640\5z>\2\u063d\u0640\5\u0082B"+
		"\2\u063e\u0640\5\u00a4S\2\u063f\u063a\3\2\2\2\u063f\u063b\3\2\2\2\u063f"+
		"\u063c\3\2\2\2\u063f\u063d\3\2\2\2\u063f\u063e\3\2\2\2\u0640\u0642\3\2"+
		"\2\2\u0641\u0643\5\u0084C\2\u0642\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643"+
		"\u0644\3\2\2\2\u0644\u0645\7\u021d\2\2\u0645u\3\2\2\2\u0646\u0648\7E\2"+
		"\2\u0647\u0649\7f\2\2\u0648\u0647\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064b"+
		"\3\2\2\2\u064a\u064c\t\27\2\2\u064b\u064a\3\2\2\2\u064b\u064c\3\2\2\2"+
		"\u064c\u0650\3\2\2\2\u064d\u064f\5\u00caf\2\u064e\u064d\3\2\2\2\u064f"+
		"\u0652\3\2\2\2\u0650\u064e\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0655\3\2"+
		"\2\2\u0652\u0650\3\2\2\2\u0653\u0654\7\u015e\2\2\u0654\u0656\7\u017d\2"+
		"\2\u0655\u0653\3\2\2\2\u0655\u0656\3\2\2\2\u0656w\3\2\2\2\u0657\u0659"+
		"\7\u0157\2\2\u0658\u065a\5\u00c8e\2\u0659\u0658\3\2\2\2\u0659\u065a\3"+
		"\2\2\2\u065a\u065b\3\2\2\2\u065b\u065c\7\20\2\2\u065c\u065d\7\u011d\2"+
		"\2\u065d\u065e\7\u0211\2\2\u065e\u0663\5\u00a6T\2\u065f\u0660\7\u0217"+
		"\2\2\u0660\u0662\5\u00a6T\2\u0661\u065f\3\2\2\2\u0662\u0665\3\2\2\2\u0663"+
		"\u0661\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\3\2\2\2\u0665\u0663\3\2"+
		"\2\2\u0666\u0667\7\u0212\2\2\u0667y\3\2\2\2\u0668\u066d\5|?\2\u0669\u066a"+
		"\7\u0217\2\2\u066a\u066c\5|?\2\u066b\u0669\3\2\2\2\u066c\u066f\3\2\2\2"+
		"\u066d\u066b\3\2\2\2\u066d\u066e\3\2\2\2\u066e{\3\2\2\2\u066f\u066d\3"+
		"\2\2\2\u0670\u0673\t\30\2\2\u0671\u0674\5\u00b6\\\2\u0672\u0674\5\u00ae"+
		"X\2\u0673\u0671\3\2\2\2\u0673\u0672\3\2\2\2\u0674}\3\2\2\2\u0675\u0676"+
		"\t\31\2\2\u0676\u0683\7\24\2\2\u0677\u0684\5\u0080A\2\u0678\u0679\7\u0211"+
		"\2\2\u0679\u067e\5\u0080A\2\u067a\u067b\7\u0217\2\2\u067b\u067d\5\u0080"+
		"A\2\u067c\u067a\3\2\2\2\u067d\u0680\3\2\2\2\u067e\u067c\3\2\2\2\u067e"+
		"\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u067e\3\2\2\2\u0681\u0682\7\u0212"+
		"\2\2\u0682\u0684\3\2\2\2\u0683\u0677\3\2\2\2\u0683\u0678\3\2\2\2\u0684"+
		"\177\3\2\2\2\u0685";
	private static final String _serializedATNSegment1 =
		"\u0687\5\u02a2\u0152\2\u0686\u0688\5\u02ea\u0176\2\u0687\u0686\3\2\2\2"+
		"\u0687\u0688\3\2\2\2\u0688\u0081\3\2\2\2\u0689\u068f\7\u00fb\2\2\u068a"+
		"\u068b\7\u00de\2\2\u068b\u0690\5\u020e\u0108\2\u068c\u068d\7~\2\2\u068d"+
		"\u068e\7\u01b3\2\2\u068e\u0690\5\u02ea\u0176\2\u068f\u068a\3\2\2\2\u068f"+
		"\u068c\3\2\2\2\u0690\u0083\3\2\2\2\u0691\u06a2\7\u00cb\2\2\u0692\u069c"+
		"\7\62\2\2\u0693\u0694\7Q\2\2\u0694\u0695\7\u01aa\2\2\u0695\u069d\7\u0199"+
		"\2\2\u0696\u0698\7\u0116\2\2\u0697\u0696\3\2\2\2\u0697\u0698\3\2\2\2\u0698"+
		"\u0699\3\2\2\2\u0699\u069a\7\u00b6\2\2\u069a\u069b\7\u019d\2\2\u069b\u069d"+
		"\7_\2\2\u069c\u0693\3\2\2\2\u069c\u0697\3\2\2\2\u069c\u069d\3\2\2\2\u069d"+
		"\u069f\3\2\2\2\u069e\u06a0\5\u0086D\2\u069f\u069e\3\2\2\2\u069f\u06a0"+
		"\3\2\2\2\u06a0\u06a2\3\2\2\2\u06a1\u0691\3\2\2\2\u06a1\u0692\3\2\2\2\u06a2"+
		"\u0085\3\2\2\2\u06a3\u06a5\7\u00a1\2\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5"+
		"\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\7\u008b\2\2\u06a7\u06a8\7\u00ca"+
		"\2\2\u06a8\u06a9\5\u02da\u016e\2\u06a9\u0087\3\2\2\2\u06aa\u06ad\7V\2"+
		"\2\u06ab\u06ac\7\u0127\2\2\u06ac\u06ae\7\u0157\2\2\u06ad\u06ab\3\2\2\2"+
		"\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b2\7\u01b3\2\2\u06b0"+
		"\u06b3\5\u008aF\2\u06b1\u06b3\5\u0096L\2\u06b2\u06b0\3\2\2\2\u06b2\u06b1"+
		"\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\7\u021d\2\2\u06b5\u0089\3\2\2"+
		"\2\u06b6\u06b9\5\u02c0\u0161\2\u06b7\u06b8\7\u0120\2\2\u06b8\u06ba\7\u020d"+
		"\2\2\u06b9\u06b7\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bc\3\2\2\2\u06bb"+
		"\u06bd\5\u008cG\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u008b"+
		"\3\2\2\2\u06be\u06c0\5\u00c8e\2\u06bf\u06be\3\2\2\2\u06bf\u06c0\3\2\2"+
		"\2\u06c0\u06c3\3\2\2\2\u06c1\u06c4\5\u008eH\2\u06c2\u06c4\5\u0090I\2\u06c3"+
		"\u06c1\3\2\2\2\u06c3\u06c2\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5\u06c7\5\u0094"+
		"K\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06d3\3\2\2\2\u06c8"+
		"\u06c9\7\u0211\2\2\u06c9\u06ce\5\u00a6T\2\u06ca\u06cb\7\u0217\2\2\u06cb"+
		"\u06cd\5\u00a6T\2\u06cc\u06ca\3\2\2\2\u06cd\u06d0\3\2\2\2\u06ce\u06cc"+
		"\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d1\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d1"+
		"\u06d2\7\u0212\2\2\u06d2\u06d4\3\2\2\2\u06d3\u06c8\3\2\2\2\u06d3\u06d4"+
		"\3\2\2\2\u06d4\u06d8\3\2\2\2\u06d5\u06d7\5\u00a4S\2\u06d6\u06d5\3\2\2"+
		"\2\u06d7\u06da\3\2\2\2\u06d8\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u008d"+
		"\3\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06df\t\16\2\2\u06dc\u06e0\7\u011d"+
		"\2\2\u06dd\u06e0\5\u00f6|\2\u06de\u06e0\5\u0092J\2\u06df\u06dc\3\2\2\2"+
		"\u06df\u06dd\3\2\2\2\u06df\u06de\3\2\2\2\u06e0\u008f\3\2\2\2\u06e1\u06e2"+
		"\7\u01b5\2\2\u06e2\u06e3\5\u02ea\u0176\2\u06e3\u0091\3\2\2\2\u06e4\u06e5"+
		"\7\u019d\2\2\u06e5\u06e6\7\u011e\2\2\u06e6\u06e9\5\u02ea\u0176\2\u06e7"+
		"\u06e8\7\u0116\2\2\u06e8\u06ea\7\u0118\2\2\u06e9\u06e7\3\2\2\2\u06e9\u06ea"+
		"\3\2\2\2\u06ea\u0093\3\2\2\2\u06eb\u06ec\7\u0092\2\2\u06ec\u06ed\7\u00fe"+
		"\2\2\u06ed\u06ee\5\u020e\u0108\2\u06ee\u06ef\7\u00d3\2\2\u06ef\u06f0\7"+
		"\u00cf\2\2\u06f0\u06f1\7\u01c0\2\2\u06f1\u06f2\t\32\2\2\u06f2\u0095\3"+
		"\2\2\2\u06f3\u06f4\7&\2\2\u06f4\u06f5\5\u02c0\u0161\2\u06f5\u06f6\t\16"+
		"\2\2\u06f6\u06fb\5\u0098M\2\u06f7\u06f8\7\u0217\2\2\u06f8\u06fa\5\u0098"+
		"M\2\u06f9\u06f7\3\2\2\2\u06fa\u06fd\3\2\2\2\u06fb\u06f9\3\2\2\2\u06fb"+
		"\u06fc\3\2\2\2\u06fc\u06fe\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fe\u06ff\7\u0084"+
		"\2\2\u06ff\u0097\3\2\2\2\u0700\u0703\5\u009aN\2\u0701\u0703\5\u009cO\2"+
		"\u0702\u0700\3\2\2\2\u0702\u0701\3\2\2\2\u0703\u0099\3\2\2\2\u0704\u0705"+
		"\t\33\2\2\u0705\u0706\7\u00f2\2\2\u0706\u0707\5\u00a0Q\2\u0707\u009b\3"+
		"\2\2\2\u0708\u070c\t\34\2\2\u0709\u070d\5\u009eP\2\u070a\u070d\5\u00a0"+
		"Q\2\u070b\u070d\5\u00a2R\2\u070c\u0709\3\2\2\2\u070c\u070a\3\2\2\2\u070c"+
		"\u070b\3\2\2\2\u070d\u009d\3\2\2\2\u070e\u070f\7\u0147\2\2\u070f\u0710"+
		"\5\u02c8\u0165\2\u0710\u0711\7\u0211\2\2\u0711\u0716\5\u00bc_\2\u0712"+
		"\u0713\7\u0217\2\2\u0713\u0715\5\u00bc_\2\u0714\u0712\3\2\2\2\u0715\u0718"+
		"\3\2\2\2\u0716\u0714\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0719\3\2\2\2\u0718"+
		"\u0716\3\2\2\2\u0719\u071a\7\u0212\2\2\u071a\u0728\t\16\2\2\u071b\u0729"+
		"\5\u00ccg\2\u071c\u071e\7i\2\2\u071d\u071c\3\2\2\2\u071d\u071e\3\2\2\2"+
		"\u071e\u0722\3\2\2\2\u071f\u0721\5\u00dan\2\u0720\u071f\3\2\2\2\u0721"+
		"\u0724\3\2\2\2\u0722\u0720\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725\3\2"+
		"\2\2\u0724\u0722\3\2\2\2\u0725\u0726\5\u0124\u0093\2\u0726\u0727\7\u021d"+
		"\2\2\u0727\u0729\3\2\2\2\u0728\u071b\3\2\2\2\u0728\u071d\3\2\2\2\u0729"+
		"\u009f\3\2\2\2\u072a\u072b\7\u00a6\2\2\u072b\u0737\5\u02c6\u0164\2\u072c"+
		"\u072d\7\u0211\2\2\u072d\u0732\5\u00bc_\2\u072e\u072f\7\u0217\2\2\u072f"+
		"\u0731\5\u00bc_\2\u0730\u072e\3\2\2\2\u0731\u0734\3\2\2\2\u0732\u0730"+
		"\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0735\3\2\2\2\u0734\u0732\3\2\2\2\u0735"+
		"\u0736\7\u0212\2\2\u0736\u0738\3\2\2\2\u0737\u072c\3\2\2\2\u0737\u0738"+
		"\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073a\7\u015c\2\2\u073a\u073b\5\u02ea"+
		"\u0176\2\u073b\u0749\t\16\2\2\u073c\u074a\5\u00ccg\2\u073d\u073f\7i\2"+
		"\2\u073e\u073d\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0743\3\2\2\2\u0740\u0742"+
		"\5\u00dan\2\u0741\u0740\3\2\2\2\u0742\u0745\3\2\2\2\u0743\u0741\3\2\2"+
		"\2\u0743\u0744\3\2\2\2\u0744\u0746\3\2\2\2\u0745\u0743\3\2\2\2\u0746\u0747"+
		"\5\u0124\u0093\2\u0747\u0748\7\u021d\2\2\u0748\u074a\3\2\2\2\u0749\u073c"+
		"\3\2\2\2\u0749\u073e\3\2\2\2\u074a\u00a1\3\2\2\2\u074b\u074d\7\u0098\2"+
		"\2\u074c\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\3\2\2\2\u074e\u0750"+
		"\7\u00c4\2\2\u074f\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2"+
		"\2\u0751\u0752\7M\2\2\u0752\u0753\7\u00a6\2\2\u0753\u0765\5\u02ea\u0176"+
		"\2\u0754\u0755\7\u0211\2\2\u0755\u0756\7\u0174\2\2\u0756\u0757\7\u00b4"+
		"\2\2\u0757\u0758\7\u012c\2\2\u0758\u0759\5\u02ea\u0176\2\u0759\u075a\7"+
		"\u0217\2\2\u075a\u075b\3\2\2\2\u075b\u0760\5\u00bc_\2\u075c\u075d\7\u0217"+
		"\2\2\u075d\u075f\5\u00bc_\2\u075e\u075c\3\2\2\2\u075f\u0762\3\2\2\2\u0760"+
		"\u075e\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0763\3\2\2\2\u0762\u0760\3\2"+
		"\2\2\u0763\u0764\7\u0212\2\2\u0764\u0766\3\2\2\2\u0765\u0754\3\2\2\2\u0765"+
		"\u0766\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0768\7\u015c\2\2\u0768\u0769"+
		"\7\u0174\2\2\u0769\u076a\7\20\2\2\u076a\u076b\7\u015a\2\2\u076b\u0779"+
		"\t\16\2\2\u076c\u077a\5\u00ccg\2\u076d\u076f\7i\2\2\u076e\u076d\3\2\2"+
		"\2\u076e\u076f\3\2\2\2\u076f\u0773\3\2\2\2\u0770\u0772\5\u00dan\2\u0771"+
		"\u0770\3\2\2\2\u0772\u0775\3\2\2\2\u0773\u0771\3\2\2\2\u0773\u0774\3\2"+
		"\2\2\u0774\u0776\3\2\2\2\u0775\u0773\3\2\2\2\u0776\u0777\5\u0124\u0093"+
		"\2\u0777\u0778\7\u021d\2\2\u0778\u077a\3\2\2\2\u0779\u076c\3\2\2\2\u0779"+
		"\u076e\3\2\2\2\u077a\u00a3\3\2\2\2\u077b\u077d\7\u0116\2\2\u077c\u077b"+
		"\3\2\2\2\u077c\u077d\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f\t\35\2\2"+
		"\u077f\u00a5\3\2\2\2\u0780\u0781\5\u0302\u0182\2\u0781\u0783\5\u02ea\u0176"+
		"\2\u0782\u0784\5\u00a8U\2\u0783\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784"+
		"\u0787\3\2\2\2\u0785\u0787\5\u00aaV\2\u0786\u0780\3\2\2\2\u0786\u0785"+
		"\3\2\2\2\u0787\u00a7\3\2\2\2\u0788\u0789\7\u0092\2\2\u0789\u078a\7\u00fe"+
		"\2\2\u078a\u078b\5\u020e\u0108\2\u078b\u00a9\3\2\2\2\u078c\u078e\5\u00a4"+
		"S\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f"+
		"\u0791\5\u00acW\2\u0790\u078f\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0790"+
		"\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0795\7\u0217\2"+
		"\2\u0795\u0797\5\u00b8]\2\u0796\u0794\3\2\2\2\u0796\u0797\3\2\2\2\u0797"+
		"\u00ab\3\2\2\2\u0798\u079c\5\u00aeX\2\u0799\u079c\5\u00b4[\2\u079a\u079c"+
		"\5\u00b6\\\2\u079b\u0798\3\2\2\2\u079b\u0799\3\2\2\2\u079b\u079a\3\2\2"+
		"\2\u079c\u00ad\3\2\2\2\u079d\u07a0\t\34\2\2\u079e\u07a1\5\u00b0Y\2\u079f"+
		"\u07a1\5\u00b2Z\2\u07a0\u079e\3\2\2\2\u07a0\u079f\3\2\2\2\u07a1\u00af"+
		"\3\2\2\2\u07a2\u07a3\7\u0147\2\2\u07a3\u07a4\5\u02c8\u0165\2\u07a4\u07a5"+
		"\7\u0211\2\2\u07a5\u07aa\5\u00bc_\2\u07a6\u07a7\7\u0217\2\2\u07a7\u07a9"+
		"\5\u00bc_\2\u07a8\u07a6\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8\3\2\2"+
		"\2\u07aa\u07ab\3\2\2\2\u07ab\u07ad\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ad\u07b0"+
		"\7\u0212\2\2\u07ae\u07af\t\16\2\2\u07af\u07b1\5\u00ccg\2\u07b0\u07ae\3"+
		"\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u00b1\3\2\2\2\u07b2\u07b3\7\u00a6\2\2"+
		"\u07b3\u07bf\5\u02c6\u0164\2\u07b4\u07b5\7\u0211\2\2\u07b5\u07ba\5\u00bc"+
		"_\2\u07b6\u07b7\7\u0217\2\2\u07b7\u07b9\5\u00bc_\2\u07b8\u07b6\3\2\2\2"+
		"\u07b9\u07bc\3\2\2\2\u07ba\u07b8\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb\u07bd"+
		"\3\2\2\2\u07bc\u07ba\3\2\2\2\u07bd\u07be\7\u0212\2\2\u07be\u07c0\3\2\2"+
		"\2\u07bf\u07b4\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07c6"+
		"\7\u015c\2\2\u07c2\u07c7\5\u02ea\u0176\2\u07c3\u07c4\7\u0174\2\2\u07c4"+
		"\u07c5\7\20\2\2\u07c5\u07c7\7\u015a\2\2\u07c6\u07c2\3\2\2\2\u07c6\u07c3"+
		"\3\2\2\2\u07c7\u07d0\3\2\2\2\u07c8\u07c9\t\16\2\2\u07c9\u07d1\5\u00cc"+
		"g\2\u07ca\u07cc\7\u0092\2\2\u07cb\u07cd\7\u01c6\2\2\u07cc\u07cb\3\2\2"+
		"\2\u07cc\u07cd\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\7\u00fe\2\2\u07cf"+
		"\u07d1\5\u020e\u0108\2\u07d0\u07c8\3\2\2\2\u07d0\u07ca\3\2\2\2\u07d0\u07d1"+
		"\3\2\2\2\u07d1\u00b3\3\2\2\2\u07d2\u07d4\7\u0098\2\2\u07d3\u07d2\3\2\2"+
		"\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07d7\7\u00c4\2\2\u07d6"+
		"\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\7M"+
		"\2\2\u07d9\u07da\7\u00a6\2\2\u07da\u07ec\5\u02ea\u0176\2\u07db\u07dc\7"+
		"\u0211\2\2\u07dc\u07dd\7\u0174\2\2\u07dd\u07de\7\u00b4\2\2\u07de\u07df"+
		"\7\u012c\2\2\u07df\u07e0\5\u02ea\u0176\2\u07e0\u07e1\7\u0217\2\2\u07e1"+
		"\u07e2\3\2\2\2\u07e2\u07e7\5\u00bc_\2\u07e3\u07e4\7\u0217\2\2\u07e4\u07e6"+
		"\5\u00bc_\2\u07e5\u07e3\3\2\2\2\u07e6\u07e9\3\2\2\2\u07e7\u07e5\3\2\2"+
		"\2\u07e7\u07e8\3\2\2\2\u07e8\u07ea\3\2\2\2\u07e9\u07e7\3\2\2\2\u07ea\u07eb"+
		"\7\u0212\2\2\u07eb\u07ed\3\2\2\2\u07ec\u07db\3\2\2\2\u07ec\u07ed\3\2\2"+
		"\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\7\u015c\2\2\u07ef\u07f0\7\u0174\2\2"+
		"\u07f0\u07f1\7\20\2\2\u07f1\u07f4\7\u015a\2\2\u07f2\u07f3\t\16\2\2\u07f3"+
		"\u07f5\5\u00ccg\2\u07f4\u07f2\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u00b5"+
		"\3\2\2\2\u07f6\u07f7\t\33\2\2\u07f7\u07f8\7\u00f2\2\2\u07f8\u07f9\5\u00b2"+
		"Z\2\u07f9\u00b7\3\2\2\2\u07fa\u07fb\7\u0142\2\2\u07fb\u07fc\7\u0159\2"+
		"\2\u07fc\u07fd\7\u0211\2\2\u07fd\u0802\5\u00ba^\2\u07fe\u07ff\7\u0217"+
		"\2\2\u07ff\u0801\5\u00ba^\2\u0800\u07fe\3\2\2\2\u0801\u0804\3\2\2\2\u0802"+
		"\u0800\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0805\3\2\2\2\u0804\u0802\3\2"+
		"\2\2\u0805\u0806\7\u0212\2\2\u0806\u00b9\3\2\2\2\u0807\u080a\5\u0302\u0182"+
		"\2\u0808\u080a\7m\2\2\u0809\u0807\3\2\2\2\u0809\u0808\3\2\2\2\u080a\u00bb"+
		"\3\2\2\2\u080b\u080c\5\u02b2\u015a\2\u080c\u080d\5\u02ea\u0176\2\u080d"+
		"\u00bd\3\2\2\2\u080e\u080f\7{\2\2\u080f\u0810\7\u0175\2\2\u0810\u0811"+
		"\5\u02c2\u0162\2\u0811\u0812\7\u021d\2\2\u0812\u00bf\3\2\2\2\u0813\u0814"+
		"\7\n\2\2\u0814\u0815\7\u0175\2\2\u0815\u0817\5\u02c2\u0162\2\u0816\u0818"+
		"\5\u00c4c\2\u0817\u0816\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u0817\3\2\2"+
		"\2\u0819\u081a\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c\7\u021d\2\2\u081c"+
		"\u00c1\3\2\2\2\u081d\u081e\7V\2\2\u081e\u081f\7\u0175\2\2\u081f\u0824"+
		"\5\u02c2\u0162\2\u0820\u0823\5\u00c6d\2\u0821\u0823\5\u00c4c\2\u0822\u0820"+
		"\3\2\2\2\u0822\u0821\3\2\2\2\u0823\u0826\3\2\2\2\u0824\u0822\3\2\2\2\u0824"+
		"\u0825\3\2\2\2\u0825\u0827\3\2\2\2\u0826\u0824\3\2\2\2\u0827\u0828\7\u021d"+
		"\2\2\u0828\u00c3\3\2\2\2\u0829\u082a\7\u00b7\2\2\u082a\u082b\7,\2\2\u082b"+
		"\u083a\7\u020b\2\2\u082c\u082d\7\u00ef\2\2\u082d\u083a\7\u020b\2\2\u082e"+
		"\u083a\7\u0111\2\2\u082f\u0830\7\u00f7\2\2\u0830\u083a\7\u020b\2\2\u0831"+
		"\u083a\7\u0112\2\2\u0832\u083a\7^\2\2\u0833\u083a\7\u010e\2\2\u0834\u0835"+
		"\7/\2\2\u0835\u083a\7\u020b\2\2\u0836\u083a\7\u010b\2\2\u0837\u083a\7"+
		"\u0129\2\2\u0838\u083a\7\u0114\2\2\u0839\u0829\3\2\2\2\u0839\u082c\3\2"+
		"\2\2\u0839\u082e\3\2\2\2\u0839\u082f\3\2\2\2\u0839\u0831\3\2\2\2\u0839"+
		"\u0832\3\2\2\2\u0839\u0833\3\2\2\2\u0839\u0834\3\2\2\2\u0839\u0836\3\2"+
		"\2\2\u0839\u0837\3\2\2\2\u0839\u0838\3\2\2\2\u083a\u00c5\3\2\2\2\u083b"+
		"\u083c\7\u018e\2\2\u083c\u083d\7\u01d2\2\2\u083d\u083e\7\u020b\2\2\u083e"+
		"\u00c7\3\2\2\2\u083f\u0840\7\26\2\2\u0840\u0841\t\36\2\2\u0841\u00c9\3"+
		"\2\2\2\u0842\u0843\5\u0302\u0182\2\u0843\u0844\7\u0228\2\2\u0844\u0845"+
		"\5\u020e\u0108\2\u0845\u00cb\3\2\2\2\u0846\u0849\7\u00d3\2\2\u0847\u084a"+
		"\5\u00ceh\2\u0848\u084a\5\u00d0i\2\u0849\u0847\3\2\2\2\u0849\u0848\3\2"+
		"\2\2\u084a\u00cd\3\2\2\2\u084b\u084c\7\u00cf\2\2\u084c\u084d\7\u00fe\2"+
		"\2\u084d\u084e\7\u020d\2\2\u084e\u00cf\3\2\2\2\u084f\u0852\7.\2\2\u0850"+
		"\u0851\7\u00fe\2\2\u0851\u0853\7\u020d\2\2\u0852\u0850\3\2\2\2\u0852\u0853"+
		"\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0855\7\u00d9\2\2\u0855\u0857\5\u0302"+
		"\u0182\2\u0856\u0858\5\u00d2j\2\u0857\u0856\3\2\2\2\u0857\u0858\3\2\2"+
		"\2\u0858\u085b\3\2\2\2\u0859\u085a\7\u01d2\2\2\u085a\u085c\7O\2\2\u085b"+
		"\u0859\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085e\3\2\2\2\u085d\u085f\5\u00d4"+
		"k\2\u085e\u085d\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u00d1\3\2\2\2\u0860"+
		"\u0861\7\7\2\2\u0861\u0862\7\u00b4\2\2\u0862\u0863\7\u0211\2\2\u0863\u0868"+
		"\5\u020e\u0108\2\u0864\u0865\7\u0217\2\2\u0865\u0867\5\u020e\u0108\2\u0866"+
		"\u0864\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866\3\2\2\2\u0868\u0869\3\2"+
		"\2\2\u0869\u086b\3\2\2\2\u086a\u0868\3\2\2\2\u086b\u086c\7\u0212\2\2\u086c"+
		"\u00d3\3\2\2\2\u086d\u086e\7\u0132\2\2\u086e\u087a\7\u0211\2\2\u086f\u0874"+
		"\5\u020e\u0108\2\u0870\u0871\7\u0217\2\2\u0871\u0873\5\u020e\u0108\2\u0872"+
		"\u0870\3\2\2\2\u0873\u0876\3\2\2\2\u0874\u0872\3\2\2\2\u0874\u0875\3\2"+
		"\2\2\u0875\u087b\3\2\2\2\u0876\u0874\3\2\2\2\u0877\u0878\7\u020a\2\2\u0878"+
		"\u0879\7\u020a\2\2\u0879\u087b\7\u020a\2\2\u087a\u086f\3\2\2\2\u087a\u0877"+
		"\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\7\u0212\2\2\u087d\u00d5\3\2\2"+
		"\2\u087e\u0882\5\u02b2\u015a\2\u087f\u0881\t\37\2\2\u0880\u087f\3\2\2"+
		"\2\u0881\u0884\3\2\2\2\u0882\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0886"+
		"\3\2\2\2\u0884\u0882\3\2\2\2\u0885\u0887\5\u02ea\u0176\2\u0886\u0885\3"+
		"\2\2\2\u0886\u0887\3\2\2\2\u0887\u0889\3\2\2\2\u0888\u088a\5\u00d8m\2"+
		"\u0889\u0888\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u00d7\3\2\2\2\u088b\u088c"+
		"\t \2\2\u088c\u088d\5\u020e\u0108\2\u088d\u00d9\3\2\2\2\u088e\u0898\5"+
		"\u00dco\2\u088f\u0898\5\u00dep\2\u0890\u0898\5\u00e0q\2\u0891\u0898\5"+
		"\u00e4s\2\u0892\u0898\5\u00e6t\2\u0893\u0898\5\u00e8u\2\u0894\u0898\5"+
		"\u00f0y\2\u0895\u0898\5J&\2\u0896\u0898\5(\25\2\u0897\u088e\3\2\2\2\u0897"+
		"\u088f\3\2\2\2\u0897\u0890\3\2\2\2\u0897\u0891\3\2\2\2\u0897\u0892\3\2"+
		"\2\2\u0897\u0893\3\2\2\2\u0897\u0894\3\2\2\2\u0897\u0895\3\2\2\2\u0897"+
		"\u0896\3\2\2\2\u0898\u00db\3\2\2\2\u0899\u089b\5\u02cc\u0167\2\u089a\u089c"+
		"\7J\2\2\u089b\u089a\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\3\2\2\2\u089d"+
		"\u08a0\5\u02ea\u0176\2\u089e\u089f\7\u0116\2\2\u089f\u08a1\7\u0118\2\2"+
		"\u08a0\u089e\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a3\3\2\2\2\u08a2\u08a4"+
		"\5\u00d8m\2\u08a3\u08a2\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a5\3\2\2"+
		"\2\u08a5\u08a6\7\u021d\2\2\u08a6\u00dd\3\2\2\2\u08a7\u08a8\7\u019a\2\2"+
		"\u08a8\u08a9\5\u02c0\u0161\2\u08a9\u08aa\7\u00cc\2\2\u08aa\u08b0\5\u02ea"+
		"\u0176\2\u08ab\u08ac\7\u014a\2\2\u08ac\u08ad\5\u020e\u0108\2\u08ad\u08ae"+
		"\7\3\2\2\u08ae\u08af\5\u020e\u0108\2\u08af\u08b1\3\2\2\2\u08b0\u08ab\3"+
		"\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b4\3\2\2\2\u08b2\u08b3\7\u0116\2\2"+
		"\u08b3\u08b5\7\u0118\2\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5"+
		"\u08b6\3\2\2\2\u08b6\u08b7\7\u021d\2\2\u08b7\u00df\3\2\2\2\u08b8\u08b9"+
		"\7\\\2\2\u08b9\u08c5\5\u02d0\u0169\2\u08ba\u08bb\7\u0211\2\2\u08bb\u08c0"+
		"\5\u00e2r\2\u08bc\u08bd\7\u0217\2\2\u08bd\u08bf\5\u00e2r\2\u08be\u08bc"+
		"\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1"+
		"\u08c3\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3\u08c4\7\u0212\2\2\u08c4\u08c6"+
		"\3\2\2\2\u08c5\u08ba\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c9\3\2\2\2\u08c7"+
		"\u08c8\7\u015c\2\2\u08c8\u08ca\5\u02ea\u0176\2\u08c9\u08c7\3\2\2\2\u08c9"+
		"\u08ca\3\2\2\2\u08ca\u08cd\3\2\2\2\u08cb\u08cc\7\u00cc\2\2\u08cc\u08ce"+
		"\5\u0150\u00a9\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf\3"+
		"\2\2\2\u08cf\u08d0\7\u021d\2\2\u08d0\u00e1\3\2\2\2\u08d1\u08d6\5\u02b2"+
		"\u015a\2\u08d2\u08d4\7\u00b4\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2"+
		"\2\u08d4\u08d5\3\2\2\2\u08d5\u08d7\5\u02ea\u0176\2\u08d6\u08d3\3\2\2\2"+
		"\u08d6\u08d7\3\2\2\2\u08d7\u08d9\3\2\2\2\u08d8\u08da\5\u00d8m\2\u08d9"+
		"\u08d8\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u00e3\3\2\2\2\u08db\u08dc\5\u02c4"+
		"\u0163\2\u08dc\u08dd\7\u0089\2\2\u08dd\u08de\7\u021d\2\2\u08de\u00e5\3"+
		"\2\2\2\u08df\u08fe\7\u0142\2\2\u08e0\u08ff\7\u0178\2\2\u08e1\u08ff\7\31"+
		"\2\2\u08e2\u08e3\7\u008a\2\2\u08e3\u08e4\7\u0211\2\2\u08e4\u08e5\5\u02c4"+
		"\u0163\2\u08e5\u08e6\7\u0217\2\2\u08e6\u08e7\5\u02fe\u0180\2\u08e7\u08e8"+
		"\7\u0212\2\2\u08e8\u08ff\3\2\2\2\u08e9\u08ea\7\u00c0\2\2\u08ea\u08eb\7"+
		"\u0211\2\2\u08eb\u08ec\5\u0302\u0182\2\u08ec\u08ed\7\u0217\2\2\u08ed\u08ee"+
		"\5\u020e\u0108\2\u08ee\u08ef\7\u0212\2\2\u08ef\u08ff\3\2\2\2\u08f0\u08f1"+
		"\7\u0159\2\2\u08f1\u08f4\7\u0211\2\2\u08f2\u08f5\5\u0302\u0182\2\u08f3"+
		"\u08f5\7m\2\2\u08f4\u08f2\3\2\2\2\u08f4\u08f3\3\2\2\2\u08f5\u08f8\3\2"+
		"\2\2\u08f6\u08f7\7\u0217\2\2\u08f7\u08f9\5\u0302\u0182\2\u08f8\u08f6\3"+
		"\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08f8\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb"+
		"\u08fc\3\2\2\2\u08fc\u08fd\7\u0212\2\2\u08fd\u08ff\3\2\2\2\u08fe\u08e0"+
		"\3\2\2\2\u08fe\u08e1\3\2\2\2\u08fe\u08e2\3\2\2\2\u08fe\u08e9\3\2\2\2\u08fe"+
		"\u08f0\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\7\u021d\2\2\u0901\u00e7"+
		"\3\2\2\2\u0902\u0905\5\u00eav\2\u0903\u0905\5\u00eex\2\u0904\u0902\3\2"+
		"\2\2\u0904\u0903\3\2\2\2\u0905\u00e9\3\2\2\2\u0906\u0907\7\u01b3\2\2\u0907"+
		"\u0908\5\u02c0\u0161\2\u0908\u091b\7\u00cc\2\2\u0909\u090a\7\u014f\2\2"+
		"\u090a\u090b\7\u0211\2\2\u090b\u0910\5\u00ecw\2\u090c\u090d\7\u0217\2"+
		"\2\u090d\u090f\5\u00ecw\2\u090e\u090c\3\2\2\2\u090f\u0912\3\2\2\2\u0910"+
		"\u090e\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0913\3\2\2\2\u0912\u0910\3\2"+
		"\2\2\u0913\u0914\7\u0212\2\2\u0914\u091c\3\2\2\2\u0915\u0916\7\u0151\2"+
		"\2\u0916\u0919\7\\\2\2\u0917\u0918\7\u015c\2\2\u0918\u091a\5\u02ea\u0176"+
		"\2\u0919\u0917\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u0909"+
		"\3\2\2\2\u091b\u0915\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\7\u021d\2"+
		"\2\u091e\u00eb\3\2\2\2\u091f\u0921\5\u02d8\u016d\2\u0920\u0922\5\u02ea"+
		"\u0176\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0925\3\2\2\2\u0923"+
		"\u0924\7\u0116\2\2\u0924\u0926\7\u0118\2\2\u0925\u0923\3\2\2\2\u0925\u0926"+
		"\3\2\2\2\u0926\u0928\3\2\2\2\u0927\u0929\5\u00d8m\2\u0928\u0927\3\2\2"+
		"\2\u0928\u0929\3\2\2\2\u0929\u00ed\3\2\2\2\u092a\u092b\5\u02d2\u016a\2"+
		"\u092b\u092c\5\u02c0\u0161\2\u092c\u092d\t!\2\2\u092d\u092e\7\u021d\2"+
		"\2\u092e\u00ef\3\2\2\2\u092f\u0932\5\u00f2z\2\u0930\u0932\5\u00f8}\2\u0931"+
		"\u092f\3\2\2\2\u0931\u0930\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0934\7\u021d"+
		"\2\2\u0934\u00f1\3\2\2\2\u0935\u0936\7\u01b3\2\2\u0936\u0937\5\u02c0\u0161"+
		"\2\u0937\u0943\7\u00cc\2\2\u0938\u0939\7\u019d\2\2\u0939\u093a\7\u011e"+
		"\2\2\u093a\u093c\5\u02ea\u0176\2\u093b\u093d\5\u00f4{\2\u093c\u093b\3"+
		"\2\2\2\u093c\u093d\3\2\2\2\u093d\u0940\3\2\2\2\u093e\u093f\7\u0116\2\2"+
		"\u093f\u0941\7\u0118\2\2\u0940\u093e\3\2\2\2\u0940\u0941\3\2\2\2\u0941"+
		"\u0944\3\2\2\2\u0942\u0944\5\u00f6|\2\u0943\u0938\3\2\2\2\u0943\u0942"+
		"\3\2\2\2\u0944\u00f3\3\2\2\2\u0945\u0948\7\u00ba\2\2\u0946\u0948\7\u00b9"+
		"\2\2\u0947\u0945\3\2\2\2\u0947\u0946\3\2\2\2\u0948\u0949\3\2\2\2\u0949"+
		"\u094a\7,\2\2\u094a\u094b\5\u02ea\u0176\2\u094b\u00f5\3\2\2\2\u094c\u0950"+
		"\7\u01c7\2\2\u094d\u094e\7\u01c8\2\2\u094e\u0950\7\17\2\2\u094f\u094c"+
		"\3\2\2\2\u094f\u094d\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\7\u0211\2"+
		"\2\u0952\u0953\5\u020e\u0108\2\u0953\u0954\7\u0212\2\2\u0954\u0955\7\u011e"+
		"\2\2\u0955\u0958\5\u02ea\u0176\2\u0956\u0957\7\u0116\2\2\u0957\u0959\7"+
		"\u0118\2\2\u0958\u0956\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u00f7\3\2\2\2"+
		"\u095a\u095b\5\u02a8\u0155\2\u095b\u095c\5\u02ea\u0176\2\u095c\u00f9\3"+
		"\2\2\2\u095d\u095e\5\u00fe\u0080\2\u095e\u095f\t\"\2\2\u095f\u0962\3\2"+
		"\2\2\u0960\u0962\5\u00fc\177\2\u0961\u095d\3\2\2\2\u0961\u0960\3\2\2\2"+
		"\u0962\u0963\3\2\2\2\u0963\u0961\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u00fb"+
		"\3\2\2\2\u0965\u0966\7\u021f\2\2\u0966\u0967\7\u021f\2\2\u0967\u0968\5"+
		"\u02be\u0160\2\u0968\u0969\7\u0225\2\2\u0969\u096a\7\u0225\2\2\u096a\u00fd"+
		"\3\2\2\2\u096b\u096c\7V\2\2\u096c\u0983\5\2\2\2\u096d\u096e\7\n\2\2\u096e"+
		"\u0983\5\2\2\2\u096f\u0970\7\u00a8\2\2\u0970\u0983\5\2\2\2\u0971\u0972"+
		"\7\u01b2\2\2\u0972\u0983\5\2\2\2\u0973\u0983\5\u0124\u0093\2\u0974\u0983"+
		"\5\u012c\u0097\2\u0975\u0983\5\u0100\u0081\2\u0976\u0983\5\u0102\u0082"+
		"\2\u0977\u0983\5\u0104\u0083\2\u0978\u0983\5\u0106\u0084\2\u0979\u0983"+
		"\5\u0108\u0085\2\u097a\u0983\5\u010e\u0088\2\u097b\u0983\5\u0112\u008a"+
		"\2\u097c\u0983\5\u011c\u008f\2\u097d\u0983\5\u011e\u0090\2\u097e\u0983"+
		"\5\u0120\u0091\2\u097f\u0983\5\u0242\u0122\2\u0980\u0983\5\u012e\u0098"+
		"\2\u0981\u0983\5\u0122\u0092\2\u0982\u096b\3\2\2\2\u0982\u096d\3\2\2\2"+
		"\u0982\u096f\3\2\2\2\u0982\u0971\3\2\2\2\u0982\u0973\3\2\2\2\u0982\u0974"+
		"\3\2\2\2\u0982\u0975\3\2\2\2\u0982\u0976\3\2\2\2\u0982\u0977\3\2\2\2\u0982"+
		"\u0978\3\2\2\2\u0982\u0979\3\2\2\2\u0982\u097a\3\2\2\2\u0982\u097b\3\2"+
		"\2\2\u0982\u097c\3\2\2\2\u0982\u097d\3\2\2\2\u0982\u097e\3\2\2\2\u0982"+
		"\u097f\3\2\2\2\u0982\u0980\3\2\2\2\u0982\u0981\3\2\2\2\u0983\u00ff\3\2"+
		"\2\2\u0984\u0987\5\u02f4\u017b\2\u0985\u0987\5\u02f2\u017a\2\u0986\u0984"+
		"\3\2\2\2\u0986\u0985\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0989\7\u021a\2"+
		"\2\u0989\u098a\5\u020e\u0108\2\u098a\u0101\3\2\2\2\u098b\u098d\7P\2\2"+
		"\u098c\u098e\5\u02be\u0160\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e"+
		"\u0991\3\2\2\2\u098f\u0990\7\u01ce\2\2\u0990\u0992\5\u020a\u0106\2\u0991"+
		"\u098f\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0103\3\2\2\2\u0993\u0995\7\u0090"+
		"\2\2\u0994\u0996\5\u02be\u0160\2\u0995\u0994\3\2\2\2\u0995\u0996\3\2\2"+
		"\2\u0996\u0999\3\2\2\2\u0997\u0998\7\u01ce\2\2\u0998\u099a\5\u020a\u0106"+
		"\2\u0999\u0997\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u0105\3\2\2\2\u099b\u099c"+
		"\7\u00a7\2\2\u099c\u099d\5\u02be\u0160\2\u099d\u0107\3\2\2\2\u099e\u099f"+
		"\7\u00b1\2\2\u099f\u09a0\5\u020a\u0106\2\u09a0\u09a1\7\u01a0\2\2\u09a1"+
		"\u09a5\5\u00fa~\2\u09a2\u09a4\5\u010a\u0086\2\u09a3\u09a2\3\2\2\2\u09a4"+
		"\u09a7\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a9\3\2"+
		"\2\2\u09a7\u09a5\3\2\2\2\u09a8\u09aa\5\u010c\u0087\2\u09a9\u09a8\3\2\2"+
		"\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\7\u0084\2\2\u09ac"+
		"\u09ad\7\u00b1\2\2\u09ad\u0109\3\2\2\2\u09ae\u09af\7\u0080\2\2\u09af\u09b0"+
		"\5\u020a\u0106\2\u09b0\u09b1\7\u01a0\2\2\u09b1\u09b2\5\u00fa~\2\u09b2"+
		"\u010b\3\2\2\2\u09b3\u09b4\7\177\2\2\u09b4\u09b5\5\u00fa~\2\u09b5\u010d"+
		"\3\2\2\2\u09b6\u09b8\5\u02be\u0160\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3"+
		"\2\2\2\u09b8\u09bd\3\2\2\2\u09b9\u09ba\7\u01d1\2\2\u09ba\u09be\5\u020a"+
		"\u0106\2\u09bb\u09bc\7\u009f\2\2\u09bc\u09be\5\u0110\u0089\2\u09bd\u09b9"+
		"\3\2\2\2\u09bd\u09bb\3\2\2\2\u09bd\u09be\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf"+
		"\u09c0\7\u00e8\2\2\u09c0\u09c1\5\u00fa~\2\u09c1\u09c2\7\u0084\2\2\u09c2"+
		"\u09c4\7\u00e8\2\2\u09c3\u09c5\5\u02be\u0160\2\u09c4\u09c3\3\2\2\2\u09c4"+
		"\u09c5\3\2\2\2\u09c5\u010f\3\2\2\2\u09c6\u09c7\5\u02ce\u0168\2\u09c7\u09c9"+
		"\7\u00b4\2\2\u09c8\u09ca\7\u015f\2\2\u09c9\u09c8\3\2\2\2\u09c9\u09ca\3"+
		"\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09cc\5\u0118\u008d\2\u09cc\u09cd\7\3"+
		"\2\2\u09cd\u09ce\5\u011a\u008e\2\u09ce\u09dc\3\2\2\2\u09cf\u09d0\5\u02d2"+
		"\u016a\2\u09d0\u09d9\7\u00b4\2\2\u09d1\u09d3\5\u02d0\u0169\2\u09d2\u09d4"+
		"\5\u0208\u0105\2\u09d3\u09d2\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09da\3"+
		"\2\2\2\u09d5\u09d6\7\u0211\2\2\u09d6\u09d7\5\u0150\u00a9\2\u09d7\u09d8"+
		"\7\u0212\2\2\u09d8\u09da\3\2\2\2\u09d9\u09d1\3\2\2\2\u09d9\u09d5\3\2\2"+
		"\2\u09da\u09dc\3\2\2\2\u09db\u09c6\3\2\2\2\u09db\u09cf\3\2\2\2\u09dc\u0111"+
		"\3\2\2\2\u09dd\u09de\7\u00a0\2\2\u09de\u09df\5\u02ce\u0168\2\u09df\u09e0"+
		"\7\u00b4\2\2\u09e0\u09e1\5\u0114\u008b\2\u09e1\u09e4\5\u012e\u0098\2\u09e2"+
		"\u09e3\7\u0169\2\2\u09e3\u09e5\7\u008b\2\2\u09e4\u09e2\3\2\2\2\u09e4\u09e5"+
		"\3\2\2\2\u09e5\u0113\3\2\2\2\u09e6\u09e7\5\u0118\u008d\2\u09e7\u09e8\7"+
		"\3\2\2\u09e8\u09e9\5\u011a\u008e\2\u09e9\u09f4\3\2\2\2\u09ea\u09eb\7\u00bc"+
		"\2\2\u09eb\u09ec\7\u011e\2\2\u09ec\u09ee\5\u02d4\u016b\2\u09ed\u09ef\5"+
		"\u0116\u008c\2\u09ee\u09ed\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f4\3\2"+
		"\2\2\u09f0\u09f1\7\u01c3\2\2\u09f1\u09f2\7\u011e\2\2\u09f2\u09f4\5\u02ce"+
		"\u0168\2\u09f3\u09e6\3\2\2\2\u09f3\u09ea\3\2\2\2\u09f3\u09f0\3\2\2\2\u09f4"+
		"\u0115\3\2\2\2\u09f5\u09f6\7\37\2\2\u09f6\u09f7\5\u0118\u008d\2\u09f7"+
		"\u09f8\7\f\2\2\u09f8\u09f9\5\u011a\u008e\2\u09f9\u0117\3\2\2\2\u09fa\u09fb"+
		"\5\u0228\u0115\2\u09fb\u0119\3\2\2\2\u09fc\u09fd\5\u0228\u0115\2\u09fd"+
		"\u011b\3\2\2\2\u09fe\u09ff\7\u0118\2\2\u09ff\u011d\3\2\2\2\u0a00\u0a02"+
		"\7\u0149\2\2\u0a01\u0a03\5\u02c4\u0163\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03"+
		"\3\2\2\2\u0a03\u011f\3\2\2\2\u0a04\u0a06\7\u015c\2\2\u0a05\u0a07\5\u020a"+
		"\u0106\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0121\3\2\2\2\u0a08"+
		"\u0a0a\7\60\2\2\u0a09\u0a08\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0b\3"+
		"\2\2\2\u0a0b\u0a0d\5\u02ac\u0157\2\u0a0c\u0a0e\5\u02e0\u0171\2\u0a0d\u0a0c"+
		"\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0123\3\2\2\2\u0a0f\u0a10\7\36\2\2"+
		"\u0a10\u0a12\5\u00fa~\2\u0a11\u0a13\5\u0126\u0094\2\u0a12\u0a11\3\2\2"+
		"\2\u0a12\u0a13\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a16\7\u0084\2\2\u0a15"+
		"\u0a17\5\u02be\u0160\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0125"+
		"\3\2\2\2\u0a18\u0a1a\7\u0089\2\2\u0a19\u0a1b\5\u0128\u0095\2\u0a1a\u0a19"+
		"\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1a\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d"+
		"\u0127\3\2\2\2\u0a1e\u0a1f\7\u01ce\2\2\u0a1f\u0a24\5\u02c4\u0163\2\u0a20"+
		"\u0a21\7\u0127\2\2\u0a21\u0a23\5\u02c4\u0163\2\u0a22\u0a20\3\2\2\2\u0a23"+
		"\u0a26\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2"+
		"\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a28\7\u01a0\2\2\u0a28\u0a29\5\u00fa~"+
		"\2\u0a29\u0129\3\2\2\2\u0a2a\u0a2c\7i\2\2\u0a2b\u0a2a\3\2\2\2\u0a2b\u0a2c"+
		"\3\2\2\2\u0a2c\u0a2e\3\2\2\2\u0a2d\u0a2f\5\u00dan\2\u0a2e\u0a2d\3\2\2"+
		"\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a2e\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33"+
		"\3\2\2\2\u0a32\u0a2b\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34"+
		"\u0a35\5\u0124\u0093\2\u0a35\u012b\3\2\2\2\u0a36\u0a38\7i\2\2\u0a37\u0a36"+
		"\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a3a\3\2\2\2\u0a39\u0a3b\5\u00dan"+
		"\2\u0a3a\u0a39\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3d"+
		"\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a3f\5\u0124\u0093\2\u0a3f\u012d\3"+
		"\2\2\2\u0a40\u0a45\5\u0130\u0099\2\u0a41\u0a45\5\u0134\u009b\2\u0a42\u0a45"+
		"\5\u0136\u009c\2\u0a43\u0a45\5\u0140\u00a1\2\u0a44\u0a40\3\2\2\2\u0a44"+
		"\u0a41\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a44\u0a43\3\2\2\2\u0a45\u012f\3\2"+
		"\2\2\u0a46\u0a47\7\u008e\2\2\u0a47\u0a48\7\u00b3\2\2\u0a48\u0a52\5\u020e"+
		"\u0108\2\u0a49\u0a4b\5\u029c\u014f\2\u0a4a\u0a4c\5\u0266\u0134\2\u0a4b"+
		"\u0a4a\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a53\3\2\2\2\u0a4d\u0a4f\5\u0266"+
		"\u0134\2\u0a4e\u0a50\5\u0132\u009a\2\u0a4f\u0a4e\3\2\2\2\u0a4f\u0a50\3"+
		"\2\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a53\5\u0132\u009a\2\u0a52\u0a49\3\2"+
		"\2\2\u0a52\u0a4d\3\2\2\2\u0a52\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53"+
		"\u0131\3\2\2\2\u0a54\u0a55\t#\2\2\u0a55\u0a56\5\u029c\u014f\2\u0a56\u0133"+
		"\3\2\2\2\u0a57\u0a5f\5\u01de\u00f0\2\u0a58\u0a5f\5\u01ea\u00f6\2\u0a59"+
		"\u0a5f\5\u0150\u00a9\2\u0a5a\u0a5f\5\u01c4\u00e3\2\u0a5b\u0a5f\5\u01ca"+
		"\u00e6\2\u0a5c\u0a5f\5\u01cc\u00e7\2\u0a5d\u0a5f\5\u014e\u00a8\2\u0a5e"+
		"\u0a57\3\2\2\2\u0a5e\u0a58\3\2\2\2\u0a5e\u0a59\3\2\2\2\u0a5e\u0a5a\3\2"+
		"\2\2\u0a5e\u0a5b\3\2\2\2\u0a5e\u0a5c\3\2\2\2\u0a5e\u0a5d\3\2\2\2\u0a5f"+
		"\u0135\3\2\2\2\u0a60\u0a65\5\u0138\u009d\2\u0a61\u0a65\5\u013a\u009e\2"+
		"\u0a62\u0a65\5\u013c\u009f\2\u0a63\u0a65\5\u013e\u00a0\2\u0a64\u0a60\3"+
		"\2\2\2\u0a64\u0a61\3\2\2\2\u0a64\u0a62\3\2\2\2\u0a64\u0a63\3\2\2\2\u0a65"+
		"\u0137\3\2\2\2\u0a66\u0a67\7=\2\2\u0a67\u0a68\5\u02d0\u0169\2\u0a68\u0139"+
		"\3\2\2\2\u0a69\u0a6a\7\u0125\2\2\u0a6a\u0a6c\5\u02d0\u0169\2\u0a6b\u0a6d"+
		"\5\u0208\u0105\2\u0a6c\u0a6b\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u013b\3"+
		"\2\2\2\u0a6e\u0a6f\7\u0096\2\2\u0a6f\u0a84\5\u02d0\u0169\2\u0a70\u0a71"+
		"\7\u00ca\2\2\u0a71\u0a76\5\u02cc\u0167\2\u0a72\u0a73\7\u0217\2\2\u0a73"+
		"\u0a75\5\u02cc\u0167\2\u0a74\u0a72\3\2\2\2\u0a75\u0a78\3\2\2\2\u0a76\u0a74"+
		"\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0a85\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a79"+
		"\u0a7a\7+\2\2\u0a7a\u0a7b\7?\2\2\u0a7b\u0a7c\7\u00ca\2\2\u0a7c\u0a81\5"+
		"\u02cc\u0167\2\u0a7d\u0a7e\7\u0217\2\2\u0a7e\u0a80\5\u02cc\u0167\2\u0a7f"+
		"\u0a7d\3\2\2\2\u0a80\u0a83\3\2\2\2\u0a81\u0a7f\3\2\2\2\u0a81\u0a82\3\2"+
		"\2\2\u0a82\u0a85\3\2\2\2\u0a83\u0a81\3\2\2\2\u0a84\u0a70\3\2\2\2\u0a84"+
		"\u0a79\3\2\2\2\u0a85\u013d\3\2\2\2\u0a86\u0a87\7\u0125\2\2\u0a87\u0a88"+
		"\5\u02cc\u0167\2\u0a88\u0a8b\7\u009f\2\2\u0a89\u0a8c\5\u0150\u00a9\2\u0a8a"+
		"\u0a8c\5\u020e\u0108\2\u0a8b\u0a89\3\2\2\2\u0a8b\u0a8a\3\2\2\2\u0a8c\u0a8e"+
		"\3\2\2\2\u0a8d\u0a8f\5\u0266\u0134\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f\3"+
		"\2\2\2\u0a8f\u013f\3\2\2\2\u0a90\u0a96\5\u0142\u00a2\2\u0a91\u0a96\5\u0144"+
		"\u00a3\2\u0a92\u0a96\5\u0146\u00a4\2\u0a93\u0a96\5\u014a\u00a6\2\u0a94"+
		"\u0a96\5\u014c\u00a7\2\u0a95\u0a90\3\2\2\2\u0a95\u0a91\3\2\2\2\u0a95\u0a92"+
		"\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a95\u0a94\3\2\2\2\u0a96\u0141\3\2\2\2\u0a97"+
		"\u0a98\7\u017b\2\2\u0a98\u0aa6\7\u01ac\2\2\u0a99\u0a9a\7\u014c\2\2\u0a9a"+
		"\u0aa7\t$\2\2\u0a9b\u0a9c\7\u00cd\2\2\u0a9c\u0aa0\7\u00d8\2\2\u0a9d\u0aa1"+
		"\7\u0177\2\2\u0a9e\u0a9f\7\u014c\2\2\u0a9f\u0aa1\7C\2\2\u0aa0\u0a9d\3"+
		"\2\2\2\u0aa0\u0a9e\3\2\2\2\u0aa1\u0aa7\3\2\2\2\u0aa2\u0aa3\7\u01bf\2\2"+
		"\u0aa3\u0aa4\7\u0162\2\2\u0aa4\u0aa5\7\u0172\2\2\u0aa5\u0aa7\5\u02a6\u0154"+
		"\2\u0aa6\u0a99\3\2\2\2\u0aa6\u0a9b\3\2\2\2\u0aa6\u0aa2\3\2\2\2\u0aa6\u0aa7"+
		"\3\2\2\2\u0aa7\u0aaa\3\2\2\2\u0aa8\u0aa9\7\u00fe\2\2\u0aa9\u0aab\5\u0300"+
		"\u0181\2\u0aaa\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0143\3\2\2\2\u0aac"+
		"\u0aad\7\u017b\2\2\u0aad\u0ab7\t%\2\2\u0aae\u0ab8\7\t\2\2\u0aaf\u0ab4"+
		"\5\u02bc\u015f\2\u0ab0\u0ab1\7\u0217\2\2\u0ab1\u0ab3\5\u02bc\u015f\2\u0ab2"+
		"\u0ab0\3\2\2\2\u0ab3\u0ab6\3\2\2\2\u0ab4\u0ab2\3\2\2\2\u0ab4\u0ab5\3\2"+
		"\2\2\u0ab5\u0ab8\3\2\2\2\u0ab6\u0ab4\3\2\2\2\u0ab7\u0aae\3\2\2\2\u0ab7"+
		"\u0aaf\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\t\3\2\2\u0aba\u0145\3\2"+
		"\2\2\u0abb\u0abd\7B\2\2\u0abc\u0abe\7\u01d4\2\2\u0abd\u0abc\3\2\2\2\u0abd"+
		"\u0abe\3\2\2\2\u0abe\u0acc\3\2\2\2\u0abf\u0ac0\7A\2\2\u0ac0\u0acd\5\u020e"+
		"\u0108\2\u0ac1\u0aca\7\u00a1\2\2\u0ac2\u0ac3\7R\2\2\u0ac3\u0acb\5\u020e"+
		"\u0108\2\u0ac4\u0acb\7S\2\2\u0ac5\u0ac8\5\u020e\u0108\2\u0ac6\u0ac7\7"+
		"\u0217\2\2\u0ac7\u0ac9\5\u020e\u0108\2\u0ac8\u0ac6\3\2\2\2\u0ac8\u0ac9"+
		"\3\2\2\2\u0ac9\u0acb\3\2\2\2\u0aca\u0ac2\3\2\2\2\u0aca\u0ac4\3\2\2\2\u0aca"+
		"\u0ac5\3\2\2\2\u0acb\u0acd\3\2\2\2\u0acc\u0abf\3\2\2\2\u0acc\u0ac1\3\2"+
		"\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0acf\3\2\2\2\u0ace\u0ad0\5\u0148\u00a5"+
		"\2\u0acf\u0ace\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0147\3\2\2\2\u0ad1\u0ad3"+
		"\7\u01d5\2\2\u0ad2\u0ad4\t&\2\2\u0ad3\u0ad2\3\2\2\2\u0ad3\u0ad4\3\2\2"+
		"\2\u0ad4\u0ad6\3\2\2\2\u0ad5\u0ad7\t\'\2\2\u0ad6\u0ad5\3\2\2\2\u0ad6\u0ad7"+
		"\3\2\2\2\u0ad7\u0149\3\2\2\2\u0ad8\u0ada\7\u0162\2\2\u0ad9\u0adb\7\u01d4"+
		"\2\2\u0ada\u0ad9\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0ae3\3\2\2\2\u0adc"+
		"\u0ade\7\u01aa\2\2\u0add\u0adf\7\u016a\2\2\u0ade\u0add\3\2\2\2\u0ade\u0adf"+
		"\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae4\5\u02a4\u0153\2\u0ae1\u0ae2\7"+
		"\u00a1\2\2\u0ae2\u0ae4\5\u0300\u0181\2\u0ae3\u0adc\3\2\2\2\u0ae3\u0ae1"+
		"\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u014b\3\2\2\2\u0ae5\u0ae6\7\u016a\2"+
		"\2\u0ae6\u0ae7\5\u02a4\u0153\2\u0ae7\u014d\3\2\2\2\u0ae8\u0ae9\7\u0091"+
		"\2\2\u0ae9\u0aee\7\u013e\2\2\u0aea\u0aeb\7\u017b\2\2\u0aeb\u0aec\7\u0191"+
		"\2\2\u0aec\u0aed\7\u0228\2\2\u0aed\u0aef\5\u0300\u0181\2\u0aee\u0aea\3"+
		"\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0af1\7\u00ca\2\2"+
		"\u0af1\u0af3\5\u02da\u016e\2\u0af2\u0af0\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3"+
		"\u0af4\3\2\2\2\u0af4\u0afa\7\u009f\2\2\u0af5\u0afb\5\u0150\u00a9\2\u0af6"+
		"\u0afb\5\u01c4\u00e3\2\u0af7\u0afb\5\u01ca\u00e6\2\u0af8\u0afb\5\u01cc"+
		"\u00e7\2\u0af9\u0afb\5\u01de\u00f0\2\u0afa\u0af5\3\2\2\2\u0afa\u0af6\3"+
		"\2\2\2\u0afa\u0af7\3\2\2\2\u0afa\u0af8\3\2\2\2\u0afa\u0af9\3\2\2\2\u0afb"+
		"\u014f\3\2\2\2\u0afc\u0afe\5\u0152\u00aa\2\u0afd\u0afc\3\2\2\2\u0afd\u0afe"+
		"\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b04\5\u015a\u00ae\2\u0b00\u0b03\5"+
		"\u01be\u00e0\2\u0b01\u0b03\5\u01ba\u00de\2\u0b02\u0b00\3\2\2\2\u0b02\u0b01"+
		"\3\2\2\2\u0b03\u0b06\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05"+
		"\u0151\3\2\2\2\u0b06\u0b04\3\2\2\2\u0b07\u0b08\7\u01d2\2\2\u0b08\u0b0d"+
		"\5\u0154\u00ab\2\u0b09\u0b0a\7\u0217\2\2\u0b0a\u0b0c\5\u0154\u00ab\2\u0b0b"+
		"\u0b09\3\2\2\2\u0b0c\u0b0f\3\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2"+
		"\2\2\u0b0e\u0153\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10\u0b1c\5\u02ba\u015e"+
		"\2\u0b11\u0b12\7\u0211\2\2\u0b12\u0b17\5\u02d8\u016d\2\u0b13\u0b14\7\u0217"+
		"\2\2\u0b14\u0b16\5\u02d8\u016d\2\u0b15\u0b13\3\2\2\2\u0b16\u0b19\3\2\2"+
		"\2\u0b17\u0b15\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b1a\3\2\2\2\u0b19\u0b17"+
		"\3\2\2\2\u0b1a\u0b1b\7\u0212\2\2\u0b1b\u0b1d\3\2\2\2\u0b1c\u0b11\3\2\2"+
		"\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f\7\20\2\2\u0b1f"+
		"\u0b20\7\u0211\2\2\u0b20\u0b22\5\u015a\u00ae\2\u0b21\u0b23\5\u01ba\u00de"+
		"\2\u0b22\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b26"+
		"\7\u0212\2\2\u0b25\u0b27\5\u0156\u00ac\2\u0b26\u0b25\3\2\2\2\u0b26\u0b27"+
		"\3\2\2\2\u0b27\u0b29\3\2\2\2\u0b28\u0b2a\5\u0158\u00ad\2\u0b29\u0b28\3"+
		"\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0155\3\2\2\2\u0b2b\u0b2c\7\u016e\2\2"+
		"\u0b2c\u0b2d\t(\2\2\u0b2d\u0b2e\7\u0099\2\2\u0b2e\u0b2f\7,\2\2\u0b2f\u0b31"+
		"\5\u02d8\u016d\2\u0b30\u0b32\7\21\2\2\u0b31\u0b30\3\2\2\2\u0b31\u0b32"+
		"\3\2\2\2\u0b32\u0b34\3\2\2\2\u0b33\u0b35\7s\2\2\u0b34\u0b33\3\2\2\2\u0b34"+
		"\u0b35\3\2\2\2\u0b35\u0b38\3\2\2\2\u0b36\u0b37\7\u0119\2\2\u0b37\u0b39"+
		"\7\u0099\2\2\u0b38\u0b36\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3c\3\2\2"+
		"\2\u0b3a\u0b3b\7\u0119\2\2\u0b3b\u0b3d\7\u00d4\2\2\u0b3c\u0b3a\3\2\2\2"+
		"\u0b3c\u0b3d\3\2\2\2\u0b3d\u0b50\3\2\2\2\u0b3e\u0b3f\7\u0217\2\2\u0b3f"+
		"\u0b41\5\u02d8\u016d\2\u0b40\u0b42\7\21\2\2\u0b41\u0b40\3\2\2\2\u0b41"+
		"\u0b42\3\2\2\2\u0b42\u0b44\3\2\2\2\u0b43\u0b45\7s\2\2\u0b44\u0b43\3\2"+
		"\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b48\3\2\2\2\u0b46\u0b47\7\u0119\2\2\u0b47"+
		"\u0b49\7\u0099\2\2\u0b48\u0b46\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b4c"+
		"\3\2\2\2\u0b4a\u0b4b\7\u0119\2\2\u0b4b\u0b4d\7\u00d4\2\2\u0b4c\u0b4a\3"+
		"\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b4f\3\2\2\2\u0b4e\u0b3e\3\2\2\2\u0b4f"+
		"\u0b52\3\2\2\2\u0b50\u0b4e\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b53\3\2"+
		"\2\2\u0b52\u0b50\3\2\2\2\u0b53\u0b54\7\u017b\2\2\u0b54\u0b55\5\u02d8\u016d"+
		"\2\u0b55\u0157\3\2\2\2\u0b56\u0b57\7^\2\2\u0b57\u0b5c\5\u02d8\u016d\2"+
		"\u0b58\u0b59\7\u0217\2\2\u0b59\u0b5b\5\u02d8\u016d\2\u0b5a\u0b58\3\2\2"+
		"\2\u0b5b\u0b5e\3\2\2\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5f"+
		"\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f\u0b60\7\u017b\2\2\u0b60\u0b61\5\u02d8"+
		"\u016d\2\u0b61\u0b62\7\u01aa\2\2\u0b62\u0b63\5\u020e\u0108\2\u0b63\u0b64"+
		"\7m\2\2\u0b64\u0b65\5\u020e\u0108\2\u0b65\u0159\3\2\2\2\u0b66\u0b6a\5"+
		"\u015e\u00b0\2\u0b67\u0b69\5\u015c\u00af\2\u0b68\u0b67\3\2\2\2\u0b69\u0b6c"+
		"\3\2\2\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u015b\3\2\2\2\u0b6c"+
		"\u0b6a\3\2\2\2\u0b6d\u0b6f\7\u01b6\2\2\u0b6e\u0b70\7\t\2\2\u0b6f\u0b6e"+
		"\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b74\3\2\2\2\u0b71\u0b74\7\u00c8\2"+
		"\2\u0b72\u0b74\7\u00f5\2\2\u0b73\u0b6d\3\2\2\2\u0b73\u0b71\3\2\2\2\u0b73"+
		"\u0b72\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0b76\5\u015e\u00b0\2\u0b76\u015d"+
		"\3\2\2\2\u0b77\u0b7d\5\u0160\u00b1\2\u0b78\u0b79\7\u0211\2\2\u0b79\u0b7a"+
		"\5\u015a\u00ae\2\u0b7a\u0b7b\7\u0212\2\2\u0b7b\u0b7d\3\2\2\2\u0b7c\u0b77"+
		"\3\2\2\2\u0b7c\u0b78\3\2\2\2\u0b7d\u015f\3\2\2\2\u0b7e\u0b80\7\u0173\2"+
		"\2\u0b7f\u0b81\t)\2\2\u0b80\u0b7f\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b8b"+
		"\3\2\2\2\u0b82\u0b8c\7\u0214\2\2\u0b83\u0b88\5\u0162\u00b2\2\u0b84\u0b85"+
		"\7\u0217\2\2\u0b85\u0b87\5\u0162\u00b2\2\u0b86\u0b84\3\2\2\2\u0b87\u0b8a"+
		"\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u0b8c\3\2\2\2\u0b8a"+
		"\u0b88\3\2\2\2\u0b8b\u0b82\3\2\2\2\u0b8b\u0b83\3\2\2\2\u0b8c\u0b8e\3\2"+
		"\2\2\u0b8d\u0b8f\5\u029c\u014f\2\u0b8e\u0b8d\3\2\2\2\u0b8e\u0b8f\3\2\2"+
		"\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b92\5\u0164\u00b3\2\u0b91\u0b93\5\u0298"+
		"\u014d\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b95\3\2\2\2\u0b94"+
		"\u0b96\5\u018c\u00c7\2\u0b95\u0b94\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u0b98"+
		"\3\2\2\2\u0b97\u0b99\5\u0190\u00c9\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3"+
		"\2\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b9c\5\u019c\u00cf\2\u0b9b\u0b9a\3\2"+
		"\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0161\3\2\2\2\u0b9d\u0b9f\5\u0166\u00b4"+
		"\2\u0b9e\u0ba0\5\u0292\u014a\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0\3\2\2\2"+
		"\u0ba0\u0163\3\2\2\2\u0ba1\u0ba2\7\u00a4\2\2\u0ba2\u0ba3\5\u0168\u00b5"+
		"\2\u0ba3\u0165\3\2\2\2\u0ba4\u0ba5\5\u02da\u016e\2\u0ba5\u0ba6\7\u020a"+
		"\2\2\u0ba6\u0ba7\7\u0214\2\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0baa\5\u020e\u0108"+
		"\2\u0ba9\u0ba4\3\2\2\2\u0ba9\u0ba8\3\2\2\2\u0baa\u0167\3\2\2\2\u0bab\u0bb0"+
		"\5\u016a\u00b6\2\u0bac\u0bad\7\u0217\2\2\u0bad\u0baf\5\u016a\u00b6\2\u0bae"+
		"\u0bac\3\2\2\2\u0baf\u0bb2\3\2\2\2\u0bb0\u0bae\3\2\2\2\u0bb0\u0bb1\3\2"+
		"\2\2\u0bb1\u0169\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb7\5\u016c\u00b7"+
		"\2\u0bb4\u0bb6\5\u016e\u00b8\2\u0bb5\u0bb4\3\2\2\2\u0bb6\u0bb9\3\2\2\2"+
		"\u0bb7\u0bb5\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u0bbc\3\2\2\2\u0bb9\u0bb7"+
		"\3\2\2\2\u0bba\u0bbd\5\u017a\u00be\2\u0bbb\u0bbd\5\u0186\u00c4\2\u0bbc"+
		"\u0bba\3\2\2\2\u0bbc\u0bbb\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u016b\3\2"+
		"\2\2\u0bbe\u0bc1\5\u01fc\u00ff\2\u0bbf\u0bc2\5\u017a\u00be\2\u0bc0\u0bc2"+
		"\5\u0186\u00c4\2\u0bc1\u0bbf\3\2\2\2\u0bc1\u0bc0\3\2\2\2\u0bc1\u0bc2\3"+
		"\2\2\2\u0bc2\u0bdb\3\2\2\2\u0bc3\u0bc4\7\u0211\2\2\u0bc4\u0bc8\5\u016a"+
		"\u00b6\2\u0bc5\u0bc7\5\u015c\u00af\2\u0bc6\u0bc5\3\2\2\2\u0bc7\u0bca\3"+
		"\2\2\2\u0bc8\u0bc6\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bcb\3\2\2\2\u0bca"+
		"\u0bc8\3\2\2\2\u0bcb\u0bce\7\u0212\2\2\u0bcc\u0bcf\5\u017a\u00be\2\u0bcd"+
		"\u0bcf\5\u0186\u00c4\2\u0bce\u0bcc\3\2\2\2\u0bce\u0bcd\3\2\2\2\u0bce\u0bcf"+
		"\3\2\2\2\u0bcf\u0bdb\3\2\2\2\u0bd0\u0bd1\7\u0124\2\2\u0bd1\u0bd2\7\u0211"+
		"\2\2\u0bd2\u0bd3\5\u01fc\u00ff\2\u0bd3\u0bd4\7\u0212\2\2\u0bd4\u0bdb\3"+
		"\2\2\2\u0bd5\u0bd8\5\u01fc\u00ff\2\u0bd6\u0bd9\5\u017a\u00be\2\u0bd7\u0bd9"+
		"\5\u0186\u00c4\2\u0bd8\u0bd6\3\2\2\2\u0bd8\u0bd7\3\2\2\2\u0bd8\u0bd9\3"+
		"\2\2\2\u0bd9\u0bdb\3\2\2\2\u0bda\u0bbe\3\2\2\2\u0bda\u0bc3\3\2\2\2\u0bda"+
		"\u0bd0\3\2\2\2\u0bda\u0bd5\3\2\2\2\u0bdb\u0bdf\3\2\2\2\u0bdc\u0bde\5\u0178"+
		"\u00bd\2\u0bdd\u0bdc\3\2\2\2\u0bde\u0be1\3\2\2\2\u0bdf\u0bdd\3\2\2\2\u0bdf"+
		"\u0be0\3\2\2\2\u0be0\u0be3\3\2\2\2\u0be1\u0bdf\3\2\2\2\u0be2\u0be4\5\u0294"+
		"\u014b\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u016d\3\2\2\2\u0be5"+
		"\u0be7\5\u0176\u00bc\2\u0be6\u0be5\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be9"+
		"\3\2\2\2\u0be8\u0bea\t*\2\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea"+
		"\u0bed\3\2\2\2\u0beb\u0bee\7\u00c1\2\2\u0bec\u0bee\5\u0174\u00bb\2\u0bed"+
		"\u0beb\3\2\2\2\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bef\3\2"+
		"\2\2\u0bef\u0bf0\7\u00d0\2\2\u0bf0\u0bf2\5\u016c\u00b7\2\u0bf1\u0bf3\5"+
		"\u0176\u00bc\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf8\3\2"+
		"\2\2\u0bf4\u0bf7\5\u0170\u00b9\2\u0bf5\u0bf7\5\u0172\u00ba\2\u0bf6\u0bf4"+
		"\3\2\2\2\u0bf6\u0bf5\3\2\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf8"+
		"\u0bf9\3\2\2\2\u0bf9\u016f\3\2\2\2\u0bfa\u0bf8\3\2\2\2\u0bfb\u0bfc\7\u0123"+
		"\2\2\u0bfc\u0bfd\5\u020a\u0106\2\u0bfd\u0171\3\2\2\2\u0bfe\u0bff\7\u01c0"+
		"\2\2\u0bff\u0c00\7\u0211\2\2\u0c00\u0c05\5\u02d8\u016d\2\u0c01\u0c02\7"+
		"\u0217\2\2\u0c02\u0c04\5\u02d8\u016d\2\u0c03\u0c01\3\2\2\2\u0c04\u0c07"+
		"\3\2\2\2\u0c05\u0c03\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06\u0c08\3\2\2\2\u0c07"+
		"\u0c05\3\2\2\2\u0c08\u0c09\7\u0212\2\2\u0c09\u0173\3\2\2\2\u0c0a\u0c0c"+
		"\t+\2\2\u0c0b\u0c0d\7\u012d\2\2\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2"+
		"\2\u0c0d\u0175\3\2\2\2\u0c0e\u0c0f\7\u0134\2\2\u0c0f\u0c1d\7,\2\2\u0c10"+
		"\u0c11\7\u0211\2\2\u0c11\u0c12\5\u015a\u00ae\2\u0c12\u0c13\7\u0212\2\2"+
		"\u0c13\u0c1e\3\2\2\2\u0c14\u0c1e\5\u0208\u0105\2\u0c15\u0c1a\5\u020e\u0108"+
		"\2\u0c16\u0c17\7\u0217\2\2\u0c17\u0c19\5\u020e\u0108\2\u0c18\u0c16\3\2"+
		"\2\2\u0c19\u0c1c\3\2\2\2\u0c1a\u0c18\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b"+
		"\u0c1e\3\2\2\2\u0c1c\u0c1a\3\2\2\2\u0c1d\u0c10\3\2\2\2\u0c1d\u0c14\3\2"+
		"\2\2\u0c1d\u0c15\3\2\2\2\u0c1e\u0177\3\2\2\2\u0c1f\u0c20\7\u01ca\2\2\u0c20"+
		"\u0c21\7\37\2\2\u0c21\u0c22\t,\2\2\u0c22\u0c28\5\u020e\u0108\2\u0c23\u0c24"+
		"\7\20\2\2\u0c24\u0c25\7\u011e\2\2\u0c25\u0c26\t-\2\2\u0c26\u0c28\5\u020e"+
		"\u0108\2\u0c27\u0c1f\3\2\2\2\u0c27\u0c23\3\2\2\2\u0c28\u0179\3\2\2\2\u0c29"+
		"\u0c2b\7\u013d\2\2\u0c2a\u0c2c\7\u01d6\2\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c"+
		"\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2e\7\u0211\2\2\u0c2e\u0c33\5\u017c"+
		"\u00bf\2\u0c2f\u0c30\7\u0217\2\2\u0c30\u0c32\5\u017c\u00bf\2\u0c31\u0c2f"+
		"\3\2\2\2\u0c32\u0c35\3\2\2\2\u0c33\u0c31\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34"+
		"\u0c36\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c36\u0c37\5\u017e\u00c0\2\u0c37\u0c38"+
		"\5\u0180\u00c1\2\u0c38\u0c39\7\u0212\2\2\u0c39\u017b\3\2\2\2\u0c3a\u0c3b"+
		"\5\u02b8\u015d\2\u0c3b\u0c3c\7\u0211\2\2\u0c3c\u0c3d\5\u020e\u0108\2\u0c3d"+
		"\u0c3f\7\u0212\2\2\u0c3e\u0c40\5\u0292\u014a\2\u0c3f\u0c3e\3\2\2\2\u0c3f"+
		"\u0c40\3\2\2\2\u0c40\u017d\3\2\2\2\u0c41\u0c4e\7\u009f\2\2\u0c42\u0c4f"+
		"\5\u02d8\u016d\2\u0c43\u0c44\7\u0211\2\2\u0c44\u0c49\5\u02d8\u016d\2\u0c45"+
		"\u0c46\7\u0217\2\2\u0c46\u0c48\5\u02d8\u016d\2\u0c47\u0c45\3\2\2\2\u0c48"+
		"\u0c4b\3\2\2\2\u0c49\u0c47\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u0c4c\3\2"+
		"\2\2\u0c4b\u0c49\3\2\2\2\u0c4c\u0c4d\7\u0212\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e"+
		"\u0c42\3\2\2\2\u0c4e\u0c43\3\2\2\2\u0c4f\u017f\3\2\2\2\u0c50\u0c51\7\u00b4"+
		"\2\2\u0c51\u0c63\7\u0211\2\2\u0c52\u0c64\5\u015a\u00ae\2\u0c53\u0c58\7"+
		"\r\2\2\u0c54\u0c55\7\u0217\2\2\u0c55\u0c57\7\r\2\2\u0c56\u0c54\3\2\2\2"+
		"\u0c57\u0c5a\3\2\2\2\u0c58\u0c56\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c64"+
		"\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5b\u0c60\5\u0182\u00c2\2\u0c5c\u0c5d\7"+
		"\u0217\2\2\u0c5d\u0c5f\5\u0182\u00c2\2\u0c5e\u0c5c\3\2\2\2\u0c5f\u0c62"+
		"\3\2\2\2\u0c60\u0c5e\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61\u0c64\3\2\2\2\u0c62"+
		"\u0c60\3\2\2\2\u0c63\u0c52\3\2\2\2\u0c63\u0c53\3\2\2\2\u0c63\u0c5b\3\2"+
		"\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c66\7\u0212\2\2\u0c66\u0181\3\2\2\2\u0c67"+
		"\u0c69\5\u0184\u00c3\2\u0c68\u0c6a\5\u0292\u014a\2\u0c69\u0c68\3\2\2\2"+
		"\u0c69\u0c6a\3\2\2\2\u0c6a\u0183\3\2\2\2\u0c6b\u0c6e\5\u020e\u0108\2\u0c6c"+
		"\u0c6e\5\u0208\u0105\2\u0c6d\u0c6b\3\2\2\2\u0c6d\u0c6c\3\2\2\2\u0c6e\u0185"+
		"\3\2\2\2\u0c6f\u0c72\7\u01b9\2\2\u0c70\u0c71\t.\2\2\u0c71\u0c73\7\u0119"+
		"\2\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74"+
		"\u0c81\7\u0211\2\2\u0c75\u0c82\5\u02d8\u016d\2\u0c76\u0c77\7\u0211\2\2"+
		"\u0c77\u0c7c\5\u02d8\u016d\2\u0c78\u0c79\7\u0217\2\2\u0c79\u0c7b\5\u02d8"+
		"\u016d\2\u0c7a\u0c78\3\2\2\2\u0c7b\u0c7e\3\2\2\2\u0c7c\u0c7a\3\2\2\2\u0c7c"+
		"\u0c7d\3\2\2\2\u0c7d\u0c7f\3\2\2\2\u0c7e\u0c7c\3\2\2\2\u0c7f\u0c80\7\u0212"+
		"\2\2\u0c80\u0c82\3\2\2\2\u0c81\u0c75\3\2\2\2\u0c81\u0c76\3\2\2\2\u0c82"+
		"\u0c83\3\2\2\2\u0c83\u0c84\5\u017e\u00c0\2\u0c84\u0c85\5\u0188\u00c5\2"+
		"\u0c85\u0c86\7\u0212\2\2\u0c86\u0187\3\2\2\2\u0c87\u0c88\7\u00b4\2\2\u0c88"+
		"\u0c89\7\u0211\2\2\u0c89\u0c8e\5\u018a\u00c6\2\u0c8a\u0c8b\7\u0217\2\2"+
		"\u0c8b\u0c8d\5\u018a\u00c6\2\u0c8c\u0c8a\3\2\2\2\u0c8d\u0c90\3\2\2\2\u0c8e"+
		"\u0c8c\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u0c91\3\2\2\2\u0c90\u0c8e\3\2"+
		"\2\2\u0c91\u0c92\7\u0212\2\2\u0c92\u0189\3\2\2\2\u0c93\u0ca0\5\u02d8\u016d"+
		"\2\u0c94\u0c95\7\u0211\2\2\u0c95\u0c9a\5\u02d8\u016d\2\u0c96\u0c97\7\u0217"+
		"\2\2\u0c97\u0c99\5\u02d8\u016d\2\u0c98\u0c96\3\2\2\2\u0c99\u0c9c\3\2\2"+
		"\2\u0c9a\u0c98\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9d\3\2\2\2\u0c9c\u0c9a"+
		"\3\2\2\2\u0c9d\u0c9e\7\u0212\2\2\u0c9e\u0ca0\3\2\2\2\u0c9f\u0c93\3\2\2"+
		"\2\u0c9f\u0c94\3\2\2\2\u0ca0\u0cb0\3\2\2\2\u0ca1\u0cae\7\20\2\2\u0ca2"+
		"\u0caf\5\u02fa\u017e\2\u0ca3\u0ca4\7\u0211\2\2\u0ca4\u0ca9\5\u02fa\u017e"+
		"\2\u0ca5\u0ca6\7\u0217\2\2\u0ca6\u0ca8\5\u02fa\u017e\2\u0ca7\u0ca5\3\2"+
		"\2\2\u0ca8\u0cab\3\2\2\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa"+
		"\u0cac\3\2\2\2\u0cab\u0ca9\3\2\2\2\u0cac\u0cad\7\u0212\2\2\u0cad\u0caf"+
		"\3\2\2\2\u0cae\u0ca2\3\2\2\2\u0cae\u0ca3\3\2\2\2\u0caf\u0cb1\3\2\2\2\u0cb0"+
		"\u0ca1\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u018b\3\2\2\2\u0cb2\u0cb3\7H"+
		"\2\2\u0cb3\u0cb5\7,\2\2\u0cb4\u0cb6\7\u010e\2\2\u0cb5\u0cb4\3\2\2\2\u0cb5"+
		"\u0cb6\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb9\5\u020a\u0106\2\u0cb8\u0cba"+
		"\5\u018e\u00c8\2\u0cb9\u0cb8\3\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cc4\3"+
		"\2\2\2\u0cbb\u0cbc\5\u018e\u00c8\2\u0cbc\u0cbd\7H\2\2\u0cbd\u0cbf\7,\2"+
		"\2\u0cbe\u0cc0\7\u010e\2\2\u0cbf\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0"+
		"\u0cc1\3\2\2\2\u0cc1\u0cc2\5\u020a\u0106\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cb2"+
		"\3\2\2\2\u0cc3\u0cbb\3\2\2\2\u0cc4\u018d\3\2\2\2\u0cc5\u0cc6\7\u018e\2"+
		"\2\u0cc6\u0cc7\7\u01d2\2\2\u0cc7\u0cc8\5\u020a\u0106\2\u0cc8\u018f\3\2"+
		"\2\2\u0cc9\u0cca\7\u00a9\2\2\u0cca\u0ccb\7,\2\2\u0ccb\u0cd0\5\u0192\u00ca"+
		"\2\u0ccc\u0ccd\7\u0217\2\2\u0ccd\u0ccf\5\u0192\u00ca\2\u0cce\u0ccc\3\2"+
		"\2\2\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1"+
		"\u0cd4\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd5\5\u019a\u00ce\2\u0cd4\u0cd3"+
		"\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0ce4\3\2\2\2\u0cd6\u0ce1\5\u019a\u00ce"+
		"\2\u0cd7\u0cd8\7\u00a9\2\2\u0cd8\u0cd9\7,\2\2\u0cd9\u0cde\5\u0192\u00ca"+
		"\2\u0cda\u0cdb\7\u0217\2\2\u0cdb\u0cdd\5\u0192\u00ca\2\u0cdc\u0cda\3\2"+
		"\2\2\u0cdd\u0ce0\3\2\2\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf"+
		"\u0ce2\3\2\2\2\u0ce0\u0cde\3\2\2\2\u0ce1\u0cd7\3\2\2\2\u0ce1\u0ce2\3\2"+
		"\2\2\u0ce2\u0ce4\3\2\2\2\u0ce3\u0cc9\3\2\2\2\u0ce3\u0cd6\3\2\2\2\u0ce4"+
		"\u0191\3\2\2\2\u0ce5\u0ce9\5\u0196\u00cc\2\u0ce6\u0ce9\5\u0194\u00cb\2"+
		"\u0ce7\u0ce9\5\u020e\u0108\2\u0ce8\u0ce5\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce8"+
		"\u0ce7\3\2\2\2\u0ce9\u0193\3\2\2\2\u0cea\u0ceb\t/\2\2\u0ceb\u0cec\7\u0211"+
		"\2\2\u0cec\u0cf1\5\u0198\u00cd\2\u0ced\u0cee\7\u0217\2\2\u0cee\u0cf0\5"+
		"\u0198\u00cd\2\u0cef\u0ced\3\2\2\2\u0cf0\u0cf3\3\2\2\2\u0cf1\u0cef\3\2"+
		"\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\3\2\2\2\u0cf3\u0cf1\3\2\2\2\u0cf4"+
		"\u0cf5\7\u0212\2\2\u0cf5\u0195\3\2\2\2\u0cf6\u0cf7\7\u00ab\2\2\u0cf7\u0cf8"+
		"\7\u017c\2\2\u0cf8\u0cf9\7\u0211\2\2\u0cf9\u0cfe\5\u0198\u00cd\2\u0cfa"+
		"\u0cfb\7\u0217\2\2\u0cfb\u0cfd\5\u0198\u00cd\2\u0cfc\u0cfa\3\2\2\2\u0cfd"+
		"\u0d00\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d01\3\2"+
		"\2\2\u0d00\u0cfe\3\2\2\2\u0d01\u0d02\7\u0212\2\2\u0d02\u0197\3\2\2\2\u0d03"+
		"\u0d07\5\u0194\u00cb\2\u0d04\u0d07\5\u0208\u0105\2\u0d05\u0d07\5\u020e"+
		"\u0108\2\u0d06\u0d03\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d06\u0d05\3\2\2\2\u0d07"+
		"\u0199\3\2\2\2\u0d08\u0d09\7\u00ad\2\2\u0d09\u0d0a\5\u020a\u0106\2\u0d0a"+
		"\u019b\3\2\2\2\u0d0b\u0d0f\7\u00fa\2\2\u0d0c\u0d0e\5\u019e\u00d0\2\u0d0d"+
		"\u0d0c\3\2\2\2\u0d0e\u0d11\3\2\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10\3\2"+
		"\2\2\u0d10\u0d13\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d12\u0d14\5\u01a0\u00d1"+
		"\2\u0d13\u0d12\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d18\3\2\2\2\u0d15\u0d17"+
		"\5\u01a2\u00d2\2\u0d16\u0d15\3\2\2\2\u0d17\u0d1a\3\2\2\2\u0d18\u0d16\3"+
		"\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a\u0d18\3\2\2\2\u0d1b"+
		"\u0d1c\5\u01a4\u00d3\2\u0d1c\u019d\3\2\2\2\u0d1d\u0d1e\t\60\2\2\u0d1e"+
		"\u0d26\7\u0102\2\2\u0d1f\u0d23\7\u01b7\2\2\u0d20\u0d24\7u\2\2\u0d21\u0d22"+
		"\7\u0184\2\2\u0d22\u0d24\7\u0152\2\2\u0d23\u0d20\3\2\2\2\u0d23\u0d21\3"+
		"\2\2\2\u0d24\u0d26\3\2\2\2\u0d25\u0d1d\3\2\2\2\u0d25\u0d1f\3\2\2\2\u0d26"+
		"\u019f\3\2\2\2\u0d27\u0d28\7\u015c\2\2\u0d28\u0d29\t\61\2\2\u0d29\u0d2a"+
		"\7\u0166\2\2\u0d2a\u01a1\3\2\2\2\u0d2b\u0d2c\7\u0152\2\2\u0d2c\u0d2d\5"+
		"\u02b4\u015b\2\u0d2d\u0d2e\7\u0123\2\2\u0d2e\u0d2f\7\u0211\2\2\u0d2f\u0d30"+
		"\5\u015a\u00ae\2\u0d30\u0d31\7\u0212\2\2\u0d31\u0d35\5\u01a6\u00d4\2\u0d32"+
		"\u0d34\5\u019e\u00d0\2\u0d33\u0d32\3\2\2\2\u0d34\u0d37\3\2\2\2\u0d35\u0d33"+
		"\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u01a3\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d38"+
		"\u0d39\7\u00ea\2\2\u0d39\u0d3b\5\u02b6\u015c\2\u0d3a\u0d38\3\2\2\2\u0d3a"+
		"\u0d3b\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d40\5\u01a6\u00d4\2\u0d3d\u0d3f"+
		"\5\u019e\u00d0\2\u0d3e\u0d3d\3\2\2\2\u0d3f\u0d42\3\2\2\2\u0d40\u0d3e\3"+
		"\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d40\3\2\2\2\u0d43"+
		"\u0d44\5\u01ae\u00d8\2\u0d44\u01a5\3\2\2\2\u0d45\u0d47\5\u01a8\u00d5\2"+
		"\u0d46\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d49"+
		"\7u\2\2\u0d49\u0d4a\7,\2\2\u0d4a\u0d4b\5\u01aa\u00d6\2\u0d4b\u0d4c\7\u00f0"+
		"\2\2\u0d4c\u0d4d\5\u01aa\u00d6\2\u0d4d\u01a7\3\2\2\2\u0d4e\u0d4f\7\u0134"+
		"\2\2\u0d4f\u0d50\7,\2\2\u0d50\u0d51\5\u01aa\u00d6\2\u0d51\u01a9\3\2\2"+
		"\2\u0d52\u0d53\7\u0211\2\2\u0d53\u0d58\5\u01ac\u00d7\2\u0d54\u0d55\7\u0217"+
		"\2\2\u0d55\u0d57\5\u01ac\u00d7\2\u0d56\u0d54\3\2\2\2\u0d57\u0d5a\3\2\2"+
		"\2\u0d58\u0d56\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d5b\3\2\2\2\u0d5a\u0d58"+
		"\3\2\2\2\u0d5b\u0d5c\7\u0212\2\2\u0d5c\u01ab\3\2\2\2\u0d5d\u0d5f\5\u020e"+
		"\u0108\2\u0d5e\u0d60\5\u0294\u014b\2\u0d5f\u0d5e\3\2\2\2\u0d5f\u0d60\3"+
		"\2\2\2\u0d60\u01ad\3\2\2\2\u0d61\u0d63\5\u01b0\u00d9\2\u0d62\u0d61\3\2"+
		"\2\2\u0d62\u0d63\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d65\7\u0211\2\2\u0d65"+
		"\u0d6a\5\u01b2\u00da\2\u0d66\u0d67\7\u0217\2\2\u0d67\u0d69\5\u01b2\u00da"+
		"\2\u0d68\u0d66\3\2\2\2\u0d69\u0d6c\3\2\2\2\u0d6a\u0d68\3\2\2\2\u0d6a\u0d6b"+
		"\3\2\2\2\u0d6b\u0d6d\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6d\u0d6e\7\u0212\2"+
		"\2\u0d6e\u01af\3\2\2\2\u0d6f\u0d75\7\u0167\2\2\u0d70\u0d76\7\u01bb\2\2"+
		"\u0d71\u0d73\7\u01bd\2\2\u0d72\u0d74\7\t\2\2\u0d73\u0d72\3\2\2\2\u0d73"+
		"\u0d74\3\2\2\2\u0d74\u0d76\3\2\2\2\u0d75\u0d70\3\2\2\2\u0d75\u0d71\3\2"+
		"\2\2\u0d75\u0d76\3\2\2\2\u0d76\u0d79\3\2\2\2\u0d77\u0d78\t\62\2\2\u0d78"+
		"\u0d7a\7\u0129\2\2\u0d79\u0d77\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d7c"+
		"\3\2\2\2\u0d7b\u0d7d\5\u01b6\u00dc\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3"+
		"\2\2\2\u0d7d\u01b1\3\2\2\2\u0d7e\u0d84\7\u01bb\2\2\u0d7f\u0d81\7\u01bd"+
		"\2\2\u0d80\u0d82\7\t\2\2\u0d81\u0d80\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82"+
		"\u0d84\3\2\2\2\u0d83\u0d7e\3\2\2\2\u0d83\u0d7f\3\2\2\2\u0d83\u0d84\3\2"+
		"\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d87\5\u01b4\u00db\2\u0d86\u0d88\5\u01ba"+
		"\u00de\2\u0d87\u0d86\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89"+
		"\u0d8a\7\u0228\2\2\u0d8a\u0d8b\5\u020e\u0108\2\u0d8b\u01b3\3\2\2\2\u0d8c"+
		"\u0d8d\5\u0234\u011b\2\u0d8d\u01b5\3\2\2\2\u0d8e\u0d8f\7\u00ce\2\2\u0d8f"+
		"\u0d90\7\u0211\2\2\u0d90\u0d91\5\u020e\u0108\2\u0d91\u0d93\7\u0212\2\2"+
		"\u0d92\u0d94\5\u01b8\u00dd\2\u0d93\u0d92\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94"+
		"\u01b7\3\2\2\2\u0d95\u0d96\7\u01ba\2\2\u0d96\u0d97\7\u0211\2\2\u0d97\u0d98"+
		"\5\u020a\u0106\2\u0d98\u0d99\7\u0212\2\2\u0d99\u01b9\3\2\2\2\u0d9a\u0d9c"+
		"\7\u0129\2\2\u0d9b\u0d9d\7\u0181\2\2\u0d9c\u0d9b\3\2\2\2\u0d9c\u0d9d\3"+
		"\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0d9f\7,\2\2\u0d9f\u0da4\5\u01bc\u00df"+
		"\2\u0da0\u0da1\7\u0217\2\2\u0da1\u0da3\5\u01bc\u00df\2\u0da2\u0da0\3\2"+
		"\2\2\u0da3\u0da6\3\2\2\2\u0da4\u0da2\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5"+
		"\u01bb\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da7\u0da9\5\u020e\u0108\2\u0da8\u0daa"+
		"\t\63\2\2\u0da9\u0da8\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dad\3\2\2\2"+
		"\u0dab\u0dac\7\u0119\2\2\u0dac\u0dae\t\64\2\2\u0dad\u0dab\3\2\2\2\u0dad"+
		"\u0dae\3\2\2\2\u0dae\u01bd\3\2\2\2\u0daf\u0db0\7\u009f\2\2\u0db0\u0db2"+
		"\7\u01bb\2\2\u0db1\u0db3\5\u01c0\u00e1\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3"+
		"\3\2\2\2\u0db3\u0db5\3\2\2\2\u0db4\u0db6\5\u01c2\u00e2\2\u0db5\u0db4\3"+
		"\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u01bf\3\2\2\2\u0db7\u0db8\7\u011e\2\2"+
		"\u0db8\u0dbd\5\u02d8\u016d\2\u0db9\u0dba\7\u0217\2\2\u0dba\u0dbc\5\u02d8"+
		"\u016d\2\u0dbb\u0db9\3\2\2\2\u0dbc\u0dbf\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd"+
		"\u0dbe\3\2\2\2\u0dbe\u01c1\3\2\2\2\u0dbf\u0dbd\3\2\2\2\u0dc0\u0dc1\7\u0186"+
		"\2\2\u0dc1\u0dc6\7\u00e2\2\2\u0dc2\u0dc6\7\u0117\2\2\u0dc3\u0dc4\7\u01cb"+
		"\2\2\u0dc4\u0dc6\5\u020e\u0108\2\u0dc5\u0dc0\3\2\2\2\u0dc5\u0dc2\3\2\2"+
		"\2\u0dc5\u0dc3\3\2\2\2\u0dc6\u01c3\3\2\2\2\u0dc7\u0dc8\7\u01bb\2\2\u0dc8"+
		"\u0dc9\5\u01f2\u00fa\2\u0dc9\u0dcb\5\u01c6\u00e4\2\u0dca\u0dcc\5\u0298"+
		"\u014d\2\u0dcb\u0dca\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dce\3\2\2\2\u0dcd"+
		"\u0dcf\5\u01f4\u00fb\2\u0dce\u0dcd\3\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u0dd1"+
		"\3\2\2\2\u0dd0\u0dd2\5\u01f6\u00fc\2\u0dd1\u0dd0\3\2\2\2\u0dd1\u0dd2\3"+
		"\2\2\2\u0dd2\u01c5\3\2\2\2\u0dd3\u0de3\7\u017b\2\2\u0dd4\u0dd9\5\u01c8"+
		"\u00e5\2\u0dd5\u0dd6\7\u0217\2\2\u0dd6\u0dd8\5\u01c8\u00e5\2\u0dd7\u0dd5"+
		"\3\2\2\2\u0dd8\u0ddb\3\2\2\2\u0dd9\u0dd7\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0de4\3\2\2\2\u0ddb\u0dd9\3\2\2\2\u0ddc\u0ddd\7\u01c2\2\2\u0ddd\u0dde"+
		"\7\u0211\2\2\u0dde\u0ddf\5\u0302\u0182\2\u0ddf\u0de0\7\u0212\2\2\u0de0"+
		"\u0de1\7\u0228\2\2\u0de1\u0de2\5\u020e\u0108\2\u0de2\u0de4\3\2\2\2\u0de3"+
		"\u0dd4\3\2\2\2\u0de3\u0ddc\3\2\2\2\u0de4\u01c7\3\2\2\2\u0de5\u0de6\5\u02d8"+
		"\u016d\2\u0de6\u0de7\7\u0228\2\2\u0de7\u0de8\5\u020e\u0108\2\u0de8\u0df7"+
		"\3\2\2\2\u0de9\u0dea\7\u0211\2\2\u0dea\u0def\5\u02d8\u016d\2\u0deb\u0dec"+
		"\7\u0217\2\2\u0dec\u0dee\5\u02d8\u016d\2\u0ded\u0deb\3\2\2\2\u0dee\u0df1"+
		"\3\2\2\2\u0def\u0ded\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df2\3\2\2\2\u0df1"+
		"\u0def\3\2\2\2\u0df2\u0df3\7\u0212\2\2\u0df3\u0df4\7\u0228\2\2\u0df4\u0df5"+
		"\5\u015a\u00ae\2\u0df5\u0df7\3\2\2\2\u0df6\u0de5\3\2\2\2\u0df6\u0de9\3"+
		"\2\2\2\u0df7\u01c9\3\2\2\2\u0df8\u0dfa\7q\2\2\u0df9\u0dfb\7\u00a4\2\2"+
		"\u0dfa\u0df9\3\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfe"+
		"\5\u01f2\u00fa\2\u0dfd\u0dff\5\u0298\u014d\2\u0dfe\u0dfd\3\2\2\2\u0dfe"+
		"\u0dff\3\2\2\2\u0dff\u0e01\3\2\2\2\u0e00\u0e02\5\u01f4\u00fb\2\u0e01\u0e00"+
		"\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e04\3\2\2\2\u0e03\u0e05\5\u01f6\u00fc"+
		"\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05\u01cb\3\2\2\2\u0e06\u0e09"+
		"\7\u00c3\2\2\u0e07\u0e0a\5\u01ce\u00e8\2\u0e08\u0e0a\5\u01d0\u00e9\2\u0e09"+
		"\u0e07\3\2\2\2\u0e09\u0e08\3\2\2\2\u0e0a\u01cd\3\2\2\2\u0e0b\u0e11\5\u01da"+
		"\u00ee\2\u0e0c\u0e0e\5\u01dc\u00ef\2\u0e0d\u0e0f\5\u01f4\u00fb\2\u0e0e"+
		"\u0e0d\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e12\3\2\2\2\u0e10\u0e12\5\u0150"+
		"\u00a9\2\u0e11\u0e0c\3\2\2\2\u0e11\u0e10\3\2\2\2\u0e12\u0e14\3\2\2\2\u0e13"+
		"\u0e15\5\u01f6\u00fc\2\u0e14\u0e13\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u01cf"+
		"\3\2\2\2\u0e16\u0e18\7\t\2\2\u0e17\u0e19\5\u01d2\u00ea\2\u0e18\u0e17\3"+
		"\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0e18\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b"+
		"\u0e1e\3\2\2\2\u0e1c\u0e1e\5\u01d4\u00eb\2\u0e1d\u0e16\3\2\2\2\u0e1d\u0e1c"+
		"\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e20\5\u0150\u00a9\2\u0e20\u01d1\3"+
		"\2\2\2\u0e21\u0e23\5\u01da\u00ee\2\u0e22\u0e24\5\u01dc\u00ef\2\u0e23\u0e22"+
		"\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e26\3\2\2\2\u0e25\u0e27\5\u01f6\u00fc"+
		"\2\u0e26\u0e25\3\2\2\2\u0e26\u0e27\3\2\2\2\u0e27\u01d3\3\2\2\2\u0e28\u0e2a"+
		"\t\65\2\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2c\3\2\2\2"+
		"\u0e2b\u0e2d\5\u01d6\u00ec\2\u0e2c\u0e2b\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e"+
		"\u0e2c\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e31\3\2\2\2\u0e30\u0e32\5\u01d8"+
		"\u00ed\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u01d5\3\2\2\2\u0e33"+
		"\u0e34\7\u01ce\2\2\u0e34\u0e35\5\u020a\u0106\2\u0e35\u0e37\7\u01a0\2\2"+
		"\u0e36\u0e38\5\u01d2\u00ea\2\u0e37\u0e36\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39"+
		"\u0e37\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u01d7\3\2\2\2\u0e3b\u0e3d\7\177"+
		"\2\2\u0e3c\u0e3e\5\u01d2\u00ea\2\u0e3d\u0e3c\3\2\2\2\u0e3e\u0e3f\3\2\2"+
		"\2\u0e3f\u0e3d\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u01d9\3\2\2\2\u0e41\u0e42"+
		"\7\u00ca\2\2\u0e42\u0e4e\5\u01f2\u00fa\2\u0e43\u0e44\7\u0211\2\2\u0e44"+
		"\u0e49\5\u02d8\u016d\2\u0e45\u0e46\7\u0217\2\2\u0e46\u0e48\5\u02d8\u016d"+
		"\2\u0e47\u0e45\3\2\2\2\u0e48\u0e4b\3\2\2\2\u0e49\u0e47\3\2\2\2\u0e49\u0e4a"+
		"\3\2\2\2\u0e4a\u0e4c\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4c\u0e4d\7\u0212\2"+
		"\2\u0e4d\u0e4f\3\2\2\2\u0e4e\u0e43\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u01db"+
		"\3\2\2\2\u0e50\u0e51\7\u01c3\2\2\u0e51\u0e52\5\u0208\u0105\2\u0e52\u01dd"+
		"\3\2\2\2\u0e53\u0e54\7\u00f3\2\2\u0e54\u0e55\7\u00ca\2\2\u0e55\u0e57\5"+
		"\u02da\u016e\2\u0e56\u0e58\5\u0294\u014b\2\u0e57\u0e56\3\2\2\2\u0e57\u0e58"+
		"\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59\u0e5a\7\u01c0\2\2\u0e5a\u0e5b\5\u01e8"+
		"\u00f5\2\u0e5b\u0e5c\7\u0123\2\2\u0e5c\u0e5d\7\u0211\2\2\u0e5d\u0e5e\5"+
		"\u020a\u0106\2\u0e5e\u0e67\7\u0212\2\2\u0e5f\u0e61\5\u01e0\u00f1\2\u0e60"+
		"\u0e62\5\u01e6\u00f4\2\u0e61\u0e60\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e68"+
		"\3\2\2\2\u0e63\u0e65\5\u01e6\u00f4\2\u0e64\u0e66\5\u01e0\u00f1\2\u0e65"+
		"\u0e64\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e68\3\2\2\2\u0e67\u0e5f\3\2"+
		"\2\2\u0e67\u0e63\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0e6a\3\2\2\2\u0e69"+
		"\u0e6b\5\u01f6\u00fc\2\u0e6a\u0e69\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u01df"+
		"\3\2\2\2\u0e6c\u0e6d\7\u01ce\2\2\u0e6d\u0e6e\7\u00ec\2\2\u0e6e\u0e6f\7"+
		"\u01a0\2\2\u0e6f\u0e70\7\u01bb\2\2\u0e70\u0e71\7\u017b\2\2\u0e71\u0e76"+
		"\5\u01e2\u00f2\2\u0e72\u0e73\7\u0217\2\2\u0e73\u0e75\5\u01e2\u00f2\2\u0e74"+
		"\u0e72\3\2\2\2\u0e75\u0e78\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e76\u0e77\3\2"+
		"\2\2\u0e77\u0e7a\3\2\2\2\u0e78\u0e76\3\2\2\2\u0e79\u0e7b\5\u0298\u014d"+
		"\2\u0e7a\u0e79\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7d\3\2\2\2\u0e7c\u0e7e"+
		"\5\u01e4\u00f3\2\u0e7d\u0e7c\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u01e1\3"+
		"\2\2\2\u0e7f\u0e80\5\u02d8\u016d\2\u0e80\u0e81\7\u0228\2\2\u0e81\u0e82"+
		"\5\u020e\u0108\2\u0e82\u01e3\3\2\2\2\u0e83\u0e84\7q\2\2\u0e84\u0e85\5"+
		"\u0298\u014d\2\u0e85\u01e5\3\2\2\2\u0e86\u0e87\7\u01ce\2\2\u0e87\u0e88"+
		"\7\u0116\2\2\u0e88\u0e89\7\u00ec\2\2\u0e89\u0e8a\7\u01a0\2\2\u0e8a\u0e96"+
		"\7\u00c3\2\2\u0e8b\u0e8c\7\u0211\2\2\u0e8c\u0e91\5\u02d8\u016d\2\u0e8d"+
		"\u0e8e\7\u0217\2\2\u0e8e\u0e90\5\u02d8\u016d\2\u0e8f\u0e8d\3\2\2\2\u0e90"+
		"\u0e93\3\2\2\2\u0e91\u0e8f\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e94\3\2"+
		"\2\2\u0e93\u0e91\3\2\2\2\u0e94\u0e95\7\u0212\2\2\u0e95\u0e97\3\2\2\2\u0e96"+
		"\u0e8b\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0e99\7\u01c3"+
		"\2\2\u0e99\u0e9b\5\u0208\u0105\2\u0e9a\u0e9c\5\u0298\u014d\2\u0e9b\u0e9a"+
		"\3\2\2\2\u0e9b\u0e9c\3\2\2\2\u0e9c\u01e7\3\2\2\2\u0e9d\u0ea3\5\u02da\u016e"+
		"\2\u0e9e\u0e9f\7\u0211\2\2\u0e9f\u0ea0\5\u0150\u00a9\2\u0ea0\u0ea1\7\u0212"+
		"\2\2\u0ea1\u0ea3\3\2\2\2\u0ea2\u0e9d\3\2\2\2\u0ea2\u0e9e\3\2\2\2\u0ea3"+
		"\u0ea5\3\2\2\2\u0ea4\u0ea6\5\u0294\u014b\2\u0ea5\u0ea4\3\2\2\2\u0ea5\u0ea6"+
		"\3\2\2\2\u0ea6\u01e9\3\2\2\2\u0ea7\u0ea8\7\u00e1\2\2\u0ea8\u0ea9\7\u019d"+
		"\2\2\u0ea9\u0eae\5\u01ee\u00f8\2\u0eaa\u0eab\7\u0217\2\2\u0eab\u0ead\5"+
		"\u01ee\u00f8\2\u0eac\u0eaa\3\2\2\2\u0ead\u0eb0\3\2\2\2\u0eae\u0eac\3\2"+
		"\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u0eb1\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb1"+
		"\u0eb2\7\u00b4\2\2\u0eb2\u0eb3\5\u01f0\u00f9\2\u0eb3\u0eb5\7\u00f9\2\2"+
		"\u0eb4\u0eb6\5\u01ec\u00f7\2\u0eb5\u0eb4\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6"+
		"\u01eb\3\2\2\2\u0eb7\u0eb8\7\u01cb\2\2\u0eb8\u0ebb\5\u020e\u0108\2\u0eb9"+
		"\u0ebb\7\u0117\2\2\u0eba\u0eb7\3\2\2\2\u0eba\u0eb9\3\2\2\2\u0ebb\u01ed"+
		"\3\2\2\2\u0ebc\u0ebe\5\u02da\u016e\2\u0ebd\u0ebf\5\u0290\u0149\2\u0ebe"+
		"\u0ebd\3\2\2\2\u0ebe\u0ebf\3\2\2\2\u0ebf\u01ef\3\2\2\2\u0ec0\u0ec1\7\u0164"+
		"\2\2\u0ec1\u0ecd\7\u017e\2\2\u0ec2\u0ec3\7\u0164\2\2\u0ec3\u0ecd\7\u008d"+
		"\2\2\u0ec4\u0ec6\7\u017e\2\2\u0ec5\u0ec7\7\u01bb\2\2\u0ec6\u0ec5\3\2\2"+
		"\2\u0ec6\u0ec7\3\2\2\2\u0ec7\u0ecd\3\2\2\2\u0ec8\u0ec9\7\u017e\2\2\u0ec9"+
		"\u0eca\7\u0164\2\2\u0eca\u0ecd\7\u008d\2\2\u0ecb\u0ecd\7\u008d\2\2\u0ecc"+
		"\u0ec0\3\2\2\2\u0ecc\u0ec2\3\2\2\2\u0ecc\u0ec4\3\2\2\2\u0ecc\u0ec8\3\2"+
		"\2\2\u0ecc\u0ecb\3\2\2\2\u0ecd\u01f1\3\2\2\2\u0ece\u0ed5\5\u01fc\u00ff"+
		"\2\u0ecf\u0ed0\7\u0124\2\2\u0ed0\u0ed1\7\u0211\2\2\u0ed1\u0ed2\5\u01fc"+
		"\u00ff\2\u0ed2\u0ed3\7\u0212\2\2\u0ed3\u0ed5\3\2\2\2\u0ed4\u0ece\3\2\2"+
		"\2\u0ed4\u0ecf\3\2\2\2\u0ed5\u0ed7\3\2\2\2\u0ed6\u0ed8\5\u0294\u014b\2"+
		"\u0ed7\u0ed6\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u01f3\3\2\2\2\u0ed9\u0eda"+
		"\t#\2\2\u0eda\u0edf\5\u020e\u0108\2\u0edb\u0edc\7\u0217\2\2\u0edc\u0ede"+
		"\5\u020e\u0108\2\u0edd\u0edb\3\2\2\2\u0ede\u0ee1\3\2\2\2\u0edf\u0edd\3"+
		"\2\2\2\u0edf\u0ee0\3\2\2\2\u0ee0\u0ee2\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee2"+
		"\u0ee3\5\u029c\u014f\2\u0ee3\u01f5\3\2\2\2\u0ee4\u0ee5\7\u00e3\2\2\u0ee5"+
		"\u0ee7\7\u0086\2\2\u0ee6\u0ee8\5\u01f8\u00fd\2\u0ee7\u0ee6\3\2\2\2\u0ee7"+
		"\u0ee8\3\2\2\2\u0ee8\u0eea\3\2\2\2\u0ee9\u0eeb\5\u0210\u0109\2\u0eea\u0ee9"+
		"\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0eed\3\2\2\2\u0eec\u0eee\5\u01fa\u00fe"+
		"\2\u0eed\u0eec\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee\u01f7\3\2\2\2\u0eef\u0ef0"+
		"\7\u00ca\2\2\u0ef0\u0ef1\5\u02da\u016e\2\u0ef1\u01f9\3\2\2\2\u0ef2\u0ef3"+
		"\7\u0154\2\2\u0ef3\u0ef6\7\u00de\2\2\u0ef4\u0ef7\7\u01b8\2\2\u0ef5\u0ef7"+
		"\5\u0210\u0109\2\u0ef6\u0ef4\3\2\2\2\u0ef6\u0ef5\3\2\2\2\u0ef7\u01fb\3"+
		"\2\2\2\u0ef8\u0f05\5\u01fe\u0100\2\u0ef9\u0efa\7\u0211\2\2\u0efa\u0efc"+
		"\5\u0150\u00a9\2\u0efb\u0efd\5\u0200\u0101\2\u0efc\u0efb\3\2\2\2\u0efc"+
		"\u0efd\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0eff\7\u0212\2\2\u0eff\u0f05"+
		"\3\2\2\2\u0f00\u0f02\5\u02da\u016e\2\u0f01\u0f03\5\u0202\u0102\2\u0f02"+
		"\u0f01\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f05\3\2\2\2\u0f04\u0ef8\3\2"+
		"\2\2\u0f04\u0ef9\3\2\2\2\u0f04\u0f00\3\2\2\2\u0f05\u01fd\3\2\2\2\u0f06"+
		"\u0f13\t\66\2\2\u0f07\u0f08\7\u0211\2\2\u0f08\u0f09\5\u015a\u00ae\2\u0f09"+
		"\u0f0a\7\u0212\2\2\u0f0a\u0f14\3\2\2\2\u0f0b\u0f0c\7\u0211\2\2\u0f0c\u0f0d"+
		"\5\u020e\u0108\2\u0f0d\u0f11\7\u0212\2\2\u0f0e\u0f0f\7\u0211\2\2\u0f0f"+
		"\u0f10\7\u0215\2\2\u0f10\u0f12\7\u0212\2\2\u0f11\u0f0e\3\2\2\2\u0f11\u0f12"+
		"\3\2\2\2\u0f12\u0f14\3\2\2\2\u0f13\u0f07\3\2\2\2\u0f13\u0f0b\3\2\2\2\u0f14"+
		"\u01ff\3\2\2\2\u0f15\u0f1e\7\u01d2\2\2\u0f16\u0f17\7\u014c\2\2\u0f17\u0f1f"+
		"\7\u0124\2\2\u0f18\u0f19\79\2\2\u0f19\u0f1c\7\u0126\2\2\u0f1a\u0f1b\7"+
		"K\2\2\u0f1b\u0f1d\5\u02bc\u015f\2\u0f1c\u0f1a\3\2\2\2\u0f1c\u0f1d\3\2"+
		"\2\2\u0f1d\u0f1f\3\2\2\2\u0f1e\u0f16\3\2\2\2\u0f1e\u0f18\3\2\2\2\u0f1f"+
		"\u0201\3\2\2\2\u0f20\u0f22\7\u0168\2\2\u0f21\u0f23\7%\2\2\u0f22\u0f21"+
		"\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f25\7\u0211\2"+
		"\2\u0f25\u0f28\5\u020e\u0108\2\u0f26\u0f27\7\u0217\2\2\u0f27\u0f29\5\u020e"+
		"\u0108\2\u0f28\u0f26\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a"+
		"\u0f2c\7\u0212\2\2\u0f2b\u0f2d\5\u0204\u0103\2\u0f2c\u0f2b\3\2\2\2\u0f2c"+
		"\u0f2d\3\2\2\2\u0f2d\u0203\3\2\2\2\u0f2e\u0f2f\7\u0171\2\2\u0f2f\u0f30"+
		"\7\u0211\2\2\u0f30\u0f31\5\u020e\u0108\2\u0f31\u0f32\7\u0212\2\2\u0f32"+
		"\u0205\3\2\2\2\u0f33\u0f34\7\\\2\2\u0f34\u0f35\7\u0211\2\2\u0f35\u0f36"+
		"\5\u015a\u00ae\2\u0f36\u0f37\7\u0212\2\2\u0f37\u0207\3\2\2\2\u0f38\u0f3a"+
		"\7\u0211\2\2\u0f39\u0f3b\5\u020e\u0108\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b"+
		"\3\2\2\2\u0f3b\u0f40\3\2\2\2\u0f3c\u0f3d\7\u0217\2\2\u0f3d\u0f3f\5\u020e"+
		"\u0108\2\u0f3e\u0f3c\3\2\2\2\u0f3f\u0f42\3\2\2\2\u0f40\u0f3e\3\2\2\2\u0f40"+
		"\u0f41\3\2\2\2\u0f41\u0f43\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f43\u0f44\7\u0212"+
		"\2\2\u0f44\u0209\3\2\2\2\u0f45\u0f46\5\u020e\u0108\2\u0f46\u020b\3\2\2"+
		"\2\u0f47\u0f48\5\u020e\u0108\2\u0f48\u020d\3\2\2\2\u0f49\u0f53\5\u0206"+
		"\u0104\2\u0f4a\u0f4f\5\u0212\u010a\2\u0f4b\u0f4c\7\u0127\2\2\u0f4c\u0f4e"+
		"\5\u0212\u010a\2\u0f4d\u0f4b\3\2\2\2\u0f4e\u0f51\3\2\2\2\u0f4f\u0f4d\3"+
		"\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u0f53\3\2\2\2\u0f51\u0f4f\3\2\2\2\u0f52"+
		"\u0f49\3\2\2\2\u0f52\u0f4a\3\2\2\2\u0f53\u020f\3\2\2\2\u0f54\u0f55\5\u020e"+
		"\u0108\2\u0f55\u0211\3\2\2\2\u0f56\u0f5b\5\u0214\u010b\2\u0f57\u0f58\7"+
		"\f\2\2\u0f58\u0f5a\5\u0214\u010b\2\u0f59\u0f57\3\2\2\2\u0f5a\u0f5d\3\2"+
		"\2\2\u0f5b\u0f59\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0213\3\2\2\2\u0f5d"+
		"\u0f5b\3\2\2\2\u0f5e\u0f5f\7\u0116\2\2\u0f5f\u0f62\5\u0214\u010b\2\u0f60"+
		"\u0f62\5\u0216\u010c\2\u0f61\u0f5e\3\2\2\2\u0f61\u0f60\3\2\2\2\u0f62\u0215"+
		"\3\2\2\2\u0f63\u0f85\5\u0218\u010d\2\u0f64\u0f66\7\u00cc\2\2\u0f65\u0f67"+
		"\7\u0116\2\2\u0f66\u0f65\3\2\2\2\u0f66\u0f67\3\2\2\2\u0f67\u0f81\3\2\2"+
		"\2\u0f68\u0f82\7\u0118\2\2\u0f69\u0f82\7\u00ff\2\2\u0f6a\u0f82\7\u0145"+
		"\2\2\u0f6b\u0f82\7\u00bd\2\2\u0f6c\u0f6d\7\4\2\2\u0f6d\u0f82\7\u017b\2"+
		"\2\u0f6e\u0f82\7\u0081\2\2\u0f6f\u0f71\7\u011e\2\2\u0f70\u0f72\7\u01b3"+
		"\2\2\u0f71\u0f70\3\2\2\2\u0f71\u0f72\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73"+
		"\u0f75\7\u0211\2\2\u0f74\u0f76\7\u0124\2\2\u0f75\u0f74\3\2\2\2\u0f75\u0f76"+
		"\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f7c\5\u02ea\u0176\2\u0f78\u0f79\7"+
		"\u0217\2\2\u0f79\u0f7b\5\u02ea\u0176\2\u0f7a\u0f78\3\2\2\2\u0f7b\u0f7e"+
		"\3\2\2\2\u0f7c\u0f7a\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7f\3\2\2\2\u0f7e"+
		"\u0f7c\3\2\2\2\u0f7f\u0f80\7\u0212\2\2\u0f80\u0f82\3\2\2\2\u0f81\u0f68"+
		"\3\2\2\2\u0f81\u0f69\3\2\2\2\u0f81\u0f6a\3\2\2\2\u0f81\u0f6b\3\2\2\2\u0f81"+
		"\u0f6c\3\2\2\2\u0f81\u0f6e\3\2\2\2\u0f81\u0f6f\3\2\2\2\u0f82\u0f84\3\2"+
		"\2\2\u0f83\u0f64\3\2\2\2\u0f84\u0f87\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f85"+
		"\u0f86\3\2\2\2\u0f86\u0217\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f88\u0f8f\5\u021c"+
		"\u010f\2\u0f89\u0f8b\5\u021a\u010e\2\u0f8a\u0f8c\7\u011e\2\2\u0f8b\u0f8a"+
		"\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u0f8e\5\u0228\u0115"+
		"\2\u0f8e\u0f90\3\2\2\2\u0f8f\u0f89\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0219"+
		"\3\2\2\2\u0f91\u0f92\t\67\2\2\u0f92\u021b\3\2\2\2\u0f93\u0f9f\5\u021e"+
		"\u0110\2\u0f94\u0f9b\7\u0228\2\2\u0f95\u0f9b\5\u0306\u0184\2\u0f96\u0f9b"+
		"\7\u021f\2\2\u0f97\u0f9b\7\u0225\2\2\u0f98\u0f9b\5\u030a\u0186\2\u0f99"+
		"\u0f9b\5\u0308\u0185\2\u0f9a\u0f94\3\2\2\2\u0f9a\u0f95\3\2\2\2\u0f9a\u0f96"+
		"\3\2\2\2\u0f9a\u0f97\3\2\2\2\u0f9a\u0f98\3\2\2\2\u0f9a\u0f99\3\2\2\2\u0f9b"+
		"\u0f9c\3\2\2\2\u0f9c\u0f9e\5\u021e\u0110\2\u0f9d\u0f9a\3\2\2\2\u0f9e\u0fa1"+
		"\3\2\2\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u021d\3\2\2\2\u0fa1"+
		"\u0f9f\3\2\2\2\u0fa2\u0fb1\5\u0228\u0115\2\u0fa3\u0fa5\7\u0116\2\2\u0fa4"+
		"\u0fa3\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5\u0faf\3\2\2\2\u0fa6\u0fa7\7\u00b4"+
		"\2\2\u0fa7\u0fb0\5\u0224\u0113\2\u0fa8\u0fa9\7\37\2\2\u0fa9\u0fb0\5\u0226"+
		"\u0114\2\u0faa\u0fab\5\u0220\u0111\2\u0fab\u0fad\5\u0228\u0115\2\u0fac"+
		"\u0fae\5\u0222\u0112\2\u0fad\u0fac\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0fb0"+
		"\3\2\2\2\u0faf\u0fa6\3\2\2\2\u0faf\u0fa8\3\2\2\2\u0faf\u0faa\3\2\2\2\u0fb0"+
		"\u0fb2\3\2\2\2\u0fb1\u0fa4\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u021f\3\2"+
		"\2\2\u0fb3\u0fb4\t8\2\2\u0fb4\u0221\3\2\2\2\u0fb5\u0fb6\7\u0087\2\2\u0fb6"+
		"\u0fb7\5\u0228\u0115\2\u0fb7\u0223\3\2\2\2\u0fb8\u0fb9\7\u0211\2\2\u0fb9"+
		"\u0fba\5\u015a\u00ae\2\u0fba\u0fbb\7\u0212\2\2\u0fbb\u0fcb\3\2\2\2\u0fbc"+
		"\u0fbd\7\u0211\2\2\u0fbd\u0fc2\5\u022a\u0116\2\u0fbe\u0fbf\7\u0217\2\2"+
		"\u0fbf\u0fc1\5\u022a\u0116\2\u0fc0\u0fbe\3\2\2\2\u0fc1\u0fc4\3\2\2\2\u0fc2"+
		"\u0fc0\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc5\3\2\2\2\u0fc4\u0fc2\3\2"+
		"\2\2\u0fc5\u0fc6\7\u0212\2\2\u0fc6\u0fcb\3\2\2\2\u0fc7\u0fcb\5\u02fa\u017e"+
		"\2\u0fc8\u0fcb\5\u02f2\u017a\2\u0fc9\u0fcb\5\u02f4\u017b\2\u0fca\u0fb8"+
		"\3\2\2\2\u0fca\u0fbc\3\2\2\2\u0fca\u0fc7\3\2\2\2\u0fca\u0fc8\3\2\2\2\u0fca"+
		"\u0fc9\3\2\2\2\u0fcb\u0225\3\2\2\2\u0fcc\u0fcd\5\u0228\u0115\2\u0fcd\u0fce"+
		"\7\f\2\2\u0fce\u0fcf\5\u0228\u0115\2\u0fcf\u0227\3\2\2\2\u0fd0\u0fd6\5"+
		"\u022c\u0117\2\u0fd1\u0fd2\5\u030c\u0187\2\u0fd2\u0fd3\5\u022c\u0117\2"+
		"\u0fd3\u0fd5\3\2\2\2\u0fd4\u0fd1\3\2\2\2\u0fd5\u0fd8\3\2\2\2\u0fd6\u0fd4"+
		"\3\2\2\2\u0fd6\u0fd7\3\2\2\2\u0fd7\u0229\3\2\2\2\u0fd8\u0fd6\3\2\2\2\u0fd9"+
		"\u0fda\5\u0228\u0115\2\u0fda\u022b\3\2\2\2\u0fdb\u0fe0\5\u022e\u0118\2"+
		"\u0fdc\u0fdd\t9\2\2\u0fdd\u0fdf\5\u022e\u0118\2\u0fde\u0fdc\3\2\2\2\u0fdf"+
		"\u0fe2\3\2\2\2\u0fe0\u0fde\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u022d\3\2"+
		"\2\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe8\5\u0230\u0119\2\u0fe4\u0fe5\t:\2"+
		"\2\u0fe5\u0fe7\5\u0230\u0119\2\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fea\3\2\2\2"+
		"\u0fe8\u0fe6\3\2\2\2\u0fe8\u0fe9\3\2\2\2\u0fe9\u022f\3\2\2\2\u0fea\u0fe8"+
		"\3\2\2\2\u0feb\u0ff4\5\u0234\u011b\2\u0fec\u0ff1\7\23\2\2\u0fed\u0ff2"+
		"\7\u00e0\2\2\u0fee\u0fef\7\u01a1\2\2\u0fef\u0ff0\7\u01e8\2\2\u0ff0\u0ff2"+
		"\5\u022a\u0116\2\u0ff1\u0fed\3\2\2\2\u0ff1\u0fee\3\2\2\2\u0ff2\u0ff5\3"+
		"\2\2\2\u0ff3\u0ff5\5\u0232\u011a\2\u0ff4\u0fec\3\2\2\2\u0ff4\u0ff3\3\2"+
		"\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0231\3\2\2\2\u0ff6\u0ffb\7b\2\2\u0ff7"+
		"\u0ff8\7\u0211\2\2\u0ff8\u0ff9\5\u022a\u0116\2\u0ff9\u0ffa\7\u0212\2\2"+
		"\u0ffa\u0ffc\3\2\2\2\u0ffb\u0ff7\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0ffd"+
		"\3\2\2\2\u0ffd\u0ffe\7\u01aa\2\2\u0ffe\u1003\7\u016f\2\2\u0fff\u1000\7"+
		"\u0211\2\2\u1000\u1001\5\u022a\u0116\2\u1001\u1002\7\u0212\2\2\u1002\u1004"+
		"\3\2\2\2\u1003\u0fff\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u100f\3\2\2\2\u1005"+
		"\u100a\7\u01e5\2\2\u1006\u1007\7\u0211\2\2\u1007\u1008\5\u022a\u0116\2"+
		"\u1008\u1009\7\u0212\2\2\u1009\u100b\3\2\2\2\u100a\u1006\3\2\2\2\u100a"+
		"\u100b\3\2\2\2\u100b\u100c\3\2\2\2\u100c\u100d\7\u01aa\2\2\u100d\u100f"+
		"\7\u00fc\2\2\u100e\u0ff6\3\2\2\2\u100e\u1005\3\2\2\2\u100f\u0233\3\2\2"+
		"\2\u1010\u1015\5\u0240\u0121\2\u1011\u1012\7\u0229\2\2\u1012\u1013\5\u0236"+
		"\u011c\2\u1013\u1014\7\u022a\2\2\u1014\u1016\3\2\2\2\u1015\u1011\3\2\2"+
		"\2\u1015\u1016\3\2\2\2\u1016\u0235\3\2\2\2\u1017\u101a\7\r\2\2\u1018\u101a"+
		"\5\u020c\u0107\2\u1019\u1017\3\2\2\2\u1019\u1018\3\2\2\2\u101a\u1022\3"+
		"\2\2\2\u101b\u101e\7\u0217\2\2\u101c\u101f\7\r\2\2\u101d\u101f\5\u020c"+
		"\u0107\2\u101e\u101c\3\2\2\2\u101e\u101d\3\2\2\2\u101f\u1021\3\2\2\2\u1020"+
		"\u101b\3\2\2\2\u1021\u1024\3\2\2\2\u1022\u1020\3\2\2\2\u1022\u1023\3\2"+
		"\2\2\u1023\u102f\3\2\2\2\u1024\u1022\3\2\2\2\u1025\u102a\5\u0238\u011d"+
		"\2\u1026\u1027\7\u0217\2\2\u1027\u1029\5\u0238\u011d\2\u1028\u1026\3\2"+
		"\2\2\u1029\u102c\3\2\2\2\u102a\u1028\3\2\2\2\u102a\u102b\3\2\2\2\u102b"+
		"\u102f\3\2\2\2\u102c\u102a\3\2\2\2\u102d\u102f\5\u023e\u0120\2\u102e\u1019"+
		"\3\2\2\2\u102e\u1025\3\2\2\2\u102e\u102d\3\2\2\2\u102f\u0237\3\2\2\2\u1030"+
		"\u1031\7\u009f\2\2\u1031\u103e\5\u02d8\u016d\2\u1032\u1033\7\u00b4\2\2"+
		"\u1033\u103f\5\u0208\u0105\2\u1034\u1036\5\u023a\u011e\2\u1035\u1034\3"+
		"\2\2\2\u1035\u1036\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u1038\7\u00a4\2\2"+
		"\u1038\u1039\5\u020e\u0108\2\u1039\u103a\7\u01aa\2\2\u103a\u103b\5\u020e"+
		"\u0108\2\u103b\u103c\5\u023c\u011f\2\u103c\u103d\5\u020e\u0108\2\u103d"+
		"\u103f\3\2\2\2\u103e\u1032\3\2\2\2\u103e\u1035\3\2\2\2\u103f\u0239\3\2"+
		"\2\2\u1040\u1041\7\u00da\2\2\u1041\u1042\5\u020e\u0108\2\u1042\u023b\3"+
		"\2\2\2\u1043\u1044\t;\2\2\u1044\u023d\3\2\2\2\u1045\u1046\7\u009f\2\2"+
		"\u1046\u1047\7\u0211\2\2\u1047\u104c\5\u02d8\u016d\2\u1048\u1049\7\u0217"+
		"\2\2\u1049\u104b\5\u02d8\u016d\2\u104a\u1048\3\2\2\2\u104b\u104e\3\2\2"+
		"\2\u104c\u104a\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104f\3\2\2\2\u104e\u104c"+
		"\3\2\2\2\u104f\u1050\7\u0212\2\2\u1050\u1051\7\u00b4\2\2\u1051\u105e\7"+
		"\u0211\2\2\u1052\u105f\5\u015a\u00ae\2\u1053\u1054\7\u0211\2\2\u1054\u1059"+
		"\5\u0208\u0105\2\u1055\u1056\7\u0217\2\2\u1056\u1058\5\u0208\u0105\2\u1057"+
		"\u1055\3\2\2\2\u1058\u105b\3\2\2\2\u1059\u1057\3\2\2\2\u1059\u105a\3\2"+
		"\2\2\u105a\u105c\3\2\2\2\u105b\u1059\3\2\2\2\u105c\u105d\7\u0212\2\2\u105d"+
		"\u105f\3\2\2\2\u105e\u1052\3\2\2\2\u105e\u1053\3\2\2\2\u105f\u1060\3\2"+
		"\2\2\u1060\u1061\7\u0212\2\2\u1061\u023f\3\2\2\2\u1062\u1063\7\u0216\2"+
		"\2\u1063\u1075\5\u0240\u0121\2\u1064\u1065\7\u0215\2\2\u1065\u1075\5\u0240"+
		"\u0121\2\u1066\u1067\7\u0146\2\2\u1067\u1075\5\u0240\u0121\2\u1068\u1069"+
		"\7I\2\2\u1069\u1075\5\u0240\u0121\2\u106a\u106b\7\u0107\2\2\u106b\u1075"+
		"\5\u0240\u0121\2\u106c\u106d\7x\2\2\u106d\u1075\5\u0240\u0121\2\u106e"+
		"\u106f\7\t\2\2\u106f\u1075\5\u0240\u0121\2\u1070\u1075\5\u0242\u0122\2"+
		"\u1071\u1075\5\u0254\u012b\2\u1072\u1075\5\u0256\u012c\2\u1073\u1075\5"+
		"\u024e\u0128\2\u1074\u1062\3\2\2\2\u1074\u1064\3\2\2\2\u1074\u1066\3\2"+
		"\2\2\u1074\u1068\3\2\2\2\u1074\u106a\3\2\2\2\u1074\u106c\3\2\2\2\u1074"+
		"\u106e\3\2\2\2\u1074\u1070\3\2\2\2\u1074\u1071\3\2\2\2\u1074\u1072\3\2"+
		"\2\2\u1074\u1073\3\2\2\2\u1075\u0241\3\2\2\2\u1076\u1079\5\u0248\u0125"+
		"\2\u1077\u1079\5\u0244\u0123\2\u1078\u1076\3\2\2\2\u1078\u1077\3\2\2\2"+
		"\u1079\u0243\3\2\2\2\u107a\u107c\5\u02be\u0160\2\u107b\u107a\3\2\2\2\u107b"+
		"\u107c\3\2\2\2\u107c\u107d\3\2\2\2\u107d\u107e\7\63\2\2\u107e\u1080\5"+
		"\u024e\u0128\2\u107f\u1081\5\u0246\u0124\2\u1080\u107f\3\2\2\2\u1081\u1082"+
		"\3\2\2\2\u1082\u1080\3\2\2\2\u1082\u1083\3\2\2\2\u1083\u1085\3\2\2\2\u1084"+
		"\u1086\5\u024c\u0127\2\u1085\u1084\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u1087"+
		"\3\2\2\2\u1087\u1089\7\u0084\2\2\u1088\u108a\7\63\2\2\u1089\u1088\3\2"+
		"\2\2\u1089\u108a\3\2\2\2\u108a\u108c\3\2\2\2\u108b\u108d\5\u02be\u0160"+
		"\2\u108c\u108b\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u0245\3\2\2\2\u108e\u108f"+
		"\7\u01ce\2\2\u108f\u1090\5\u0210\u0109\2\u1090\u1093\7\u01a0\2\2\u1091"+
		"\u1094\5\u00fa~\2\u1092\u1094\5\u0210\u0109\2\u1093\u1091\3\2\2\2\u1093"+
		"\u1092\3\2\2\2\u1094\u0247\3\2\2\2\u1095\u1097\5\u02be\u0160\2\u1096\u1095"+
		"\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\3\2\2\2\u1098\u109a\7\63\2\2"+
		"\u1099\u109b\5\u024a\u0126\2\u109a\u1099\3\2\2\2\u109b\u109c\3\2\2\2\u109c"+
		"\u109a\3\2\2\2\u109c\u109d\3\2\2\2\u109d\u109f\3\2\2\2\u109e\u10a0\5\u024c"+
		"\u0127\2\u109f\u109e\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1"+
		"\u10a3\7\u0084\2\2\u10a2\u10a4\7\63\2\2\u10a3\u10a2\3\2\2\2\u10a3\u10a4"+
		"\3\2\2\2\u10a4\u10a6\3\2\2\2\u10a5\u10a7\5\u02be\u0160\2\u10a6\u10a5\3"+
		"\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u0249\3\2\2\2\u10a8\u10a9\7\u01ce\2\2"+
		"\u10a9\u10aa\5\u020c\u0107\2\u10aa\u10ad\7\u01a0\2\2\u10ab\u10ae\5\u00fa"+
		"~\2\u10ac\u10ae\5\u0210\u0109\2\u10ad\u10ab\3\2\2\2\u10ad\u10ac\3\2\2"+
		"\2\u10ae\u024b\3\2\2\2\u10af\u10b2\7\177\2\2\u10b0\u10b3\5\u00fa~\2\u10b1"+
		"\u10b3\5\u0210\u0109\2\u10b2\u10b0\3\2\2\2\u10b2\u10b1\3\2\2\2\u10b3\u024d"+
		"\3\2\2\2\u10b4\u10b5\5\u02f8\u017d\2\u10b5\u10b6\5\u030e\u0188\2\u10b6"+
		"\u10c9\3\2\2\2\u10b7\u10c9\5\u02f2\u017a\2\u10b8\u10c9\5\u02fa\u017e\2"+
		"\u10b9\u10c9\5\u02f4\u017b\2\u10ba\u10c6\7\u0211\2\2\u10bb\u10bc\5\u015a"+
		"\u00ae\2\u10bc\u10c0\7\u0212\2\2\u10bd\u10bf\5\u015c\u00af\2\u10be\u10bd"+
		"\3\2\2\2\u10bf\u10c2\3\2\2\2\u10c0\u10be\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1"+
		"\u10c7\3\2\2\2\u10c2\u10c0\3\2\2\2\u10c3\u10c4\5\u0250\u0129\2\u10c4\u10c5"+
		"\7\u0212\2\2\u10c5\u10c7\3\2\2\2\u10c6\u10bb\3\2\2\2\u10c6\u10c3\3\2\2"+
		"\2\u10c7\u10c9\3\2\2\2\u10c8\u10b4\3\2\2\2\u10c8\u10b7\3\2\2\2\u10c8\u10b8"+
		"\3\2\2\2\u10c8\u10b9\3\2\2\2\u10c8\u10ba\3\2\2\2\u10c9\u024f\3\2\2\2\u10ca"+
		"\u10cc\5\u020e\u0108\2\u10cb\u10cd\5\u0252\u012a\2\u10cc\u10cb\3\2\2\2"+
		"\u10cc\u10cd\3\2\2\2\u10cd\u0251\3\2\2\2\u10ce\u10cf\7\u0217\2\2\u10cf"+
		"\u10d4\5\u020e\u0108\2\u10d0\u10d1\7\u0217\2\2\u10d1\u10d3\5\u020e\u0108"+
		"\2\u10d2\u10d0\3\2\2\2\u10d3\u10d6\3\2\2\2\u10d4\u10d2\3\2\2\2\u10d4\u10d5"+
		"\3\2\2\2\u10d5\u0253\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d7\u10e0\t<\2\2\u10d8"+
		"\u10d9\7\u0211\2\2\u10d9\u10da\5\u015a\u00ae\2\u10da\u10db\7\u0212\2\2"+
		"\u10db\u10e1\3\2\2\2\u10dc\u10dd\7\u0211\2\2\u10dd\u10de\5\u0210\u0109"+
		"\2\u10de\u10df\7\u0212\2\2\u10df\u10e1\3\2\2\2\u10e0\u10d8\3\2\2\2\u10e0"+
		"\u10dc\3\2\2\2\u10e1\u0255\3\2\2\2\u10e2\u10e3\5\u0258\u012d\2\u10e3\u10e5"+
		"\5\u02e2\u0172\2\u10e4\u10e6\5\u025e\u0130\2\u10e5\u10e4\3\2\2\2\u10e5"+
		"\u10e6\3\2\2\2\u10e6\u121a\3\2\2\2\u10e7\u10e8\5\u0310\u0189\2\u10e8\u10ea"+
		"\5\u02e4\u0173\2\u10e9\u10eb\5\u0266\u0134\2\u10ea\u10e9\3\2\2\2\u10ea"+
		"\u10eb\3\2\2\2\u10eb\u121a\3\2\2\2\u10ec\u10ed\7U\2\2\u10ed\u10f3\7\u0211"+
		"\2\2\u10ee\u10f4\7\u0214\2\2\u10ef\u10f1\t)\2\2\u10f0\u10ef\3\2\2\2\u10f0"+
		"\u10f1\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f4\5\u022a\u0116\2\u10f3\u10ee"+
		"\3\2\2\2\u10f3\u10f0\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f7\7\u0212\2"+
		"\2\u10f6\u10f8\5\u025e\u0130\2\u10f7\u10f6\3\2\2\2\u10f7\u10f8\3\2\2\2"+
		"\u10f8\u121a\3\2\2\2\u10f9\u10fa\t=\2\2\u10fa\u1101\7\u0211\2\2\u10fb"+
		"\u10fc\7\u00fd\2\2\u10fc\u10fd\7\u0211\2\2\u10fd\u10fe\5\u015a\u00ae\2"+
		"\u10fe\u10ff\7\u0212\2\2\u10ff\u1102\3\2\2\2\u1100\u1102\5\u022a\u0116"+
		"\2\u1101\u10fb\3\2\2\2\u1101\u1100\3\2\2\2\u1102\u1103\3\2\2\2\u1103\u1104"+
		"\7\20\2\2\u1104\u1105\5\u02ea\u0176\2\u1105\u1106\7\u0212\2\2\u1106\u121a"+
		"\3\2\2\2\u1107\u1108\7:\2\2\u1108\u1109\7\u0211\2\2\u1109\u110a\5\u022a"+
		"\u0116\2\u110a\u110b\7\u01c0\2\2\u110b\u110c\7\u0104\2\2\u110c\u110d\7"+
		"\u0212\2\2\u110d\u121a\3\2\2\2\u110e\u110f\7?\2\2\u110f\u1111\7\u0211"+
		"\2\2\u1110\u1112\t>\2\2\u1111\u1110\3\2\2\2\u1111\u1112\3\2\2\2\u1112"+
		"\u1113\3\2\2\2\u1113\u1115\5\u022a\u0116\2\u1114\u1116\5\u026a\u0136\2"+
		"\u1115\u1114\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u1118"+
		"\7\u0212\2\2\u1118\u121a\3\2\2\2\u1119\u111a\5\u025a\u012e\2\u111a\u111c"+
		"\5\u02e0\u0171\2\u111b\u111d\5\u026c\u0137\2\u111c\u111b\3\2\2\2\u111d"+
		"\u111e\3\2\2\2\u111e\u111c\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u121a\3\2"+
		"\2\2\u1120\u1121\7j\2\2\u1121\u1122\7\u0211\2\2\u1122\u1124\5\u022a\u0116"+
		"\2\u1123\u1125\t?\2\2\u1124\u1123\3\2\2\2\u1124\u1125\3\2\2\2\u1125\u1126"+
		"\3\2\2\2\u1126\u1127\7\u0212\2\2\u1127\u121a\3\2\2\2\u1128\u1129\7\u0093"+
		"\2\2\u1129\u112a\7\u0211\2\2\u112a\u112b\5\u0310\u0189\2\u112b\u112c\7"+
		"\u00a4\2\2\u112c\u112d\5\u022a\u0116\2\u112d\u112e\7\u0212\2\2\u112e\u121a"+
		"\3\2\2\2\u112f\u1130\t@\2\2\u1130\u1132\5\u02e2\u0172\2\u1131\u1133\5"+
		"\u02e6\u0174\2\u1132\u1131\3\2\2\2\u1132\u1133\3\2\2\2\u1133\u1134\3\2"+
		"\2\2\u1134\u1135\5\u025e\u0130\2\u1135\u121a\3\2\2\2\u1136\u1137\5\u025c"+
		"\u012f\2\u1137\u1138\7\u0211\2\2\u1138\u113d\5\u0210\u0109\2\u1139\u113a"+
		"\7\u0217\2\2\u113a\u113c\5\u0210\u0109\2\u113b\u1139\3\2\2\2\u113c\u113f"+
		"\3\2\2\2\u113d\u113b\3\2\2\2\u113d\u113e\3\2\2\2\u113e\u1141\3\2\2\2\u113f"+
		"\u113d\3\2\2\2\u1140\u1142\5\u026e\u0138\2\u1141\u1140\3\2\2\2\u1141\u1142"+
		"\3\2\2\2\u1142\u1144\3\2\2\2\u1143\u1145\5\u0266\u0134\2\u1144\u1143\3"+
		"\2\2\2\u1144\u1145\3\2\2\2\u1145\u1146\3\2\2\2\u1146\u1147\7\u0212\2\2"+
		"\u1147\u121a\3\2\2\2\u1148\u1149\7\u01ad\2\2\u1149\u114a\7\u0211\2\2\u114a"+
		"\u114d\5\u0210\u0109\2\u114b\u114c\7\u01c0\2\2\u114c\u114e\tA\2\2\u114d"+
		"\u114b\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1153\3\2\2\2\u114f\u1150\7\u0217"+
		"\2\2\u1150\u1152\5\u0210\u0109\2\u1151\u114f\3\2\2\2\u1152\u1155\3\2\2"+
		"\2\u1153\u1151\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1156\3\2\2\2\u1155\u1153"+
		"\3\2\2\2\u1156\u1157\7\u0212\2\2\u1157\u121a\3\2\2\2\u1158\u1159\7\u01ae"+
		"\2\2\u1159\u115a\7\u0211\2\2\u115a\u115b\5\u0210\u0109\2\u115b\u115d\7"+
		"\20\2\2\u115c\u115e\7\u0151\2\2\u115d\u115c\3\2\2\2\u115d\u115e\3\2\2"+
		"\2\u115e\u115f\3\2\2\2\u115f\u1160\5\u02ea\u0176\2\u1160\u1161\7\u0212"+
		"\2\2\u1161\u121a\3\2\2\2\u1162\u1163\7\u01b0\2\2\u1163\u116b\7\u0211\2"+
		"\2\u1164\u1166\tB\2\2\u1165\u1164\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u1168"+
		"\3\2\2\2\u1167\u1169\5\u0300\u0181\2\u1168\u1167\3\2\2\2\u1168\u1169\3"+
		"\2\2\2\u1169\u116a\3\2\2\2\u116a\u116c\7\u00a4\2\2\u116b\u1165\3\2\2\2"+
		"\u116b\u116c\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u116e\5\u022a\u0116\2\u116e"+
		"\u116f\7\u0212\2\2\u116f\u121a\3\2\2\2\u1170\u1171\7\u01d7\2\2\u1171\u1172"+
		"\7\u0211\2\2\u1172\u1174\5\u0210\u0109\2\u1173\u1175\5\u01ba\u00de\2\u1174"+
		"\u1173\3\2\2\2\u1174\u1175\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u1179\7\u0212"+
		"\2\2\u1177\u1178\7\u020a\2\2\u1178\u117a\5\u02f6\u017c\2\u1179\u1177\3"+
		"\2\2\2\u1179\u117a\3\2\2\2\u117a\u121a\3\2\2\2\u117b\u117c\tC\2\2\u117c"+
		"\u117d\7\u0211\2\2\u117d\u1182\5\u027a\u013e\2\u117e\u117f\7\u0217\2\2"+
		"\u117f\u1181\5\u027a\u013e\2\u1180\u117e\3\2\2\2\u1181\u1184\3\2\2\2\u1182"+
		"\u1180\3\2\2\2\u1182\u1183\3\2\2\2\u1183\u1185\3\2\2\2\u1184\u1182\3\2"+
		"\2\2\u1185\u1188\7\u0212\2\2\u1186\u1187\7\u020a\2\2\u1187\u1189\5\u02f6"+
		"\u017c\2\u1188\u1186\3\2\2\2\u1188\u1189\3\2\2\2\u1189\u121a\3\2\2\2\u118a"+
		"\u118b\7\u01db\2\2\u118b\u118d\7\u0211\2\2\u118c\u118e\tD\2\2\u118d\u118c"+
		"\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u1190\3\2\2\2\u118f\u1191\tE\2\2\u1190"+
		"\u118f\3\2\2\2\u1190\u1191\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u1195\5\u0210"+
		"\u0109\2\u1193\u1194\7\u0217\2\2\u1194\u1196\5\u0272\u013a\2\u1195\u1193"+
		"\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u119e\3\2\2\2\u1197\u1198\7\u0217\2"+
		"\2\u1198\u119a\5\u0210\u0109\2\u1199\u119b\5\u0292\u014a\2\u119a\u1199"+
		"\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u119d\3\2\2\2\u119c\u1197\3\2\2\2\u119d"+
		"\u11a0\3\2\2\2\u119e\u119c\3\2\2\2\u119e\u119f\3\2\2\2\u119f\u11a1\3\2"+
		"\2\2\u11a0\u119e\3\2\2\2\u11a1\u11a4\7\u0212\2\2\u11a2\u11a3\7\u020a\2"+
		"\2\u11a3\u11a5\5\u02f6\u017c\2\u11a4\u11a2\3\2\2\2\u11a4\u11a5\3\2\2\2"+
		"\u11a5\u121a\3\2\2\2\u11a6\u11a7\7\u01dc\2\2\u11a7\u11a8\7\u0211\2\2\u11a8"+
		"\u11aa\5\u0210\u0109\2\u11a9\u11ab\5\u0270\u0139\2\u11aa\u11a9\3\2\2\2"+
		"\u11aa\u11ab\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11ad\7\u0212\2\2\u11ad"+
		"\u121a\3\2\2\2\u11ae\u11af\7\u01df\2\2\u11af\u11b0\7\u0211\2\2\u11b0\u11b1"+
		"\tF\2\2\u11b1\u11b3\5\u022a\u0116\2\u11b2\u11b4\7\u01cd\2\2\u11b3\u11b2"+
		"\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b8\7\u0212\2"+
		"\2\u11b6\u11b7\7\u020a\2\2\u11b7\u11b9\5\u02f6\u017c\2\u11b8\u11b6\3\2"+
		"\2\2\u11b8\u11b9\3\2\2\2\u11b9\u121a\3\2\2\2\u11ba\u11bb\7\u01e0\2\2\u11bb"+
		"\u11c0\7\u0211\2\2\u11bc\u11bd\7\u00fe\2\2\u11bd\u11c1\5\u0302\u0182\2"+
		"\u11be\u11bf\7\u0088\2\2\u11bf\u11c1\5\u022a\u0116\2\u11c0\u11bc\3\2\2"+
		"\2\u11c0\u11be\3\2\2\2\u11c1\u11c4\3\2\2\2\u11c2\u11c3\7\u0217\2\2\u11c3"+
		"\u11c5\5\u022a\u0116\2\u11c4\u11c2\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5\u11c6"+
		"\3\2\2\2\u11c6\u11c9\7\u0212\2\2\u11c7\u11c8\7\u020a\2\2\u11c8\u11ca\5"+
		"\u02f6\u017c\2\u11c9\u11c7\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u121a\3\2"+
		"\2\2\u11cb\u11cc\7\u01e1\2\2\u11cc\u11cd\7\u0211\2\2\u11cd\u11cf\5\u022a"+
		"\u0116\2\u11ce\u11d0\5\u0270\u0139\2\u11cf\u11ce\3\2\2\2\u11cf\u11d0\3"+
		"\2\2\2\u11d0\u11d1\3\2\2\2\u11d1\u11d2\7\u015d\2\2\u11d2\u11d6\7N\2\2"+
		"\u11d3\u11d4\7\u0118\2\2\u11d4\u11d5\7\u0123\2\2\u11d5\u11d7\7\u0081\2"+
		"\2\u11d6\u11d3\3\2\2\2\u11d6\u11d7\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11db"+
		"\7\u0212\2\2\u11d9\u11da\7\u020a\2\2\u11da\u11dc\5\u02f6\u017c\2\u11db"+
		"\u11d9\3\2\2\2\u11db\u11dc\3\2\2\2\u11dc\u121a\3\2\2\2\u11dd\u11de\7\u01e2"+
		"\2\2\u11de\u11df\7\u0211\2\2\u11df\u11e0\5\u022a\u0116\2\u11e0\u11e3\5"+
		"\u027c\u013f\2\u11e1\u11e2\7\u0217\2\2\u11e2\u11e4\5\u027e\u0140\2\u11e3"+
		"\u11e1\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e8\7\u0212"+
		"\2\2\u11e6\u11e7\7\u020a\2\2\u11e7\u11e9\5\u02f6\u017c\2\u11e8\u11e6\3"+
		"\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u121a\3\2\2\2\u11ea\u11eb\7\u01e3\2\2"+
		"\u11eb\u11ec\7\u0211\2\2\u11ec\u11ed\tF\2\2\u11ed\u11f0\5\u022a\u0116"+
		"\2\u11ee\u11ef\7\20\2\2\u11ef\u11f1\5\u02ea\u0176\2\u11f0\u11ee\3\2\2"+
		"\2\u11f0\u11f1\3\2\2\2\u11f1\u11f3\3\2\2\2\u11f2\u11f4\5\u0280\u0141\2"+
		"\u11f3\u11f2\3\2\2\2\u11f3\u11f4\3\2\2\2\u11f4\u11f6\3\2\2\2\u11f5\u11f7"+
		"\5\u0282\u0142\2\u11f6\u11f5\3\2\2\2\u11f6\u11f7\3\2\2\2\u11f7\u11f9\3"+
		"\2\2\2\u11f8\u11fa\5\u0284\u0143\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa\3\2"+
		"\2\2\u11fa\u11fd\3\2\2\2\u11fb\u11fc\tG\2\2\u11fc\u11fe\7n\2\2\u11fd\u11fb"+
		"\3\2\2\2\u11fd\u11fe\3\2\2\2\u11fe\u11ff\3\2\2\2\u11ff\u1202\7\u0212\2"+
		"\2\u1200\u1201\7\u020a\2\2\u1201\u1203\5\u02f6\u017c\2\u1202\u1200\3\2"+
		"\2\2\u1202\u1203\3\2\2\2\u1203\u121a\3\2\2\2\u1204\u1205\7\u01e4\2\2\u1205"+
		"\u1207\7\u0211\2\2\u1206\u1208\5\u0274\u013b\2\u1207\u1206\3\2\2\2\u1207"+
		"\u1208\3\2\2\2\u1208\u1209\3\2\2\2\u1209\u120b\5\u022a\u0116\2\u120a\u120c"+
		"\5\u0270\u0139\2\u120b\u120a\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u1212\3"+
		"\2\2\2\u120d\u120e\7@\2\2\u120e\u120f\5\u0276\u013c\2\u120f\u1210\7\u0217"+
		"\2\2\u1210\u1211\5\u0276\u013c\2\u1211\u1213\3\2\2\2\u1212\u120d\3\2\2"+
		"\2\u1212\u1213\3\2\2\2\u1213\u1214\3\2\2\2\u1214\u1217\7\u0212\2\2\u1215"+
		"\u1216\7\u020a\2\2\u1216\u1218\5\u02f6\u017c\2\u1217\u1215\3\2\2\2\u1217"+
		"\u1218\3\2\2\2\u1218\u121a\3\2\2\2\u1219\u10e2\3\2\2\2\u1219\u10e7\3\2"+
		"\2\2\u1219\u10ec\3\2\2\2\u1219\u10f9\3\2\2\2\u1219\u1107\3\2\2\2\u1219"+
		"\u110e\3\2\2\2\u1219\u1119\3\2\2\2\u1219\u1120\3\2\2\2\u1219\u1128\3\2"+
		"\2\2\u1219\u112f\3\2\2\2\u1219\u1136\3\2\2\2\u1219\u1148\3\2\2\2\u1219"+
		"\u1158\3\2\2\2\u1219\u1162\3\2\2\2\u1219\u1170\3\2\2\2\u1219\u117b\3\2"+
		"\2\2\u1219\u118a\3\2\2\2\u1219\u11a6\3\2\2\2\u1219\u11ae\3\2\2\2\u1219"+
		"\u11ba\3\2\2\2\u1219\u11cb\3\2\2\2\u1219\u11dd\3\2\2\2\u1219\u11ea\3\2"+
		"\2\2\u1219\u1204\3\2\2\2\u121a\u0257\3\2\2\2\u121b\u121c\tH\2\2\u121c"+
		"\u0259\3\2\2\2\u121d\u121e\tI\2\2\u121e\u025b\3\2\2\2\u121f\u1220\tJ\2"+
		"\2\u1220\u025d\3\2\2\2\u1221\u1222\7\u012e\2\2\u1222\u1224\7\u0211\2\2"+
		"\u1223\u1225\5\u0176\u00bc\2\u1224\u1223\3\2\2\2\u1224\u1225\3\2\2\2\u1225"+
		"\u122a\3\2\2\2\u1226\u1228\5\u01ba\u00de\2\u1227\u1229\5\u0260\u0131\2"+
		"\u1228\u1227\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u122b\3\2\2\2\u122a\u1226"+
		"\3\2\2\2\u122a\u122b\3\2\2\2\u122b\u122c\3\2\2\2\u122c\u122d\7\u0212\2"+
		"\2\u122d\u025f\3\2\2\2\u122e\u1235\5\u0262\u0132\2\u122f\u1230\7\37\2"+
		"\2\u1230\u1231\5\u0264\u0133\2\u1231\u1232\7\f\2\2\u1232\u1233\5\u0264"+
		"\u0133\2\u1233\u1236\3\2\2\2\u1234\u1236\5\u0264\u0133\2\u1235\u122f\3"+
		"\2\2\2\u1235\u1234\3\2\2\2\u1236\u0261\3\2\2\2\u1237\u1238\tK\2\2\u1238"+
		"\u0263\3\2\2\2\u1239\u123a\7\u01b4\2\2\u123a\u1241\7\u0143\2\2\u123b\u123c"+
		"\7Z\2\2\u123c\u1241\7\u0164\2\2\u123d\u123e\5\u022a\u0116\2\u123e\u123f"+
		"\tL\2\2\u123f\u1241\3\2\2\2\u1240\u1239\3\2\2\2\u1240\u123b\3\2\2\2\u1240"+
		"\u123d\3\2\2\2\u1241\u0265\3\2\2\2\u1242\u124c\7\u01c0\2\2\u1243\u124d"+
		"\7\u0214\2\2\u1244\u1249\5\u0268\u0135\2\u1245\u1246\7\u0217\2\2\u1246"+
		"\u1248\5\u0268\u0135\2\u1247\u1245\3\2\2\2\u1248\u124b\3\2\2\2\u1249\u1247"+
		"\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u124d\3\2\2\2\u124b\u1249\3\2\2\2\u124c"+
		"\u1243\3\2\2\2\u124c\u1244\3\2\2\2\u124d\u0267\3\2\2\2\u124e\u1250\7\u00b4"+
		"\2\2\u124f\u1251\7\u012c\2\2\u1250\u124f\3\2\2\2\u1250\u1251\3\2\2\2\u1251"+
		"\u1254\3\2\2\2\u1252\u1254\7\u012c\2\2\u1253\u124e\3\2\2\2\u1253\u1252"+
		"\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u1257\5\u0166\u00b4"+
		"\2\u1256\u1258\5\u0292\u014a\2\u1257\u1256\3\2\2\2\u1257\u1258\3\2\2\2"+
		"\u1258\u0269\3\2\2\2\u1259\u125a\7\u0129\2\2\u125a\u125b\7,\2\2\u125b"+
		"\u125c\5\u022a\u0116\2\u125c\u026b\3\2\2\2\u125d\u125e\7\u01d3\2\2\u125e"+
		"\u125f\7\u00a9\2\2";
	private static final String _serializedATNSegment2 =
		"\u125f\u1260\7\u0211\2\2\u1260\u1261\5\u01ba\u00de\2\u1261\u1262\7\u0212"+
		"\2\2\u1262\u1265\3\2\2\2\u1263\u1265\5\u025e\u0130\2\u1264\u125d\3\2\2"+
		"\2\u1264\u1263\3\2\2\2\u1265\u026d\3\2\2\2\u1266\u1278\7T\2\2\u1267\u1269"+
		"\7\u00fa\2\2\u1268\u126a\7\27\2\2\u1269\u1268\3\2\2\2\u1269\u126a\3\2"+
		"\2\2\u126a\u1279\3\2\2\2\u126b\u126c\7\u0211\2\2\u126c\u1271\5\u02a0\u0151"+
		"\2\u126d\u126e\7\u0217\2\2\u126e\u1270\5\u02a0\u0151\2\u126f\u126d\3\2"+
		"\2\2\u1270\u1273\3\2\2\2\u1271\u126f\3\2\2\2\u1271\u1272\3\2\2\2\u1272"+
		"\u1274\3\2\2\2\u1273\u1271\3\2\2\2\u1274\u1275\7\u0212\2\2\u1275\u1276"+
		"\7\u01c3\2\2\u1276\u1277\5\u0208\u0105\2\u1277\u1279\3\2\2\2\u1278\u1267"+
		"\3\2\2\2\u1278\u126b\3\2\2\2\u1279\u026f\3\2\2\2\u127a\u127d\7\u0135\2"+
		"\2\u127b\u127c\7,\2\2\u127c\u127e\7\u01c2\2\2\u127d\u127b\3\2\2\2\u127d"+
		"\u127e\3\2\2\2\u127e\u127f\3\2\2\2\u127f\u1281\5\u0210\u0109\2\u1280\u1282"+
		"\5\u0292\u014a\2\u1281\u1280\3\2\2\2\u1281\u1282\3\2\2\2\u1282\u1283\3"+
		"\2\2\2\u1283\u1284\7\u0217\2\2\u1284\u1286\5\u0210\u0109\2\u1285\u1287"+
		"\5\u0292\u014a\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2\2\2\u1287\u0271\3"+
		"\2\2\2\u1288\u1289\7\u01d8\2\2\u1289\u128b\7\u0211\2\2\u128a\u128c\tD"+
		"\2\2\u128b\u128a\3\2\2\2\u128b\u128c\3\2\2\2\u128c\u128e\3\2\2\2\u128d"+
		"\u128f\tM\2\2\u128e\u128d\3\2\2\2\u128e\u128f\3\2\2\2\u128f\u1290\3\2"+
		"\2\2\u1290\u1295\5\u027a\u013e\2\u1291\u1292\7\u0217\2\2\u1292\u1294\5"+
		"\u027a\u013e\2\u1293\u1291\3\2\2\2\u1294\u1297\3\2\2\2\u1295\u1293\3\2"+
		"\2\2\u1295\u1296\3\2\2\2\u1296\u1298\3\2\2\2\u1297\u1295\3\2\2\2\u1298"+
		"\u1299\7\u0212\2\2\u1299\u0273\3\2\2\2\u129a\u129b\7\u01de\2\2\u129b\u129f"+
		"\7\u0211\2\2\u129c\u129d\5\u022a\u0116\2\u129d\u129e\5\u0292\u014a\2\u129e"+
		"\u12a0\3\2\2\2\u129f\u129c\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a7\3\2"+
		"\2\2\u12a1\u12a2\7\u0217\2\2\u12a2\u12a3\5\u022a\u0116\2\u12a3\u12a4\5"+
		"\u0292\u014a\2\u12a4\u12a6\3\2\2\2\u12a5\u12a1\3\2\2\2\u12a6\u12a9\3\2"+
		"\2\2\u12a7\u12a5\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12ab\3\2\2\2\u12a9"+
		"\u12a7\3\2\2\2\u12aa\u12ac\5\u0278\u013d\2\u12ab\u12aa\3\2\2\2\u12ab\u12ac"+
		"\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12ae\7\u0212\2\2\u12ae\u0275\3\2\2"+
		"\2\u12af\u12ba\5\u029e\u0150\2\u12b0\u12b1\7\u009f\2\2\u12b1\u12bb\7\u012a"+
		"\2\2\u12b2\u12b5\5\u02ea\u0176\2\u12b3\u12b4\7\u0136\2\2\u12b4\u12b6\5"+
		"\u022a\u0116\2\u12b5\u12b3\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12b8\3\2"+
		"\2\2\u12b7\u12b9\5\u0278\u013d\2\u12b8\u12b7\3\2\2\2\u12b8\u12b9\3\2\2"+
		"\2\u12b9\u12bb\3\2\2\2\u12ba\u12b0\3\2\2\2\u12ba\u12b2\3\2\2\2\u12bb\u0277"+
		"\3\2\2\2\u12bc\u12bd\7m\2\2\u12bd\u12be\5\u022a\u0116\2\u12be\u0279\3"+
		"\2\2\2\u12bf\u12c6\5\u020e\u0108\2\u12c0\u12c4\7\20\2\2\u12c1\u12c5\5"+
		"\u0304\u0183\2\u12c2\u12c3\7\u0088\2\2\u12c3\u12c5\5\u0228\u0115\2\u12c4"+
		"\u12c1\3\2\2\2\u12c4\u12c2\3\2\2\2\u12c5\u12c7\3\2\2\2\u12c6\u12c0\3\2"+
		"\2\2\u12c6\u12c7\3\2\2\2\u12c7\u027b\3\2\2\2\u12c8\u12cc\7\u01c9\2\2\u12c9"+
		"\u12ca\7\u0109\2\2\u12ca\u12cd\7\u01c2\2\2\u12cb\u12cd\5\u0210\u0109\2"+
		"\u12cc\u12c9\3\2\2\2\u12cc\u12cb\3\2\2\2\u12cd\u027d\3\2\2\2\u12ce\u12d4"+
		"\7\u018d\2\2\u12cf\u12d5\7\u01e6\2\2\u12d0\u12d2\7\u0109\2\2\u12d1\u12d3"+
		"\7\u01c2\2\2\u12d2\u12d1\3\2\2\2\u12d2\u12d3\3\2\2\2\u12d3\u12d5\3\2\2"+
		"\2\u12d4\u12cf\3\2\2\2\u12d4\u12d0\3\2\2\2\u12d5\u027f\3\2\2\2\u12d6\u12d7"+
		"\7\u0083\2\2\u12d7\u12d8\5\u022a\u0116\2\u12d8\u0281\3\2\2\2\u12d9\u12da"+
		"\7\u01c9\2\2\u12da\u12db\5\u022a\u0116\2\u12db\u0283\3\2\2\2\u12dc\u12dd"+
		"\7\u0109\2\2\u12dd\u12e5\7\u00b8\2\2\u12de\u12e2\7\u00b8\2\2\u12df\u12e0"+
		"\7\u0185\2\2\u12e0\u12e1\7\u0228\2\2\u12e1\u12e3\5\u022a\u0116\2\u12e2"+
		"\u12df\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u12e5\3\2\2\2\u12e4\u12dc\3\2"+
		"\2\2\u12e4\u12de\3\2\2\2\u12e5\u0285\3\2\2\2\u12e6\u12ec\7\u0218\2\2\u12e7"+
		"\u12ec\5\u0288\u0145\2\u12e8\u12ec\5\u028c\u0147\2\u12e9\u12ec\5\u028e"+
		"\u0148\2\u12ea\u12ec\5\u028a\u0146\2\u12eb\u12e6\3\2\2\2\u12eb\u12e7\3"+
		"\2\2\2\u12eb\u12e8\3\2\2\2\u12eb\u12e9\3\2\2\2\u12eb\u12ea\3\2\2\2\u12ec"+
		"\u12ee\3\2\2\2\u12ed\u12ef\7\u021d\2\2\u12ee\u12ed\3\2\2\2\u12ee\u12ef"+
		"\3\2\2\2\u12ef\u0287\3\2\2\2\u12f0\u12f1\7\u01cf\2\2\u12f1\u12f7\tN\2"+
		"\2\u12f2\u12f3\7\u0090\2\2\u12f3\u12f4\tO\2\2\u12f4\u12f8\tP\2\2\u12f5"+
		"\u12f6\7P\2\2\u12f6\u12f8\tQ\2\2\u12f7\u12f2\3\2\2\2\u12f7\u12f5\3\2\2"+
		"\2\u12f8\u0289\3\2\2\2\u12f9\u12fa\7\u017b\2\2\u12fa\u1300\5\u0310\u0189"+
		"\2\u12fb\u1301\7\u020d\2\2\u12fc\u1301\7\u0123\2\2\u12fd\u1301\7\u011f"+
		"\2\2\u12fe\u1301\5\u02fc\u017f\2\u12ff\u1301\5\u0310\u0189\2\u1300\u12fb"+
		"\3\2\2\2\u1300\u12fc\3\2\2\2\u1300\u12fd\3\2\2\2\u1300\u12fe\3\2\2\2\u1300"+
		"\u12ff\3\2\2\2\u1301\u028b\3\2\2\2\u1302\u1303\7\u0090\2\2\u1303\u028d"+
		"\3\2\2\2\u1304\u1305\7\u022f\2\2\u1305\u028f\3\2\2\2\u1306\u1308\tR\2"+
		"\2\u1307\u1309\7\u009f\2\2\u1308\u1307\3\2\2\2\u1308\u1309\3\2\2\2\u1309"+
		"\u130a\3\2\2\2\u130a\u130b\5\u0208\u0105\2\u130b\u0291\3\2\2\2\u130c\u130e"+
		"\7\20\2\2\u130d\u130c\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u1311\3\2\2\2"+
		"\u130f\u1312\5\u0302\u0182\2\u1310\u1312\5\u0296\u014c\2\u1311\u130f\3"+
		"\2\2\2\u1311\u1310\3\2\2\2\u1312\u1315\3\2\2\2\u1313\u1315\7\20\2\2\u1314"+
		"\u130d\3\2\2\2\u1314\u1313\3\2\2\2\u1315\u0293\3\2\2\2\u1316\u1319\5\u0302"+
		"\u0182\2\u1317\u1319\5\u0296\u014c\2\u1318\u1316\3\2\2\2\u1318\u1317\3"+
		"\2\2\2\u1319\u0295\3\2\2\2\u131a\u131b\5\u0300\u0181\2\u131b\u0297\3\2"+
		"\2\2\u131c\u131f\7\u01d0\2\2\u131d\u1320\5\u029a\u014e\2\u131e\u1320\5"+
		"\u020c\u0107\2\u131f\u131d\3\2\2\2\u131f\u131e\3\2\2\2\u1320\u0299\3\2"+
		"\2\2\u1321\u1322\7Z\2\2\u1322\u1323\7\u011e\2\2\u1323\u1324\5\u02d0\u0169"+
		"\2\u1324\u029b\3\2\2\2\u1325\u1326\7\u00ca\2\2\u1326\u132b\5\u02cc\u0167"+
		"\2\u1327\u1328\7\u0217\2\2\u1328\u132a\5\u02cc\u0167\2\u1329\u1327\3\2"+
		"\2\2\u132a\u132d\3\2\2\2\u132b\u1329\3\2\2\2\u132b\u132c\3\2\2\2\u132c"+
		"\u133a\3\2\2\2\u132d\u132b\3\2\2\2\u132e\u132f\7+\2\2\u132f\u1330\7?\2"+
		"\2\u1330\u1331\7\u00ca\2\2\u1331\u1336\5\u02cc\u0167\2\u1332\u1333\7\u0217"+
		"\2\2\u1333\u1335\5\u02cc\u0167\2\u1334\u1332\3\2\2\2\u1335\u1338\3\2\2"+
		"\2\u1336\u1334\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u133a\3\2\2\2\u1338\u1336"+
		"\3\2\2\2\u1339\u1325\3\2\2\2\u1339\u132e\3\2\2\2\u133a\u029d\3\2\2\2\u133b"+
		"\u133e\5\u0302\u0182\2\u133c\u133e\5\u0300\u0181\2\u133d\u133b\3\2\2\2"+
		"\u133d\u133c\3\2\2\2\u133e\u029f\3\2\2\2\u133f\u1340\5\u0302\u0182\2\u1340"+
		"\u02a1\3\2\2\2\u1341\u1342\5\u0302\u0182\2\u1342\u02a3\3\2\2\2\u1343\u1344"+
		"\5\u0302\u0182\2\u1344\u02a5\3\2\2\2\u1345\u1346\5\u0302\u0182\2\u1346"+
		"\u02a7\3\2\2\2\u1347\u1348\5\u0302\u0182\2\u1348\u02a9\3\2\2\2\u1349\u134a"+
		"\5\u0302\u0182\2\u134a\u02ab\3\2\2\2\u134b\u1350\5\u0302\u0182\2\u134c"+
		"\u134d\7\u020a\2\2\u134d\u134f\5\u0304\u0183\2\u134e\u134c\3\2\2\2\u134f"+
		"\u1352\3\2\2\2\u1350\u134e\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1355\3\2"+
		"\2\2\u1352\u1350\3\2\2\2\u1353\u1354\7\u0219\2\2\u1354\u1356\5\u02d6\u016c"+
		"\2\u1355\u1353\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u02ad\3\2\2\2\u1357\u1358"+
		"\5\u0302\u0182\2\u1358\u02af\3\2\2\2\u1359\u135c\5\u0302\u0182\2\u135a"+
		"\u135b\7\u020a\2\2\u135b\u135d\5\u0304\u0183\2\u135c\u135a\3\2\2\2\u135c"+
		"\u135d\3\2\2\2\u135d\u02b1\3\2\2\2\u135e\u135f\5\u0302\u0182\2\u135f\u02b3"+
		"\3\2\2\2\u1360\u1361\5\u0302\u0182\2\u1361\u02b5\3\2\2\2\u1362\u1363\5"+
		"\u0302\u0182\2\u1363\u02b7\3\2\2\2\u1364\u1369\5\u0302\u0182\2\u1365\u1366"+
		"\7\u020a\2\2\u1366\u1368\5\u0304\u0183\2\u1367\u1365\3\2\2\2\u1368\u136b"+
		"\3\2\2\2\u1369\u1367\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u02b9\3\2\2\2\u136b"+
		"\u1369\3\2\2\2\u136c\u136d\5\u0302\u0182\2\u136d\u02bb\3\2\2\2\u136e\u1373"+
		"\5\u0302\u0182\2\u136f\u1370\7\u020a\2\2\u1370\u1372\5\u0304\u0183\2\u1371"+
		"\u136f\3\2\2\2\u1372\u1375\3\2\2\2\u1373\u1371\3\2\2\2\u1373\u1374\3\2"+
		"\2\2\u1374\u1378\3\2\2\2\u1375\u1373\3\2\2\2\u1376\u1377\7\u0219\2\2\u1377"+
		"\u1379\5\u02d6\u016c\2\u1378\u1376\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u02bd"+
		"\3\2\2\2\u137a\u137b\5\u0304\u0183\2\u137b\u02bf\3\2\2\2\u137c\u1381\5"+
		"\u0304\u0183\2\u137d\u137e\7\u020a\2\2\u137e\u1380\5\u0304\u0183\2\u137f"+
		"\u137d\3\2\2\2\u1380\u1383\3\2\2\2\u1381\u137f\3\2\2\2\u1381\u1382\3\2"+
		"\2\2\u1382\u02c1\3\2\2\2\u1383\u1381\3\2\2\2\u1384\u1389\5\u0304\u0183"+
		"\2\u1385\u1386\7\u020a\2\2\u1386\u1388\5\u0304\u0183\2\u1387\u1385\3\2"+
		"\2\2\u1388\u138b\3\2\2\2\u1389\u1387\3\2\2\2\u1389\u138a\3\2\2\2\u138a"+
		"\u02c3\3\2\2\2\u138b\u1389\3\2\2\2\u138c\u1391\5\u0302\u0182\2\u138d\u138e"+
		"\7\u020a\2\2\u138e\u1390\5\u0304\u0183\2\u138f\u138d\3\2\2\2\u1390\u1393"+
		"\3\2\2\2\u1391\u138f\3\2\2\2\u1391\u1392\3\2\2\2\u1392\u02c5\3\2\2\2\u1393"+
		"\u1391\3\2\2\2\u1394\u1397\5\u0302\u0182\2\u1395\u1396\7\u020a\2\2\u1396"+
		"\u1398\5\u0304\u0183\2\u1397\u1395\3\2\2\2\u1397\u1398\3\2\2\2\u1398\u02c7"+
		"\3\2\2\2\u1399\u139c\5\u0302\u0182\2\u139a\u139b\7\u020a\2\2\u139b\u139d"+
		"\5\u0304\u0183\2\u139c\u139a\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u02c9\3"+
		"\2\2\2\u139e\u13a1\5\u0302\u0182\2\u139f\u13a0\7\u020a\2\2\u13a0\u13a2"+
		"\5\u0304\u0183\2\u13a1\u139f\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u02cb\3"+
		"\2\2\2\u13a3\u13a4\7\u022b\2\2\u13a4\u13a6\5\u02dc\u016f\2\u13a5\u13a3"+
		"\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a7\3\2\2\2\u13a7\u13aa\5\u0304\u0183"+
		"\2\u13a8\u13a9\7\u020a\2\2\u13a9\u13ab\5\u0304\u0183\2\u13aa\u13a8\3\2"+
		"\2\2\u13aa\u13ab\3\2\2\2\u13ab\u13ae\3\2\2\2\u13ac\u13ae\5\u02f2\u017a"+
		"\2\u13ad\u13a5\3\2\2\2\u13ad\u13ac\3\2\2\2\u13ae\u02cd\3\2\2\2\u13af\u13b0"+
		"\5\u0302\u0182\2\u13b0\u02cf\3\2\2\2\u13b1\u13b4\5\u0302\u0182\2\u13b2"+
		"\u13b4\5\u02f2\u017a\2\u13b3\u13b1\3\2\2\2\u13b3\u13b2\3\2\2\2\u13b4\u02d1"+
		"\3\2\2\2\u13b5\u13b8\5\u0302\u0182\2\u13b6\u13b8\5\u02f2\u017a\2\u13b7"+
		"\u13b5\3\2\2\2\u13b7\u13b6\3\2\2\2\u13b8\u02d3\3\2\2\2\u13b9\u13bc\5\u0302"+
		"\u0182\2\u13ba\u13bb\7\u020a\2\2\u13bb\u13bd\5\u0304\u0183\2\u13bc\u13ba"+
		"\3\2\2\2\u13bc\u13bd\3\2\2\2\u13bd\u02d5\3\2\2\2\u13be\u13bf\5\u0302\u0182"+
		"\2\u13bf\u02d7\3\2\2\2\u13c0\u13c5\5\u0302\u0182\2\u13c1\u13c2\7\u020a"+
		"\2\2\u13c2\u13c4\5\u0304\u0183\2\u13c3\u13c1\3\2\2\2\u13c4\u13c7\3\2\2"+
		"\2\u13c5\u13c3\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u02d9\3\2\2\2\u13c7\u13c5"+
		"\3\2\2\2\u13c8\u13cb\5\u0302\u0182\2\u13c9\u13ca\7\u020a\2\2\u13ca\u13cc"+
		"\5\u0304\u0183\2\u13cb\u13c9\3\2\2\2\u13cb\u13cc\3\2\2\2\u13cc\u13d0\3"+
		"\2\2\2\u13cd\u13ce\7\u0219\2\2\u13ce\u13d1\5\u02d6\u016c\2\u13cf\u13d1"+
		"\5\u0290\u0149\2\u13d0\u13cd\3\2\2\2\u13d0\u13cf\3\2\2\2\u13d0\u13d1\3"+
		"\2\2\2\u13d1\u02db\3\2\2\2\u13d2\u13d7\5\u0304\u0183\2\u13d3\u13d4\7\u020a"+
		"\2\2\u13d4\u13d6\5\u0304\u0183\2\u13d5\u13d3\3\2\2\2\u13d6\u13d9\3\2\2"+
		"\2\u13d7\u13d5\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u02dd\3\2\2\2\u13d9\u13d7"+
		"\3\2\2\2\u13da\u13db\7\u00d1\2\2\u13db\u13dc\7\u0211\2\2\u13dc\u13dd\7"+
		"\u01f0\2\2\u13dd\u13de\t\64\2\2\u13de\u13df\5\u01ba\u00de\2\u13df\u13e1"+
		"\7\u0212\2\2\u13e0\u13e2\5\u025e\u0130\2\u13e1\u13e0\3\2\2\2\u13e1\u13e2"+
		"\3\2\2\2\u13e2\u02df\3\2\2\2\u13e3\u13e5\7\u0211\2\2\u13e4\u13e6\5\u02e8"+
		"\u0175\2\u13e5\u13e4\3\2\2\2\u13e5\u13e6\3\2\2\2\u13e6\u13eb\3\2\2\2\u13e7"+
		"\u13e8\7\u0217\2\2\u13e8\u13ea\5\u02e8\u0175\2\u13e9\u13e7\3\2\2\2\u13ea"+
		"\u13ed\3\2\2\2\u13eb\u13e9\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ee\3\2"+
		"\2\2\u13ed\u13eb\3\2\2\2\u13ee\u13f0\7\u0212\2\2\u13ef\u13f1\5\u02de\u0170"+
		"\2\u13f0\u13ef\3\2\2\2\u13f0\u13f1\3\2\2\2\u13f1\u02e1\3\2\2\2\u13f2\u13f7"+
		"\7\u0211\2\2\u13f3\u13f5\5\u02e8\u0175\2\u13f4\u13f6\5\u02e6\u0174\2\u13f5"+
		"\u13f4\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6\u13f8\3\2\2\2\u13f7\u13f3\3\2"+
		"\2\2\u13f7\u13f8\3\2\2\2\u13f8\u1400\3\2\2\2\u13f9\u13fa\7\u0217\2\2\u13fa"+
		"\u13fc\5\u02e8\u0175\2\u13fb\u13fd\5\u02e6\u0174\2\u13fc\u13fb\3\2\2\2"+
		"\u13fc\u13fd\3\2\2\2\u13fd\u13ff\3\2\2\2\u13fe\u13f9\3\2\2\2\u13ff\u1402"+
		"\3\2\2\2\u1400\u13fe\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1403\3\2\2\2\u1402"+
		"\u1400\3\2\2\2\u1403\u1405\7\u0212\2\2\u1404\u1406\5\u02de\u0170\2\u1405"+
		"\u1404\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u02e3\3\2\2\2\u1407\u1408\7\u0211"+
		"\2\2\u1408\u1415\5\u02d8\u016d\2\u1409\u140c\7\u0217\2\2\u140a\u140d\5"+
		"\u02fc\u017f\2\u140b\u140d\7\u0118\2\2\u140c\u140a\3\2\2\2\u140c\u140b"+
		"\3\2\2\2\u140d\u1413\3\2\2\2\u140e\u1411\7\u0217\2\2\u140f\u1412\5\u02fc"+
		"\u017f\2\u1410\u1412\7\u0118\2\2\u1411\u140f\3\2\2\2\u1411\u1410\3\2\2"+
		"\2\u1412\u1414\3\2\2\2\u1413\u140e\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1416"+
		"\3\2\2\2\u1415\u1409\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1417\3\2\2\2\u1417"+
		"\u142b\7\u01c0\2\2\u1418\u1419\5\u02da\u016e\2\u1419\u141a\7\u020a\2\2"+
		"\u141a\u141b\7\u0214\2\2\u141b\u142c\3\2\2\2\u141c\u142c\7\u0214\2\2\u141d"+
		"\u141f\5\u020e\u0108\2\u141e\u1420\5\u0292\u014a\2\u141f\u141e\3\2\2\2"+
		"\u141f\u1420\3\2\2\2\u1420\u1428\3\2\2\2\u1421\u1422\7\u0217\2\2\u1422"+
		"\u1424\5\u020e\u0108\2\u1423\u1425\5\u0292\u014a\2\u1424\u1423\3\2\2\2"+
		"\u1424\u1425\3\2\2\2\u1425\u1427\3\2\2\2\u1426\u1421\3\2\2\2\u1427\u142a"+
		"\3\2\2\2\u1428\u1426\3\2\2\2\u1428\u1429\3\2\2\2\u1429\u142c\3\2\2\2\u142a"+
		"\u1428\3\2\2\2\u142b\u1418\3\2\2\2\u142b\u141c\3\2\2\2\u142b\u141d\3\2"+
		"\2\2\u142c\u142d\3\2\2\2\u142d\u142f\7\u0212\2\2\u142e\u1430\5\u02de\u0170"+
		"\2\u142f\u142e\3\2\2\2\u142f\u1430\3\2\2\2\u1430\u02e5\3\2\2\2\u1431\u1432"+
		"\tS\2\2\u1432\u1433\7\u0119\2\2\u1433\u02e7\3\2\2\2\u1434\u1435\5\u0302"+
		"\u0182\2\u1435\u1436\7\u0228\2\2\u1436\u1437\7\u0225\2\2\u1437\u1439\3"+
		"\2\2\2\u1438\u1434\3\2\2\2\u1438\u1439\3\2\2\2\u1439\u143a\3\2\2\2\u143a"+
		"\u143b\5\u0210\u0109\2\u143b\u02e9\3\2\2\2\u143c\u1445\5\u02ec\u0177\2"+
		"\u143d\u143f\7\u0151\2\2\u143e\u143d\3\2\2\2\u143e\u143f\3\2\2\2\u143f"+
		"\u1440\3\2\2\2\u1440\u1442\5\u02c0\u0161\2\u1441\u1443\t!\2\2\u1442\u1441"+
		"\3\2\2\2\u1442\u1443\3\2\2\2\u1443\u1445\3\2\2\2\u1444\u143c\3\2\2\2\u1444"+
		"\u143e\3\2\2\2\u1445\u02eb\3\2\2\2\u1446\u1448\5\u02f0\u0179\2\u1447\u1449"+
		"\5\u02ee\u0178\2\u1448\u1447\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u1450\3"+
		"\2\2\2\u144a\u144c\7\u01d2\2\2\u144b\u144d\7\u00e0\2\2\u144c\u144b\3\2"+
		"\2\2\u144c\u144d\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u144f\7\u01a1\2\2\u144f"+
		"\u1451\7\u01e8\2\2\u1450\u144a\3\2\2\2\u1450\u1451\3\2\2\2\u1451\u1463"+
		"\3\2\2\2\u1452\u1453\7\u00c9\2\2\u1453\u1458\tT\2\2\u1454\u1455\7\u0211"+
		"\2\2\u1455\u1456\5\u0210\u0109\2\u1456\u1457\7\u0212\2\2\u1457\u1459\3"+
		"\2\2\2\u1458\u1454\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145a\3\2\2\2\u145a"+
		"\u145b\7\u01aa\2\2\u145b\u1460\tU\2\2\u145c\u145d\7\u0211\2\2\u145d\u145e"+
		"\5\u0210\u0109\2\u145e\u145f\7\u0212\2\2\u145f\u1461\3\2\2\2\u1460\u145c"+
		"\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1463\3\2\2\2\u1462\u1446\3\2\2\2\u1462"+
		"\u1452\3\2\2\2\u1463\u02ed\3\2\2\2\u1464\u1467\7\u0211\2\2\u1465\u1468"+
		"\5\u02fc\u017f\2\u1466\u1468\7\u0214\2\2\u1467\u1465\3\2\2\2\u1467\u1466"+
		"\3\2\2\2\u1468\u146b\3\2\2\2\u1469\u146a\7\u0217\2\2\u146a\u146c\5\u02fc"+
		"\u017f\2\u146b\u1469\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u146e\3\2\2\2\u146d"+
		"\u146f\tV\2\2\u146e\u146d\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1470\3\2"+
		"\2\2\u1470\u1471\7\u0212\2\2\u1471\u02ef\3\2\2\2\u1472\u14af\7#\2\2\u1473"+
		"\u14af\7\u013f\2\2\u1474\u14af\7\u0100\2\2\u1475\u14af\7\"\2\2\u1476\u14af"+
		"\7!\2\2\u1477\u14af\7\u0101\2\2\u1478\u14af\7\u0140\2\2\u1479\u14af\7"+
		"\u0141\2\2\u147a\u14af\7\u0182\2\2\u147b\u14af\7\u0183\2\2\u147c\u14af"+
		"\7\u011c\2\2\u147d\u14af\7g\2\2\u147e\u14af\7\u00c7\2\2\u147f\u14af\7"+
		"\u00c6\2\2\u1480\u14af\7\u011b\2\2\u1481\u14af\7\u0187\2\2\u1482\u14af"+
		"\7\u011a\2\2\u1483\u14af\7h\2\2\u1484\u1486\7z\2\2\u1485\u1487\7\u0144"+
		"\2\2\u1486\u1485\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u14af\3\2\2\2\u1488"+
		"\u14af\7\u009c\2\2\u1489\u14af\7\u014e\2\2\u148a\u14af\7\u0103\2\2\u148b"+
		"\u148d\7\u00e7\2\2\u148c\u148e\7\u014b\2\2\u148d\u148c\3\2\2\2\u148d\u148e"+
		"\3\2\2\2\u148e\u14af\3\2\2\2\u148f\u14af\7\66\2\2\u1490\u14af\78\2\2\u1491"+
		"\u14af\7\u01c5\2\2\u1492\u14af\7\u01c4\2\2\u1493\u14af\7\u0196\2\2\u1494"+
		"\u14af\7\u014b\2\2\u1495\u14af\7\'\2\2\u1496\u14af\7a\2\2\u1497\u14af"+
		"\7\u0165\2\2\u1498\u14af\7\u01be\2\2\u1499\u14af\7\u01e5\2\2\u149a\u14af"+
		"\7\u00fc\2\2\u149b\u14af\7b\2\2\u149c\u14af\7\u00b0\2\2\u149d\u14af\7"+
		"\u00f6\2\2\u149e\u14af\7\u016f\2\2\u149f\u14af\7\u01a7\2\2\u14a0\u14af"+
		"\7\u01a8\2\2\u14a1\u14af\7\u01a9\2\2\u14a2\u14af\7\u01a6\2\2\u14a3\u14af"+
		"\7\u01a2\2\2\u14a4\u14af\7\u01a5\2\2\u14a5\u14af\7\u01a4\2\2\u14a6\u14af"+
		"\7\u01a3\2\2\u14a7\u14af\7\u01e7\2\2\u14a8\u14af\7|\2\2\u14a9\u14af\7"+
		" \2\2\u14aa\u14af\7$\2\2\u14ab\u14af\7<\2\2\u14ac\u14af\7\u0105\2\2\u14ad"+
		"\u14af\7\u00f8\2\2\u14ae\u1472\3\2\2\2\u14ae\u1473\3\2\2\2\u14ae\u1474"+
		"\3\2\2\2\u14ae\u1475\3\2\2\2\u14ae\u1476\3\2\2\2\u14ae\u1477\3\2\2\2\u14ae"+
		"\u1478\3\2\2\2\u14ae\u1479\3\2\2\2\u14ae\u147a\3\2\2\2\u14ae\u147b\3\2"+
		"\2\2\u14ae\u147c\3\2\2\2\u14ae\u147d\3\2\2\2\u14ae\u147e\3\2\2\2\u14ae"+
		"\u147f\3\2\2\2\u14ae\u1480\3\2\2\2\u14ae\u1481\3\2\2\2\u14ae\u1482\3\2"+
		"\2\2\u14ae\u1483\3\2\2\2\u14ae\u1484\3\2\2\2\u14ae\u1488\3\2\2\2\u14ae"+
		"\u1489\3\2\2\2\u14ae\u148a\3\2\2\2\u14ae\u148b\3\2\2\2\u14ae\u148f\3\2"+
		"\2\2\u14ae\u1490\3\2\2\2\u14ae\u1491\3\2\2\2\u14ae\u1492\3\2\2\2\u14ae"+
		"\u1493\3\2\2\2\u14ae\u1494\3\2\2\2\u14ae\u1495\3\2\2\2\u14ae\u1496\3\2"+
		"\2\2\u14ae\u1497\3\2\2\2\u14ae\u1498\3\2\2\2\u14ae\u1499\3\2\2\2\u14ae"+
		"\u149a\3\2\2\2\u14ae\u149b\3\2\2\2\u14ae\u149c\3\2\2\2\u14ae\u149d\3\2"+
		"\2\2\u14ae\u149e\3\2\2\2\u14ae\u149f\3\2\2\2\u14ae\u14a0\3\2\2\2\u14ae"+
		"\u14a1\3\2\2\2\u14ae\u14a2\3\2\2\2\u14ae\u14a3\3\2\2\2\u14ae\u14a4\3\2"+
		"\2\2\u14ae\u14a5\3\2\2\2\u14ae\u14a6\3\2\2\2\u14ae\u14a7\3\2\2\2\u14ae"+
		"\u14a8\3\2\2\2\u14ae\u14a9\3\2\2\2\u14ae\u14aa\3\2\2\2\u14ae\u14ab\3\2"+
		"\2\2\u14ae\u14ac\3\2\2\2\u14ae\u14ad\3\2\2\2\u14af\u02f1\3\2\2\2\u14b0"+
		"\u14b4\7\u021b\2\2\u14b1\u14b2\7\u021c\2\2\u14b2\u14b4\7\u020b\2\2\u14b3"+
		"\u14b0\3\2\2\2\u14b3\u14b1\3\2\2\2\u14b4\u14bd\3\2\2\2\u14b5\u14b7\7\u00bb"+
		"\2\2\u14b6\u14b5\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14bb\3\2\2\2\u14b8"+
		"\u14bc\7\u021b\2\2\u14b9\u14ba\7\u021c\2\2\u14ba\u14bc\7\u020b\2\2\u14bb"+
		"\u14b8\3\2\2\2\u14bb\u14b9\3\2\2\2\u14bc\u14be\3\2\2\2\u14bd\u14b6\3\2"+
		"\2\2\u14bd\u14be\3\2\2\2\u14be\u14c3\3\2\2\2\u14bf\u14c0\7\u020a\2\2\u14c0"+
		"\u14c2\5\u02f6\u017c\2\u14c1\u14bf\3\2\2\2\u14c2\u14c5\3\2\2\2\u14c3\u14c1"+
		"\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4\u02f3\3\2\2\2\u14c5\u14c3\3\2\2\2\u14c6"+
		"\u14cb\5\u02f6\u017c\2\u14c7\u14c8\7\u020a\2\2\u14c8\u14ca\5\u02f6\u017c"+
		"\2\u14c9\u14c7\3\2\2\2\u14ca\u14cd\3\2\2\2\u14cb\u14c9\3\2\2\2\u14cb\u14cc"+
		"\3\2\2\2\u14cc\u02f5\3\2\2\2\u14cd\u14cb\3\2\2\2\u14ce\u14cf\7\u022b\2"+
		"\2\u14cf\u14d1\5\u02dc\u016f\2\u14d0\u14ce\3\2\2\2\u14d0\u14d1\3\2\2\2"+
		"\u14d1\u14d2\3\2\2\2\u14d2\u14d7\5\u0304\u0183\2\u14d3\u14d4\7\u020a\2"+
		"\2\u14d4\u14d6\5\u0304\u0183\2\u14d5\u14d3\3\2\2\2\u14d6\u14d9\3\2\2\2"+
		"\u14d7\u14d5\3\2\2\2\u14d7\u14d8\3\2\2\2\u14d8\u14db\3\2\2\2\u14d9\u14d7"+
		"\3\2\2\2\u14da\u14dc\5\u02e0\u0171\2\u14db\u14da\3\2\2\2\u14db\u14dc\3"+
		"\2\2\2\u14dc\u02f7\3\2\2\2\u14dd\u14de\7\u022b\2\2\u14de\u14e0\5\u02dc"+
		"\u016f\2\u14df\u14dd\3\2\2\2\u14df\u14e0\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1"+
		"\u14e6\5\u0304\u0183\2\u14e2\u14e3\7\u020a\2\2\u14e3\u14e5\5\u0304\u0183"+
		"\2\u14e4\u14e2\3\2\2\2\u14e5\u14e8\3\2\2\2\u14e6\u14e4\3\2\2\2\u14e6\u14e7"+
		"\3\2\2\2\u14e7\u02f9\3\2\2\2\u14e8\u14e6\3\2\2\2\u14e9\u14ec\7\u01a2\2"+
		"\2\u14ea\u14ed\5\u0300\u0181\2\u14eb\u14ed\5\u02f2\u017a\2\u14ec\u14ea"+
		"\3\2\2\2\u14ec\u14eb\3\2\2\2\u14ed\u14f2\3\2\2\2\u14ee\u14ef\7\23\2\2"+
		"\u14ef\u14f0\7\u01a1\2\2\u14f0\u14f1\7\u01e8\2\2\u14f1\u14f3\5\u0300\u0181"+
		"\2\u14f2\u14ee\3\2\2\2\u14f2\u14f3\3\2\2\2\u14f3\u1528\3\2\2\2\u14f4\u14f8"+
		"\7\u00c9\2\2\u14f5\u14f9\5\u0300\u0181\2\u14f6\u14f9\5\u02f2\u017a\2\u14f7"+
		"\u14f9\5\u02f6\u017c\2\u14f8\u14f5\3\2\2\2\u14f8\u14f6\3\2\2\2\u14f8\u14f7"+
		"\3\2\2\2\u14f9\u14fa\3\2\2\2\u14fa\u1508\tW\2\2\u14fb\u14fe\7\u0211\2"+
		"\2\u14fc\u14ff\7\u020b\2\2\u14fd\u14ff\5\u02f2\u017a\2\u14fe\u14fc\3\2"+
		"\2\2\u14fe\u14fd\3\2\2\2\u14ff\u1505\3\2\2\2\u1500\u1503\7\u0217\2\2\u1501"+
		"\u1504\7\u020b\2\2\u1502\u1504\5\u02f2\u017a\2\u1503\u1501\3\2\2\2\u1503"+
		"\u1502\3\2\2\2\u1504\u1506\3\2\2\2\u1505\u1500\3\2\2\2\u1505\u1506\3\2"+
		"\2\2\u1506\u1507\3\2\2\2\u1507\u1509\7\u0212\2\2\u1508\u14fb\3\2\2\2\u1508"+
		"\u1509\3\2\2\2\u1509\u1519\3\2\2\2\u150a\u1517\7\u01aa\2\2\u150b\u1518"+
		"\7b\2\2\u150c\u1518\7\u00b0\2\2\u150d\u1518\7\u00f6\2\2\u150e\u1515\7"+
		"\u016f\2\2\u150f\u1512\7\u0211\2\2\u1510\u1513\7\u020b\2\2\u1511\u1513"+
		"\5\u02f2\u017a\2\u1512\u1510\3\2\2\2\u1512\u1511\3\2\2\2\u1513\u1514\3"+
		"\2\2\2\u1514\u1516\7\u0212\2\2\u1515\u150f\3\2\2\2\u1515\u1516\3\2\2\2"+
		"\u1516\u1518\3\2\2\2\u1517\u150b\3\2\2\2\u1517\u150c\3\2\2\2\u1517\u150d"+
		"\3\2\2\2\u1517\u150e\3\2\2\2\u1518\u151a\3\2\2\2\u1519\u150a\3\2\2\2\u1519"+
		"\u151a\3\2\2\2\u151a\u1528\3\2\2\2\u151b\u1528\5\u02fc\u017f\2\u151c\u151d"+
		"\7a\2\2\u151d\u1528\5\u0300\u0181\2\u151e\u1528\5\u0300\u0181\2\u151f"+
		"\u1528\7\u0118\2\2\u1520\u1528\7\u01b1\2\2\u1521\u1528\7\u0095\2\2\u1522"+
		"\u1528\7d\2\2\u1523\u1528\7\u017a\2\2\u1524\u1528\7\u00f7\2\2\u1525\u1528"+
		"\7\u00ef\2\2\u1526\u1528\7m\2\2\u1527\u14e9\3\2\2\2\u1527\u14f4\3\2\2"+
		"\2\u1527\u151b\3\2\2\2\u1527\u151c\3\2\2\2\u1527\u151e\3\2\2\2\u1527\u151f"+
		"\3\2\2\2\u1527\u1520\3\2\2\2\u1527\u1521\3\2\2\2\u1527\u1522\3\2\2\2\u1527"+
		"\u1523\3\2\2\2\u1527\u1524\3\2\2\2\u1527\u1525\3\2\2\2\u1527\u1526\3\2"+
		"\2\2\u1528\u02fb\3\2\2\2\u1529\u152a\tX\2\2\u152a\u02fd\3\2\2\2\u152b"+
		"\u152c\7\u0216\2\2\u152c\u152d\5\u02fc\u017f\2\u152d\u02ff\3\2\2\2\u152e"+
		"\u152f\tY\2\2\u152f\u0301\3\2\2\2\u1530\u1531\7\u022b\2\2\u1531\u1533"+
		"\5\u02dc\u016f\2\u1532\u1530\3\2\2\2\u1532\u1533\3\2\2\2\u1533\u1534\3"+
		"\2\2\2\u1534\u1535\5\u0304\u0183\2\u1535\u0303\3\2\2\2\u1536\u1539\5\u0310"+
		"\u0189\2\u1537\u1539\7\u020e\2\2\u1538\u1536\3\2\2\2\u1538\u1537\3\2\2"+
		"\2\u1539\u0305\3\2\2\2\u153a\u1542\7\u0221\2\2\u153b\u153c\7\u021f\2\2"+
		"\u153c\u1542\7\u0225\2\2\u153d\u153e\7\u0224\2\2\u153e\u1542\7\u0228\2"+
		"\2\u153f\u1540\7\u0222\2\2\u1540\u1542\7\u0228\2\2\u1541\u153a\3\2\2\2"+
		"\u1541\u153b\3\2\2\2\u1541\u153d\3\2\2\2\u1541\u153f\3\2\2\2\u1542\u0307"+
		"\3\2\2\2\u1543\u1547\7\u0220\2\2\u1544\u1545\7\u0225\2\2\u1545\u1547\7"+
		"\u0228\2\2\u1546\u1543\3\2\2\2\u1546\u1544\3\2\2\2\u1547\u0309\3\2\2\2"+
		"\u1548\u154c\7\u021e\2\2\u1549\u154a\7\u021f\2\2\u154a\u154c\7\u0228\2"+
		"\2\u154b\u1548\3\2\2\2\u154b\u1549\3\2\2\2\u154c\u030b\3\2\2\2\u154d\u1551"+
		"\7\u0226\2\2\u154e\u154f\7\u0227\2\2\u154f\u1551\7\u0227\2\2\u1550\u154d"+
		"\3\2\2\2\u1550\u154e\3\2\2\2\u1551\u030d\3\2\2\2\u1552\u1553\7\u0211\2"+
		"\2\u1553\u1554\7\u0215\2\2\u1554\u1555\7\u0212\2\2\u1555\u030f\3\2\2\2"+
		"\u1556\u1557\tZ\2\2\u1557\u0311\3\2\2\2\u02d1\u0315\u031a\u0321\u0323"+
		"\u033c\u0343\u034c\u0351\u0356\u035c\u0367\u0369\u0376\u0378\u0391\u0393"+
		"\u039d\u039f\u03a1\u03a4\u03af\u03ba\u03bc\u03c2\u03c4\u03c6\u03c9\u03d7"+
		"\u03da\u03dc\u03de\u03e4\u03e7\u03f3\u03f8\u03fd\u0404\u0406\u0410\u0415"+
		"\u041d\u041f\u0423\u0427\u042c\u0431\u0436\u043c\u044a\u044f\u0452\u0458"+
		"\u0461\u046f\u0477\u0481\u0484\u0489\u048e\u0495\u049a\u04a4\u04ab\u04ad"+
		"\u04b1\u04b7\u04bc\u04c6\u04d0\u04d5\u04e1\u04e6\u04f6\u0502\u0507\u050c"+
		"\u0513\u0515\u051f\u0524\u0527\u052b\u0530\u0536\u0548\u054d\u0552\u0554"+
		"\u055b\u0562\u0565\u0568\u056b\u0576\u0582\u0586\u0589\u0592\u059a\u05a2"+
		"\u05a5\u05ac\u05b0\u05b7\u05bd\u05e6\u0602\u0609\u060e\u0619\u061c\u0627"+
		"\u062f\u0633\u063f\u0642\u0648\u064b\u0650\u0655\u0659\u0663\u066d\u0673"+
		"\u067e\u0683\u0687\u068f\u0697\u069c\u069f\u06a1\u06a4\u06ad\u06b2\u06b9"+
		"\u06bc\u06bf\u06c3\u06c6\u06ce\u06d3\u06d8\u06df\u06e9\u06fb\u0702\u070c"+
		"\u0716\u071d\u0722\u0728\u0732\u0737\u073e\u0743\u0749\u074c\u074f\u0760"+
		"\u0765\u076e\u0773\u0779\u077c\u0783\u0786\u078d\u0792\u0796\u079b\u07a0"+
		"\u07aa\u07b0\u07ba\u07bf\u07c6\u07cc\u07d0\u07d3\u07d6\u07e7\u07ec\u07f4"+
		"\u0802\u0809\u0819\u0822\u0824\u0839\u0849\u0852\u0857\u085b\u085e\u0868"+
		"\u0874\u087a\u0882\u0886\u0889\u0897\u089b\u08a0\u08a3\u08b0\u08b4\u08c0"+
		"\u08c5\u08c9\u08cd\u08d3\u08d6\u08d9\u08f4\u08fa\u08fe\u0904\u0910\u0919"+
		"\u091b\u0921\u0925\u0928\u0931\u093c\u0940\u0943\u0947\u094f\u0958\u0961"+
		"\u0963\u0982\u0986\u098d\u0991\u0995\u0999\u09a5\u09a9\u09b7\u09bd\u09c4"+
		"\u09c9\u09d3\u09d9\u09db\u09e4\u09ee\u09f3\u0a02\u0a06\u0a09\u0a0d\u0a12"+
		"\u0a16\u0a1c\u0a24\u0a2b\u0a30\u0a32\u0a37\u0a3c\u0a44\u0a4b\u0a4f\u0a52"+
		"\u0a5e\u0a64\u0a6c\u0a76\u0a81\u0a84\u0a8b\u0a8e\u0a95\u0aa0\u0aa6\u0aaa"+
		"\u0ab4\u0ab7\u0abd\u0ac8\u0aca\u0acc\u0acf\u0ad3\u0ad6\u0ada\u0ade\u0ae3"+
		"\u0aee\u0af2\u0afa\u0afd\u0b02\u0b04\u0b0d\u0b17\u0b1c\u0b22\u0b26\u0b29"+
		"\u0b31\u0b34\u0b38\u0b3c\u0b41\u0b44\u0b48\u0b4c\u0b50\u0b5c\u0b6a\u0b6f"+
		"\u0b73\u0b7c\u0b80\u0b88\u0b8b\u0b8e\u0b92\u0b95\u0b98\u0b9b\u0b9f\u0ba9"+
		"\u0bb0\u0bb7\u0bbc\u0bc1\u0bc8\u0bce\u0bd8\u0bda\u0bdf\u0be3\u0be6\u0be9"+
		"\u0bed\u0bf2\u0bf6\u0bf8\u0c05\u0c0c\u0c1a\u0c1d\u0c27\u0c2b\u0c33\u0c3f"+
		"\u0c49\u0c4e\u0c58\u0c60\u0c63\u0c69\u0c6d\u0c72\u0c7c\u0c81\u0c8e\u0c9a"+
		"\u0c9f\u0ca9\u0cae\u0cb0\u0cb5\u0cb9\u0cbf\u0cc3\u0cd0\u0cd4\u0cde\u0ce1"+
		"\u0ce3\u0ce8\u0cf1\u0cfe\u0d06\u0d0f\u0d13\u0d18\u0d23\u0d25\u0d35\u0d3a"+
		"\u0d40\u0d46\u0d58\u0d5f\u0d62\u0d6a\u0d73\u0d75\u0d79\u0d7c\u0d81\u0d83"+
		"\u0d87\u0d93\u0d9c\u0da4\u0da9\u0dad\u0db2\u0db5\u0dbd\u0dc5\u0dcb\u0dce"+
		"\u0dd1\u0dd9\u0de3\u0def\u0df6\u0dfa\u0dfe\u0e01\u0e04\u0e09\u0e0e\u0e11"+
		"\u0e14\u0e1a\u0e1d\u0e23\u0e26\u0e29\u0e2e\u0e31\u0e39\u0e3f\u0e49\u0e4e"+
		"\u0e57\u0e61\u0e65\u0e67\u0e6a\u0e76\u0e7a\u0e7d\u0e91\u0e96\u0e9b\u0ea2"+
		"\u0ea5\u0eae\u0eb5\u0eba\u0ebe\u0ec6\u0ecc\u0ed4\u0ed7\u0edf\u0ee7\u0eea"+
		"\u0eed\u0ef6\u0efc\u0f02\u0f04\u0f11\u0f13\u0f1c\u0f1e\u0f22\u0f28\u0f2c"+
		"\u0f3a\u0f40\u0f4f\u0f52\u0f5b\u0f61\u0f66\u0f71\u0f75\u0f7c\u0f81\u0f85"+
		"\u0f8b\u0f8f\u0f9a\u0f9f\u0fa4\u0fad\u0faf\u0fb1\u0fc2\u0fca\u0fd6\u0fe0"+
		"\u0fe8\u0ff1\u0ff4\u0ffb\u1003\u100a\u100e\u1015\u1019\u101e\u1022\u102a"+
		"\u102e\u1035\u103e\u104c\u1059\u105e\u1074\u1078\u107b\u1082\u1085\u1089"+
		"\u108c\u1093\u1096\u109c\u109f\u10a3\u10a6\u10ad\u10b2\u10c0\u10c6\u10c8"+
		"\u10cc\u10d4\u10e0\u10e5\u10ea\u10f0\u10f3\u10f7\u1101\u1111\u1115\u111e"+
		"\u1124\u1132\u113d\u1141\u1144\u114d\u1153\u115d\u1165\u1168\u116b\u1174"+
		"\u1179\u1182\u1188\u118d\u1190\u1195\u119a\u119e\u11a4\u11aa\u11b3\u11b8"+
		"\u11c0\u11c4\u11c9\u11cf\u11d6\u11db\u11e3\u11e8\u11f0\u11f3\u11f6\u11f9"+
		"\u11fd\u1202\u1207\u120b\u1212\u1217\u1219\u1224\u1228\u122a\u1235\u1240"+
		"\u1249\u124c\u1250\u1253\u1257\u1264\u1269\u1271\u1278\u127d\u1281\u1286"+
		"\u128b\u128e\u1295\u129f\u12a7\u12ab\u12b5\u12b8\u12ba\u12c4\u12c6\u12cc"+
		"\u12d2\u12d4\u12e2\u12e4\u12eb\u12ee\u12f7\u1300\u1308\u130d\u1311\u1314"+
		"\u1318\u131f\u132b\u1336\u1339\u133d\u1350\u1355\u135c\u1369\u1373\u1378"+
		"\u1381\u1389\u1391\u1397\u139c\u13a1\u13a5\u13aa\u13ad\u13b3\u13b7\u13bc"+
		"\u13c5\u13cb\u13d0\u13d7\u13e1\u13e5\u13eb\u13f0\u13f5\u13f7\u13fc\u1400"+
		"\u1405\u140c\u1411\u1413\u1415\u141f\u1424\u1428\u142b\u142f\u1438\u143e"+
		"\u1442\u1444\u1448\u144c\u1450\u1458\u1460\u1462\u1467\u146b\u146e\u1486"+
		"\u148d\u14ae\u14b3\u14b6\u14bb\u14bd\u14c3\u14cb\u14d0\u14d7\u14db\u14df"+
		"\u14e6\u14ec\u14f2\u14f8\u14fe\u1503\u1505\u1508\u1512\u1515\u1517\u1519"+
		"\u1527\u1532\u1538\u1541\u1546\u154b\u1550";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}