// Generated from plsql.g4 by ANTLR 4.5.2
package biz.redsoft.ora2rdb;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, A_LETTER=2, ADD=3, AFTER=4, AGENT=5, AGGREGATE=6, ALL=7, ALTER=8, 
		ANALYZE=9, AND=10, ANY=11, ARCHIVE=12, ARRAY=13, AS=14, ASC=15, ASSOCIATE=16, 
		AT=17, ATTRIBUTE=18, AUDIT=19, AUTHID=20, AUTO=21, AUTOMATIC=22, AUTONOMOUS_TRANSACTION=23, 
		BASIC=24, BASICFILE=25, BATCH=26, BEFORE=27, BEGIN=28, BETWEEN=29, BFILE=30, 
		BINARY_DOUBLE=31, BINARY_FLOAT=32, BINARY_INTEGER=33, BLOB=34, BLOCK=35, 
		BODY=36, BOOLEAN=37, BOTH=38, BREADTH=39, BUFFER_POOL=40, BULK=41, BY=42, 
		BYTE=43, C_LETTER=44, CACHE=45, CALL=46, CANONICAL=47, CASCADE=48, CASE=49, 
		CAST=50, CELL_FLASH_CACHE=51, CHAR=52, CHAR_CS=53, CHARACTER=54, CHECK=55, 
		CHR=56, CHUNK=57, CLOB=58, CLOSE=59, CLUSTER=60, COLLECT=61, COLUMN=62, 
		COLUMNS=63, COMMENT=64, COMMIT=65, COMMITTED=66, COMPATIBILITY=67, COMPILE=68, 
		COMPOUND=69, COMPRESS=70, COMPUTE=71, CONNECT=72, CONNECT_BY_ROOT=73, 
		CONSTANT=74, CONSTRAINT=75, CONSTRAINTS=76, CONSTRUCTOR=77, CONTENT=78, 
		CONTEXT=79, CONTINUE=80, CONVERT=81, CORRUPT_XID=82, CORRUPT_XID_ALL=83, 
		COST=84, COUNT=85, CREATE=86, CREATION=87, CROSS=88, CUBE=89, CURRENT=90, 
		CURRENT_USER=91, CURSOR=92, CUSTOMDATUM=93, CYCLE=94, DATA=95, DATABASE=96, 
		DATE=97, DAY=98, DB_ROLE_CHANGE=99, DBTIMEZONE=100, DDL=101, DEBUG=102, 
		DEC=103, DECIMAL=104, DECLARE=105, DECOMPOSE=106, DECREMENT=107, DEDUPLICATE=108, 
		DEFAULT=109, DEFAULTS=110, DEFERRABLE=111, DEFERRED=112, DEFINER=113, 
		DELETE=114, DEPTH=115, DESC=116, DETERMINISTIC=117, DIMENSION=118, DISABLE=119, 
		DISASSOCIATE=120, DISTINCT=121, DOCUMENT=122, DOUBLE=123, DROP=124, DSINTERVAL_UNCONSTRAINED=125, 
		EACH=126, ELEMENT=127, ELSE=128, ELSIF=129, EMPTY=130, ENABLE=131, ENCODING=132, 
		END=133, ENTITYESCAPING=134, ERRORS=135, ESCAPE=136, EVALNAME=137, EXCEPTION=138, 
		EXCEPTION_INIT=139, EXCEPTIONS=140, EXCLUDE=141, EXCLUSIVE=142, EXECUTE=143, 
		EXISTS=144, EXIT=145, EXPLAIN=146, EXTERNAL=147, EXTRACT=148, FAILURE=149, 
		FALSE=150, FETCH=151, FILESYSTEM_LIKE_LOGGING=152, FINAL=153, FIRST=154, 
		FIRST_VALUE=155, FLASH_CACHE=156, FLOAT=157, FOLLOWING=158, FOLLOWS=159, 
		FOR=160, FORALL=161, FORCE=162, FOREIGN=163, FREELIST=164, FREELISTS=165, 
		FROM=166, FULL=167, FUNCTION=168, GOTO=169, GRANT=170, GROUP=171, GROUPS=172, 
		GROUPING=173, HASH=174, HAVING=175, HIDE=176, HIGH=177, HOUR=178, IF=179, 
		IGNORE=180, IMMEDIATE=181, IN=182, INCLUDE=183, INCLUDING=184, INCREMENT=185, 
		INDENT=186, INDEX=187, INDEXED=188, INDEXES=189, INDICATOR=190, INDICES=191, 
		INFINITE=192, INITIAL=193, INITIALY=194, INITRANS=195, INLINE=196, INNER=197, 
		INOUT=198, INSERT=199, INSTANTIABLE=200, INSTEAD=201, INT=202, INTEGER=203, 
		INTERSECT=204, INTERVAL=205, INTO=206, INVALIDATE=207, IS=208, ISOLATION=209, 
		ITERATE=210, JAVA=211, JOIN=212, KEEP=213, KEEP_DUPLICATES=214, KEY=215, 
		LANGUAGE=216, LAST=217, LAST_VALUE=218, LEADING=219, LEFT=220, LENGTH=221, 
		LEVEL=222, LEVELS=223, LIBRARY=224, LIKE=225, LIKE2=226, LIKE4=227, LIKEC=228, 
		LIMIT=229, LOB=230, LOCAL=231, LOCK=232, LOCKED=233, LOG=234, LOGGING=235, 
		LOGOFF=236, LOGON=237, LONG=238, LOOP=239, LOW=240, MAIN=241, MAP=242, 
		MATCHED=243, MAXEXTENTS=244, MAXTRANS=245, MAXVALUE=246, MEASURES=247, 
		MEDIUM=248, MEMBER=249, MERGE=250, MINEXTENTS=251, MINUS=252, MINUTE=253, 
		MINVALUE=254, MLSLABEL=255, MODE=256, MODEL=257, MODIFY=258, MONTH=259, 
		MULTISET=260, NAME=261, NAN=262, NATURAL=263, NATURALN=264, NAV=265, NCHAR=266, 
		NCHAR_CS=267, NCLOB=268, NESTED=269, NEW=270, NEXT=271, NO=272, NOAUDIT=273, 
		NOCACHE=274, NOCOMPRESS=275, NOCOPY=276, NOCYCLE=277, NOENTITYESCAPING=278, 
		NOLOGGING=279, NOMAXVALUE=280, NOMINVALUE=281, NONE=282, NOORDER=283, 
		NORELY=284, NOSCHEMACHECK=285, NOT=286, NOVALIDATE=287, NOWAIT=288, NULL=289, 
		NULLS=290, NUMBER=291, NUMERIC=292, NVARCHAR2=293, OBJECT=294, OF=295, 
		OFF=296, OID=297, OLD=298, OLTP=299, ON=300, ONLY=301, OPEN=302, OPTION=303, 
		OR=304, ORADATA=305, ORDER=306, ORDINALITY=307, OSERROR=308, OUT=309, 
		OUTER=310, OVER=311, OVERRIDING=312, PACKAGE=313, PARALLEL_ENABLE=314, 
		PARAMETERS=315, PARENT=316, PARTITION=317, PASSING=318, PATH=319, PCTFREE=320, 
		PCTINCREASE=321, PCTUSED=322, PERCENT_ROWTYPE=323, PERCENT_TYPE=324, PIPELINED=325, 
		PIVOT=326, PLAN=327, PLS_INTEGER=328, POSITIVE=329, POSITIVEN=330, PRAGMA=331, 
		PRECEDING=332, PRECISION=333, PRESENT=334, PRIMARY=335, PRIOR=336, PROCEDURE=337, 
		QUERY=338, RAISE=339, RANGE=340, RAW=341, READ=342, READS=343, REAL=344, 
		RECORD=345, RECYCLE=346, REF=347, REFERENCE=348, REFERENCES=349, REFERENCING=350, 
		REJECT=351, RELIES_ON=352, RELY=353, RENAME=354, REPLACE=355, RESPECT=356, 
		RESTRICT_REFERENCES=357, RESULT=358, RESULT_CACHE=359, RETURN=360, RETURNING=361, 
		REUSE=362, REVERSE=363, REVOKE=364, RIGHT=365, ROLLBACK=366, ROLLUP=367, 
		ROW=368, ROWID=369, ROWS=370, RULES=371, SAMPLE=372, SAVE=373, SAVEPOINT=374, 
		SCHEMA=375, SCHEMACHECK=376, SCN=377, SEARCH=378, SECOND=379, SECUREFILE=380, 
		SEED=381, SEGMENT=382, SELECT=383, SELF=384, SEQUENCE=385, SEQUENTIAL=386, 
		SERIALIZABLE=387, SERIALLY_REUSABLE=388, SERVERERROR=389, SESSIONTIMEZONE=390, 
		SET=391, SETS=392, SETTINGS=393, SHARE=394, SHOW=395, SHUTDOWN=396, SIBLINGS=397, 
		SIGNTYPE=398, SIMPLE_INTEGER=399, SINGLE=400, SIZE=401, SKIP_=402, SMALLINT=403, 
		SNAPSHOT=404, SOME=405, SPECIFICATION=406, SQLDATA=407, SQLERROR=408, 
		STANDALONE=409, START=410, STARTUP=411, STATEMENT=412, STATEMENT_ID=413, 
		STATIC=414, STATISTICS=415, STORAGE=416, STORE=417, STRING=418, SUBMULTISET=419, 
		SUBPARTITION=420, SUBSTITUTABLE=421, SUBTYPE=422, SUCCESS=423, SUSPEND=424, 
		SYSTEM=425, TABLE=426, TABLESPACE=427, THE=428, THEN=429, TIME=430, TIMESTAMP=431, 
		TIMESTAMP_LTZ_UNCONSTRAINED=432, TIMESTAMP_TZ_UNCONSTRAINED=433, TIMESTAMP_UNCONSTRAINED=434, 
		TIMEZONE_ABBR=435, TIMEZONE_HOUR=436, TIMEZONE_MINUTE=437, TIMEZONE_REGION=438, 
		TO=439, TRAILING=440, TRANSACTION=441, TRANSLATE=442, TREAT=443, TRIGGER=444, 
		TRIM=445, TRUE=446, TRUNCATE=447, TYPE=448, UNBOUNDED=449, UNDER=450, 
		UNION=451, UNIQUE=452, UNLIMITED=453, UNPIVOT=454, UNTIL=455, UPDATE=456, 
		UPDATED=457, UPSERT=458, UROWID=459, USE=460, USING=461, VALIDATE=462, 
		VALUE=463, VALUES=464, VARCHAR=465, VARCHAR2=466, VARIABLE=467, VARRAY=468, 
		VARYING=469, VERSION=470, VERSIONS=471, VIEW=472, WAIT=473, WARNING=474, 
		WELLFORMED=475, WHEN=476, WHENEVER=477, WHERE=478, WHILE=479, WITH=480, 
		WITHIN=481, WORK=482, WRITE=483, XML=484, XMLAGG=485, XMLATTRIBUTES=486, 
		XMLCAST=487, XMLCOLATTVAL=488, XMLELEMENT=489, XMLEXISTS=490, XMLFOREST=491, 
		XMLNAMESPACES=492, XMLPARSE=493, XMLPI=494, XMLQUERY=495, XMLROOT=496, 
		XMLSERIALIZE=497, XMLTABLE=498, YEAR=499, YES=500, YMINTERVAL_UNCONSTRAINED=501, 
		ZONE=502, PREDICTION=503, PREDICTION_BOUNDS=504, PREDICTION_COST=505, 
		PREDICTION_DETAILS=506, PREDICTION_PROBABILITY=507, PREDICTION_SET=508, 
		CUME_DIST=509, DENSE_RANK=510, LISTAGG=511, PERCENT_RANK=512, PERCENTILE_CONT=513, 
		PERCENTILE_DISC=514, RANK=515, AVG=516, CORR=517, LAG=518, LEAD=519, MAX=520, 
		MEDIAN=521, MIN=522, NTILE=523, RATIO_TO_REPORT=524, ROW_NUMBER=525, SUM=526, 
		VARIANCE=527, REGR_=528, STDDEV=529, VAR_=530, COVAR_=531, NATIONAL_CHAR_STRING_LIT=532, 
		BIT_STRING_LIT=533, HEX_STRING_LIT=534, DOUBLE_PERIOD=535, PERIOD=536, 
		UNSIGNED_INTEGER=537, APPROXIMATE_NUM_LIT=538, CHAR_STRING=539, DELIMITED_ID=540, 
		PERCENT=541, AMPERSAND=542, LEFT_PAREN=543, RIGHT_PAREN=544, DOUBLE_ASTERISK=545, 
		ASTERISK=546, PLUS_SIGN=547, MINUS_SIGN=548, COMMA=549, SOLIDUS=550, AT_SIGN=551, 
		ASSIGN_OP=552, BINDVAR=553, COLON=554, SEMICOLON=555, LESS_THAN_OR_EQUALS_OP=556, 
		LESS_THAN_OP=557, GREATER_THAN_OR_EQUALS_OP=558, NOT_EQUAL_OP=559, CARRET_OPERATOR_PART=560, 
		TILDE_OPERATOR_PART=561, EXCLAMATION_OPERATOR_PART=562, GREATER_THAN_OP=563, 
		CONCATENATION_OP=564, VERTICAL_BAR=565, EQUALS_OP=566, LEFT_BRACKET=567, 
		RIGHT_BRACKET=568, INTRODUCER=569, SPACES=570, SINGLE_LINE_COMMENT=571, 
		MULTI_LINE_COMMENT=572, PROMPT=573, SQL92_RESERVED_ALL=574, SQL92_RESERVED_ALTER=575, 
		SQL92_RESERVED_AND=576, SQL92_RESERVED_ANY=577, SQL92_RESERVED_AS=578, 
		SQL92_RESERVED_ASC=579, SQL92_RESERVED_BEGIN=580, SQL92_RESERVED_BETWEEN=581, 
		SQL92_RESERVED_BY=582, SQL92_RESERVED_CASE=583, SQL92_RESERVED_CHECK=584, 
		PLSQL_RESERVED_CLUSTERS=585, PLSQL_RESERVED_COLAUTH=586, PLSQL_RESERVED_COMPRESS=587, 
		SQL92_RESERVED_CONNECT=588, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=589, PLSQL_RESERVED_CRASH=590, 
		SQL92_RESERVED_CREATE=591, SQL92_RESERVED_CURRENT=592, SQL92_RESERVED_CURSOR=593, 
		SQL92_RESERVED_DATE=594, SQL92_RESERVED_DECLARE=595, SQL92_RESERVED_DEFAULT=596, 
		SQL92_RESERVED_DELETE=597, SQL92_RESERVED_DESC=598, SQL92_RESERVED_DISTINCT=599, 
		SQL92_RESERVED_DROP=600, SQL92_RESERVED_ELSE=601, SQL92_RESERVED_END=602, 
		SQL92_RESERVED_EXCEPTION=603, PLSQL_RESERVED_EXCLUSIVE=604, SQL92_RESERVED_EXISTS=605, 
		SQL92_RESERVED_FALSE=606, SQL92_RESERVED_FETCH=607, SQL92_RESERVED_FOR=608, 
		SQL92_RESERVED_FROM=609, SQL92_RESERVED_GOTO=610, SQL92_RESERVED_GRANT=611, 
		SQL92_RESERVED_GROUP=612, SQL92_RESERVED_HAVING=613, PLSQL_RESERVED_IDENTIFIED=614, 
		PLSQL_RESERVED_IF=615, SQL92_RESERVED_IN=616, PLSQL_RESERVED_INDEX=617, 
		PLSQL_RESERVED_INDEXES=618, SQL92_RESERVED_INSERT=619, SQL92_RESERVED_INTERSECT=620, 
		SQL92_RESERVED_INTO=621, SQL92_RESERVED_IS=622, SQL92_RESERVED_LIKE=623, 
		PLSQL_RESERVED_LOCK=624, PLSQL_RESERVED_MINUS=625, PLSQL_RESERVED_MODE=626, 
		PLSQL_RESERVED_NOCOMPRESS=627, SQL92_RESERVED_NOT=628, PLSQL_RESERVED_NOWAIT=629, 
		SQL92_RESERVED_NULL=630, SQL92_RESERVED_OF=631, SQL92_RESERVED_ON=632, 
		SQL92_RESERVED_OPTION=633, SQL92_RESERVED_OR=634, SQL92_RESERVED_ORDER=635, 
		SQL92_RESERVED_OVERLAPS=636, SQL92_RESERVED_PRIOR=637, SQL92_RESERVED_PROCEDURE=638, 
		SQL92_RESERVED_PUBLIC=639, PLSQL_RESERVED_RESOURCE=640, SQL92_RESERVED_REVOKE=641, 
		SQL92_RESERVED_SELECT=642, PLSQL_RESERVED_SHARE=643, SQL92_RESERVED_SIZE=644, 
		PLSQL_RESERVED_START=645, PLSQL_RESERVED_TABAUTH=646, SQL92_RESERVED_TABLE=647, 
		SQL92_RESERVED_THE=648, SQL92_RESERVED_THEN=649, SQL92_RESERVED_TO=650, 
		SQL92_RESERVED_TRUE=651, SQL92_RESERVED_UNION=652, SQL92_RESERVED_UNIQUE=653, 
		SQL92_RESERVED_UPDATE=654, SQL92_RESERVED_VALUES=655, SQL92_RESERVED_VIEW=656, 
		PLSQL_RESERVED_VIEWS=657, SQL92_RESERVED_WHEN=658, SQL92_RESERVED_WHERE=659, 
		SQL92_RESERVED_WITH=660, PLSQL_NON_RESERVED_USING=661, PLSQL_NON_RESERVED_MODEL=662, 
		PLSQL_NON_RESERVED_ELSIF=663, PLSQL_NON_RESERVED_PIVOT=664, PLSQL_NON_RESERVED_UNPIVOT=665, 
		REGULAR_ID=666, ZV=667;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_create_table = 4, RULE_physical_properties = 5, 
		RULE_deferred_segment_creation = 6, RULE_segment_attributes_clause = 7, 
		RULE_physical_attributes_clause = 8, RULE_storage_clause = 9, RULE_table_compression = 10, 
		RULE_logging_clause = 11, RULE_lob_storage_clause = 12, RULE_lob_storage_parameters = 13, 
		RULE_lob_parameters = 14, RULE_lob_deduplicate_clause = 15, RULE_lob_compression_clause = 16, 
		RULE_alter_table = 17, RULE_column_clauses = 18, RULE_modify_column_clauses = 19, 
		RULE_modify_col_properties = 20, RULE_modify_col_substitutable = 21, RULE_inline_constraint = 22, 
		RULE_constraint_clauses = 23, RULE_out_of_line_constraint = 24, RULE_references_clause = 25, 
		RULE_constraint_state = 26, RULE_using_index_clause = 27, RULE_index_properties = 28, 
		RULE_index_attributes = 29, RULE_compute_statistics_clause = 30, RULE_for_clause = 31, 
		RULE_exceptions_clause = 32, RULE_create_view = 33, RULE_create_index = 34, 
		RULE_table_index_clause = 35, RULE_index_expr = 36, RULE_drop_function = 37, 
		RULE_alter_function = 38, RULE_create_function_body = 39, RULE_parallel_enable_clause = 40, 
		RULE_partition_by_clause = 41, RULE_result_cache_clause = 42, RULE_relies_on_part = 43, 
		RULE_streaming_clause = 44, RULE_drop_package = 45, RULE_alter_package = 46, 
		RULE_create_package = 47, RULE_package_body = 48, RULE_package_spec = 49, 
		RULE_package_obj_spec = 50, RULE_procedure_spec = 51, RULE_function_spec = 52, 
		RULE_package_obj_body = 53, RULE_drop_procedure = 54, RULE_alter_procedure = 55, 
		RULE_create_procedure_body = 56, RULE_drop_trigger = 57, RULE_alter_trigger = 58, 
		RULE_create_trigger = 59, RULE_trigger_follows_clause = 60, RULE_trigger_when_clause = 61, 
		RULE_simple_dml_trigger = 62, RULE_for_each_row = 63, RULE_compound_dml_trigger = 64, 
		RULE_non_dml_trigger = 65, RULE_trigger_body = 66, RULE_routine_clause = 67, 
		RULE_compound_trigger_block = 68, RULE_timing_point_section = 69, RULE_non_dml_event = 70, 
		RULE_dml_event_clause = 71, RULE_dml_event_element = 72, RULE_dml_event_nested_clause = 73, 
		RULE_referencing_clause = 74, RULE_referencing_element = 75, RULE_drop_type = 76, 
		RULE_alter_type = 77, RULE_compile_type_clause = 78, RULE_replace_type_clause = 79, 
		RULE_alter_method_spec = 80, RULE_alter_method_element = 81, RULE_alter_attribute_definition = 82, 
		RULE_attribute_definition = 83, RULE_alter_collection_clauses = 84, RULE_dependent_handling_clause = 85, 
		RULE_dependent_exceptions_part = 86, RULE_create_type = 87, RULE_type_definition = 88, 
		RULE_object_type_def = 89, RULE_object_as_part = 90, RULE_object_under_part = 91, 
		RULE_nested_table_type_def = 92, RULE_sqlj_object_type = 93, RULE_type_body = 94, 
		RULE_type_body_elements = 95, RULE_map_order_func_declaration = 96, RULE_subprog_decl_in_type = 97, 
		RULE_proc_decl_in_type = 98, RULE_func_decl_in_type = 99, RULE_constructor_declaration = 100, 
		RULE_modifier_clause = 101, RULE_object_member_spec = 102, RULE_sqlj_object_type_attr = 103, 
		RULE_element_spec = 104, RULE_element_spec_options = 105, RULE_subprogram_spec = 106, 
		RULE_type_procedure_spec = 107, RULE_type_function_spec = 108, RULE_constructor_spec = 109, 
		RULE_map_order_function_spec = 110, RULE_pragma_clause = 111, RULE_pragma_elements = 112, 
		RULE_type_elements_parameter = 113, RULE_drop_sequence = 114, RULE_alter_sequence = 115, 
		RULE_create_sequence = 116, RULE_sequence_spec = 117, RULE_sequence_start_clause = 118, 
		RULE_invoker_rights_clause = 119, RULE_compiler_parameters_clause = 120, 
		RULE_call_spec = 121, RULE_java_spec = 122, RULE_c_spec = 123, RULE_c_agent_in_clause = 124, 
		RULE_c_parameters_clause = 125, RULE_parameter = 126, RULE_default_value_part = 127, 
		RULE_declare_spec = 128, RULE_variable_declaration = 129, RULE_subtype_declaration = 130, 
		RULE_cursor_declaration = 131, RULE_parameter_spec = 132, RULE_exception_declaration = 133, 
		RULE_pragma_declaration = 134, RULE_record_declaration = 135, RULE_record_type_dec = 136, 
		RULE_field_spec = 137, RULE_record_var_dec = 138, RULE_table_declaration = 139, 
		RULE_table_type_dec = 140, RULE_table_indexed_by_part = 141, RULE_varray_type_def = 142, 
		RULE_table_var_dec = 143, RULE_seq_of_statements = 144, RULE_label_declaration = 145, 
		RULE_statement = 146, RULE_assignment_statement = 147, RULE_continue_statement = 148, 
		RULE_exit_statement = 149, RULE_goto_statement = 150, RULE_if_statement = 151, 
		RULE_elsif_part = 152, RULE_else_part = 153, RULE_loop_statement = 154, 
		RULE_cursor_loop_param = 155, RULE_forall_statement = 156, RULE_bounds_clause = 157, 
		RULE_between_bound = 158, RULE_lower_bound = 159, RULE_upper_bound = 160, 
		RULE_null_statement = 161, RULE_raise_statement = 162, RULE_return_statement = 163, 
		RULE_function_call = 164, RULE_body = 165, RULE_exception_clause = 166, 
		RULE_exception_handler = 167, RULE_trigger_block = 168, RULE_block = 169, 
		RULE_sql_statement = 170, RULE_execute_immediate = 171, RULE_dynamic_returning_clause = 172, 
		RULE_data_manipulation_language_statements = 173, RULE_cursor_manipulation_statements = 174, 
		RULE_close_statement = 175, RULE_open_statement = 176, RULE_fetch_statement = 177, 
		RULE_open_for_statement = 178, RULE_transaction_control_statements = 179, 
		RULE_set_transaction_command = 180, RULE_set_constraint_command = 181, 
		RULE_commit_statement = 182, RULE_write_clause = 183, RULE_rollback_statement = 184, 
		RULE_savepoint_statement = 185, RULE_explain_statement = 186, RULE_select_statement = 187, 
		RULE_subquery_factoring_clause = 188, RULE_factoring_element = 189, RULE_search_clause = 190, 
		RULE_cycle_clause = 191, RULE_subquery = 192, RULE_subquery_operation_part = 193, 
		RULE_subquery_basic_elements = 194, RULE_query_block = 195, RULE_selected_element = 196, 
		RULE_from_clause = 197, RULE_select_list_elements = 198, RULE_table_ref_list = 199, 
		RULE_table_ref = 200, RULE_table_ref_aux = 201, RULE_join_clause = 202, 
		RULE_join_on_part = 203, RULE_join_using_part = 204, RULE_outer_join_type = 205, 
		RULE_query_partition_clause = 206, RULE_flashback_query_clause = 207, 
		RULE_pivot_clause = 208, RULE_pivot_element = 209, RULE_pivot_for_clause = 210, 
		RULE_pivot_in_clause = 211, RULE_pivot_in_clause_element = 212, RULE_pivot_in_clause_elements = 213, 
		RULE_unpivot_clause = 214, RULE_unpivot_in_clause = 215, RULE_unpivot_in_elements = 216, 
		RULE_hierarchical_query_clause = 217, RULE_start_part = 218, RULE_group_by_clause = 219, 
		RULE_group_by_elements = 220, RULE_rollup_cube_clause = 221, RULE_grouping_sets_clause = 222, 
		RULE_grouping_sets_elements = 223, RULE_having_clause = 224, RULE_model_clause = 225, 
		RULE_cell_reference_options = 226, RULE_return_rows_clause = 227, RULE_reference_model = 228, 
		RULE_main_model = 229, RULE_model_column_clauses = 230, RULE_model_column_partition_part = 231, 
		RULE_model_column_list = 232, RULE_model_column = 233, RULE_model_rules_clause = 234, 
		RULE_model_rules_part = 235, RULE_model_rules_element = 236, RULE_cell_assignment = 237, 
		RULE_model_iterate_clause = 238, RULE_until_part = 239, RULE_order_by_clause = 240, 
		RULE_order_by_elements = 241, RULE_for_update_clause = 242, RULE_for_update_of_part = 243, 
		RULE_for_update_options = 244, RULE_update_statement = 245, RULE_update_set_clause = 246, 
		RULE_column_based_update_set_clause = 247, RULE_delete_statement = 248, 
		RULE_insert_statement = 249, RULE_single_table_insert = 250, RULE_multi_table_insert = 251, 
		RULE_multi_table_element = 252, RULE_conditional_insert_clause = 253, 
		RULE_conditional_insert_when_part = 254, RULE_conditional_insert_else_part = 255, 
		RULE_insert_into_clause = 256, RULE_values_clause = 257, RULE_merge_statement = 258, 
		RULE_merge_update_clause = 259, RULE_merge_element = 260, RULE_merge_update_delete_part = 261, 
		RULE_merge_insert_clause = 262, RULE_selected_tableview = 263, RULE_lock_table_statement = 264, 
		RULE_wait_nowait_part = 265, RULE_lock_table_element = 266, RULE_lock_mode = 267, 
		RULE_general_table_ref = 268, RULE_static_returning_clause = 269, RULE_error_logging_clause = 270, 
		RULE_error_logging_into_part = 271, RULE_error_logging_reject_part = 272, 
		RULE_dml_table_expression_clause = 273, RULE_table_collection_expression = 274, 
		RULE_subquery_restriction_clause = 275, RULE_sample_clause = 276, RULE_seed_part = 277, 
		RULE_cursor_expression = 278, RULE_expression_list = 279, RULE_condition = 280, 
		RULE_condition_wrapper = 281, RULE_expression = 282, RULE_expression_wrapper = 283, 
		RULE_logical_and_expression = 284, RULE_negated_expression = 285, RULE_equality_expression = 286, 
		RULE_multiset_expression = 287, RULE_multiset_type = 288, RULE_relational_expression = 289, 
		RULE_compound_expression = 290, RULE_like_type = 291, RULE_like_escape_part = 292, 
		RULE_in_elements = 293, RULE_between_elements = 294, RULE_concatenation = 295, 
		RULE_concatenation_wrapper = 296, RULE_additive_expression = 297, RULE_multiply_expression = 298, 
		RULE_datetime_expression = 299, RULE_interval_expression = 300, RULE_model_expression = 301, 
		RULE_model_expression_element = 302, RULE_single_column_for_loop = 303, 
		RULE_for_like_part = 304, RULE_for_increment_decrement_type = 305, RULE_multi_column_for_loop = 306, 
		RULE_unary_expression = 307, RULE_case_statement = 308, RULE_simple_case_statement = 309, 
		RULE_simple_case_when_part = 310, RULE_searched_case_statement = 311, 
		RULE_searched_case_when_part = 312, RULE_case_else_part = 313, RULE_atom = 314, 
		RULE_expression_or_vector = 315, RULE_vector_expr = 316, RULE_quantified_expression = 317, 
		RULE_standard_function = 318, RULE_over_clause_keyword = 319, RULE_within_or_over_clause_keyword = 320, 
		RULE_standard_prediction_function_keyword = 321, RULE_over_clause = 322, 
		RULE_windowing_clause = 323, RULE_windowing_type = 324, RULE_windowing_elements = 325, 
		RULE_using_clause = 326, RULE_using_element = 327, RULE_collect_order_by_part = 328, 
		RULE_within_or_over_part = 329, RULE_cost_matrix_clause = 330, RULE_xml_passing_clause = 331, 
		RULE_xml_attributes_clause = 332, RULE_xml_namespaces_clause = 333, RULE_xml_table_column = 334, 
		RULE_xml_general_default_part = 335, RULE_xml_multiuse_expression_element = 336, 
		RULE_xmlroot_param_version_part = 337, RULE_xmlroot_param_standalone_part = 338, 
		RULE_xmlserialize_param_enconding_part = 339, RULE_xmlserialize_param_version_part = 340, 
		RULE_xmlserialize_param_ident_part = 341, RULE_sql_plus_command = 342, 
		RULE_whenever_command = 343, RULE_set_command = 344, RULE_exit_command = 345, 
		RULE_prompt_command = 346, RULE_partition_extension_clause = 347, RULE_column_alias = 348, 
		RULE_table_alias = 349, RULE_alias_quoted_string = 350, RULE_where_clause = 351, 
		RULE_current_of_clause = 352, RULE_into_clause = 353, RULE_xml_column_name = 354, 
		RULE_cost_class_name = 355, RULE_attribute_name = 356, RULE_savepoint_name = 357, 
		RULE_rollback_segment_name = 358, RULE_table_var_name = 359, RULE_schema_name = 360, 
		RULE_routine_name = 361, RULE_package_name = 362, RULE_implementation_type_name = 363, 
		RULE_parameter_name = 364, RULE_reference_model_name = 365, RULE_main_model_name = 366, 
		RULE_aggregate_function_name = 367, RULE_query_name = 368, RULE_constraint_name = 369, 
		RULE_label_name = 370, RULE_type_name = 371, RULE_sequence_name = 372, 
		RULE_exception_name = 373, RULE_function_name = 374, RULE_procedure_name = 375, 
		RULE_trigger_name = 376, RULE_variable_name = 377, RULE_index_name = 378, 
		RULE_cursor_name = 379, RULE_record_name = 380, RULE_collection_name = 381, 
		RULE_link_name = 382, RULE_column_name = 383, RULE_tableview_name = 384, 
		RULE_char_set_name = 385, RULE_keep_clause = 386, RULE_function_argument = 387, 
		RULE_function_argument_analytic = 388, RULE_function_argument_modeling = 389, 
		RULE_respect_or_ignore_nulls = 390, RULE_argument = 391, RULE_type_spec = 392, 
		RULE_datatype = 393, RULE_precision_part = 394, RULE_native_datatype_element = 395, 
		RULE_bind_variable = 396, RULE_general_element = 397, RULE_general_element_part = 398, 
		RULE_table_element = 399, RULE_constant = 400, RULE_numeric = 401, RULE_numeric_negative = 402, 
		RULE_quoted_string = 403, RULE_id = 404, RULE_id_expression = 405, RULE_not_equal_op = 406, 
		RULE_greater_than_or_equals_op = 407, RULE_less_than_or_equals_op = 408, 
		RULE_concatenation_op = 409, RULE_outer_join_sign = 410, RULE_regular_id = 411;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"create_table", "physical_properties", "deferred_segment_creation", "segment_attributes_clause", 
		"physical_attributes_clause", "storage_clause", "table_compression", "logging_clause", 
		"lob_storage_clause", "lob_storage_parameters", "lob_parameters", "lob_deduplicate_clause", 
		"lob_compression_clause", "alter_table", "column_clauses", "modify_column_clauses", 
		"modify_col_properties", "modify_col_substitutable", "inline_constraint", 
		"constraint_clauses", "out_of_line_constraint", "references_clause", "constraint_state", 
		"using_index_clause", "index_properties", "index_attributes", "compute_statistics_clause", 
		"for_clause", "exceptions_clause", "create_view", "create_index", "table_index_clause", 
		"index_expr", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "package_body", "package_spec", "package_obj_spec", 
		"procedure_spec", "function_spec", "package_obj_body", "drop_procedure", 
		"alter_procedure", "create_procedure_body", "drop_trigger", "alter_trigger", 
		"create_trigger", "trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
		"for_each_row", "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
		"routine_clause", "compound_trigger_block", "timing_point_section", "non_dml_event", 
		"dml_event_clause", "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
		"referencing_element", "drop_type", "alter_type", "compile_type_clause", 
		"replace_type_clause", "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
		"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
		"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "body", "exception_clause", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"multiset_expression", "multiset_type", "relational_expression", "compound_expression", 
		"like_type", "like_escape_part", "in_elements", "between_elements", "concatenation", 
		"concatenation_wrapper", "additive_expression", "multiply_expression", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "partition_extension_clause", 
		"column_alias", "table_alias", "alias_quoted_string", "where_clause", 
		"current_of_clause", "into_clause", "xml_column_name", "cost_class_name", 
		"attribute_name", "savepoint_name", "rollback_segment_name", "table_var_name", 
		"schema_name", "routine_name", "package_name", "implementation_type_name", 
		"parameter_name", "reference_model_name", "main_model_name", "aggregate_function_name", 
		"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
		"exception_name", "function_name", "procedure_name", "trigger_name", "variable_name", 
		"index_name", "cursor_name", "record_name", "collection_name", "link_name", 
		"column_name", "tableview_name", "char_set_name", "keep_clause", "function_argument", 
		"function_argument_analytic", "function_argument_modeling", "respect_or_ignore_nulls", 
		"argument", "type_spec", "datatype", "precision_part", "native_datatype_element", 
		"bind_variable", "general_element", "general_element_part", "table_element", 
		"constant", "numeric", "numeric_negative", "quoted_string", "id", "id_expression", 
		"not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
		"concatenation_op", "outer_join_sign", "regular_id"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'..'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'.'", null, null, null, 
		null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", 
		"'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", "'>='", null, 
		"'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", 
		null, null, null, null, "'all'", "'alter'", "'and'", "'any'", "'as'", 
		"'asc'", "'begin'", "'between'", "'by'", "'case'", "'check'", "'clusters'", 
		"'colauth'", "'compress'", "'connect'", "'connect_by_root'", "'crash'", 
		"'create'", "'current'", "'cursor'", "'date'", "'declare'", "'default'", 
		"'delete'", "'desc'", "'distinct'", "'drop'", "'else'", "'end'", "'exception'", 
		"'exclusive'", "'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", 
		"'grant'", "'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", 
		"'indexes'", "'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", 
		"'minus'", "'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", 
		"'on'", "'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'", 
		"'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
		"'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'", 
		"'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'", 
		"'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'", 
		null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", 
		"ANALYZE", "AND", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", 
		"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
		"BASIC", "BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", 
		"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", 
		"BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BULK", "BY", "BYTE", "C_LETTER", 
		"CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", "CELL_FLASH_CACHE", 
		"CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CHUNK", "CLOB", "CLOSE", 
		"CLUSTER", "COLLECT", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
		"COMPATIBILITY", "COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT", 
		"CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
		"CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", 
		"COST", "COUNT", "CREATE", "CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", 
		"CURSOR", "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", 
		"DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", 
		"DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", 
		"ENTITYESCAPING", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
		"FINAL", "FIRST", "FIRST_VALUE", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
		"FOLLOWS", "FOR", "FORALL", "FORCE", "FOREIGN", "FREELIST", "FREELISTS", 
		"FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", 
		"HASH", "HAVING", "HIDE", "HIGH", "HOUR", "IF", "IGNORE", "IMMEDIATE", 
		"IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", 
		"INDEXES", "INDICATOR", "INDICES", "INFINITE", "INITIAL", "INITIALY", 
		"INITRANS", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "KEEP_DUPLICATES", "KEY", 
		"LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", "LENGTH", "LEVEL", 
		"LEVELS", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOB", 
		"LOCAL", "LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGON", "LONG", 
		"LOOP", "LOW", "MAIN", "MAP", "MATCHED", "MAXEXTENTS", "MAXTRANS", "MAXVALUE", 
		"MEASURES", "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINUS", "MINUTE", 
		"MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", 
		"NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", 
		"NESTED", "NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", 
		"NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", "NOMAXVALUE", "NOMINVALUE", 
		"NONE", "NOORDER", "NORELY", "NOSCHEMACHECK", "NOT", "NOVALIDATE", "NOWAIT", 
		"NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", 
		"OID", "OLD", "OLTP", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
		"ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
		"PATH", "PCTFREE", "PCTINCREASE", "PCTUSED", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
		"PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", 
		"PRAGMA", "PRECEDING", "PRECISION", "PRESENT", "PRIMARY", "PRIOR", "PROCEDURE", 
		"QUERY", "RAISE", "RANGE", "RAW", "READ", "READS", "REAL", "RECORD", "RECYCLE", 
		"REF", "REFERENCE", "REFERENCES", "REFERENCING", "REJECT", "RELIES_ON", 
		"RELY", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", 
		"RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", 
		"SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SECUREFILE", 
		"SEED", "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
		"SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", 
		"SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", 
		"SQLDATA", "SQLERROR", "STANDALONE", "START", "STARTUP", "STATEMENT", 
		"STATEMENT_ID", "STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", 
		"SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
		"SUSPEND", "SYSTEM", "TABLE", "TABLESPACE", "THE", "THEN", "TIME", "TIMESTAMP", 
		"TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRIM", 
		"TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
		"UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", "USE", "USING", 
		"VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", 
		"VARYING", "VERSION", "VERSIONS", "VIEW", "WAIT", "WARNING", "WELLFORMED", 
		"WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "WRITE", 
		"XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", 
		"XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", 
		"XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
		"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
		"NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
		"PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", 
		"PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", 
		"ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
		"ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", 
		"SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", 
		"SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
		"PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", 
		"SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", 
		"SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT", 
		"SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", 
		"SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
		"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", 
		"SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
		"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
		"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
		"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
		"ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(825); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(824);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				}
				setState(827); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CELL_FLASH_CACHE) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CHUNK) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMN) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEDUPLICATE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRABLE - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FOREIGN - 128)) | (1L << (FREELIST - 128)) | (1L << (FREELISTS - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPS - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HIGH - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDEXES - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INFINITE - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEEP_DUPLICATES - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LENGTH - 192)) | (1L << (LEVEL - 192)) | (1L << (LEVELS - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOB - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGGING - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (LOW - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXEXTENTS - 192)) | (1L << (MAXTRANS - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEDIUM - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINEXTENTS - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (MODE - 256)) | (1L << (MODEL - 256)) | (1L << (MODIFY - 256)) | (1L << (MONTH - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)) | (1L << (NAN - 256)) | (1L << (NATURAL - 256)) | (1L << (NATURALN - 256)) | (1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)) | (1L << (NOCOMPRESS - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NOLOGGING - 256)) | (1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NORELY - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOVALIDATE - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (OLTP - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PCTFREE - 320)) | (1L << (PCTINCREASE - 320)) | (1L << (PCTUSED - 320)) | (1L << (PERCENT_ROWTYPE - 320)) | (1L << (PERCENT_TYPE - 320)) | (1L << (PIPELINED - 320)) | (1L << (PIVOT - 320)) | (1L << (PLAN - 320)) | (1L << (PLS_INTEGER - 320)) | (1L << (POSITIVE - 320)) | (1L << (POSITIVEN - 320)) | (1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIMARY - 320)) | (1L << (PRIOR - 320)) | (1L << (PROCEDURE - 320)) | (1L << (QUERY - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (READS - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (RECYCLE - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCES - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RELY - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SECUREFILE - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SELF - 384)) | (1L << (SEQUENCE - 384)) | (1L << (SEQUENTIAL - 384)) | (1L << (SERIALIZABLE - 384)) | (1L << (SERIALLY_REUSABLE - 384)) | (1L << (SERVERERROR - 384)) | (1L << (SESSIONTIMEZONE - 384)) | (1L << (SET - 384)) | (1L << (SETS - 384)) | (1L << (SETTINGS - 384)) | (1L << (SHARE - 384)) | (1L << (SHOW - 384)) | (1L << (SHUTDOWN - 384)) | (1L << (SIBLINGS - 384)) | (1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SIZE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (START - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STORAGE - 384)) | (1L << (STORE - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (SYSTEM - 384)) | (1L << (TABLE - 384)) | (1L << (TABLESPACE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (TYPE - 448)) | (1L << (UNBOUNDED - 448)) | (1L << (UNDER - 448)) | (1L << (UNION - 448)) | (1L << (UNIQUE - 448)) | (1L << (UNLIMITED - 448)) | (1L << (UNPIVOT - 448)) | (1L << (UNTIL - 448)) | (1L << (UPDATE - 448)) | (1L << (UPDATED - 448)) | (1L << (UPSERT - 448)) | (1L << (UROWID - 448)) | (1L << (USE - 448)) | (1L << (USING - 448)) | (1L << (VALIDATE - 448)) | (1L << (VALUE - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (VIEW - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHEN - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHERE - 448)) | (1L << (WHILE - 448)) | (1L << (WITH - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (PERCENT_RANK - 512)) | (1L << (PERCENTILE_CONT - 512)) | (1L << (PERCENTILE_DISC - 512)) | (1L << (RANK - 512)) | (1L << (AVG - 512)) | (1L << (CORR - 512)) | (1L << (LAG - 512)) | (1L << (LEAD - 512)) | (1L << (MAX - 512)) | (1L << (MEDIAN - 512)) | (1L << (MIN - 512)) | (1L << (NTILE - 512)) | (1L << (RATIO_TO_REPORT - 512)) | (1L << (ROW_NUMBER - 512)) | (1L << (SUM - 512)) | (1L << (VARIANCE - 512)) | (1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (BIT_STRING_LIT - 512)) | (1L << (HEX_STRING_LIT - 512)) | (1L << (DOUBLE_PERIOD - 512)) | (1L << (PERIOD - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (PERCENT - 512)) | (1L << (AMPERSAND - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (RIGHT_PAREN - 512)) | (1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SQL92_RESERVED_AND - 576)) | (1L << (SQL92_RESERVED_ANY - 576)) | (1L << (SQL92_RESERVED_AS - 576)) | (1L << (SQL92_RESERVED_ASC - 576)) | (1L << (SQL92_RESERVED_BEGIN - 576)) | (1L << (SQL92_RESERVED_BETWEEN - 576)) | (1L << (SQL92_RESERVED_BY - 576)) | (1L << (SQL92_RESERVED_CASE - 576)) | (1L << (SQL92_RESERVED_CHECK - 576)) | (1L << (PLSQL_RESERVED_CLUSTERS - 576)) | (1L << (PLSQL_RESERVED_COLAUTH - 576)) | (1L << (PLSQL_RESERVED_COMPRESS - 576)) | (1L << (SQL92_RESERVED_CONNECT - 576)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 576)) | (1L << (PLSQL_RESERVED_CRASH - 576)) | (1L << (SQL92_RESERVED_CREATE - 576)) | (1L << (SQL92_RESERVED_CURRENT - 576)) | (1L << (SQL92_RESERVED_CURSOR - 576)) | (1L << (SQL92_RESERVED_DATE - 576)) | (1L << (SQL92_RESERVED_DECLARE - 576)) | (1L << (SQL92_RESERVED_DEFAULT - 576)) | (1L << (SQL92_RESERVED_DELETE - 576)) | (1L << (SQL92_RESERVED_DESC - 576)) | (1L << (SQL92_RESERVED_DISTINCT - 576)) | (1L << (SQL92_RESERVED_DROP - 576)) | (1L << (SQL92_RESERVED_ELSE - 576)) | (1L << (SQL92_RESERVED_END - 576)) | (1L << (SQL92_RESERVED_EXCEPTION - 576)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 576)) | (1L << (SQL92_RESERVED_EXISTS - 576)) | (1L << (SQL92_RESERVED_FALSE - 576)) | (1L << (SQL92_RESERVED_FETCH - 576)) | (1L << (SQL92_RESERVED_FOR - 576)) | (1L << (SQL92_RESERVED_FROM - 576)) | (1L << (SQL92_RESERVED_GOTO - 576)) | (1L << (SQL92_RESERVED_GRANT - 576)) | (1L << (SQL92_RESERVED_GROUP - 576)) | (1L << (SQL92_RESERVED_HAVING - 576)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PLSQL_RESERVED_RESOURCE - 640)) | (1L << (SQL92_RESERVED_REVOKE - 640)) | (1L << (SQL92_RESERVED_SELECT - 640)) | (1L << (PLSQL_RESERVED_SHARE - 640)) | (1L << (SQL92_RESERVED_SIZE - 640)) | (1L << (PLSQL_RESERVED_START - 640)) | (1L << (PLSQL_RESERVED_TABAUTH - 640)) | (1L << (SQL92_RESERVED_TABLE - 640)) | (1L << (SQL92_RESERVED_THE - 640)) | (1L << (SQL92_RESERVED_THEN - 640)) | (1L << (SQL92_RESERVED_TO - 640)) | (1L << (SQL92_RESERVED_TRUE - 640)) | (1L << (SQL92_RESERVED_UNION - 640)) | (1L << (SQL92_RESERVED_UNIQUE - 640)) | (1L << (SQL92_RESERVED_UPDATE - 640)) | (1L << (SQL92_RESERVED_VALUES - 640)) | (1L << (SQL92_RESERVED_VIEW - 640)) | (1L << (PLSQL_RESERVED_VIEWS - 640)) | (1L << (SQL92_RESERVED_WHEN - 640)) | (1L << (SQL92_RESERVED_WHERE - 640)) | (1L << (SQL92_RESERVED_WITH - 640)) | (1L << (PLSQL_NON_RESERVED_USING - 640)) | (1L << (PLSQL_NON_RESERVED_MODEL - 640)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 640)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 640)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (CREATE - 86)) | (1L << (DELETE - 86)) | (1L << (DROP - 86)) | (1L << (EXPLAIN - 86)))) != 0) || _la==FUNCTION || _la==INSERT || _la==LOCK || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(829);
				unit_statement();
				}
				}
				setState(834);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(835);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (CREATE - 86)) | (1L << (DELETE - 86)) | (1L << (DROP - 86)) | (1L << (EXIT - 86)) | (1L << (EXPLAIN - 86)))) != 0) || _la==FUNCTION || _la==INSERT || _la==LOCK || _la==MERGE || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (PROCEDURE - 337)) | (1L << (SELECT - 337)) | (1L << (SET - 337)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UPDATE - 456)) | (1L << (WHENEVER - 456)) | (1L << (WITH - 456)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (LEFT_PAREN - 543)) | (1L << (SOLIDUS - 543)) | (1L << (PROMPT - 543)))) != 0)) {
				{
				setState(839);
				switch (_input.LA(1)) {
				case ALTER:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(837);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(838);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(843);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(844);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(846);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(847);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(848);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(849);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(850);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(851);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(852);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(853);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(854);
				create_procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(855);
				create_package();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(856);
				create_index();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(857);
				create_table();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(858);
				create_view();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(859);
				create_sequence();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(860);
				create_trigger();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(861);
				create_type();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(862);
				drop_function();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(863);
				drop_package();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(864);
				drop_procedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(865);
				drop_sequence();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(866);
				drop_trigger();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(867);
				drop_type();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(868);
				data_manipulation_language_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public List<Lob_storage_clauseContext> lob_storage_clause() {
			return getRuleContexts(Lob_storage_clauseContext.class);
		}
		public Lob_storage_clauseContext lob_storage_clause(int i) {
			return getRuleContext(Lob_storage_clauseContext.class,i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(871);
			match(CREATE);
			setState(872);
			match(TABLE);
			setState(876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(873);
				schema_name();
				setState(874);
				match(PERIOD);
				}
				break;
			}
			setState(878);
			tableview_name();
			setState(879);
			match(LEFT_PAREN);
			setState(880);
			field_spec();
			setState(885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(881);
				match(COMMA);
				setState(882);
				field_spec();
				}
				}
				setState(887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(888);
			match(RIGHT_PAREN);
			setState(890);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (LOGGING - 235)) | (1L << (MAXTRANS - 235)) | (1L << (NOCOMPRESS - 235)) | (1L << (NOLOGGING - 235)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PCTFREE - 320)) | (1L << (PCTUSED - 320)) | (1L << (SEGMENT - 320)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(889);
				physical_properties();
				}
			}

			setState(895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOB) {
				{
				{
				setState(892);
				lob_storage_clause();
				}
				}
				setState(897);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(898);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_properties(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(901);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(900);
				deferred_segment_creation();
				}
			}

			setState(903);
			segment_attributes_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(plsqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeferred_segment_creation(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(905);
			match(SEGMENT);
			setState(906);
			match(CREATION);
			setState(907);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSegment_attributes_clause(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_segment_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(912); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(912);
				switch (_input.LA(1)) {
				case COMPRESS:
				case FILESYSTEM_LIKE_LOGGING:
				case INITRANS:
				case LOGGING:
				case MAXTRANS:
				case NOCOMPRESS:
				case NOLOGGING:
				case PCTFREE:
				case PCTUSED:
				case STORAGE:
					{
					setState(909);
					physical_attributes_clause();
					}
					break;
				case TABLESPACE:
					{
					setState(910);
					match(TABLESPACE);
					setState(911);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(914); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (LOGGING - 235)) | (1L << (MAXTRANS - 235)) | (1L << (NOCOMPRESS - 235)) | (1L << (NOLOGGING - 235)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public List<TerminalNode> PCTFREE() { return getTokens(plsqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(plsqlParser.PCTFREE, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(plsqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(plsqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(plsqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(plsqlParser.INITRANS, i);
		}
		public List<TerminalNode> MAXTRANS() { return getTokens(plsqlParser.MAXTRANS); }
		public TerminalNode MAXTRANS(int i) {
			return getToken(plsqlParser.MAXTRANS, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_attributes_clause(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(927); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(927);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(916);
						match(PCTFREE);
						setState(917);
						match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(918);
						match(PCTUSED);
						setState(919);
						match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(920);
						match(INITRANS);
						setState(921);
						match(UNSIGNED_INTEGER);
						}
						break;
					case MAXTRANS:
						{
						setState(922);
						match(MAXTRANS);
						setState(923);
						match(UNSIGNED_INTEGER);
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(924);
						table_compression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(925);
						logging_clause();
						}
						break;
					case STORAGE:
						{
						setState(926);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(929); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(plsqlParser.STORAGE, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(plsqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(plsqlParser.INITIAL, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(plsqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(plsqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(plsqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(plsqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> MAXEXTENTS() { return getTokens(plsqlParser.MAXEXTENTS); }
		public TerminalNode MAXEXTENTS(int i) {
			return getToken(plsqlParser.MAXEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(plsqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(plsqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(plsqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(plsqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(plsqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(plsqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(plsqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(plsqlParser.GROUPS, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(plsqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(plsqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(plsqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(plsqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> CELL_FLASH_CACHE() { return getTokens(plsqlParser.CELL_FLASH_CACHE); }
		public TerminalNode CELL_FLASH_CACHE(int i) {
			return getToken(plsqlParser.CELL_FLASH_CACHE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(plsqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(plsqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(plsqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(plsqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(plsqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(plsqlParser.RECYCLE, i);
		}
		public List<TerminalNode> NONE() { return getTokens(plsqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(plsqlParser.NONE, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStorage_clause(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(931);
			match(STORAGE);
			setState(932);
			match(LEFT_PAREN);
			setState(954); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(954);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(933);
					match(INITIAL);
					setState(934);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NEXT:
					{
					setState(935);
					match(NEXT);
					setState(936);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MINEXTENTS:
					{
					setState(937);
					match(MINEXTENTS);
					setState(938);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MAXEXTENTS:
					{
					setState(939);
					match(MAXEXTENTS);
					setState(940);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(941);
					match(PCTINCREASE);
					setState(942);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(943);
					match(FREELISTS);
					setState(944);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(945);
					match(FREELIST);
					setState(946);
					match(GROUPS);
					setState(947);
					match(UNSIGNED_INTEGER);
					}
					break;
				case BUFFER_POOL:
					{
					setState(948);
					match(BUFFER_POOL);
					setState(949);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(950);
					match(FLASH_CACHE);
					setState(951);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case CELL_FLASH_CACHE:
					{
					setState(952);
					match(CELL_FLASH_CACHE);
					setState(953);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(956); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || _la==CELL_FLASH_CACHE || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (FLASH_CACHE - 156)) | (1L << (FREELIST - 156)) | (1L << (FREELISTS - 156)) | (1L << (INITIAL - 156)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (MAXEXTENTS - 244)) | (1L << (MINEXTENTS - 244)) | (1L << (NEXT - 244)))) != 0) || _la==PCTINCREASE );
			setState(958);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(plsqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(plsqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(plsqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(plsqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_compression(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_table_compression);
		int _la;
		try {
			setState(973);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(960);
				match(COMPRESS);
				setState(970);
				switch (_input.LA(1)) {
				case BASIC:
					{
					setState(961);
					match(BASIC);
					}
					break;
				case FOR:
					{
					setState(962);
					match(FOR);
					setState(968);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(963);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(964);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(966);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(965);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case CASCADE:
				case CHECK:
				case COMPRESS:
				case COMPUTE:
				case CONSTRAINT:
				case DEFERRABLE:
				case DISABLE:
				case ENABLE:
				case EXCEPTIONS:
				case FILESYSTEM_LIKE_LOGGING:
				case FOREIGN:
				case INITIALY:
				case INITRANS:
				case LOB:
				case LOGGING:
				case MAXTRANS:
				case NOCOMPRESS:
				case NOLOGGING:
				case NORELY:
				case NOT:
				case NOVALIDATE:
				case NULL:
				case PCTFREE:
				case PCTUSED:
				case PRIMARY:
				case REFERENCES:
				case RELY:
				case STORAGE:
				case TABLESPACE:
				case UNIQUE:
				case USING:
				case VALIDATE:
				case RIGHT_PAREN:
				case COMMA:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(972);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(plsqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(plsqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogging_clause(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(975);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<Lob_storage_parametersContext> lob_storage_parameters() {
			return getRuleContexts(Lob_storage_parametersContext.class);
		}
		public Lob_storage_parametersContext lob_storage_parameters(int i) {
			return getRuleContext(Lob_storage_parametersContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(plsqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(plsqlParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(plsqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(plsqlParser.BASICFILE, i);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_clause(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_lob_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(977);
			match(LOB);
			setState(978);
			match(LEFT_PAREN);
			setState(979);
			id();
			setState(984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(980);
				match(COMMA);
				setState(981);
				id();
				}
				}
				setState(986);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(987);
			match(RIGHT_PAREN);
			setState(988);
			match(STORE);
			setState(989);
			match(AS);
			setState(995); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(995);
				switch (_input.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					setState(990);
					_la = _input.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case LEFT_PAREN:
					{
					setState(991);
					match(LEFT_PAREN);
					setState(992);
					lob_storage_parameters();
					setState(993);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(997); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BASICFILE || _la==SECUREFILE || _la==LEFT_PAREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Lob_parametersContext> lob_parameters() {
			return getRuleContexts(Lob_parametersContext.class);
		}
		public Lob_parametersContext lob_parameters(int i) {
			return getRuleContext(Lob_parametersContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_parameters(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_lob_storage_parameters);
		int _la;
		try {
			setState(1010);
			switch (_input.LA(1)) {
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1005); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1005);
					switch (_input.LA(1)) {
					case TABLESPACE:
						{
						setState(999);
						match(TABLESPACE);
						setState(1000);
						id();
						}
						break;
					case CACHE:
					case CHUNK:
					case COMPRESS:
					case DEDUPLICATE:
					case DISABLE:
					case ENABLE:
					case KEEP_DUPLICATES:
					case NOCACHE:
					case NOCOMPRESS:
						{
						setState(1001);
						lob_parameters();
						setState(1003);
						_la = _input.LA(1);
						if (_la==STORAGE) {
							{
							setState(1002);
							storage_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1007); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CHUNK || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (COMPRESS - 70)) | (1L << (DEDUPLICATE - 70)) | (1L << (DISABLE - 70)) | (1L << (ENABLE - 70)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (KEEP_DUPLICATES - 214)) | (1L << (NOCACHE - 214)) | (1L << (NOCOMPRESS - 214)))) != 0) || _la==TABLESPACE );
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1009);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_parametersContext extends ParserRuleContext {
		public List<TerminalNode> STORAGE() { return getTokens(plsqlParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(plsqlParser.STORAGE, i);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> CHUNK() { return getTokens(plsqlParser.CHUNK); }
		public TerminalNode CHUNK(int i) {
			return getToken(plsqlParser.CHUNK, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(plsqlParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(plsqlParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_parameters(this);
		}
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_lob_parameters);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1029); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1029);
					switch (_input.LA(1)) {
					case DISABLE:
					case ENABLE:
						{
						setState(1012);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(1013);
						match(STORAGE);
						setState(1014);
						match(IN);
						setState(1015);
						match(ROW);
						}
						break;
					case CHUNK:
						{
						setState(1016);
						match(CHUNK);
						setState(1017);
						match(UNSIGNED_INTEGER);
						}
						break;
					case DEDUPLICATE:
					case KEEP_DUPLICATES:
						{
						setState(1018);
						lob_deduplicate_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(1019);
						lob_compression_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(1024);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
						case 1:
							{
							setState(1020);
							match(CACHE);
							}
							break;
						case 2:
							{
							setState(1021);
							match(NOCACHE);
							}
							break;
						case 3:
							{
							setState(1022);
							match(CACHE);
							setState(1023);
							match(READS);
							}
							break;
						}
						setState(1027);
						_la = _input.LA(1);
						if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
							{
							setState(1026);
							logging_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1031); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(plsqlParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(plsqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_deduplicate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_deduplicate_clause(this);
		}
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1033);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_compression_clauseContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(plsqlParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Lob_compression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_compression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_compression_clause(this);
		}
	}

	public final Lob_compression_clauseContext lob_compression_clause() throws RecognitionException {
		Lob_compression_clauseContext _localctx = new Lob_compression_clauseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_lob_compression_clause);
		int _la;
		try {
			setState(1040);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1035);
				match(COMPRESS);
				setState(1037);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(1036);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1039);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Column_clausesContext column_clauses() {
			return getRuleContext(Column_clausesContext.class,0);
		}
		public Constraint_clausesContext constraint_clauses() {
			return getRuleContext(Constraint_clausesContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_table(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1042);
			match(ALTER);
			setState(1043);
			match(TABLE);
			setState(1047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1044);
				schema_name();
				setState(1045);
				match(PERIOD);
				}
				break;
			}
			setState(1049);
			tableview_name();
			setState(1052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1050);
				column_clauses();
				}
				break;
			case 2:
				{
				setState(1051);
				constraint_clauses();
				}
				break;
			}
			setState(1054);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_clausesContext extends ParserRuleContext {
		public List<Modify_column_clausesContext> modify_column_clauses() {
			return getRuleContexts(Modify_column_clausesContext.class);
		}
		public Modify_column_clausesContext modify_column_clauses(int i) {
			return getRuleContext(Modify_column_clausesContext.class,i);
		}
		public Column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_clauses(this);
		}
	}

	public final Column_clausesContext column_clauses() throws RecognitionException {
		Column_clausesContext _localctx = new Column_clausesContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1056);
				modify_column_clauses();
				}
				}
				setState(1059); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MODIFY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_column_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public List<Modify_col_propertiesContext> modify_col_properties() {
			return getRuleContexts(Modify_col_propertiesContext.class);
		}
		public Modify_col_propertiesContext modify_col_properties(int i) {
			return getRuleContext(Modify_col_propertiesContext.class,i);
		}
		public Modify_col_substitutableContext modify_col_substitutable() {
			return getRuleContext(Modify_col_substitutableContext.class,0);
		}
		public Modify_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_column_clauses(this);
		}
	}

	public final Modify_column_clausesContext modify_column_clauses() throws RecognitionException {
		Modify_column_clausesContext _localctx = new Modify_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_modify_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1061);
			match(MODIFY);
			setState(1074);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(1062);
				match(LEFT_PAREN);
				setState(1063);
				modify_col_properties();
				setState(1068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1064);
					match(COMMA);
					setState(1065);
					modify_col_properties();
					}
					}
					setState(1070);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1071);
				match(RIGHT_PAREN);
				}
				break;
			case COLUMN:
				{
				setState(1073);
				modify_col_substitutable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Modify_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_properties(this);
		}
	}

	public final Modify_col_propertiesContext modify_col_properties() throws RecognitionException {
		Modify_col_propertiesContext _localctx = new Modify_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_modify_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1076);
			column_name();
			setState(1078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1077);
				type_spec();
				}
				break;
			}
			setState(1082);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1080);
				match(DEFAULT);
				setState(1081);
				expression();
				}
			}

			setState(1087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CONSTRAINT || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (NOT - 286)) | (1L << (NULL - 286)) | (1L << (PRIMARY - 286)) | (1L << (REFERENCES - 286)))) != 0) || _la==UNIQUE) {
				{
				{
				setState(1084);
				inline_constraint();
				}
				}
				setState(1089);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1091);
			_la = _input.LA(1);
			if (_la==LOB) {
				{
				setState(1090);
				lob_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_substitutableContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(plsqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Modify_col_substitutableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_substitutable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_substitutable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_substitutable(this);
		}
	}

	public final Modify_col_substitutableContext modify_col_substitutable() throws RecognitionException {
		Modify_col_substitutableContext _localctx = new Modify_col_substitutableContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_modify_col_substitutable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1093);
			match(COLUMN);
			setState(1094);
			column_name();
			setState(1096);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1095);
				match(NOT);
				}
			}

			setState(1098);
			match(SUBSTITUTABLE);
			setState(1099);
			match(AT);
			setState(1100);
			match(ALL);
			setState(1101);
			match(LEVELS);
			setState(1103);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1102);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInline_constraint(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1107);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1105);
				match(CONSTRAINT);
				setState(1106);
				constraint_name();
				}
			}

			setState(1117);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(1110);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1109);
					match(NOT);
					}
				}

				setState(1112);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(1113);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(1114);
				match(PRIMARY);
				setState(1115);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(1116);
				references_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1119);
			constraint_state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_clausesContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Constraint_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_clauses(this);
		}
	}

	public final Constraint_clausesContext constraint_clauses() throws RecognitionException {
		Constraint_clausesContext _localctx = new Constraint_clausesContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_constraint_clauses);
		int _la;
		try {
			setState(1156);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1121);
				match(ADD);
				setState(1123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1122);
					out_of_line_constraint();
					}
					}
					setState(1125); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE );
				}
				break;
			case MODIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1127);
				match(MODIFY);
				setState(1144);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(1128);
					match(CONSTRAINT);
					setState(1129);
					constraint_name();
					}
					break;
				case PRIMARY:
					{
					setState(1130);
					match(PRIMARY);
					setState(1131);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1132);
					match(UNIQUE);
					setState(1133);
					match(LEFT_PAREN);
					setState(1134);
					column_name();
					setState(1139);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1135);
						match(COMMA);
						setState(1136);
						column_name();
						}
						}
						setState(1141);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1142);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1146);
				constraint_state();
				setState(1148);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(1147);
					match(CASCADE);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(1150);
				match(RENAME);
				setState(1151);
				match(CONSTRAINT);
				setState(1152);
				constraint_name();
				setState(1153);
				match(TO);
				setState(1154);
				constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode FOREIGN() { return getToken(plsqlParser.FOREIGN, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOut_of_line_constraint(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_out_of_line_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1160);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1158);
				match(CONSTRAINT);
				setState(1159);
				constraint_name();
				}
			}

			setState(1206);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(1162);
				match(UNIQUE);
				setState(1163);
				match(LEFT_PAREN);
				setState(1164);
				column_name();
				setState(1169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1165);
					match(COMMA);
					setState(1166);
					column_name();
					}
					}
					setState(1171);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1172);
				match(RIGHT_PAREN);
				}
				break;
			case PRIMARY:
				{
				setState(1174);
				match(PRIMARY);
				setState(1175);
				match(KEY);
				setState(1176);
				match(LEFT_PAREN);
				setState(1177);
				column_name();
				setState(1182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1178);
					match(COMMA);
					setState(1179);
					column_name();
					}
					}
					setState(1184);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1185);
				match(RIGHT_PAREN);
				}
				break;
			case FOREIGN:
				{
				setState(1187);
				match(FOREIGN);
				setState(1188);
				match(KEY);
				setState(1189);
				match(LEFT_PAREN);
				setState(1190);
				column_name();
				setState(1195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1191);
					match(COMMA);
					setState(1192);
					column_name();
					}
					}
					setState(1197);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1198);
				match(RIGHT_PAREN);
				setState(1199);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(1201);
				match(CHECK);
				setState(1202);
				match(LEFT_PAREN);
				setState(1203);
				condition();
				setState(1204);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1209);
			_la = _input.LA(1);
			if (((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (DEFERRABLE - 111)) | (1L << (DISABLE - 111)) | (1L << (ENABLE - 111)) | (1L << (EXCEPTIONS - 111)))) != 0) || _la==INITIALY || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (NORELY - 284)) | (1L << (NOT - 284)) | (1L << (NOVALIDATE - 284)))) != 0) || _la==RELY || _la==USING || _la==VALIDATE) {
				{
				setState(1208);
				constraint_state();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(plsqlParser.REFERENCES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferences_clause(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_references_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			match(REFERENCES);
			setState(1215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1212);
				schema_name();
				setState(1213);
				match(PERIOD);
				}
				break;
			}
			setState(1217);
			id();
			setState(1229);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1218);
				match(LEFT_PAREN);
				setState(1219);
				column_name();
				setState(1224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1220);
					match(COMMA);
					setState(1221);
					column_name();
					}
					}
					setState(1226);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1227);
				match(RIGHT_PAREN);
				}
			}

			setState(1238);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1231);
				match(ON);
				setState(1232);
				match(DELETE);
				setState(1236);
				switch (_input.LA(1)) {
				case CASCADE:
					{
					setState(1233);
					match(CASCADE);
					}
					break;
				case SET:
					{
					setState(1234);
					match(SET);
					setState(1235);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(plsqlParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(plsqlParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALY() { return getTokens(plsqlParser.INITIALY); }
		public TerminalNode INITIALY(int i) {
			return getToken(plsqlParser.INITIALY, i);
		}
		public List<TerminalNode> RELY() { return getTokens(plsqlParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(plsqlParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(plsqlParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(plsqlParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(plsqlParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(plsqlParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(plsqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(plsqlParser.NOVALIDATE, i);
		}
		public List<Exceptions_clauseContext> exceptions_clause() {
			return getRuleContexts(Exceptions_clauseContext.class);
		}
		public Exceptions_clauseContext exceptions_clause(int i) {
			return getRuleContext(Exceptions_clauseContext.class,i);
		}
		public List<Using_index_clauseContext> using_index_clause() {
			return getRuleContexts(Using_index_clauseContext.class);
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return getRuleContext(Using_index_clauseContext.class,i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(plsqlParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(plsqlParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(plsqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(plsqlParser.DEFERRED, i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_state(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1254); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1254);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(1241);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1240);
							match(NOT);
							}
						}

						setState(1243);
						match(DEFERRABLE);
						}
						break;
					case INITIALY:
						{
						setState(1244);
						match(INITIALY);
						setState(1245);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case RELY:
						{
						setState(1246);
						match(RELY);
						}
						break;
					case NORELY:
						{
						setState(1247);
						match(NORELY);
						}
						break;
					case ENABLE:
						{
						setState(1248);
						match(ENABLE);
						}
						break;
					case DISABLE:
						{
						setState(1249);
						match(DISABLE);
						}
						break;
					case VALIDATE:
						{
						setState(1250);
						match(VALIDATE);
						}
						break;
					case NOVALIDATE:
						{
						setState(1251);
						match(NOVALIDATE);
						}
						break;
					case EXCEPTIONS:
						{
						setState(1252);
						exceptions_clause();
						}
						break;
					case USING:
						{
						setState(1253);
						using_index_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1256); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,65,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_index_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_index_clause(this);
		}
	}

	public final Using_index_clauseContext using_index_clause() throws RecognitionException {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_using_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258);
			match(USING);
			setState(1259);
			match(INDEX);
			setState(1260);
			index_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_propertiesContext extends ParserRuleContext {
		public List<Index_attributesContext> index_attributes() {
			return getRuleContexts(Index_attributesContext.class);
		}
		public Index_attributesContext index_attributes(int i) {
			return getRuleContext(Index_attributesContext.class,i);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_properties(this);
		}
	}

	public final Index_propertiesContext index_properties() throws RecognitionException {
		Index_propertiesContext _localctx = new Index_propertiesContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_index_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMPRESS || _la==COMPUTE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (LOGGING - 235)) | (1L << (MAXTRANS - 235)) | (1L << (NOCOMPRESS - 235)) | (1L << (NOLOGGING - 235)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1262);
				index_attributes();
				}
				}
				setState(1267);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_attributesContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Compute_statistics_clauseContext> compute_statistics_clause() {
			return getRuleContexts(Compute_statistics_clauseContext.class);
		}
		public Compute_statistics_clauseContext compute_statistics_clause(int i) {
			return getRuleContext(Compute_statistics_clauseContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_attributes(this);
		}
	}

	public final Index_attributesContext index_attributes() throws RecognitionException {
		Index_attributesContext _localctx = new Index_attributesContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_index_attributes);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1276); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1276);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
					case 1:
						{
						setState(1268);
						physical_attributes_clause();
						}
						break;
					case 2:
						{
						setState(1269);
						logging_clause();
						}
						break;
					case 3:
						{
						setState(1270);
						match(TABLESPACE);
						setState(1273);
						switch (_input.LA(1)) {
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPOUND:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENTITYESCAPING:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LENGTH:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case RIGHT:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERSION:
						case VERSIONS:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case DELIMITED_ID:
						case INTRODUCER:
						case REGULAR_ID:
							{
							setState(1271);
							id();
							}
							break;
						case DEFAULT:
							{
							setState(1272);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						setState(1275);
						compute_statistics_clause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1278); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compute_statistics_clauseContext extends ParserRuleContext {
		public TerminalNode COMPUTE() { return getToken(plsqlParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode SYSTEM() { return getToken(plsqlParser.SYSTEM, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Compute_statistics_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compute_statistics_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompute_statistics_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompute_statistics_clause(this);
		}
	}

	public final Compute_statistics_clauseContext compute_statistics_clause() throws RecognitionException {
		Compute_statistics_clauseContext _localctx = new Compute_statistics_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_compute_statistics_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1280);
			match(COMPUTE);
			setState(1282);
			_la = _input.LA(1);
			if (_la==SYSTEM) {
				{
				setState(1281);
				match(SYSTEM);
				}
			}

			setState(1284);
			match(STATISTICS);
			setState(1286);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1285);
				for_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(plsqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(plsqlParser.FOR, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(plsqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(plsqlParser.TABLE, i);
		}
		public List<TerminalNode> ALL() { return getTokens(plsqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(plsqlParser.ALL, i);
		}
		public List<TerminalNode> COLUMNS() { return getTokens(plsqlParser.COLUMNS); }
		public TerminalNode COLUMNS(int i) {
			return getToken(plsqlParser.COLUMNS, i);
		}
		public List<TerminalNode> INDEXES() { return getTokens(plsqlParser.INDEXES); }
		public TerminalNode INDEXES(int i) {
			return getToken(plsqlParser.INDEXES, i);
		}
		public List<TerminalNode> INDEXED() { return getTokens(plsqlParser.INDEXED); }
		public TerminalNode INDEXED(int i) {
			return getToken(plsqlParser.INDEXED, i);
		}
		public List<TerminalNode> SIZE() { return getTokens(plsqlParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(plsqlParser.SIZE, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(plsqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(plsqlParser.LOCAL, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Attribute_nameContext> attribute_name() {
			return getRuleContexts(Attribute_nameContext.class);
		}
		public Attribute_nameContext attribute_name(int i) {
			return getRuleContext(Attribute_nameContext.class,i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_clause(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_for_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1323); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1288);
				match(FOR);
				setState(1321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(1289);
					match(TABLE);
					}
					break;
				case 2:
					{
					setState(1290);
					match(ALL);
					setState(1292);
					_la = _input.LA(1);
					if (_la==INDEXED) {
						{
						setState(1291);
						match(INDEXED);
						}
					}

					setState(1294);
					match(COLUMNS);
					setState(1297);
					_la = _input.LA(1);
					if (_la==SIZE) {
						{
						setState(1295);
						match(SIZE);
						setState(1296);
						match(UNSIGNED_INTEGER);
						}
					}

					}
					break;
				case 3:
					{
					setState(1299);
					match(COLUMNS);
					setState(1302);
					_la = _input.LA(1);
					if (_la==SIZE) {
						{
						setState(1300);
						match(SIZE);
						setState(1301);
						match(UNSIGNED_INTEGER);
						}
					}

					setState(1312); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1306);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
							case 1:
								{
								setState(1304);
								column_name();
								}
								break;
							case 2:
								{
								setState(1305);
								attribute_name();
								}
								break;
							}
							setState(1310);
							_la = _input.LA(1);
							if (_la==SIZE) {
								{
								setState(1308);
								match(SIZE);
								setState(1309);
								match(UNSIGNED_INTEGER);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1314); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 4:
					{
					setState(1316);
					match(ALL);
					setState(1318);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(1317);
						match(LOCAL);
						}
					}

					setState(1320);
					match(INDEXES);
					}
					break;
				}
				}
				}
				setState(1325); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exceptions_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExceptions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExceptions_clause(this);
		}
	}

	public final Exceptions_clauseContext exceptions_clause() throws RecognitionException {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_exceptions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			match(EXCEPTIONS);
			setState(1328);
			match(INTO);
			setState(1332);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1329);
				schema_name();
				setState(1330);
				match(PERIOD);
				}
				break;
			}
			setState(1334);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_view(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(CREATE);
			setState(1339);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1337);
				match(OR);
				setState(1338);
				match(REPLACE);
				}
			}

			setState(1345);
			_la = _input.LA(1);
			if (_la==FORCE || _la==NO) {
				{
				setState(1342);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1341);
					match(NO);
					}
				}

				setState(1344);
				match(FORCE);
				}
			}

			setState(1347);
			match(VIEW);
			setState(1351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1348);
				schema_name();
				setState(1349);
				match(PERIOD);
				}
				break;
			}
			setState(1353);
			tableview_name();
			setState(1354);
			match(LEFT_PAREN);
			setState(1355);
			id_expression();
			setState(1360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1356);
				match(COMMA);
				setState(1357);
				id_expression();
				}
				}
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1363);
			match(RIGHT_PAREN);
			setState(1364);
			match(AS);
			setState(1365);
			subquery();
			setState(1366);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Table_index_clauseContext table_index_clause() {
			return getRuleContext(Table_index_clauseContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_index(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1368);
			match(CREATE);
			setState(1370);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1369);
				match(UNIQUE);
				}
			}

			setState(1372);
			match(INDEX);
			setState(1376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1373);
				schema_name();
				setState(1374);
				match(PERIOD);
				}
				break;
			}
			setState(1378);
			id_expression();
			setState(1379);
			match(ON);
			setState(1380);
			table_index_clause();
			setState(1381);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_index_clauseContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Index_exprContext> index_expr() {
			return getRuleContexts(Index_exprContext.class);
		}
		public Index_exprContext index_expr(int i) {
			return getRuleContext(Index_exprContext.class,i);
		}
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Table_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_index_clause(this);
		}
	}

	public final Table_index_clauseContext table_index_clause() throws RecognitionException {
		Table_index_clauseContext _localctx = new Table_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_table_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1383);
				schema_name();
				setState(1384);
				match(PERIOD);
				}
				break;
			}
			setState(1388);
			tableview_name();
			setState(1389);
			match(LEFT_PAREN);
			setState(1390);
			index_expr();
			setState(1395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1391);
				match(COMMA);
				setState(1392);
				index_expr();
				}
				}
				setState(1397);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1398);
			match(RIGHT_PAREN);
			setState(1399);
			index_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_exprContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_expr(this);
		}
	}

	public final Index_exprContext index_expr() throws RecognitionException {
		Index_exprContext _localctx = new Index_exprContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_index_expr);
		try {
			setState(1403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1401);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1402);
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1405);
			match(DROP);
			setState(1406);
			match(FUNCTION);
			setState(1407);
			function_name();
			setState(1408);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1410);
			match(ALTER);
			setState(1411);
			match(FUNCTION);
			setState(1412);
			function_name();
			setState(1413);
			match(COMPILE);
			setState(1415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1414);
				match(DEBUG);
				}
				break;
			}
			setState(1420);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1417);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1422);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			setState(1425);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1423);
				match(REUSE);
				setState(1424);
				match(SETTINGS);
				}
			}

			setState(1427);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1434);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1429);
				match(CREATE);
				setState(1432);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1430);
					match(OR);
					setState(1431);
					match(REPLACE);
					}
				}

				}
			}

			setState(1436);
			match(FUNCTION);
			setState(1437);
			function_name();
			setState(1449);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1438);
				match(LEFT_PAREN);
				setState(1439);
				parameter();
				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1440);
					match(COMMA);
					setState(1441);
					parameter();
					}
					}
					setState(1446);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1447);
				match(RIGHT_PAREN);
				}
			}

			setState(1451);
			match(RETURN);
			setState(1452);
			type_spec();
			setState(1459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1457);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1453);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1454);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1455);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1456);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				{
				setState(1463);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1462);
					match(PIPELINED);
					}
				}

				setState(1465);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(1467);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1466);
						match(DECLARE);
						}
					}

					setState(1472);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
						{
						{
						setState(1469);
						declare_spec();
						}
						}
						setState(1474);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1475);
					body();
					}
					break;
				case 2:
					{
					setState(1476);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1479);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1480);
				match(USING);
				setState(1481);
				implementation_type_name();
				}
				break;
			}
			setState(1484);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1486);
			match(PARALLEL_ENABLE);
			setState(1488);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1487);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1490);
			match(LEFT_PAREN);
			setState(1491);
			match(PARTITION);
			setState(1492);
			expression();
			setState(1493);
			match(BY);
			setState(1507);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(1494);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(1495);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1496);
				match(LEFT_PAREN);
				setState(1497);
				column_name();
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1498);
					match(COMMA);
					setState(1499);
					column_name();
					}
					}
					setState(1504);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1505);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1510);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(1509);
				streaming_clause();
				}
			}

			setState(1512);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			match(RESULT_CACHE);
			setState(1516);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(1515);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1518);
			match(RELIES_ON);
			setState(1519);
			match(LEFT_PAREN);
			setState(1520);
			tableview_name();
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1521);
				match(COMMA);
				setState(1522);
				tableview_name();
				}
				}
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1528);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1530);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1531);
			expression();
			setState(1532);
			match(BY);
			setState(1533);
			match(LEFT_PAREN);
			setState(1534);
			column_name();
			setState(1539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1535);
				match(COMMA);
				setState(1536);
				column_name();
				}
				}
				setState(1541);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1542);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1544);
			match(DROP);
			setState(1545);
			match(PACKAGE);
			setState(1547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1546);
				match(BODY);
				}
				break;
			}
			setState(1549);
			package_name();
			setState(1550);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1552);
			match(ALTER);
			setState(1553);
			match(PACKAGE);
			setState(1554);
			package_name();
			setState(1555);
			match(COMPILE);
			setState(1557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1556);
				match(DEBUG);
				}
				break;
			}
			setState(1560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1559);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1565);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1562);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1567);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,116,_ctx);
			}
			setState(1570);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1568);
				match(REUSE);
				setState(1569);
				match(SETTINGS);
				}
			}

			setState(1572);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1574);
			match(CREATE);
			setState(1577);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1575);
				match(OR);
				setState(1576);
				match(REPLACE);
				}
			}

			setState(1579);
			match(PACKAGE);
			setState(1582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1580);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1581);
				package_body();
				}
				break;
			}
			setState(1584);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			match(BODY);
			setState(1587);
			package_name();
			setState(1588);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1589);
				package_obj_body();
				}
				}
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1601);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1595);
				match(BEGIN);
				setState(1596);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1597);
				match(END);
				setState(1599);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					setState(1598);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1603);
			package_name();
			setState(1605);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1604);
				invoker_rights_clause();
				}
			}

			setState(1607);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1608);
				package_obj_spec();
				}
				}
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1614);
			match(END);
			setState(1616);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1615);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_package_obj_spec);
		try {
			setState(1626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1618);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1619);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1620);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1621);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1622);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1623);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1624);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1625);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			match(PROCEDURE);
			setState(1629);
			procedure_name();
			setState(1641);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1630);
				match(LEFT_PAREN);
				setState(1631);
				parameter();
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1632);
					match(COMMA);
					setState(1633);
					parameter();
					}
					}
					setState(1638);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1639);
				match(RIGHT_PAREN);
				}
			}

			setState(1643);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			match(FUNCTION);
			setState(1646);
			function_name();
			setState(1658);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1647);
				match(LEFT_PAREN);
				setState(1648);
				parameter();
				setState(1653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1649);
					match(COMMA);
					setState(1650);
					parameter();
					}
					}
					setState(1655);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1656);
				match(RIGHT_PAREN);
				}
			}

			setState(1660);
			match(RETURN);
			setState(1661);
			type_spec();
			setState(1662);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_package_obj_body);
		try {
			setState(1674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1664);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1665);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1666);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1667);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1668);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1669);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1670);
				create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1671);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1672);
				procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1673);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			match(DROP);
			setState(1677);
			match(PROCEDURE);
			setState(1678);
			procedure_name();
			setState(1679);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1681);
			match(ALTER);
			setState(1682);
			match(PROCEDURE);
			setState(1683);
			procedure_name();
			setState(1684);
			match(COMPILE);
			setState(1686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1685);
				match(DEBUG);
				}
				break;
			}
			setState(1691);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1688);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1693);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
			}
			setState(1696);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1694);
				match(REUSE);
				setState(1695);
				match(SETTINGS);
				}
			}

			setState(1698);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1700);
				match(CREATE);
				setState(1703);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1701);
					match(OR);
					setState(1702);
					match(REPLACE);
					}
				}

				}
			}

			setState(1707);
			match(PROCEDURE);
			setState(1708);
			procedure_name();
			setState(1720);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1709);
				match(LEFT_PAREN);
				setState(1710);
				parameter();
				setState(1715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1711);
					match(COMMA);
					setState(1712);
					parameter();
					}
					}
					setState(1717);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1718);
				match(RIGHT_PAREN);
				}
			}

			setState(1723);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1722);
				invoker_rights_clause();
				}
			}

			setState(1725);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1727);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1726);
					match(DECLARE);
					}
				}

				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1729);
					declare_spec();
					}
					}
					setState(1734);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1735);
				body();
				}
				break;
			case 2:
				{
				setState(1736);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1737);
				match(EXTERNAL);
				}
				break;
			}
			setState(1740);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			match(DROP);
			setState(1743);
			match(TRIGGER);
			setState(1744);
			trigger_name();
			setState(1745);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1747);
			match(ALTER);
			setState(1748);
			match(TRIGGER);
			setState(1749);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1768);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1750);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1751);
				match(RENAME);
				setState(1752);
				match(TO);
				setState(1753);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1754);
				match(COMPILE);
				setState(1756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(1755);
					match(DEBUG);
					}
					break;
				}
				setState(1761);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1758);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1763);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
				}
				setState(1766);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1764);
					match(REUSE);
					setState(1765);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1770);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772);
			match(CREATE);
			setState(1775);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1773);
				match(OR);
				setState(1774);
				match(REPLACE);
				}
			}

			setState(1777);
			match(TRIGGER);
			setState(1778);
			trigger_name();
			setState(1782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1779);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1780);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1781);
				non_dml_trigger();
				}
				break;
			}
			setState(1785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(1784);
				trigger_follows_clause();
				}
				break;
			}
			setState(1788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1787);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1791);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1790);
				trigger_when_clause();
				}
			}

			setState(1793);
			trigger_body();
			setState(1794);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1796);
			match(FOLLOWS);
			setState(1797);
			trigger_name();
			setState(1802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1798);
				match(COMMA);
				setState(1799);
				trigger_name();
				}
				}
				setState(1804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			match(WHEN);
			setState(1806);
			match(LEFT_PAREN);
			setState(1807);
			condition();
			setState(1808);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1814);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1810);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1811);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1812);
				match(INSTEAD);
				setState(1813);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1816);
			dml_event_clause();
			setState(1818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1817);
				referencing_clause();
				}
				break;
			}
			setState(1821);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1820);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1823);
			match(FOR);
			setState(1824);
			match(EACH);
			setState(1825);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1827);
			match(FOR);
			setState(1828);
			dml_event_clause();
			setState(1830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1829);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1833);
			non_dml_event();
			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1834);
				match(OR);
				setState(1835);
				non_dml_event();
				}
				}
				setState(1840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1841);
			match(ON);
			setState(1849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1842);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1846);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1843);
					schema_name();
					setState(1844);
					match(PERIOD);
					}
					break;
				}
				setState(1848);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_trigger_body);
		try {
			setState(1856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1851);
				match(COMPOUND);
				setState(1852);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1853);
				match(CALL);
				setState(1854);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1855);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			routine_name();
			setState(1860);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1859);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(COMPOUND);
			setState(1863);
			match(TRIGGER);
			setState(1867);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1864);
					declare_spec();
					}
					} 
				}
				setState(1869);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			}
			setState(1871); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1870);
				timing_point_section();
				}
				}
				setState(1873); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1875);
			match(END);
			setState(1876);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_timing_point_section);
		try {
			setState(1914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1878);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1879);
				match(STATEMENT);
				setState(1880);
				match(IS);
				setState(1881);
				trigger_block();
				setState(1882);
				match(BEFORE);
				setState(1883);
				match(STATEMENT);
				setState(1884);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1886);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1887);
				match(EACH);
				setState(1888);
				match(ROW);
				setState(1889);
				match(IS);
				setState(1890);
				trigger_block();
				setState(1891);
				match(BEFORE);
				setState(1892);
				match(EACH);
				setState(1893);
				match(ROW);
				setState(1894);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1896);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1897);
				match(STATEMENT);
				setState(1898);
				match(IS);
				setState(1899);
				trigger_block();
				setState(1900);
				match(AFTER);
				setState(1901);
				match(STATEMENT);
				setState(1902);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1904);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1905);
				match(EACH);
				setState(1906);
				match(ROW);
				setState(1907);
				match(IS);
				setState(1908);
				trigger_block();
				setState(1909);
				match(AFTER);
				setState(1910);
				match(EACH);
				setState(1911);
				match(ROW);
				setState(1912);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_non_dml_event);
		try {
			setState(1942);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1916);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1917);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1918);
				match(ASSOCIATE);
				setState(1919);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1920);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1921);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1922);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1923);
				match(DISASSOCIATE);
				setState(1924);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1925);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1926);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1927);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1928);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1929);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1930);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1931);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1932);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1933);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1934);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1935);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1936);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1937);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1938);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1939);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1940);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1941);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			dml_event_element();
			setState(1949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1945);
				match(OR);
				setState(1946);
				dml_event_element();
				}
				}
				setState(1951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1952);
			match(ON);
			setState(1954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1953);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1956);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1958);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1968);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1959);
				match(OF);
				setState(1960);
				column_name();
				setState(1965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1961);
					match(COMMA);
					setState(1962);
					column_name();
					}
					}
					setState(1967);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			match(NESTED);
			setState(1971);
			match(TABLE);
			setState(1972);
			tableview_name();
			setState(1973);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			match(REFERENCING);
			setState(1977); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1976);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1979); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1981);
			_la = _input.LA(1);
			if ( !(((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (NEW - 270)) | (1L << (OLD - 270)) | (1L << (PARENT - 270)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1982);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1984);
			match(DROP);
			setState(1985);
			match(TYPE);
			setState(1987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(1986);
				match(BODY);
				}
				break;
			}
			setState(1989);
			type_name();
			setState(1991);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1990);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1993);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1995);
			match(ALTER);
			setState(1996);
			match(TYPE);
			setState(1997);
			type_name();
			setState(2003);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1998);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1999);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(2000);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(2001);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(2002);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2006);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(2005);
				dependent_handling_clause();
				}
			}

			setState(2008);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2010);
			match(COMPILE);
			setState(2012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2011);
				match(DEBUG);
				}
				break;
			}
			setState(2015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2014);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(2020);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2017);
					compiler_parameters_clause();
					}
					} 
				}
				setState(2022);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			}
			setState(2025);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(2023);
				match(REUSE);
				setState(2024);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027);
			match(REPLACE);
			setState(2029);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(2028);
				invoker_rights_clause();
				}
			}

			setState(2031);
			match(AS);
			setState(2032);
			match(OBJECT);
			setState(2033);
			match(LEFT_PAREN);
			setState(2034);
			object_member_spec();
			setState(2039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2035);
				match(COMMA);
				setState(2036);
				object_member_spec();
				}
				}
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2042);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2044);
			alter_method_element();
			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2045);
				match(COMMA);
				setState(2046);
				alter_method_element();
				}
				}
				setState(2051);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2055);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(2053);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(2054);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2058);
			match(ATTRIBUTE);
			setState(2071);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2059);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2060);
				match(LEFT_PAREN);
				setState(2061);
				attribute_definition();
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2062);
					match(COMMA);
					setState(2063);
					attribute_definition();
					}
					}
					setState(2068);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2069);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			attribute_name();
			setState(2075);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2074);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077);
			match(MODIFY);
			setState(2083);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(2078);
				match(LIMIT);
				setState(2079);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(2080);
				match(ELEMENT);
				setState(2081);
				match(TYPE);
				setState(2082);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(2101);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2085);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2086);
				match(CASCADE);
				setState(2096);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(2087);
					match(CONVERT);
					setState(2088);
					match(TO);
					setState(2089);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(2091);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(2090);
						match(NOT);
						}
					}

					setState(2093);
					match(INCLUDING);
					setState(2094);
					match(TABLE);
					setState(2095);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2099);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(2098);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2104);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(2103);
				match(FORCE);
				}
			}

			setState(2106);
			match(EXCEPTIONS);
			setState(2107);
			match(INTO);
			setState(2108);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110);
			match(CREATE);
			setState(2113);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2111);
				match(OR);
				setState(2112);
				match(REPLACE);
				}
			}

			setState(2115);
			match(TYPE);
			setState(2118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2116);
				type_definition();
				}
				break;
			case 2:
				{
				setState(2117);
				type_body();
				}
				break;
			}
			setState(2120);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			type_name();
			setState(2125);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(2123);
				match(OID);
				setState(2124);
				match(CHAR_STRING);
				}
			}

			setState(2128);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(2127);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(2130);
				invoker_rights_clause();
				}
			}

			setState(2135);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2133);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(2134);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2138);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(2137);
				sqlj_object_type();
				}
			}

			setState(2151);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2140);
				match(LEFT_PAREN);
				setState(2141);
				object_member_spec();
				setState(2146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2142);
					match(COMMA);
					setState(2143);
					object_member_spec();
					}
					}
					setState(2148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2149);
				match(RIGHT_PAREN);
				}
			}

			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(2153);
				modifier_clause();
				}
				}
				setState(2158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2163);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(2160);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2161);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(2162);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2165);
			match(UNDER);
			setState(2166);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2168);
			match(TABLE);
			setState(2169);
			match(OF);
			setState(2170);
			type_spec();
			setState(2173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2171);
				match(NOT);
				setState(2172);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			match(EXTERNAL);
			setState(2176);
			match(NAME);
			setState(2177);
			expression();
			setState(2178);
			match(LANGUAGE);
			setState(2179);
			match(JAVA);
			setState(2180);
			match(USING);
			setState(2181);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2183);
			match(BODY);
			setState(2184);
			type_name();
			setState(2185);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2186);
			type_body_elements();
			setState(2191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2187);
				match(COMMA);
				setState(2188);
				type_body_elements();
				}
				}
				setState(2193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2194);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_type_body_elements);
		try {
			setState(2198);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2196);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2197);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2201);
			match(MEMBER);
			setState(2202);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2204);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2208);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2205);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(2206);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(2207);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2210);
			match(PROCEDURE);
			setState(2211);
			procedure_name();
			setState(2212);
			match(LEFT_PAREN);
			setState(2213);
			type_elements_parameter();
			setState(2218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2214);
				match(COMMA);
				setState(2215);
				type_elements_parameter();
				}
				}
				setState(2220);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2221);
			match(RIGHT_PAREN);
			setState(2222);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2223);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2225);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2224);
					match(DECLARE);
					}
				}

				setState(2230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2227);
					declare_spec();
					}
					}
					setState(2232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2233);
				body();
				setState(2234);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			match(FUNCTION);
			setState(2239);
			function_name();
			setState(2251);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2240);
				match(LEFT_PAREN);
				setState(2241);
				type_elements_parameter();
				setState(2246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2242);
					match(COMMA);
					setState(2243);
					type_elements_parameter();
					}
					}
					setState(2248);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2249);
				match(RIGHT_PAREN);
				}
			}

			setState(2253);
			match(RETURN);
			setState(2254);
			type_spec();
			setState(2255);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(2256);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2258);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2257);
					match(DECLARE);
					}
				}

				setState(2263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2260);
					declare_spec();
					}
					}
					setState(2265);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2266);
				body();
				setState(2267);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2271);
				match(FINAL);
				}
			}

			setState(2275);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2274);
				match(INSTANTIABLE);
				}
			}

			setState(2277);
			match(CONSTRUCTOR);
			setState(2278);
			match(FUNCTION);
			setState(2279);
			type_spec();
			setState(2297);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2280);
				match(LEFT_PAREN);
				{
				setState(2281);
				match(SELF);
				setState(2282);
				match(IN);
				setState(2283);
				match(OUT);
				setState(2284);
				type_spec();
				setState(2285);
				match(COMMA);
				}
				setState(2287);
				type_elements_parameter();
				setState(2292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2288);
					match(COMMA);
					setState(2289);
					type_elements_parameter();
					}
					}
					setState(2294);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2295);
				match(RIGHT_PAREN);
				}
			}

			setState(2299);
			match(RETURN);
			setState(2300);
			match(SELF);
			setState(2301);
			match(AS);
			setState(2302);
			match(RESULT);
			setState(2303);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2304);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2306);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2305);
					match(DECLARE);
					}
				}

				setState(2311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2308);
					declare_spec();
					}
					}
					setState(2313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2314);
				body();
				setState(2315);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2320);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2319);
				match(NOT);
				}
			}

			setState(2322);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_object_member_spec);
		int _la;
		try {
			setState(2330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2324);
				id();
				setState(2325);
				type_spec();
				setState(2327);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2326);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2329);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			match(EXTERNAL);
			setState(2333);
			match(NAME);
			setState(2334);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2336);
				modifier_clause();
				}
				break;
			}
			setState(2340); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2339);
				element_spec_options();
				}
				}
				setState(2342); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2344);
				match(COMMA);
				setState(2345);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_element_spec_options);
		try {
			setState(2351);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2348);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2349);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2350);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2353);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2356);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2354);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(2355);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2358);
			match(PROCEDURE);
			setState(2359);
			procedure_name();
			setState(2360);
			match(LEFT_PAREN);
			setState(2361);
			type_elements_parameter();
			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2362);
				match(COMMA);
				setState(2363);
				type_elements_parameter();
				}
				}
				setState(2368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2369);
			match(RIGHT_PAREN);
			setState(2372);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2370);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2371);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			match(FUNCTION);
			setState(2375);
			function_name();
			setState(2387);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2376);
				match(LEFT_PAREN);
				setState(2377);
				type_elements_parameter();
				setState(2382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2378);
					match(COMMA);
					setState(2379);
					type_elements_parameter();
					}
					}
					setState(2384);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2385);
				match(RIGHT_PAREN);
				}
			}

			setState(2389);
			match(RETURN);
			setState(2394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2390);
				type_spec();
				}
				break;
			case 2:
				{
				setState(2391);
				match(SELF);
				setState(2392);
				match(AS);
				setState(2393);
				match(RESULT);
				}
				break;
			}
			setState(2404);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2396);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2397);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2398);
				match(EXTERNAL);
				setState(2400);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2399);
					match(VARIABLE);
					}
				}

				setState(2402);
				match(NAME);
				setState(2403);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2407);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2406);
				match(FINAL);
				}
			}

			setState(2410);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2409);
				match(INSTANTIABLE);
				}
			}

			setState(2412);
			match(CONSTRUCTOR);
			setState(2413);
			match(FUNCTION);
			setState(2414);
			type_spec();
			setState(2432);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2415);
				match(LEFT_PAREN);
				{
				setState(2416);
				match(SELF);
				setState(2417);
				match(IN);
				setState(2418);
				match(OUT);
				setState(2419);
				type_spec();
				setState(2420);
				match(COMMA);
				}
				setState(2422);
				type_elements_parameter();
				setState(2427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2423);
					match(COMMA);
					setState(2424);
					type_elements_parameter();
					}
					}
					setState(2429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2430);
				match(RIGHT_PAREN);
				}
			}

			setState(2434);
			match(RETURN);
			setState(2435);
			match(SELF);
			setState(2436);
			match(AS);
			setState(2437);
			match(RESULT);
			setState(2440);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2438);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2439);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2442);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2443);
			match(MEMBER);
			setState(2444);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			match(PRAGMA);
			setState(2447);
			match(RESTRICT_REFERENCES);
			setState(2448);
			match(LEFT_PAREN);
			setState(2449);
			pragma_elements();
			setState(2454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2450);
				match(COMMA);
				setState(2451);
				pragma_elements();
				}
				}
				setState(2456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2457);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_pragma_elements);
		try {
			setState(2461);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2459);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2460);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			parameter_name();
			setState(2464);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			match(DROP);
			setState(2467);
			match(SEQUENCE);
			setState(2468);
			sequence_name();
			setState(2469);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			match(ALTER);
			setState(2472);
			match(SEQUENCE);
			setState(2473);
			sequence_name();
			setState(2475); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2474);
				sequence_spec();
				}
				}
				setState(2477); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (MINVALUE - 254)) | (1L << (NOCACHE - 254)) | (1L << (NOCYCLE - 254)) | (1L << (NOMAXVALUE - 254)) | (1L << (NOMINVALUE - 254)) | (1L << (NOORDER - 254)) | (1L << (ORDER - 254)))) != 0) );
			setState(2479);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(CREATE);
			setState(2482);
			match(SEQUENCE);
			setState(2483);
			sequence_name();
			setState(2488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (MINVALUE - 254)) | (1L << (NOCACHE - 254)) | (1L << (NOCYCLE - 254)) | (1L << (NOMAXVALUE - 254)) | (1L << (NOMINVALUE - 254)) | (1L << (NOORDER - 254)) | (1L << (ORDER - 254)))) != 0) || _la==START) {
				{
				setState(2486);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2484);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2485);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2490);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2491);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_sequence_spec);
		try {
			setState(2509);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2493);
				match(INCREMENT);
				setState(2494);
				match(BY);
				setState(2495);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2496);
				match(MAXVALUE);
				setState(2497);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2498);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2499);
				match(MINVALUE);
				setState(2500);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2501);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2502);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2503);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2504);
				match(CACHE);
				setState(2505);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2506);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2507);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2508);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			match(START);
			setState(2512);
			match(WITH);
			setState(2513);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2515);
			match(AUTHID);
			setState(2516);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			id();
			setState(2519);
			match(EQUALS_OP);
			setState(2520);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			match(LANGUAGE);
			setState(2525);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2523);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2524);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			match(JAVA);
			setState(2528);
			match(NAME);
			setState(2529);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531);
			match(C_LETTER);
			setState(2534);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2532);
				match(NAME);
				setState(2533);
				match(CHAR_STRING);
				}
			}

			setState(2536);
			match(LIBRARY);
			setState(2537);
			id();
			setState(2539);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2538);
				c_agent_in_clause();
				}
			}

			setState(2543);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2541);
				match(WITH);
				setState(2542);
				match(CONTEXT);
				}
			}

			setState(2546);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2545);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			match(AGENT);
			setState(2549);
			match(IN);
			setState(2550);
			match(LEFT_PAREN);
			setState(2551);
			expression();
			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2552);
				match(COMMA);
				setState(2553);
				expression();
				}
				}
				setState(2558);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2559);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2561);
			match(PARAMETERS);
			setState(2562);
			match(LEFT_PAREN);
			setState(2574);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2563);
				expression();
				setState(2568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2564);
					match(COMMA);
					setState(2565);
					expression();
					}
					}
					setState(2570);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2571);
				match(PERIOD);
				setState(2572);
				match(PERIOD);
				setState(2573);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2576);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			parameter_name();
			setState(2582);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2579);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					} 
				}
				setState(2584);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
			}
			setState(2586);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2585);
				type_spec();
				}
			}

			setState(2589);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2588);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2592);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_declare_spec);
		try {
			setState(2603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2594);
				pragma_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2595);
				variable_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2596);
				subtype_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2597);
				cursor_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2598);
				exception_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2599);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2600);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2601);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2602);
				create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			variable_name();
			setState(2607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2606);
				match(CONSTANT);
				}
				break;
			}
			setState(2609);
			type_spec();
			setState(2612);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2610);
				match(NOT);
				setState(2611);
				match(NULL);
				}
			}

			setState(2615);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2614);
				default_value_part();
				}
			}

			setState(2617);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			match(SUBTYPE);
			setState(2620);
			type_name();
			setState(2621);
			match(IS);
			setState(2622);
			type_spec();
			setState(2628);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2623);
				match(RANGE);
				setState(2624);
				expression();
				setState(2625);
				match(T__0);
				setState(2626);
				expression();
				}
			}

			setState(2632);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2630);
				match(NOT);
				setState(2631);
				match(NULL);
				}
			}

			setState(2634);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(CURSOR);
			setState(2637);
			cursor_name();
			setState(2649);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2638);
				match(LEFT_PAREN);
				setState(2639);
				parameter_spec();
				setState(2644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2640);
					match(COMMA);
					setState(2641);
					parameter_spec();
					}
					}
					setState(2646);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2647);
				match(RIGHT_PAREN);
				}
			}

			setState(2653);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2651);
				match(RETURN);
				setState(2652);
				type_spec();
				}
			}

			setState(2657);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2655);
				match(IS);
				setState(2656);
				select_statement();
				}
			}

			setState(2659);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			parameter_name();
			setState(2666);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (IN - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2663);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2662);
					match(IN);
					}
				}

				setState(2665);
				type_spec();
				}
			}

			setState(2669);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2668);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			exception_name();
			setState(2672);
			match(EXCEPTION);
			setState(2673);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2675);
			match(PRAGMA);
			setState(2706);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2676);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2677);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2678);
				match(EXCEPTION_INIT);
				setState(2679);
				match(LEFT_PAREN);
				setState(2680);
				exception_name();
				setState(2681);
				match(COMMA);
				setState(2682);
				numeric_negative();
				setState(2683);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2685);
				match(INLINE);
				setState(2686);
				match(LEFT_PAREN);
				setState(2687);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2688);
				match(COMMA);
				setState(2689);
				expression();
				setState(2690);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2692);
				match(RESTRICT_REFERENCES);
				setState(2693);
				match(LEFT_PAREN);
				setState(2696);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2694);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2695);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2700); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2698);
					match(COMMA);
					setState(2699);
					id();
					}
					}
					setState(2702); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2704);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2708);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_record_declaration);
		try {
			setState(2712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2710);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2711);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2714);
			match(TYPE);
			setState(2715);
			type_name();
			setState(2716);
			match(IS);
			setState(2735);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2717);
				match(RECORD);
				setState(2718);
				match(LEFT_PAREN);
				setState(2719);
				field_spec();
				setState(2724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2720);
					match(COMMA);
					setState(2721);
					field_spec();
					}
					}
					setState(2726);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2727);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2729);
				match(REF);
				setState(2730);
				match(CURSOR);
				setState(2733);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2731);
					match(RETURN);
					setState(2732);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2737);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			column_name();
			setState(2741);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2740);
				type_spec();
				}
			}

			setState(2745);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2743);
				match(NOT);
				setState(2744);
				match(NULL);
				}
			}

			setState(2748);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2747);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			record_name();
			setState(2751);
			type_name();
			setState(2752);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2753);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(2755);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2756);
				table_var_dec();
				}
				break;
			}
			setState(2759);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			match(TYPE);
			setState(2762);
			type_name();
			setState(2763);
			match(IS);
			setState(2775);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2764);
				match(TABLE);
				setState(2765);
				match(OF);
				setState(2766);
				type_spec();
				setState(2768);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2767);
					table_indexed_by_part();
					}
				}

				setState(2772);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2770);
					match(NOT);
					setState(2771);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2774);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2777);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2778);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2781);
			match(BY);
			setState(2782);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2784);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2785);
				match(VARYING);
				setState(2786);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2789);
			match(LEFT_PAREN);
			setState(2790);
			expression();
			setState(2791);
			match(RIGHT_PAREN);
			setState(2792);
			match(OF);
			setState(2793);
			type_spec();
			setState(2796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				setState(2794);
				match(NOT);
				setState(2795);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			table_var_name();
			setState(2799);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2805);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2801);
					statement();
					setState(2802);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2804);
					label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2807); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FETCH - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FOR - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GOTO - 130)) | (1L << (GRANT - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IF - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSERT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCK - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULL - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELECT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATE - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITH - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (LEFT_PAREN - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (LESS_THAN_OP - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2809);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2810);
			match(LESS_THAN_OP);
			setState(2811);
			label_name();
			setState(2812);
			match(GREATER_THAN_OP);
			setState(2813);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_statement);
		try {
			setState(2838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2815);
				match(CREATE);
				setState(2816);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2817);
				match(ALTER);
				setState(2818);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2819);
				match(GRANT);
				setState(2820);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2821);
				match(TRUNCATE);
				setState(2822);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2823);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2824);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2825);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2826);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2827);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2828);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2829);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2830);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2831);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2832);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2833);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2834);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2835);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2836);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2837);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2842);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2840);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2841);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2844);
			match(ASSIGN_OP);
			setState(2845);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(CONTINUE);
			setState(2849);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2848);
				label_name();
				}
			}

			setState(2853);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2851);
				match(WHEN);
				setState(2852);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			match(EXIT);
			setState(2857);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2856);
				label_name();
				}
			}

			setState(2861);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2859);
				match(WHEN);
				setState(2860);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			match(GOTO);
			setState(2864);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2866);
			match(IF);
			setState(2867);
			condition();
			setState(2868);
			match(THEN);
			setState(2869);
			seq_of_statements();
			setState(2873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2870);
				elsif_part();
				}
				}
				setState(2875);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2877);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2876);
				else_part();
				}
			}

			setState(2879);
			match(END);
			setState(2880);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2882);
			match(ELSIF);
			setState(2883);
			condition();
			setState(2884);
			match(THEN);
			setState(2885);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			match(ELSE);
			setState(2888);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2890);
				label_name();
				}
				break;
			}
			setState(2897);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2893);
				match(WHILE);
				setState(2894);
				condition();
				}
				break;
			case FOR:
				{
				setState(2895);
				match(FOR);
				setState(2896);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2899);
			match(LOOP);
			setState(2900);
			seq_of_statements();
			setState(2901);
			match(END);
			setState(2902);
			match(LOOP);
			setState(2904);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2903);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2906);
				index_name();
				setState(2907);
				match(IN);
				setState(2909);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2908);
					match(REVERSE);
					}
					break;
				}
				setState(2911);
				lower_bound();
				setState(2912);
				match(T__0);
				setState(2913);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2915);
				record_name();
				setState(2916);
				match(IN);
				setState(2925);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2917);
					cursor_name();
					setState(2919);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2918);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2921);
					match(LEFT_PAREN);
					setState(2922);
					select_statement();
					setState(2923);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			match(FORALL);
			setState(2930);
			index_name();
			setState(2931);
			match(IN);
			setState(2932);
			bounds_clause();
			setState(2933);
			sql_statement();
			setState(2936);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2934);
				match(SAVE);
				setState(2935);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_bounds_clause);
		int _la;
		try {
			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2938);
				lower_bound();
				setState(2939);
				match(T__0);
				setState(2940);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2942);
				match(INDICES);
				setState(2943);
				match(OF);
				setState(2944);
				collection_name();
				setState(2946);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2945);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2948);
				match(VALUES);
				setState(2949);
				match(OF);
				setState(2950);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2953);
			match(BETWEEN);
			setState(2954);
			lower_bound();
			setState(2955);
			match(AND);
			setState(2956);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2962);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			match(RAISE);
			setState(2966);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2965);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2968);
			match(RETURN);
			setState(2970);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NOT - 260)) | (1L << (NULL - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PRIOR - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (UNSIGNED_INTEGER - 517)) | (1L << (APPROXIMATE_NUM_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (LEFT_PAREN - 517)) | (1L << (PLUS_SIGN - 517)) | (1L << (MINUS_SIGN - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2969);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2972);
				match(CALL);
				}
				break;
			}
			setState(2975);
			routine_name();
			setState(2977);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2976);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979);
			match(BEGIN);
			setState(2980);
			seq_of_statements();
			setState(2982);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2981);
				exception_clause();
				}
			}

			setState(2984);
			match(END);
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2985);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_clause(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			match(EXCEPTION);
			setState(2990); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2989);
				exception_handler();
				}
				}
				setState(2992); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994);
			match(WHEN);
			setState(2995);
			exception_name();
			setState(3000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2996);
				match(OR);
				setState(2997);
				exception_name();
				}
				}
				setState(3002);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3003);
			match(THEN);
			setState(3004);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3014);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3007);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(3006);
					match(DECLARE);
					}
				}

				setState(3010); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3009);
					declare_spec();
					}
					}
					setState(3012); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID );
				}
			}

			setState(3016);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(3018);
				match(DECLARE);
				}
			}

			setState(3022); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3021);
				declare_spec();
				}
				}
				setState(3024); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PROCEDURE - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID );
			setState(3026);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_sql_statement);
		try {
			setState(3032);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3028);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3029);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3030);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3031);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			match(EXECUTE);
			setState(3035);
			match(IMMEDIATE);
			setState(3036);
			expression();
			setState(3046);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(3037);
				into_clause();
				setState(3039);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3038);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(3041);
				using_clause();
				setState(3043);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3042);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(3045);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3049);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_data_manipulation_language_statements);
		try {
			setState(3058);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3051);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3052);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3053);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3054);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3055);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3056);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(3057);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_cursor_manipulation_statements);
		try {
			setState(3064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3062);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3063);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3066);
			match(CLOSE);
			setState(3067);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(OPEN);
			setState(3070);
			cursor_name();
			setState(3072);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3071);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			match(FETCH);
			setState(3075);
			cursor_name();
			setState(3096);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3076);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(3077);
				variable_name();
				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3078);
					match(COMMA);
					setState(3079);
					variable_name();
					}
					}
					setState(3084);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(3085);
				match(BULK);
				setState(3086);
				match(COLLECT);
				setState(3087);
				match(INTO);
				setState(3088);
				variable_name();
				setState(3093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3089);
					match(COMMA);
					setState(3090);
					variable_name();
					}
					}
					setState(3095);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3098);
			match(OPEN);
			setState(3099);
			variable_name();
			setState(3100);
			match(FOR);
			setState(3103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(3101);
				select_statement();
				}
				break;
			case 2:
				{
				setState(3102);
				expression();
				}
				break;
			}
			setState(3106);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3105);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_transaction_control_statements);
		try {
			setState(3113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3108);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3109);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3110);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3111);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3112);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			match(SET);
			setState(3116);
			match(TRANSACTION);
			setState(3130);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3117);
				match(READ);
				setState(3118);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(3119);
				match(ISOLATION);
				setState(3120);
				match(LEVEL);
				setState(3124);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(3121);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(3122);
					match(READ);
					setState(3123);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(3126);
				match(USE);
				setState(3127);
				match(ROLLBACK);
				setState(3128);
				match(SEGMENT);
				setState(3129);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3134);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(3132);
				match(NAME);
				setState(3133);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3136);
			match(SET);
			setState(3137);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3147);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3138);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3139);
				constraint_name();
				setState(3144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3140);
					match(COMMA);
					setState(3141);
					constraint_name();
					}
					}
					setState(3146);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3149);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3151);
			match(COMMIT);
			setState(3153);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3152);
				match(WORK);
				}
			}

			setState(3168);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(3155);
				match(COMMENT);
				setState(3156);
				expression();
				}
				break;
			case FORCE:
				{
				setState(3157);
				match(FORCE);
				setState(3166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3158);
					match(CORRUPT_XID);
					setState(3159);
					expression();
					}
					break;
				case 2:
					{
					setState(3160);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(3161);
					expression();
					setState(3164);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3162);
						match(COMMA);
						setState(3163);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3171);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(3170);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			match(WRITE);
			setState(3175);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3174);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3178);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(3177);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			match(ROLLBACK);
			setState(3182);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3181);
				match(WORK);
				}
			}

			setState(3191);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3184);
				match(TO);
				setState(3186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3185);
					match(SAVEPOINT);
					}
					break;
				}
				setState(3188);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(3189);
				match(FORCE);
				setState(3190);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3193);
			match(SAVEPOINT);
			setState(3194);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3196);
			match(EXPLAIN);
			setState(3197);
			match(PLAN);
			setState(3202);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3198);
				match(SET);
				setState(3199);
				match(STATEMENT_ID);
				setState(3200);
				match(EQUALS_OP);
				setState(3201);
				quoted_string();
				}
			}

			setState(3206);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3204);
				match(INTO);
				setState(3205);
				tableview_name();
				}
			}

			setState(3208);
			match(FOR);
			setState(3214);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3209);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(3210);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(3211);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(3212);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(3213);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3217);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3216);
				subquery_factoring_clause();
				}
			}

			setState(3219);
			subquery();
			setState(3224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(3222);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3220);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(3221);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3226);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(WITH);
			setState(3228);
			factoring_element();
			setState(3233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3229);
				match(COMMA);
				setState(3230);
				factoring_element();
				}
				}
				setState(3235);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			query_name();
			setState(3248);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3237);
				match(LEFT_PAREN);
				setState(3238);
				column_name();
				setState(3243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3239);
					match(COMMA);
					setState(3240);
					column_name();
					}
					}
					setState(3245);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3246);
				match(RIGHT_PAREN);
				}
			}

			setState(3250);
			match(AS);
			setState(3251);
			match(LEFT_PAREN);
			setState(3252);
			subquery();
			setState(3254);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3253);
				order_by_clause();
				}
			}

			setState(3256);
			match(RIGHT_PAREN);
			setState(3258);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(3257);
				search_clause();
				}
			}

			setState(3261);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(3260);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			match(SEARCH);
			setState(3264);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3265);
			match(FIRST);
			setState(3266);
			match(BY);
			setState(3267);
			column_name();
			setState(3269);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(3268);
				match(ASC);
				}
			}

			setState(3272);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(3271);
				match(DESC);
				}
			}

			setState(3276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3274);
				match(NULLS);
				setState(3275);
				match(FIRST);
				}
				break;
			}
			setState(3280);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3278);
				match(NULLS);
				setState(3279);
				match(LAST);
				}
			}

			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3282);
				match(COMMA);
				setState(3283);
				column_name();
				setState(3285);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(3284);
					match(ASC);
					}
				}

				setState(3288);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(3287);
					match(DESC);
					}
				}

				setState(3292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3290);
					match(NULLS);
					setState(3291);
					match(FIRST);
					}
					break;
				}
				setState(3296);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3294);
					match(NULLS);
					setState(3295);
					match(LAST);
					}
				}

				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3303);
			match(SET);
			setState(3304);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3306);
			match(CYCLE);
			setState(3307);
			column_name();
			setState(3312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3308);
				match(COMMA);
				setState(3309);
				column_name();
				}
				}
				setState(3314);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3315);
			match(SET);
			setState(3316);
			column_name();
			setState(3317);
			match(TO);
			setState(3318);
			expression();
			setState(3319);
			match(DEFAULT);
			setState(3320);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3322);
			subquery_basic_elements();
			setState(3326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3323);
				subquery_operation_part();
				}
				}
				setState(3328);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3329);
				match(UNION);
				setState(3331);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3330);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(3333);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(3334);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3337);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_subquery_basic_elements);
		try {
			setState(3344);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3339);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3340);
				match(LEFT_PAREN);
				setState(3341);
				subquery();
				setState(3342);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3346);
			match(SELECT);
			setState(3348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3347);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(3359);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(3350);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3351);
				selected_element();
				setState(3356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3352);
					match(COMMA);
					setState(3353);
					selected_element();
					}
					}
					setState(3358);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3362);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(3361);
				into_clause();
				}
			}

			setState(3364);
			from_clause();
			setState(3366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(3365);
				where_clause();
				}
				break;
			}
			setState(3369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3368);
				hierarchical_query_clause();
				}
				break;
			}
			setState(3372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(3371);
				group_by_clause();
				}
				break;
			}
			setState(3375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(3374);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3377);
			select_list_elements();
			setState(3379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(3378);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3381);
			match(FROM);
			setState(3382);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_select_list_elements);
		try {
			setState(3389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3384);
				tableview_name();
				setState(3385);
				match(PERIOD);
				setState(3386);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3388);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3391);
			table_ref();
			setState(3396);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3392);
					match(COMMA);
					setState(3393);
					table_ref();
					}
					} 
				}
				setState(3398);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3399);
			table_ref_aux();
			setState(3403);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,388,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3400);
					join_clause();
					}
					} 
				}
				setState(3405);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,388,_ctx);
			}
			setState(3408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(3406);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3407);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3410);
				dml_table_expression_clause();
				setState(3413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(3411);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3412);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3415);
				match(LEFT_PAREN);
				setState(3416);
				table_ref();
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3417);
					subquery_operation_part();
					}
					}
					setState(3422);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3423);
				match(RIGHT_PAREN);
				setState(3426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3424);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3425);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3428);
				match(ONLY);
				setState(3429);
				match(LEFT_PAREN);
				setState(3430);
				dml_table_expression_clause();
				setState(3431);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(3433);
				dml_table_expression_clause();
				setState(3436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(3434);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3435);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			}
			setState(3443);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3440);
					flashback_query_clause();
					}
					} 
				}
				setState(3445);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,395,_ctx);
			}
			setState(3447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3446);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3450);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3449);
				query_partition_clause();
				}
			}

			setState(3453);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3452);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3457);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3455);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3456);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3459);
			match(JOIN);
			setState(3460);
			table_ref_aux();
			setState(3462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3461);
				query_partition_clause();
				}
				break;
			}
			setState(3468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3466);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3464);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3465);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			match(ON);
			setState(3472);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			match(USING);
			setState(3475);
			match(LEFT_PAREN);
			setState(3476);
			column_name();
			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3477);
				match(COMMA);
				setState(3478);
				column_name();
				}
				}
				setState(3483);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3484);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3486);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3488);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3487);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3490);
			match(PARTITION);
			setState(3491);
			match(BY);
			setState(3505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3492);
				match(LEFT_PAREN);
				setState(3493);
				subquery();
				setState(3494);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3496);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3497);
				expression();
				setState(3502);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3498);
						match(COMMA);
						setState(3499);
						expression();
						}
						} 
					}
					setState(3504);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3515);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3507);
				match(VERSIONS);
				setState(3508);
				match(BETWEEN);
				setState(3509);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3510);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3511);
				match(AS);
				setState(3512);
				match(OF);
				setState(3513);
				_la = _input.LA(1);
				if ( !(((((_la - 377)) & ~0x3f) == 0 && ((1L << (_la - 377)) & ((1L << (SCN - 377)) | (1L << (SNAPSHOT - 377)) | (1L << (TIMESTAMP - 377)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3514);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3517);
			match(PIVOT);
			setState(3519);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3518);
				match(XML);
				}
			}

			setState(3521);
			match(LEFT_PAREN);
			setState(3522);
			pivot_element();
			setState(3527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3523);
				match(COMMA);
				setState(3524);
				pivot_element();
				}
				}
				setState(3529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3530);
			pivot_for_clause();
			setState(3531);
			pivot_in_clause();
			setState(3532);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			aggregate_function_name();
			setState(3535);
			match(LEFT_PAREN);
			setState(3536);
			expression();
			setState(3537);
			match(RIGHT_PAREN);
			setState(3539);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3538);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3541);
			match(FOR);
			setState(3554);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3542);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3543);
				match(LEFT_PAREN);
				setState(3544);
				column_name();
				setState(3549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3545);
					match(COMMA);
					setState(3546);
					column_name();
					}
					}
					setState(3551);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3552);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3556);
			match(IN);
			setState(3557);
			match(LEFT_PAREN);
			setState(3575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				setState(3558);
				subquery();
				}
				break;
			case 2:
				{
				setState(3559);
				match(ANY);
				setState(3564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3560);
					match(COMMA);
					setState(3561);
					match(ANY);
					}
					}
					setState(3566);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3567);
				pivot_in_clause_element();
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3568);
					match(COMMA);
					setState(3569);
					pivot_in_clause_element();
					}
					}
					setState(3574);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3577);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3579);
			pivot_in_clause_elements();
			setState(3581);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3580);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_pivot_in_clause_elements);
		try {
			setState(3585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3583);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3584);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(UNPIVOT);
			setState(3590);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3588);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3589);
				match(NULLS);
				}
			}

			setState(3592);
			match(LEFT_PAREN);
			setState(3605);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3593);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3594);
				match(LEFT_PAREN);
				setState(3595);
				column_name();
				setState(3600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3596);
					match(COMMA);
					setState(3597);
					column_name();
					}
					}
					setState(3602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3603);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3607);
			pivot_for_clause();
			setState(3608);
			unpivot_in_clause();
			setState(3609);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			match(IN);
			setState(3612);
			match(LEFT_PAREN);
			setState(3613);
			unpivot_in_elements();
			setState(3618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3614);
				match(COMMA);
				setState(3615);
				unpivot_in_elements();
				}
				}
				setState(3620);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3621);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3623);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3624);
				match(LEFT_PAREN);
				setState(3625);
				column_name();
				setState(3630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3626);
					match(COMMA);
					setState(3627);
					column_name();
					}
					}
					setState(3632);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3633);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3652);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3637);
				match(AS);
				setState(3650);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3638);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3639);
					match(LEFT_PAREN);
					setState(3640);
					constant();
					setState(3645);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3641);
						match(COMMA);
						setState(3642);
						constant();
						}
						}
						setState(3647);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3648);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_hierarchical_query_clause);
		try {
			setState(3671);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3654);
				match(CONNECT);
				setState(3655);
				match(BY);
				setState(3657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(3656);
					match(NOCYCLE);
					}
					break;
				}
				setState(3659);
				condition();
				setState(3661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3660);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3663);
				start_part();
				setState(3664);
				match(CONNECT);
				setState(3665);
				match(BY);
				setState(3667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(3666);
					match(NOCYCLE);
					}
					break;
				}
				setState(3669);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(START);
			setState(3674);
			match(WITH);
			setState(3675);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_group_by_clause);
		try {
			int _alt;
			setState(3703);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3677);
				match(GROUP);
				setState(3678);
				match(BY);
				setState(3679);
				group_by_elements();
				setState(3684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3680);
						match(COMMA);
						setState(3681);
						group_by_elements();
						}
						} 
					}
					setState(3686);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
				}
				setState(3688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(3687);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3690);
				having_clause();
				setState(3701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3691);
					match(GROUP);
					setState(3692);
					match(BY);
					setState(3693);
					group_by_elements();
					setState(3698);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,433,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3694);
							match(COMMA);
							setState(3695);
							group_by_elements();
							}
							} 
						}
						setState(3700);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,433,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_group_by_elements);
		try {
			setState(3708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3705);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3706);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3707);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3710);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3711);
			match(LEFT_PAREN);
			setState(3712);
			grouping_sets_elements();
			setState(3717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3713);
				match(COMMA);
				setState(3714);
				grouping_sets_elements();
				}
				}
				setState(3719);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3720);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3722);
			match(GROUPING);
			setState(3723);
			match(SETS);
			setState(3724);
			match(LEFT_PAREN);
			setState(3725);
			grouping_sets_elements();
			setState(3730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3726);
				match(COMMA);
				setState(3727);
				grouping_sets_elements();
				}
				}
				setState(3732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3733);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_grouping_sets_elements);
		try {
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3735);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3736);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3737);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3740);
			match(HAVING);
			setState(3741);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			match(MODEL);
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3744);
				cell_reference_options();
				}
				}
				setState(3749);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3751);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3750);
				return_rows_clause();
				}
			}

			setState(3756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3753);
				reference_model();
				}
				}
				setState(3758);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3759);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_cell_reference_options);
		int _la;
		try {
			setState(3769);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3761);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3762);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3763);
				match(UNIQUE);
				setState(3767);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3764);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3765);
					match(SINGLE);
					setState(3766);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3771);
			match(RETURN);
			setState(3772);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3773);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			match(REFERENCE);
			setState(3776);
			reference_model_name();
			setState(3777);
			match(ON);
			setState(3778);
			match(LEFT_PAREN);
			setState(3779);
			subquery();
			setState(3780);
			match(RIGHT_PAREN);
			setState(3781);
			model_column_clauses();
			setState(3785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3782);
				cell_reference_options();
				}
				}
				setState(3787);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3788);
				match(MAIN);
				setState(3789);
				main_model_name();
				}
			}

			setState(3792);
			model_column_clauses();
			setState(3796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3793);
				cell_reference_options();
				}
				}
				setState(3798);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3799);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3802);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3801);
				model_column_partition_part();
				}
			}

			setState(3804);
			match(DIMENSION);
			setState(3805);
			match(BY);
			setState(3806);
			model_column_list();
			setState(3807);
			match(MEASURES);
			setState(3808);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3810);
			match(PARTITION);
			setState(3811);
			match(BY);
			setState(3812);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3814);
			match(LEFT_PAREN);
			setState(3815);
			model_column();
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3816);
				match(COMMA);
				setState(3817);
				model_column();
				}
				}
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3823);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			expression();
			setState(3827);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3826);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3829);
				model_rules_part();
				}
			}

			setState(3832);
			match(LEFT_PAREN);
			setState(3833);
			model_rules_element();
			setState(3838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3834);
				match(COMMA);
				setState(3835);
				model_rules_element();
				}
				}
				setState(3840);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3841);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			match(RULES);
			setState(3849);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3844);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3845);
				match(UPSERT);
				setState(3847);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3846);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3853);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3851);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3852);
				match(ORDER);
				}
			}

			setState(3856);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3855);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3858);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3859);
				match(UPSERT);
				setState(3861);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(3860);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3865);
			cell_assignment();
			setState(3867);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3866);
				order_by_clause();
				}
			}

			setState(3869);
			match(EQUALS_OP);
			setState(3870);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3872);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3874);
			match(ITERATE);
			setState(3875);
			match(LEFT_PAREN);
			setState(3876);
			expression();
			setState(3877);
			match(RIGHT_PAREN);
			setState(3879);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3878);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			match(UNTIL);
			setState(3882);
			match(LEFT_PAREN);
			setState(3883);
			condition();
			setState(3884);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3886);
			match(ORDER);
			setState(3888);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3887);
				match(SIBLINGS);
				}
			}

			setState(3890);
			match(BY);
			setState(3891);
			order_by_elements();
			setState(3896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3892);
				match(COMMA);
				setState(3893);
				order_by_elements();
				}
				}
				setState(3898);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3899);
			expression();
			setState(3901);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3900);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3905);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3903);
				match(NULLS);
				setState(3904);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3907);
			match(FOR);
			setState(3908);
			match(UPDATE);
			setState(3910);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3909);
				for_update_of_part();
				}
			}

			setState(3913);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3912);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			match(OF);
			setState(3916);
			column_name();
			setState(3921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3917);
				match(COMMA);
				setState(3918);
				column_name();
				}
				}
				setState(3923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_for_update_options);
		try {
			setState(3929);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3924);
				match(SKIP_);
				setState(3925);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3926);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3927);
				match(WAIT);
				setState(3928);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3931);
			match(UPDATE);
			setState(3932);
			general_table_ref();
			setState(3933);
			update_set_clause();
			setState(3935);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3934);
				where_clause();
				}
			}

			setState(3938);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3937);
				static_returning_clause();
				}
			}

			setState(3941);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3940);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3943);
			match(SET);
			setState(3959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(3944);
				column_based_update_set_clause();
				setState(3949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3945);
					match(COMMA);
					setState(3946);
					column_based_update_set_clause();
					}
					}
					setState(3951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3952);
				match(VALUE);
				setState(3953);
				match(LEFT_PAREN);
				setState(3954);
				id();
				setState(3955);
				match(RIGHT_PAREN);
				setState(3956);
				match(EQUALS_OP);
				setState(3957);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3978);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3961);
				column_name();
				setState(3962);
				match(EQUALS_OP);
				setState(3963);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3965);
				match(LEFT_PAREN);
				setState(3966);
				column_name();
				setState(3971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3967);
					match(COMMA);
					setState(3968);
					column_name();
					}
					}
					setState(3973);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3974);
				match(RIGHT_PAREN);
				setState(3975);
				match(EQUALS_OP);
				setState(3976);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			match(DELETE);
			setState(3982);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3981);
				match(FROM);
				}
			}

			setState(3984);
			general_table_ref();
			setState(3986);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3985);
				where_clause();
				}
			}

			setState(3989);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3988);
				static_returning_clause();
				}
			}

			setState(3992);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3991);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3994);
			match(INSERT);
			setState(3997);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3995);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3996);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999);
			insert_into_clause();
			setState(4005);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(4000);
				values_clause();
				setState(4002);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(4001);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4004);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4008);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4007);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4010);
				match(ALL);
				setState(4012); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4011);
					multi_table_element();
					}
					}
					setState(4014); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(4016);
				conditional_insert_clause();
				}
				break;
			}
			setState(4019);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4021);
			insert_into_clause();
			setState(4023);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(4022);
				values_clause();
				}
			}

			setState(4026);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4025);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4029);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(4028);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(4032); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4031);
				conditional_insert_when_part();
				}
				}
				setState(4034); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4037);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4036);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			match(WHEN);
			setState(4040);
			condition();
			setState(4041);
			match(THEN);
			setState(4043); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4042);
				multi_table_element();
				}
				}
				setState(4045); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			match(ELSE);
			setState(4049); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4048);
				multi_table_element();
				}
				}
				setState(4051); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4053);
			match(INTO);
			setState(4054);
			general_table_ref();
			setState(4066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4055);
				match(LEFT_PAREN);
				setState(4056);
				column_name();
				setState(4061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4057);
					match(COMMA);
					setState(4058);
					column_name();
					}
					}
					setState(4063);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4064);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4068);
			match(VALUES);
			setState(4069);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			match(MERGE);
			setState(4072);
			match(INTO);
			setState(4073);
			tableview_name();
			setState(4075);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4074);
				table_alias();
				}
			}

			setState(4077);
			match(USING);
			setState(4078);
			selected_tableview();
			setState(4079);
			match(ON);
			setState(4080);
			match(LEFT_PAREN);
			setState(4081);
			condition();
			setState(4082);
			match(RIGHT_PAREN);
			setState(4091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4083);
				merge_update_clause();
				setState(4085);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4084);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(4087);
				merge_insert_clause();
				setState(4089);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4088);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(4094);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4093);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			match(WHEN);
			setState(4097);
			match(MATCHED);
			setState(4098);
			match(THEN);
			setState(4099);
			match(UPDATE);
			setState(4100);
			match(SET);
			setState(4101);
			merge_element();
			setState(4106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4102);
				match(COMMA);
				setState(4103);
				merge_element();
				}
				}
				setState(4108);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4110);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4109);
				where_clause();
				}
			}

			setState(4113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4112);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			column_name();
			setState(4116);
			match(EQUALS_OP);
			setState(4117);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4119);
			match(DELETE);
			setState(4120);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4122);
			match(WHEN);
			setState(4123);
			match(NOT);
			setState(4124);
			match(MATCHED);
			setState(4125);
			match(THEN);
			setState(4126);
			match(INSERT);
			setState(4138);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4127);
				match(LEFT_PAREN);
				setState(4128);
				column_name();
				setState(4133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4129);
					match(COMMA);
					setState(4130);
					column_name();
					}
					}
					setState(4135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4136);
				match(RIGHT_PAREN);
				}
			}

			setState(4140);
			match(VALUES);
			setState(4141);
			expression_list();
			setState(4143);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4142);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4150);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4145);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4146);
				match(LEFT_PAREN);
				setState(4147);
				select_statement();
				setState(4148);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4153);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4152);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4155);
			match(LOCK);
			setState(4156);
			match(TABLE);
			setState(4157);
			lock_table_element();
			setState(4162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4158);
				match(COMMA);
				setState(4159);
				lock_table_element();
				}
				}
				setState(4164);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4165);
			match(IN);
			setState(4166);
			lock_mode();
			setState(4167);
			match(MODE);
			setState(4169);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(4168);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_wait_nowait_part);
		try {
			setState(4174);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4171);
				match(WAIT);
				setState(4172);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4173);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4176);
			tableview_name();
			setState(4178);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(4177);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_lock_mode);
		int _la;
		try {
			setState(4192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4180);
				match(ROW);
				setState(4181);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4182);
				match(ROW);
				setState(4183);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4184);
				match(SHARE);
				setState(4186);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(4185);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4188);
				match(SHARE);
				setState(4189);
				match(ROW);
				setState(4190);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4191);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4194);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(4195);
				match(ONLY);
				setState(4196);
				match(LEFT_PAREN);
				setState(4197);
				dml_table_expression_clause();
				setState(4198);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(4202);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4205);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4206);
			expression();
			setState(4211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4207);
				match(COMMA);
				setState(4208);
				expression();
				}
				}
				setState(4213);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4214);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			match(LOG);
			setState(4217);
			match(ERRORS);
			setState(4219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4218);
				error_logging_into_part();
				}
				break;
			}
			setState(4222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(4221);
				expression_wrapper();
				}
				break;
			}
			setState(4225);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(4224);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			match(INTO);
			setState(4228);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4230);
			match(REJECT);
			setState(4231);
			match(LIMIT);
			setState(4234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(4232);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(4233);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(4248);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4236);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4237);
				match(LEFT_PAREN);
				setState(4238);
				select_statement();
				setState(4240);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4239);
					subquery_restriction_clause();
					}
				}

				setState(4242);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				tableview_name();
				setState(4246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4245);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4250);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4251);
				match(LEFT_PAREN);
				setState(4252);
				subquery();
				setState(4253);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4255);
				match(LEFT_PAREN);
				setState(4256);
				expression();
				setState(4257);
				match(RIGHT_PAREN);
				setState(4261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(4258);
					match(LEFT_PAREN);
					setState(4259);
					match(PLUS_SIGN);
					setState(4260);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			match(WITH);
			setState(4274);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(4266);
				match(READ);
				setState(4267);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(4268);
				match(CHECK);
				setState(4269);
				match(OPTION);
				setState(4272);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4270);
					match(CONSTRAINT);
					setState(4271);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4276);
			match(SAMPLE);
			setState(4278);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(4277);
				match(BLOCK);
				}
			}

			setState(4280);
			match(LEFT_PAREN);
			setState(4281);
			expression();
			setState(4284);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4282);
				match(COMMA);
				setState(4283);
				expression();
				}
			}

			setState(4286);
			match(RIGHT_PAREN);
			setState(4288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4287);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			match(SEED);
			setState(4291);
			match(LEFT_PAREN);
			setState(4292);
			expression();
			setState(4293);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4295);
			match(CURSOR);
			setState(4296);
			match(LEFT_PAREN);
			setState(4297);
			subquery();
			setState(4298);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4300);
			match(LEFT_PAREN);
			setState(4302);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NOT - 260)) | (1L << (NULL - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PRIOR - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (UNSIGNED_INTEGER - 517)) | (1L << (APPROXIMATE_NUM_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (LEFT_PAREN - 517)) | (1L << (PLUS_SIGN - 517)) | (1L << (MINUS_SIGN - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4301);
				expression();
				}
			}

			setState(4308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4304);
				match(COMMA);
				setState(4305);
				expression();
				}
				}
				setState(4310);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4311);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4313);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition_wrapper(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_expression);
		try {
			int _alt;
			setState(4326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4318);
				logical_and_expression();
				setState(4323);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4319);
						match(OR);
						setState(4320);
						logical_and_expression();
						}
						} 
					}
					setState(4325);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_wrapper(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4328);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(plsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(plsqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogical_and_expression(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4330);
			negated_expression();
			setState(4335);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4331);
					match(AND);
					setState(4332);
					negated_expression();
					}
					} 
				}
				setState(4337);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNegated_expression(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_negated_expression);
		try {
			setState(4341);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4338);
				match(NOT);
				setState(4339);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4340);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(plsqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(plsqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(plsqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(plsqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(plsqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(plsqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(plsqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(plsqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(plsqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(plsqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(plsqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(plsqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(plsqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(plsqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(plsqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(plsqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(plsqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(plsqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(plsqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(plsqlParser.ONLY, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEquality_expression(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			multiset_expression();
			setState(4377);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4344);
					match(IS);
					setState(4346);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4345);
						match(NOT);
						}
					}

					setState(4373);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(4348);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(4349);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(4350);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(4351);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(4352);
						match(A_LETTER);
						setState(4353);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(4354);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(4355);
						match(OF);
						setState(4357);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(4356);
							match(TYPE);
							}
						}

						setState(4359);
						match(LEFT_PAREN);
						setState(4361);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
						case 1:
							{
							setState(4360);
							match(ONLY);
							}
							break;
						}
						setState(4363);
						type_spec();
						setState(4368);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4364);
							match(COMMA);
							setState(4365);
							type_spec();
							}
							}
							setState(4370);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4371);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4379);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4380);
			relational_expression();
			setState(4387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(4381);
				multiset_type();
				setState(4383);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4382);
					match(OF);
					}
				}

				setState(4385);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4391);
			compound_expression();
			setState(4403);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4398);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
					case 1:
						{
						setState(4392);
						match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(4393);
						not_equal_op();
						}
						break;
					case 3:
						{
						setState(4394);
						match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(4395);
						match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(4396);
						less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(4397);
						greater_than_or_equals_op();
						}
						break;
					}
					setState(4400);
					compound_expression();
					}
					} 
				}
				setState(4405);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			concatenation();
			setState(4421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4408);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4407);
					match(NOT);
					}
				}

				setState(4419);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4410);
					match(IN);
					setState(4411);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4412);
					match(BETWEEN);
					setState(4413);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(4414);
					like_type();
					setState(4415);
					concatenation();
					setState(4417);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						setState(4416);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			_la = _input.LA(1);
			if ( !(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (LIKE - 225)) | (1L << (LIKE2 - 225)) | (1L << (LIKE4 - 225)) | (1L << (LIKEC - 225)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			match(ESCAPE);
			setState(4426);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_in_elements);
		int _la;
		try {
			setState(4446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4428);
				match(LEFT_PAREN);
				setState(4429);
				subquery();
				setState(4430);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4432);
				match(LEFT_PAREN);
				setState(4433);
				concatenation_wrapper();
				setState(4438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4434);
					match(COMMA);
					setState(4435);
					concatenation_wrapper();
					}
					}
					setState(4440);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4441);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4443);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4444);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4445);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			concatenation();
			setState(4449);
			match(AND);
			setState(4450);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			additive_expression();
			setState(4458);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,553,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4453);
					concatenation_op();
					setState(4454);
					additive_expression();
					}
					} 
				}
				setState(4460);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,553,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_wrapper(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_expression(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4463);
			multiply_expression();
			setState(4468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4464);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4465);
					multiply_expression();
					}
					} 
				}
				setState(4470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_expression(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4471);
			datetime_expression();
			setState(4476);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4472);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4473);
					datetime_expression();
					}
					} 
				}
				setState(4478);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatetime_expression(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4479);
			model_expression();
			setState(4488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				{
				setState(4480);
				match(AT);
				setState(4485);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4481);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4482);
					match(TIME);
					setState(4483);
					match(ZONE);
					setState(4484);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4487);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_interval_expression);
		int _la;
		try {
			setState(4514);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4490);
				match(DAY);
				setState(4495);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4491);
					match(LEFT_PAREN);
					setState(4492);
					concatenation_wrapper();
					setState(4493);
					match(RIGHT_PAREN);
					}
				}

				setState(4497);
				match(TO);
				setState(4498);
				match(SECOND);
				setState(4503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
				case 1:
					{
					setState(4499);
					match(LEFT_PAREN);
					setState(4500);
					concatenation_wrapper();
					setState(4501);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4505);
				match(YEAR);
				setState(4510);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4506);
					match(LEFT_PAREN);
					setState(4507);
					concatenation_wrapper();
					setState(4508);
					match(RIGHT_PAREN);
					}
				}

				setState(4512);
				match(TO);
				setState(4513);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			unary_expression();
			setState(4521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				{
				setState(4517);
				match(LEFT_BRACKET);
				setState(4518);
				model_expression_element();
				setState(4519);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_model_expression_element);
		int _la;
		try {
			setState(4546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4523);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4524);
					condition_wrapper();
					}
					break;
				}
				setState(4534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4527);
					match(COMMA);
					setState(4530);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
					case 1:
						{
						setState(4528);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4529);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4536);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4537);
				single_column_for_loop();
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4538);
					match(COMMA);
					setState(4539);
					single_column_for_loop();
					}
					}
					setState(4544);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4545);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(FOR);
			setState(4549);
			column_name();
			setState(4562);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4550);
				match(IN);
				setState(4551);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4553);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4552);
					for_like_part();
					}
				}

				setState(4555);
				match(FROM);
				setState(4556);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4557);
				match(TO);
				setState(4558);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4559);
				for_increment_decrement_type();
				setState(4560);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			match(LIKE);
			setState(4565);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4567);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4569);
			match(FOR);
			setState(4570);
			match(LEFT_PAREN);
			setState(4571);
			column_name();
			setState(4576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4572);
				match(COMMA);
				setState(4573);
				column_name();
				}
				}
				setState(4578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4579);
			match(RIGHT_PAREN);
			setState(4580);
			match(IN);
			setState(4581);
			match(LEFT_PAREN);
			setState(4594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
			case 1:
				{
				setState(4582);
				subquery();
				}
				break;
			case 2:
				{
				setState(4583);
				match(LEFT_PAREN);
				setState(4584);
				expression_list();
				setState(4589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4585);
					match(COMMA);
					setState(4586);
					expression_list();
					}
					}
					setState(4591);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4592);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4596);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_unary_expression);
		try {
			setState(4616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4598);
				match(MINUS_SIGN);
				setState(4599);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4600);
				match(PLUS_SIGN);
				setState(4601);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4602);
				match(PRIOR);
				setState(4603);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4604);
				match(CONNECT_BY_ROOT);
				setState(4605);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4606);
				match(NEW);
				setState(4607);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4608);
				match(DISTINCT);
				setState(4609);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4610);
				match(ALL);
				setState(4611);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4612);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4613);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4614);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4615);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_case_statement);
		try {
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4618);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4619);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4623);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4622);
				label_name();
				}
			}

			setState(4625);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4626);
			atom();
			setState(4628); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4627);
				simple_case_when_part();
				}
				}
				setState(4630); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4633);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4632);
				case_else_part();
				}
			}

			setState(4635);
			match(END);
			setState(4637);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4636);
				match(CASE);
				}
			}

			setState(4640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(4639);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4642);
			match(WHEN);
			setState(4643);
			expression_wrapper();
			setState(4644);
			match(THEN);
			setState(4647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				{
				setState(4645);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4646);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4650);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (DELIMITED_ID - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4649);
				label_name();
				}
			}

			setState(4652);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4654); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4653);
				searched_case_when_part();
				}
				}
				setState(4656); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4659);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4658);
				case_else_part();
				}
			}

			setState(4661);
			match(END);
			setState(4663);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4662);
				match(CASE);
				}
			}

			setState(4666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				{
				setState(4665);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4668);
			match(WHEN);
			setState(4669);
			condition_wrapper();
			setState(4670);
			match(THEN);
			setState(4673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				{
				setState(4671);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4672);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4675);
			match(ELSE);
			setState(4678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				{
				setState(4676);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4677);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_atom);
		try {
			int _alt;
			setState(4700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4680);
				table_element();
				setState(4681);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4683);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4684);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4685);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4686);
				match(LEFT_PAREN);
				setState(4698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(4687);
					subquery();
					setState(4688);
					match(RIGHT_PAREN);
					setState(4692);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,588,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4689);
							subquery_operation_part();
							}
							} 
						}
						setState(4694);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,588,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4695);
					expression_or_vector();
					setState(4696);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			expression();
			setState(4704);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4703);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4706);
			match(COMMA);
			setState(4707);
			expression();
			setState(4712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4708);
				match(COMMA);
				setState(4709);
				expression();
				}
				}
				setState(4714);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4715);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(4716);
				match(LEFT_PAREN);
				setState(4717);
				subquery();
				setState(4718);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4720);
				match(LEFT_PAREN);
				setState(4721);
				expression_wrapper();
				setState(4722);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(5037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				over_clause_keyword();
				setState(4727);
				function_argument_analytic();
				setState(4729);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4728);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4731);
				regular_id();
				setState(4732);
				function_argument_modeling();
				setState(4734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(4733);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4736);
				match(COUNT);
				setState(4737);
				match(LEFT_PAREN);
				setState(4743);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4738);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4740);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
					case 1:
						{
						setState(4739);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					setState(4742);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4745);
				match(RIGHT_PAREN);
				setState(4747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4746);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4749);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4750);
				match(LEFT_PAREN);
				setState(4757);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4751);
					match(MULTISET);
					setState(4752);
					match(LEFT_PAREN);
					setState(4753);
					subquery();
					setState(4754);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4756);
					concatenation_wrapper();
					}
					break;
				}
				setState(4759);
				match(AS);
				setState(4760);
				type_spec();
				setState(4761);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4763);
				match(CHR);
				setState(4764);
				match(LEFT_PAREN);
				setState(4765);
				concatenation_wrapper();
				setState(4766);
				match(USING);
				setState(4767);
				match(NCHAR_CS);
				setState(4768);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4770);
				match(COLLECT);
				setState(4771);
				match(LEFT_PAREN);
				setState(4773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
				case 1:
					{
					setState(4772);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4775);
				concatenation_wrapper();
				setState(4777);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4776);
					collect_order_by_part();
					}
				}

				setState(4779);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4781);
				within_or_over_clause_keyword();
				setState(4782);
				function_argument();
				setState(4784); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4783);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4786); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4788);
				match(DECOMPOSE);
				setState(4789);
				match(LEFT_PAREN);
				setState(4790);
				concatenation_wrapper();
				setState(4792);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4791);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4794);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4796);
				match(EXTRACT);
				setState(4797);
				match(LEFT_PAREN);
				setState(4798);
				regular_id();
				setState(4799);
				match(FROM);
				setState(4800);
				concatenation_wrapper();
				setState(4801);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4803);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4804);
				function_argument_analytic();
				setState(4806);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4805);
					respect_or_ignore_nulls();
					}
				}

				setState(4808);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4810);
				standard_prediction_function_keyword();
				setState(4811);
				match(LEFT_PAREN);
				setState(4812);
				expression_wrapper();
				setState(4817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4813);
					match(COMMA);
					setState(4814);
					expression_wrapper();
					}
					}
					setState(4819);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4821);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4820);
					cost_matrix_clause();
					}
				}

				setState(4824);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4823);
					using_clause();
					}
				}

				setState(4826);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4828);
				match(TRANSLATE);
				setState(4829);
				match(LEFT_PAREN);
				setState(4830);
				expression_wrapper();
				setState(4833);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4831);
					match(USING);
					setState(4832);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4835);
					match(COMMA);
					setState(4836);
					expression_wrapper();
					}
					}
					setState(4841);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4842);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4844);
				match(TREAT);
				setState(4845);
				match(LEFT_PAREN);
				setState(4846);
				expression_wrapper();
				setState(4847);
				match(AS);
				setState(4849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(4848);
					match(REF);
					}
					break;
				}
				setState(4851);
				type_spec();
				setState(4852);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4854);
				match(TRIM);
				setState(4855);
				match(LEFT_PAREN);
				setState(4863);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4857);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4856);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(4860);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4859);
						quoted_string();
						}
					}

					setState(4862);
					match(FROM);
					}
					break;
				}
				setState(4865);
				concatenation_wrapper();
				setState(4866);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4868);
				match(XMLAGG);
				setState(4869);
				match(LEFT_PAREN);
				setState(4870);
				expression_wrapper();
				setState(4872);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4871);
					order_by_clause();
					}
				}

				setState(4874);
				match(RIGHT_PAREN);
				setState(4877);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4875);
					match(PERIOD);
					setState(4876);
					general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4879);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4880);
				match(LEFT_PAREN);
				setState(4881);
				xml_multiuse_expression_element();
				setState(4886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4882);
					match(COMMA);
					setState(4883);
					xml_multiuse_expression_element();
					}
					}
					setState(4888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4889);
				match(RIGHT_PAREN);
				setState(4892);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4890);
					match(PERIOD);
					setState(4891);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4894);
				match(XMLELEMENT);
				setState(4895);
				match(LEFT_PAREN);
				setState(4897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4896);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
				case 1:
					{
					setState(4899);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4902);
				expression_wrapper();
				setState(4905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(4903);
					match(COMMA);
					setState(4904);
					xml_attributes_clause();
					}
					break;
				}
				setState(4914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4907);
					match(COMMA);
					setState(4908);
					expression_wrapper();
					setState(4910);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
						{
						setState(4909);
						column_alias();
						}
					}

					}
					}
					setState(4916);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4917);
				match(RIGHT_PAREN);
				setState(4920);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4918);
					match(PERIOD);
					setState(4919);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4922);
				match(XMLEXISTS);
				setState(4923);
				match(LEFT_PAREN);
				setState(4924);
				expression_wrapper();
				setState(4926);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4925);
					xml_passing_clause();
					}
				}

				setState(4928);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4930);
				match(XMLPARSE);
				setState(4931);
				match(LEFT_PAREN);
				setState(4932);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4933);
				concatenation_wrapper();
				setState(4935);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4934);
					match(WELLFORMED);
					}
				}

				setState(4937);
				match(RIGHT_PAREN);
				setState(4940);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4938);
					match(PERIOD);
					setState(4939);
					general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4942);
				match(XMLPI);
				setState(4943);
				match(LEFT_PAREN);
				setState(4948);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4944);
					match(NAME);
					setState(4945);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4946);
					match(EVALNAME);
					setState(4947);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4952);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4950);
					match(COMMA);
					setState(4951);
					concatenation_wrapper();
					}
				}

				setState(4954);
				match(RIGHT_PAREN);
				setState(4957);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4955);
					match(PERIOD);
					setState(4956);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4959);
				match(XMLQUERY);
				setState(4960);
				match(LEFT_PAREN);
				setState(4961);
				concatenation_wrapper();
				setState(4963);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4962);
					xml_passing_clause();
					}
				}

				setState(4965);
				match(RETURNING);
				setState(4966);
				match(CONTENT);
				setState(4970);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4967);
					match(NULL);
					setState(4968);
					match(ON);
					setState(4969);
					match(EMPTY);
					}
				}

				setState(4972);
				match(RIGHT_PAREN);
				setState(4975);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4973);
					match(PERIOD);
					setState(4974);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4977);
				match(XMLROOT);
				setState(4978);
				match(LEFT_PAREN);
				setState(4979);
				concatenation_wrapper();
				setState(4980);
				xmlroot_param_version_part();
				setState(4983);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4981);
					match(COMMA);
					setState(4982);
					xmlroot_param_standalone_part();
					}
				}

				setState(4985);
				match(RIGHT_PAREN);
				setState(4988);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4986);
					match(PERIOD);
					setState(4987);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4990);
				match(XMLSERIALIZE);
				setState(4991);
				match(LEFT_PAREN);
				setState(4992);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4993);
				concatenation_wrapper();
				setState(4996);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4994);
					match(AS);
					setState(4995);
					type_spec();
					}
				}

				setState(4999);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4998);
					xmlserialize_param_enconding_part();
					}
				}

				setState(5002);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(5001);
					xmlserialize_param_version_part();
					}
				}

				setState(5005);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(5004);
					xmlserialize_param_ident_part();
					}
				}

				setState(5009);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(5007);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5008);
					match(DEFAULTS);
					}
				}

				setState(5011);
				match(RIGHT_PAREN);
				setState(5014);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5012);
					match(PERIOD);
					setState(5013);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5016);
				match(XMLTABLE);
				setState(5017);
				match(LEFT_PAREN);
				setState(5019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					setState(5018);
					xml_namespaces_clause();
					}
					break;
				}
				setState(5021);
				concatenation_wrapper();
				setState(5023);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5022);
					xml_passing_clause();
					}
				}

				setState(5030);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5025);
					match(COLUMNS);
					setState(5026);
					xml_table_column();
					{
					setState(5027);
					match(COMMA);
					setState(5028);
					xml_table_column();
					}
					}
				}

				setState(5032);
				match(RIGHT_PAREN);
				setState(5035);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5033);
					match(PERIOD);
					setState(5034);
					general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5039);
			_la = _input.LA(1);
			if ( !(((((_la - 516)) & ~0x3f) == 0 && ((1L << (_la - 516)) & ((1L << (AVG - 516)) | (1L << (CORR - 516)) | (1L << (LAG - 516)) | (1L << (LEAD - 516)) | (1L << (MAX - 516)) | (1L << (MEDIAN - 516)) | (1L << (MIN - 516)) | (1L << (NTILE - 516)) | (1L << (RATIO_TO_REPORT - 516)) | (1L << (ROW_NUMBER - 516)) | (1L << (SUM - 516)) | (1L << (VARIANCE - 516)) | (1L << (REGR_ - 516)) | (1L << (STDDEV - 516)) | (1L << (VAR_ - 516)) | (1L << (COVAR_ - 516)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			_la = _input.LA(1);
			if ( !(((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & ((1L << (CUME_DIST - 509)) | (1L << (DENSE_RANK - 509)) | (1L << (LISTAGG - 509)) | (1L << (PERCENT_RANK - 509)) | (1L << (PERCENTILE_CONT - 509)) | (1L << (PERCENTILE_DISC - 509)) | (1L << (RANK - 509)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5043);
			_la = _input.LA(1);
			if ( !(((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (PREDICTION - 503)) | (1L << (PREDICTION_BOUNDS - 503)) | (1L << (PREDICTION_COST - 503)) | (1L << (PREDICTION_DETAILS - 503)) | (1L << (PREDICTION_PROBABILITY - 503)) | (1L << (PREDICTION_SET - 503)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5045);
			match(OVER);
			setState(5046);
			match(LEFT_PAREN);
			setState(5048);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5047);
				query_partition_clause();
				}
			}

			setState(5054);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5050);
				order_by_clause();
				setState(5052);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(5051);
					windowing_clause();
					}
				}

				}
			}

			setState(5056);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			windowing_type();
			setState(5065);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(5059);
				match(BETWEEN);
				setState(5060);
				windowing_elements();
				setState(5061);
				match(AND);
				setState(5062);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5064);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5067);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_windowing_elements);
		int _la;
		try {
			setState(5076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5069);
				match(UNBOUNDED);
				setState(5070);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5071);
				match(CURRENT);
				setState(5072);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5073);
				concatenation_wrapper();
				setState(5074);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5078);
			match(USING);
			setState(5088);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5079);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5080);
				using_element();
				setState(5085);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,651,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5081);
						match(COMMA);
						setState(5082);
						using_element();
						}
						} 
					}
					setState(5087);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,651,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5090);
				match(IN);
				setState(5092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					setState(5091);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5094);
				match(OUT);
				}
				break;
			}
			setState(5097);
			select_list_elements();
			setState(5099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5098);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5101);
			match(ORDER);
			setState(5102);
			match(BY);
			setState(5103);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_within_or_over_part);
		try {
			setState(5112);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5105);
				match(WITHIN);
				setState(5106);
				match(GROUP);
				setState(5107);
				match(LEFT_PAREN);
				setState(5108);
				order_by_clause();
				setState(5109);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5111);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			match(COST);
			setState(5132);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5115);
				match(MODEL);
				setState(5117);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5116);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5119);
				match(LEFT_PAREN);
				setState(5120);
				cost_class_name();
				setState(5125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5121);
					match(COMMA);
					setState(5122);
					cost_class_name();
					}
					}
					setState(5127);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5128);
				match(RIGHT_PAREN);
				setState(5129);
				match(VALUES);
				setState(5130);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			match(PASSING);
			setState(5137);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5135);
				match(BY);
				setState(5136);
				match(VALUE);
				}
			}

			setState(5139);
			expression_wrapper();
			setState(5141);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5140);
				column_alias();
				}
			}

			{
			setState(5143);
			match(COMMA);
			setState(5144);
			expression_wrapper();
			setState(5146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5145);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(XMLATTRIBUTES);
			setState(5149);
			match(LEFT_PAREN);
			setState(5151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5150);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(5154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5153);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(5156);
			xml_multiuse_expression_element();
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5157);
				match(COMMA);
				setState(5158);
				xml_multiuse_expression_element();
				}
				}
				setState(5163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5164);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5166);
			match(XMLNAMESPACES);
			setState(5167);
			match(LEFT_PAREN);
			setState(5171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5168);
				concatenation_wrapper();
				setState(5169);
				column_alias();
				}
				break;
			}
			setState(5179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5173);
				match(COMMA);
				setState(5174);
				concatenation_wrapper();
				setState(5175);
				column_alias();
				}
				}
				setState(5181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5183);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5182);
				xml_general_default_part();
				}
			}

			setState(5185);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5187);
			xml_column_name();
			setState(5198);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5188);
				match(FOR);
				setState(5189);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5190);
				type_spec();
				setState(5193);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5191);
					match(PATH);
					setState(5192);
					concatenation_wrapper();
					}
				}

				setState(5196);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5195);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5200);
			match(DEFAULT);
			setState(5201);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			expression();
			setState(5210);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5204);
				match(AS);
				setState(5208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5205);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5206);
					match(EVALNAME);
					setState(5207);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			match(VERSION);
			setState(5216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5213);
				match(NO);
				setState(5214);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5215);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5218);
			match(STANDALONE);
			setState(5224);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5219);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5220);
				match(NO);
				setState(5222);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5221);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5226);
			match(ENCODING);
			setState(5227);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5229);
			match(VERSION);
			setState(5230);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5240);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5232);
				match(NO);
				setState(5233);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5234);
				match(INDENT);
				setState(5238);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5235);
					match(SIZE);
					setState(5236);
					match(EQUALS_OP);
					setState(5237);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5247);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(5242);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(5243);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(5244);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(5245);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(5246);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5250);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(5249);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5252);
			match(WHENEVER);
			setState(5253);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5259);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5254);
				match(EXIT);
				setState(5255);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5256);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5257);
				match(CONTINUE);
				setState(5258);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5261);
			match(SET);
			setState(5262);
			regular_id();
			setState(5268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(5263);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5264);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5265);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5266);
				numeric();
				}
				break;
			case 5:
				{
				setState(5267);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5270);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(plsqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5276);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5275);
				match(FOR);
				}
			}

			setState(5278);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_column_alias);
		int _la;
		try {
			setState(5288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5281);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5280);
					match(AS);
					}
				}

				setState(5285);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5283);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5284);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5287);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5292);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5290);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5291);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5294);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(WHERE);
			setState(5299);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5297);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5298);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5301);
			match(CURRENT);
			setState(5302);
			match(OF);
			setState(5303);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_into_clause);
		int _la;
		try {
			setState(5325);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5305);
				match(INTO);
				setState(5306);
				variable_name();
				setState(5311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5307);
					match(COMMA);
					setState(5308);
					variable_name();
					}
					}
					setState(5313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5314);
				match(BULK);
				setState(5315);
				match(COLLECT);
				setState(5316);
				match(INTO);
				setState(5317);
				variable_name();
				setState(5322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5318);
					match(COMMA);
					setState(5319);
					variable_name();
					}
					}
					setState(5324);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_xml_column_name);
		try {
			setState(5329);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5327);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5328);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5331);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5335);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			id();
			setState(5348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5344);
				match(PERIOD);
				setState(5345);
				id_expression();
				}
				}
				setState(5350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5353);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5351);
				match(AT_SIGN);
				setState(5352);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5357);
			id();
			setState(5360);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5358);
				match(PERIOD);
				setState(5359);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5364);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5368);
			id();
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5369);
				match(PERIOD);
				setState(5370);
				id_expression();
				}
				}
				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5378);
			id();
			setState(5383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5379);
				match(PERIOD);
				setState(5380);
				id_expression();
				}
				}
				setState(5385);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5388);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5386);
				match(AT_SIGN);
				setState(5387);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			id_expression();
			setState(5397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5393);
				match(PERIOD);
				setState(5394);
				id_expression();
				}
				}
				setState(5399);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_sequence_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				{
				setState(5400);
				schema_name();
				setState(5401);
				match(PERIOD);
				}
				break;
			}
			setState(5405);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			id();
			setState(5412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5408);
				match(PERIOD);
				setState(5409);
				id_expression();
				}
				}
				setState(5414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(5415);
				schema_name();
				setState(5416);
				match(PERIOD);
				}
				break;
			}
			setState(5420);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				{
				setState(5422);
				schema_name();
				setState(5423);
				match(PERIOD);
				}
				break;
			}
			setState(5427);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_trigger_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(5429);
				schema_name();
				setState(5430);
				match(PERIOD);
				}
				break;
			}
			setState(5434);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_variable_name);
		int _la;
		try {
			setState(5446);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5438);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5436);
					match(INTRODUCER);
					setState(5437);
					char_set_name();
					}
				}

				setState(5440);
				id_expression();
				setState(5443);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5441);
					match(PERIOD);
					setState(5442);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5445);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_cursor_name);
		try {
			setState(5452);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5450);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5451);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_record_name);
		try {
			setState(5456);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5454);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5455);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			id();
			setState(5461);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5459);
				match(PERIOD);
				setState(5460);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5463);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5465);
			id();
			setState(5470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5466);
				match(PERIOD);
				setState(5467);
				id_expression();
				}
				}
				setState(5472);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5473);
			id();
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
			case 1:
				{
				setState(5474);
				match(PERIOD);
				setState(5475);
				id_expression();
				}
				break;
			}
			setState(5481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(5478);
				match(AT_SIGN);
				setState(5479);
				link_name();
				}
				break;
			case 2:
				{
				setState(5480);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5483);
			id_expression();
			setState(5488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5484);
				match(PERIOD);
				setState(5485);
				id_expression();
				}
				}
				setState(5490);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5491);
			match(KEEP);
			setState(5492);
			match(LEFT_PAREN);
			setState(5493);
			match(DENSE_RANK);
			setState(5494);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5495);
			order_by_clause();
			setState(5496);
			match(RIGHT_PAREN);
			setState(5498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5497);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5500);
			match(LEFT_PAREN);
			setState(5502);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NOT - 260)) | (1L << (NULL - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PRIOR - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (UNSIGNED_INTEGER - 517)) | (1L << (APPROXIMATE_NUM_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (LEFT_PAREN - 517)) | (1L << (PLUS_SIGN - 517)) | (1L << (MINUS_SIGN - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5501);
				argument();
				}
			}

			setState(5508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5504);
				match(COMMA);
				setState(5505);
				argument();
				}
				}
				setState(5510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5511);
			match(RIGHT_PAREN);
			setState(5513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				setState(5512);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5515);
			match(LEFT_PAREN);
			setState(5520);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NOT - 260)) | (1L << (NULL - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (PRIOR - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (UNSIGNED_INTEGER - 517)) | (1L << (APPROXIMATE_NUM_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (LEFT_PAREN - 517)) | (1L << (PLUS_SIGN - 517)) | (1L << (MINUS_SIGN - 517)) | (1L << (BINDVAR - 517)) | (1L << (COLON - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5516);
				argument();
				setState(5518);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5517);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5522);
				match(COMMA);
				setState(5523);
				argument();
				setState(5525);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5524);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5531);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5532);
			match(RIGHT_PAREN);
			setState(5534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5533);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5536);
			match(LEFT_PAREN);
			setState(5537);
			column_name();
			setState(5550);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5538);
				match(COMMA);
				setState(5541);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5539);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5540);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5548);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5543);
					match(COMMA);
					setState(5546);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5544);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5545);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5552);
			match(USING);
			setState(5572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				setState(5553);
				tableview_name();
				setState(5554);
				match(PERIOD);
				setState(5555);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5557);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5558);
				expression();
				setState(5560);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
					{
					setState(5559);
					column_alias();
					}
				}

				setState(5569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5562);
					match(COMMA);
					setState(5563);
					expression();
					setState(5565);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)) | (1L << (NATIONAL_CHAR_STRING_LIT - 517)) | (1L << (CHAR_STRING - 517)) | (1L << (DELIMITED_ID - 517)) | (1L << (INTRODUCER - 517)))) != 0) || _la==REGULAR_ID) {
						{
						setState(5564);
						column_alias();
						}
					}

					}
					}
					setState(5571);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5574);
			match(RIGHT_PAREN);
			setState(5576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5575);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5578);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5579);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5581);
				id();
				setState(5582);
				match(EQUALS_OP);
				setState(5583);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5587);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_type_spec);
		int _la;
		try {
			setState(5597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5589);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5590);
					match(REF);
					}
					break;
				}
				setState(5593);
				type_name();
				setState(5595);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5594);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_datatype);
		int _la;
		try {
			setState(5627);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5599);
				native_datatype_element();
				setState(5601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5600);
					precision_part();
					}
					break;
				}
				setState(5609);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5603);
					match(WITH);
					setState(5605);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5604);
						match(LOCAL);
						}
					}

					setState(5607);
					match(TIME);
					setState(5608);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5611);
				match(INTERVAL);
				setState(5612);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5617);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5613);
					match(LEFT_PAREN);
					setState(5614);
					expression_wrapper();
					setState(5615);
					match(RIGHT_PAREN);
					}
				}

				setState(5619);
				match(TO);
				setState(5620);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
				case 1:
					{
					setState(5621);
					match(LEFT_PAREN);
					setState(5622);
					expression_wrapper();
					setState(5623);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5629);
			match(LEFT_PAREN);
			setState(5632);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(5630);
				numeric();
				}
				break;
			case ASTERISK:
				{
				setState(5631);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5636);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5634);
				match(COMMA);
				setState(5635);
				numeric();
				}
			}

			setState(5639);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5638);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(5641);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_native_datatype_element);
		int _la;
		try {
			setState(5703);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5643);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5644);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5645);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5646);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5647);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5648);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5649);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5650);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5651);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5652);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5653);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5654);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5655);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5656);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5657);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5658);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5659);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5660);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5661);
				match(DOUBLE);
				setState(5663);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5662);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5665);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5666);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5667);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5668);
				match(LONG);
				setState(5670);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5669);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5672);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5673);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5674);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5675);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5676);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5677);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5678);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5679);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5680);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5681);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5682);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5683);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5684);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5685);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5686);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5687);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5688);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5689);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5690);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5691);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5692);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5693);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5694);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5695);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5696);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5697);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5698);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5699);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5700);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5701);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5702);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_bind_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5708);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5705);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5706);
				match(COLON);
				setState(5707);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				{
				setState(5711);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5710);
					match(INDICATOR);
					}
				}

				setState(5716);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5713);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5714);
					match(COLON);
					setState(5715);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5720);
				match(PERIOD);
				setState(5721);
				general_element_part();
				}
				}
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			general_element_part();
			setState(5732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5728);
				match(PERIOD);
				setState(5729);
				general_element_part();
				}
				}
				setState(5734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5737);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5735);
				match(INTRODUCER);
				setState(5736);
				char_set_name();
				}
			}

			setState(5739);
			id_expression();
			setState(5744);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,756,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5740);
					match(PERIOD);
					setState(5741);
					id_expression();
					}
					} 
				}
				setState(5746);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,756,_ctx);
			}
			setState(5748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				{
				setState(5747);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5752);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5750);
				match(INTRODUCER);
				setState(5751);
				char_set_name();
				}
			}

			setState(5754);
			id_expression();
			setState(5759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5755);
				match(PERIOD);
				setState(5756);
				id_expression();
				}
				}
				setState(5761);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_constant);
		int _la;
		try {
			setState(5824);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5762);
				match(TIMESTAMP);
				setState(5765);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5763);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5764);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5771);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
				case 1:
					{
					setState(5767);
					match(AT);
					setState(5768);
					match(TIME);
					setState(5769);
					match(ZONE);
					setState(5770);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5773);
				match(INTERVAL);
				setState(5777);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5774);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5775);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5776);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5779);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(5780);
					match(LEFT_PAREN);
					setState(5783);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5781);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5782);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5790);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5785);
						match(COMMA);
						setState(5788);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5786);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5787);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5792);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(5795);
					match(TO);
					setState(5808);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5796);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5797);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5798);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5799);
						match(SECOND);
						setState(5806);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
						case 1:
							{
							setState(5800);
							match(LEFT_PAREN);
							setState(5803);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5801);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5802);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5805);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5812);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5813);
				match(DATE);
				setState(5814);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5815);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5816);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5817);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5818);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5819);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5820);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5821);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5822);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5823);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5826);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric_negative(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5828);
			match(MINUS_SIGN);
			setState(5829);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5835);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5833);
				match(INTRODUCER);
				setState(5834);
				char_set_name();
				}
			}

			setState(5837);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_id_expression);
		try {
			setState(5841);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5839);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5840);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_not_equal_op);
		try {
			setState(5850);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5843);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5844);
				match(LESS_THAN_OP);
				setState(5845);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5846);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5847);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5848);
				match(CARRET_OPERATOR_PART);
				setState(5849);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_greater_than_or_equals_op);
		try {
			setState(5855);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5852);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5853);
				match(GREATER_THAN_OP);
				setState(5854);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_less_than_or_equals_op);
		try {
			setState(5860);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5857);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5858);
				match(LESS_THAN_OP);
				setState(5859);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_concatenation_op);
		try {
			setState(5865);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5862);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5863);
				match(VERTICAL_BAR);
				setState(5864);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5867);
			match(LEFT_PAREN);
			setState(5868);
			match(PLUS_SIGN);
			setState(5869);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(plsqlParser.LENGTH, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5871);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (INLINE - 196)) | (1L << (INNER - 196)) | (1L << (INOUT - 196)) | (1L << (INSTANTIABLE - 196)) | (1L << (INSTEAD - 196)) | (1L << (INT - 196)) | (1L << (INTEGER - 196)) | (1L << (INTERVAL - 196)) | (1L << (INVALIDATE - 196)) | (1L << (ISOLATION - 196)) | (1L << (ITERATE - 196)) | (1L << (JAVA - 196)) | (1L << (JOIN - 196)) | (1L << (KEEP - 196)) | (1L << (LANGUAGE - 196)) | (1L << (LAST - 196)) | (1L << (LAST_VALUE - 196)) | (1L << (LEADING - 196)) | (1L << (LEFT - 196)) | (1L << (LENGTH - 196)) | (1L << (LEVEL - 196)) | (1L << (LIBRARY - 196)) | (1L << (LIKE2 - 196)) | (1L << (LIKE4 - 196)) | (1L << (LIKEC - 196)) | (1L << (LIMIT - 196)) | (1L << (LOCAL - 196)) | (1L << (LOCKED - 196)) | (1L << (LOG - 196)) | (1L << (LOGOFF - 196)) | (1L << (LOGON - 196)) | (1L << (LONG - 196)) | (1L << (LOOP - 196)) | (1L << (MAIN - 196)) | (1L << (MAP - 196)) | (1L << (MATCHED - 196)) | (1L << (MAXVALUE - 196)) | (1L << (MEASURES - 196)) | (1L << (MEMBER - 196)) | (1L << (MERGE - 196)) | (1L << (MINUTE - 196)) | (1L << (MINVALUE - 196)) | (1L << (MLSLABEL - 196)) | (1L << (MODEL - 196)) | (1L << (MODIFY - 196)) | (1L << (MONTH - 196)))) != 0) || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (MULTISET - 260)) | (1L << (NAME - 260)) | (1L << (NAN - 260)) | (1L << (NATURAL - 260)) | (1L << (NATURALN - 260)) | (1L << (NAV - 260)) | (1L << (NCHAR - 260)) | (1L << (NCHAR_CS - 260)) | (1L << (NCLOB - 260)) | (1L << (NESTED - 260)) | (1L << (NEW - 260)) | (1L << (NO - 260)) | (1L << (NOAUDIT - 260)) | (1L << (NOCOPY - 260)) | (1L << (NOCYCLE - 260)) | (1L << (NOENTITYESCAPING - 260)) | (1L << (NONE - 260)) | (1L << (NOSCHEMACHECK - 260)) | (1L << (NULLS - 260)) | (1L << (NUMBER - 260)) | (1L << (NUMERIC - 260)) | (1L << (NVARCHAR2 - 260)) | (1L << (OBJECT - 260)) | (1L << (OFF - 260)) | (1L << (OID - 260)) | (1L << (OLD - 260)) | (1L << (ONLY - 260)) | (1L << (OPEN - 260)) | (1L << (ORADATA - 260)) | (1L << (ORDINALITY - 260)) | (1L << (OSERROR - 260)) | (1L << (OUT - 260)) | (1L << (OUTER - 260)) | (1L << (OVER - 260)) | (1L << (OVERRIDING - 260)) | (1L << (PACKAGE - 260)) | (1L << (PARALLEL_ENABLE - 260)) | (1L << (PARAMETERS - 260)) | (1L << (PARENT - 260)) | (1L << (PARTITION - 260)) | (1L << (PASSING - 260)) | (1L << (PATH - 260)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (PIPELINED - 325)) | (1L << (PLAN - 325)) | (1L << (PLS_INTEGER - 325)) | (1L << (POSITIVE - 325)) | (1L << (POSITIVEN - 325)) | (1L << (PRAGMA - 325)) | (1L << (PRECEDING - 325)) | (1L << (PRECISION - 325)) | (1L << (PRESENT - 325)) | (1L << (RAISE - 325)) | (1L << (RANGE - 325)) | (1L << (RAW - 325)) | (1L << (READ - 325)) | (1L << (REAL - 325)) | (1L << (RECORD - 325)) | (1L << (REF - 325)) | (1L << (REFERENCE - 325)) | (1L << (REFERENCING - 325)) | (1L << (REJECT - 325)) | (1L << (RELIES_ON - 325)) | (1L << (RENAME - 325)) | (1L << (REPLACE - 325)) | (1L << (RESPECT - 325)) | (1L << (RESTRICT_REFERENCES - 325)) | (1L << (RESULT - 325)) | (1L << (RESULT_CACHE - 325)) | (1L << (RETURN - 325)) | (1L << (RETURNING - 325)) | (1L << (REUSE - 325)) | (1L << (REVERSE - 325)) | (1L << (RIGHT - 325)) | (1L << (ROLLBACK - 325)) | (1L << (ROLLUP - 325)) | (1L << (ROW - 325)) | (1L << (ROWID - 325)) | (1L << (ROWS - 325)) | (1L << (RULES - 325)) | (1L << (SAMPLE - 325)) | (1L << (SAVE - 325)) | (1L << (SAVEPOINT - 325)) | (1L << (SCHEMA - 325)) | (1L << (SCHEMACHECK - 325)) | (1L << (SCN - 325)) | (1L << (SECOND - 325)) | (1L << (SEED - 325)) | (1L << (SEGMENT - 325)) | (1L << (SELF - 325)) | (1L << (SEQUENTIAL - 325)) | (1L << (SERIALIZABLE - 325)) | (1L << (SERIALLY_REUSABLE - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (SERVERERROR - 389)) | (1L << (SESSIONTIMEZONE - 389)) | (1L << (SET - 389)) | (1L << (SETS - 389)) | (1L << (SETTINGS - 389)) | (1L << (SHOW - 389)) | (1L << (SHUTDOWN - 389)) | (1L << (SIBLINGS - 389)) | (1L << (SIGNTYPE - 389)) | (1L << (SIMPLE_INTEGER - 389)) | (1L << (SINGLE - 389)) | (1L << (SKIP_ - 389)) | (1L << (SMALLINT - 389)) | (1L << (SNAPSHOT - 389)) | (1L << (SOME - 389)) | (1L << (SPECIFICATION - 389)) | (1L << (SQLDATA - 389)) | (1L << (SQLERROR - 389)) | (1L << (STANDALONE - 389)) | (1L << (STARTUP - 389)) | (1L << (STATEMENT - 389)) | (1L << (STATEMENT_ID - 389)) | (1L << (STATIC - 389)) | (1L << (STATISTICS - 389)) | (1L << (STRING - 389)) | (1L << (SUBMULTISET - 389)) | (1L << (SUBPARTITION - 389)) | (1L << (SUBSTITUTABLE - 389)) | (1L << (SUBTYPE - 389)) | (1L << (SUCCESS - 389)) | (1L << (SUSPEND - 389)) | (1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (UNLIMITED - 453)) | (1L << (UNTIL - 453)) | (1L << (UPDATED - 453)) | (1L << (UPSERT - 453)) | (1L << (UROWID - 453)) | (1L << (USE - 453)) | (1L << (VALIDATE - 453)) | (1L << (VALUE - 453)) | (1L << (VARCHAR - 453)) | (1L << (VARCHAR2 - 453)) | (1L << (VARIABLE - 453)) | (1L << (VARRAY - 453)) | (1L << (VARYING - 453)) | (1L << (VERSION - 453)) | (1L << (VERSIONS - 453)) | (1L << (WAIT - 453)) | (1L << (WARNING - 453)) | (1L << (WELLFORMED - 453)) | (1L << (WHENEVER - 453)) | (1L << (WHILE - 453)) | (1L << (WITHIN - 453)) | (1L << (WORK - 453)) | (1L << (WRITE - 453)) | (1L << (XML - 453)) | (1L << (XMLAGG - 453)) | (1L << (XMLATTRIBUTES - 453)) | (1L << (XMLCAST - 453)) | (1L << (XMLCOLATTVAL - 453)) | (1L << (XMLELEMENT - 453)) | (1L << (XMLEXISTS - 453)) | (1L << (XMLFOREST - 453)) | (1L << (XMLNAMESPACES - 453)) | (1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (CORR - 517)) | (1L << (LAG - 517)) | (1L << (LEAD - 517)) | (1L << (MAX - 517)) | (1L << (MEDIAN - 517)) | (1L << (MIN - 517)) | (1L << (NTILE - 517)) | (1L << (RATIO_TO_REPORT - 517)) | (1L << (ROW_NUMBER - 517)) | (1L << (SUM - 517)) | (1L << (VARIANCE - 517)) | (1L << (REGR_ - 517)) | (1L << (STDDEV - 517)) | (1L << (VAR_ - 517)) | (1L << (COVAR_ - 517)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u029d\u16f4\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\3\2\6\2\u033c\n\2\r\2\16\2\u033d\3\3\7\3\u0341"+
		"\n\3\f\3\16\3\u0344\13\3\3\3\3\3\3\4\3\4\7\4\u034a\n\4\f\4\16\4\u034d"+
		"\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0368\n\5\3\6\3\6\3\6\3\6\3\6"+
		"\5\6\u036f\n\6\3\6\3\6\3\6\3\6\3\6\7\6\u0376\n\6\f\6\16\6\u0379\13\6\3"+
		"\6\3\6\5\6\u037d\n\6\3\6\7\6\u0380\n\6\f\6\16\6\u0383\13\6\3\6\3\6\3\7"+
		"\5\7\u0388\n\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\6\t\u0393\n\t\r\t\16"+
		"\t\u0394\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\6\n\u03a2\n\n\r\n"+
		"\16\n\u03a3\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\6\13\u03bd\n\13"+
		"\r\13\16\13\u03be\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u03c9\n\f\5\f"+
		"\u03cb\n\f\5\f\u03cd\n\f\3\f\5\f\u03d0\n\f\3\r\3\r\3\16\3\16\3\16\3\16"+
		"\3\16\7\16\u03d9\n\16\f\16\16\16\u03dc\13\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\6\16\u03e6\n\16\r\16\16\16\u03e7\3\17\3\17\3\17\3\17\5"+
		"\17\u03ee\n\17\6\17\u03f0\n\17\r\17\16\17\u03f1\3\17\5\17\u03f5\n\17\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0403"+
		"\n\20\3\20\5\20\u0406\n\20\6\20\u0408\n\20\r\20\16\20\u0409\3\21\3\21"+
		"\3\22\3\22\5\22\u0410\n\22\3\22\5\22\u0413\n\22\3\23\3\23\3\23\3\23\3"+
		"\23\5\23\u041a\n\23\3\23\3\23\3\23\5\23\u041f\n\23\3\23\3\23\3\24\6\24"+
		"\u0424\n\24\r\24\16\24\u0425\3\25\3\25\3\25\3\25\3\25\7\25\u042d\n\25"+
		"\f\25\16\25\u0430\13\25\3\25\3\25\3\25\5\25\u0435\n\25\3\26\3\26\5\26"+
		"\u0439\n\26\3\26\3\26\5\26\u043d\n\26\3\26\7\26\u0440\n\26\f\26\16\26"+
		"\u0443\13\26\3\26\5\26\u0446\n\26\3\27\3\27\3\27\5\27\u044b\n\27\3\27"+
		"\3\27\3\27\3\27\3\27\5\27\u0452\n\27\3\30\3\30\5\30\u0456\n\30\3\30\5"+
		"\30\u0459\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0460\n\30\3\30\3\30\3\31"+
		"\3\31\6\31\u0466\n\31\r\31\16\31\u0467\3\31\3\31\3\31\3\31\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\7\31\u0474\n\31\f\31\16\31\u0477\13\31\3\31\3\31\5"+
		"\31\u047b\n\31\3\31\3\31\5\31\u047f\n\31\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\5\31\u0487\n\31\3\32\3\32\5\32\u048b\n\32\3\32\3\32\3\32\3\32\3\32\7"+
		"\32\u0492\n\32\f\32\16\32\u0495\13\32\3\32\3\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\7\32\u049f\n\32\f\32\16\32\u04a2\13\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\7\32\u04ac\n\32\f\32\16\32\u04af\13\32\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\5\32\u04b9\n\32\3\32\5\32\u04bc\n\32\3\33"+
		"\3\33\3\33\3\33\5\33\u04c2\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u04c9\n"+
		"\33\f\33\16\33\u04cc\13\33\3\33\3\33\5\33\u04d0\n\33\3\33\3\33\3\33\3"+
		"\33\3\33\5\33\u04d7\n\33\5\33\u04d9\n\33\3\34\5\34\u04dc\n\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\6\34\u04e9\n\34\r\34\16"+
		"\34\u04ea\3\35\3\35\3\35\3\35\3\36\7\36\u04f2\n\36\f\36\16\36\u04f5\13"+
		"\36\3\37\3\37\3\37\3\37\3\37\5\37\u04fc\n\37\3\37\6\37\u04ff\n\37\r\37"+
		"\16\37\u0500\3 \3 \5 \u0505\n \3 \3 \5 \u0509\n \3!\3!\3!\3!\5!\u050f"+
		"\n!\3!\3!\3!\5!\u0514\n!\3!\3!\3!\5!\u0519\n!\3!\3!\5!\u051d\n!\3!\3!"+
		"\5!\u0521\n!\6!\u0523\n!\r!\16!\u0524\3!\3!\5!\u0529\n!\3!\5!\u052c\n"+
		"!\6!\u052e\n!\r!\16!\u052f\3\"\3\"\3\"\3\"\3\"\5\"\u0537\n\"\3\"\3\"\3"+
		"#\3#\3#\5#\u053e\n#\3#\5#\u0541\n#\3#\5#\u0544\n#\3#\3#\3#\3#\5#\u054a"+
		"\n#\3#\3#\3#\3#\3#\7#\u0551\n#\f#\16#\u0554\13#\3#\3#\3#\3#\3#\3$\3$\5"+
		"$\u055d\n$\3$\3$\3$\3$\5$\u0563\n$\3$\3$\3$\3$\3$\3%\3%\3%\5%\u056d\n"+
		"%\3%\3%\3%\3%\3%\7%\u0574\n%\f%\16%\u0577\13%\3%\3%\3%\3&\3&\5&\u057e"+
		"\n&\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\5(\u058a\n(\3(\7(\u058d\n(\f(\16"+
		"(\u0590\13(\3(\3(\5(\u0594\n(\3(\3(\3)\3)\3)\5)\u059b\n)\5)\u059d\n)\3"+
		")\3)\3)\3)\3)\3)\7)\u05a5\n)\f)\16)\u05a8\13)\3)\3)\5)\u05ac\n)\3)\3)"+
		"\3)\3)\3)\3)\7)\u05b4\n)\f)\16)\u05b7\13)\3)\5)\u05ba\n)\3)\3)\5)\u05be"+
		"\n)\3)\7)\u05c1\n)\f)\16)\u05c4\13)\3)\3)\5)\u05c8\n)\3)\3)\3)\5)\u05cd"+
		"\n)\3)\3)\3*\3*\5*\u05d3\n*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u05df\n+"+
		"\f+\16+\u05e2\13+\3+\3+\5+\u05e6\n+\3+\5+\u05e9\n+\3+\3+\3,\3,\5,\u05ef"+
		"\n,\3-\3-\3-\3-\3-\7-\u05f6\n-\f-\16-\u05f9\13-\3-\3-\3.\3.\3.\3.\3.\3"+
		".\3.\7.\u0604\n.\f.\16.\u0607\13.\3.\3.\3/\3/\3/\5/\u060e\n/\3/\3/\3/"+
		"\3\60\3\60\3\60\3\60\3\60\5\60\u0618\n\60\3\60\5\60\u061b\n\60\3\60\7"+
		"\60\u061e\n\60\f\60\16\60\u0621\13\60\3\60\3\60\5\60\u0625\n\60\3\60\3"+
		"\60\3\61\3\61\3\61\5\61\u062c\n\61\3\61\3\61\3\61\5\61\u0631\n\61\3\61"+
		"\3\61\3\62\3\62\3\62\3\62\7\62\u0639\n\62\f\62\16\62\u063c\13\62\3\62"+
		"\3\62\3\62\3\62\5\62\u0642\n\62\5\62\u0644\n\62\3\63\3\63\5\63\u0648\n"+
		"\63\3\63\3\63\7\63\u064c\n\63\f\63\16\63\u064f\13\63\3\63\3\63\5\63\u0653"+
		"\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u065d\n\64\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\7\65\u0665\n\65\f\65\16\65\u0668\13\65\3\65\3\65"+
		"\5\65\u066c\n\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0676\n"+
		"\66\f\66\16\66\u0679\13\66\3\66\3\66\5\66\u067d\n\66\3\66\3\66\3\66\3"+
		"\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u068d\n\67"+
		"\38\38\38\38\38\39\39\39\39\39\59\u0699\n9\39\79\u069c\n9\f9\169\u069f"+
		"\139\39\39\59\u06a3\n9\39\39\3:\3:\3:\5:\u06aa\n:\5:\u06ac\n:\3:\3:\3"+
		":\3:\3:\3:\7:\u06b4\n:\f:\16:\u06b7\13:\3:\3:\5:\u06bb\n:\3:\5:\u06be"+
		"\n:\3:\3:\5:\u06c2\n:\3:\7:\u06c5\n:\f:\16:\u06c8\13:\3:\3:\3:\5:\u06cd"+
		"\n:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u06df\n<\3<\7<"+
		"\u06e2\n<\f<\16<\u06e5\13<\3<\3<\5<\u06e9\n<\5<\u06eb\n<\3<\3<\3=\3=\3"+
		"=\5=\u06f2\n=\3=\3=\3=\3=\3=\5=\u06f9\n=\3=\5=\u06fc\n=\3=\5=\u06ff\n"+
		"=\3=\5=\u0702\n=\3=\3=\3=\3>\3>\3>\3>\7>\u070b\n>\f>\16>\u070e\13>\3?"+
		"\3?\3?\3?\3?\3@\3@\3@\3@\5@\u0719\n@\3@\3@\5@\u071d\n@\3@\5@\u0720\n@"+
		"\3A\3A\3A\3A\3B\3B\3B\5B\u0729\nB\3C\3C\3C\3C\7C\u072f\nC\fC\16C\u0732"+
		"\13C\3C\3C\3C\3C\3C\5C\u0739\nC\3C\5C\u073c\nC\3D\3D\3D\3D\3D\5D\u0743"+
		"\nD\3E\3E\5E\u0747\nE\3F\3F\3F\7F\u074c\nF\fF\16F\u074f\13F\3F\6F\u0752"+
		"\nF\rF\16F\u0753\3F\3F\3F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u077d"+
		"\nG\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H"+
		"\3H\3H\3H\3H\5H\u0799\nH\3I\3I\3I\7I\u079e\nI\fI\16I\u07a1\13I\3I\3I\5"+
		"I\u07a5\nI\3I\3I\3J\3J\3J\3J\3J\7J\u07ae\nJ\fJ\16J\u07b1\13J\5J\u07b3"+
		"\nJ\3K\3K\3K\3K\3K\3L\3L\6L\u07bc\nL\rL\16L\u07bd\3M\3M\3M\3N\3N\3N\5"+
		"N\u07c6\nN\3N\3N\5N\u07ca\nN\3N\3N\3O\3O\3O\3O\3O\3O\3O\3O\5O\u07d6\n"+
		"O\3O\5O\u07d9\nO\3O\3O\3P\3P\5P\u07df\nP\3P\5P\u07e2\nP\3P\7P\u07e5\n"+
		"P\fP\16P\u07e8\13P\3P\3P\5P\u07ec\nP\3Q\3Q\5Q\u07f0\nQ\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\7Q\u07f8\nQ\fQ\16Q\u07fb\13Q\3Q\3Q\3R\3R\3R\7R\u0802\nR\fR\16R\u0805"+
		"\13R\3S\3S\3S\5S\u080a\nS\3T\3T\3T\3T\3T\3T\3T\7T\u0813\nT\fT\16T\u0816"+
		"\13T\3T\3T\5T\u081a\nT\3U\3U\5U\u081e\nU\3V\3V\3V\3V\3V\3V\5V\u0826\n"+
		"V\3W\3W\3W\3W\3W\3W\5W\u082e\nW\3W\3W\3W\5W\u0833\nW\3W\5W\u0836\nW\5"+
		"W\u0838\nW\3X\5X\u083b\nX\3X\3X\3X\3X\3Y\3Y\3Y\5Y\u0844\nY\3Y\3Y\3Y\5"+
		"Y\u0849\nY\3Y\3Y\3Z\3Z\3Z\5Z\u0850\nZ\3Z\5Z\u0853\nZ\3[\5[\u0856\n[\3"+
		"[\3[\5[\u085a\n[\3[\5[\u085d\n[\3[\3[\3[\3[\7[\u0863\n[\f[\16[\u0866\13"+
		"[\3[\3[\5[\u086a\n[\3[\7[\u086d\n[\f[\16[\u0870\13[\3\\\3\\\3\\\3\\\5"+
		"\\\u0876\n\\\3]\3]\3]\3^\3^\3^\3^\3^\5^\u0880\n^\3_\3_\3_\3_\3_\3_\3_"+
		"\3_\3`\3`\3`\3`\3`\3`\7`\u0890\n`\f`\16`\u0893\13`\3`\3`\3a\3a\5a\u0899"+
		"\na\3b\3b\3b\3b\3c\3c\3c\3c\5c\u08a3\nc\3d\3d\3d\3d\3d\3d\7d\u08ab\nd"+
		"\fd\16d\u08ae\13d\3d\3d\3d\3d\5d\u08b4\nd\3d\7d\u08b7\nd\fd\16d\u08ba"+
		"\13d\3d\3d\3d\5d\u08bf\nd\3e\3e\3e\3e\3e\3e\7e\u08c7\ne\fe\16e\u08ca\13"+
		"e\3e\3e\5e\u08ce\ne\3e\3e\3e\3e\3e\5e\u08d5\ne\3e\7e\u08d8\ne\fe\16e\u08db"+
		"\13e\3e\3e\3e\5e\u08e0\ne\3f\5f\u08e3\nf\3f\5f\u08e6\nf\3f\3f\3f\3f\3"+
		"f\3f\3f\3f\3f\3f\3f\3f\3f\7f\u08f5\nf\ff\16f\u08f8\13f\3f\3f\5f\u08fc"+
		"\nf\3f\3f\3f\3f\3f\3f\3f\5f\u0905\nf\3f\7f\u0908\nf\ff\16f\u090b\13f\3"+
		"f\3f\3f\5f\u0910\nf\3g\5g\u0913\ng\3g\3g\3h\3h\3h\5h\u091a\nh\3h\5h\u091d"+
		"\nh\3i\3i\3i\3i\3j\5j\u0924\nj\3j\6j\u0927\nj\rj\16j\u0928\3j\3j\5j\u092d"+
		"\nj\3k\3k\3k\5k\u0932\nk\3l\3l\3l\5l\u0937\nl\3m\3m\3m\3m\3m\3m\7m\u093f"+
		"\nm\fm\16m\u0942\13m\3m\3m\3m\5m\u0947\nm\3n\3n\3n\3n\3n\3n\7n\u094f\n"+
		"n\fn\16n\u0952\13n\3n\3n\5n\u0956\nn\3n\3n\3n\3n\3n\5n\u095d\nn\3n\3n"+
		"\3n\3n\5n\u0963\nn\3n\3n\5n\u0967\nn\3o\5o\u096a\no\3o\5o\u096d\no\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\7o\u097c\no\fo\16o\u097f\13o\3o\3"+
		"o\5o\u0983\no\3o\3o\3o\3o\3o\3o\5o\u098b\no\3p\3p\3p\3p\3q\3q\3q\3q\3"+
		"q\3q\7q\u0997\nq\fq\16q\u099a\13q\3q\3q\3r\3r\5r\u09a0\nr\3s\3s\3s\3t"+
		"\3t\3t\3t\3t\3u\3u\3u\3u\6u\u09ae\nu\ru\16u\u09af\3u\3u\3v\3v\3v\3v\3"+
		"v\7v\u09b9\nv\fv\16v\u09bc\13v\3v\3v\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\3w\5w\u09d0\nw\3x\3x\3x\3x\3y\3y\3y\3z\3z\3z\3z\3{\3{\3{"+
		"\5{\u09e0\n{\3|\3|\3|\3|\3}\3}\3}\5}\u09e9\n}\3}\3}\3}\5}\u09ee\n}\3}"+
		"\3}\5}\u09f2\n}\3}\5}\u09f5\n}\3~\3~\3~\3~\3~\3~\7~\u09fd\n~\f~\16~\u0a00"+
		"\13~\3~\3~\3\177\3\177\3\177\3\177\3\177\7\177\u0a09\n\177\f\177\16\177"+
		"\u0a0c\13\177\3\177\3\177\3\177\5\177\u0a11\n\177\3\177\3\177\3\u0080"+
		"\3\u0080\7\u0080\u0a17\n\u0080\f\u0080\16\u0080\u0a1a\13\u0080\3\u0080"+
		"\5\u0080\u0a1d\n\u0080\3\u0080\5\u0080\u0a20\n\u0080\3\u0081\3\u0081\3"+
		"\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\5\u0082\u0a2e\n\u0082\3\u0083\3\u0083\5\u0083\u0a32\n\u0083\3"+
		"\u0083\3\u0083\3\u0083\5\u0083\u0a37\n\u0083\3\u0083\5\u0083\u0a3a\n\u0083"+
		"\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\5\u0084\u0a47\n\u0084\3\u0084\3\u0084\5\u0084\u0a4b\n"+
		"\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\7\u0085\u0a55\n\u0085\f\u0085\16\u0085\u0a58\13\u0085\3\u0085\3\u0085"+
		"\5\u0085\u0a5c\n\u0085\3\u0085\3\u0085\5\u0085\u0a60\n\u0085\3\u0085\3"+
		"\u0085\5\u0085\u0a64\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0a6a"+
		"\n\u0086\3\u0086\5\u0086\u0a6d\n\u0086\3\u0086\5\u0086\u0a70\n\u0086\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0a8b"+
		"\n\u0088\3\u0088\3\u0088\6\u0088\u0a8f\n\u0088\r\u0088\16\u0088\u0a90"+
		"\3\u0088\3\u0088\5\u0088\u0a95\n\u0088\3\u0088\3\u0088\3\u0089\3\u0089"+
		"\5\u0089\u0a9b\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\7\u008a\u0aa5\n\u008a\f\u008a\16\u008a\u0aa8\13\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0ab0\n\u008a"+
		"\5\u008a\u0ab2\n\u008a\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b\u0ab8\n"+
		"\u008b\3\u008b\3\u008b\5\u008b\u0abc\n\u008b\3\u008b\5\u008b\u0abf\n\u008b"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d\u0ac8"+
		"\n\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0ad3\n\u008e\3\u008e\3\u008e\5\u008e\u0ad7\n\u008e\3"+
		"\u008e\5\u008e\u0ada\n\u008e\3\u008f\3\u008f\5\u008f\u0ade\n\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\5\u0090\u0ae6\n\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0aef\n\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\6\u0092\u0af8"+
		"\n\u0092\r\u0092\16\u0092\u0af9\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b19\n\u0094"+
		"\3\u0095\3\u0095\5\u0095\u0b1d\n\u0095\3\u0095\3\u0095\3\u0095\3\u0096"+
		"\3\u0096\5\u0096\u0b24\n\u0096\3\u0096\3\u0096\5\u0096\u0b28\n\u0096\3"+
		"\u0097\3\u0097\5\u0097\u0b2c\n\u0097\3\u0097\3\u0097\5\u0097\u0b30\n\u0097"+
		"\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\7\u0099"+
		"\u0b3a\n\u0099\f\u0099\16\u0099\u0b3d\13\u0099\3\u0099\5\u0099\u0b40\n"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009b\3\u009b\3\u009b\3\u009c\5\u009c\u0b4e\n\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0b54\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u0b5b\n\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0b60\n"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u0b6a\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0b70\n"+
		"\u009d\5\u009d\u0b72\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3"+
		"\u009e\3\u009e\5\u009e\u0b7b\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0b85\n\u009f\3\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0b8a\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3"+
		"\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4\3\u00a4\5\u00a4"+
		"\u0b99\n\u00a4\3\u00a5\3\u00a5\5\u00a5\u0b9d\n\u00a5\3\u00a6\5\u00a6\u0ba0"+
		"\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0ba4\n\u00a6\3\u00a7\3\u00a7\3\u00a7"+
		"\5\u00a7\u0ba9\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u0bad\n\u00a7\3\u00a8\3"+
		"\u00a8\6\u00a8\u0bb1\n\u00a8\r\u00a8\16\u00a8\u0bb2\3\u00a9\3\u00a9\3"+
		"\u00a9\3\u00a9\7\u00a9\u0bb9\n\u00a9\f\u00a9\16\u00a9\u0bbc\13\u00a9\3"+
		"\u00a9\3\u00a9\3\u00a9\3\u00aa\5\u00aa\u0bc2\n\u00aa\3\u00aa\6\u00aa\u0bc5"+
		"\n\u00aa\r\u00aa\16\u00aa\u0bc6\5\u00aa\u0bc9\n\u00aa\3\u00aa\3\u00aa"+
		"\3\u00ab\5\u00ab\u0bce\n\u00ab\3\u00ab\6\u00ab\u0bd1\n\u00ab\r\u00ab\16"+
		"\u00ab\u0bd2\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0bdb"+
		"\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0be2\n\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u0be6\n\u00ad\3\u00ad\5\u00ad\u0be9\n\u00ad\3"+
		"\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0bf5\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0bfb\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\5\u00b2"+
		"\u0c03\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3"+
		"\u0c0b\n\u00b3\f\u00b3\16\u00b3\u0c0e\13\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0c16\n\u00b3\f\u00b3\16\u00b3\u0c19"+
		"\13\u00b3\5\u00b3\u0c1b\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u0c22\n\u00b4\3\u00b4\5\u00b4\u0c25\n\u00b4\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u0c2c\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0c37\n\u00b6\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0c3d\n\u00b6\3\u00b6\3\u00b6\5"+
		"\u00b6\u0c41\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7"+
		"\u00b7\u0c49\n\u00b7\f\u00b7\16\u00b7\u0c4c\13\u00b7\5\u00b7\u0c4e\n\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b8\3\u00b8\5\u00b8\u0c54\n\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0c5f"+
		"\n\u00b8\5\u00b8\u0c61\n\u00b8\5\u00b8\u0c63\n\u00b8\3\u00b8\5\u00b8\u0c66"+
		"\n\u00b8\3\u00b9\3\u00b9\5\u00b9\u0c6a\n\u00b9\3\u00b9\5\u00b9\u0c6d\n"+
		"\u00b9\3\u00ba\3\u00ba\5\u00ba\u0c71\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0c75"+
		"\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0c7a\n\u00ba\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c85"+
		"\n\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c89\n\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c91\n\u00bc\3\u00bd\5\u00bd\u0c94\n"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u0c99\n\u00bd\f\u00bd\16\u00bd"+
		"\u0c9c\13\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0ca2\n\u00be"+
		"\f\u00be\16\u00be\u0ca5\13\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\7\u00bf\u0cac\n\u00bf\f\u00bf\16\u00bf\u0caf\13\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u0cb3\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0cb9\n"+
		"\u00bf\3\u00bf\3\u00bf\5\u00bf\u0cbd\n\u00bf\3\u00bf\5\u00bf\u0cc0\n\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0cc8\n\u00c0"+
		"\3\u00c0\5\u00c0\u0ccb\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u0ccf\n\u00c0\3"+
		"\u00c0\3\u00c0\5\u00c0\u0cd3\n\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0cd8"+
		"\n\u00c0\3\u00c0\5\u00c0\u0cdb\n\u00c0\3\u00c0\3\u00c0\5\u00c0\u0cdf\n"+
		"\u00c0\3\u00c0\3\u00c0\5\u00c0\u0ce3\n\u00c0\7\u00c0\u0ce5\n\u00c0\f\u00c0"+
		"\16\u00c0\u0ce8\13\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\7\u00c1\u0cf1\n\u00c1\f\u00c1\16\u00c1\u0cf4\13\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\7\u00c2"+
		"\u0cff\n\u00c2\f\u00c2\16\u00c2\u0d02\13\u00c2\3\u00c3\3\u00c3\5\u00c3"+
		"\u0d06\n\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d0a\n\u00c3\3\u00c3\3\u00c3\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0d13\n\u00c4\3\u00c5\3"+
		"\u00c5\5\u00c5\u0d17\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0d1d"+
		"\n\u00c5\f\u00c5\16\u00c5\u0d20\13\u00c5\5\u00c5\u0d22\n\u00c5\3\u00c5"+
		"\5\u00c5\u0d25\n\u00c5\3\u00c5\3\u00c5\5\u00c5\u0d29\n\u00c5\3\u00c5\5"+
		"\u00c5\u0d2c\n\u00c5\3\u00c5\5\u00c5\u0d2f\n\u00c5\3\u00c5\5\u00c5\u0d32"+
		"\n\u00c5\3\u00c6\3\u00c6\5\u00c6\u0d36\n\u00c6\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0d40\n\u00c8\3\u00c9"+
		"\3\u00c9\3\u00c9\7\u00c9\u0d45\n\u00c9\f\u00c9\16\u00c9\u0d48\13\u00c9"+
		"\3\u00ca\3\u00ca\7\u00ca\u0d4c\n\u00ca\f\u00ca\16\u00ca\u0d4f\13\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u0d53\n\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0d58\n\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0d5d\n\u00cb\f\u00cb\16"+
		"\u00cb\u0d60\13\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0d65\n\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0d6f\n\u00cb\5\u00cb\u0d71\n\u00cb\3\u00cb\7\u00cb\u0d74\n\u00cb\f\u00cb"+
		"\16\u00cb\u0d77\13\u00cb\3\u00cb\5\u00cb\u0d7a\n\u00cb\3\u00cc\5\u00cc"+
		"\u0d7d\n\u00cc\3\u00cc\5\u00cc\u0d80\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0d84"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0d89\n\u00cc\3\u00cc\3\u00cc"+
		"\7\u00cc\u0d8d\n\u00cc\f\u00cc\16\u00cc\u0d90\13\u00cc\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0d9a\n\u00ce"+
		"\f\u00ce\16\u00ce\u0d9d\13\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\5\u00cf"+
		"\u0da3\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u0daf\n\u00d0\f\u00d0\16\u00d0\u0db2"+
		"\13\u00d0\5\u00d0\u0db4\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0dbe\n\u00d1\3\u00d2\3\u00d2\5\u00d2"+
		"\u0dc2\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u0dc8\n\u00d2\f"+
		"\u00d2\16\u00d2\u0dcb\13\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0dd6\n\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u0dde\n\u00d4\f\u00d4\16\u00d4"+
		"\u0de1\13\u00d4\3\u00d4\3\u00d4\5\u00d4\u0de5\n\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0ded\n\u00d5\f\u00d5\16\u00d5"+
		"\u0df0\13\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0df5\n\u00d5\f\u00d5"+
		"\16\u00d5\u0df8\13\u00d5\5\u00d5\u0dfa\n\u00d5\3\u00d5\3\u00d5\3\u00d6"+
		"\3\u00d6\5\u00d6\u0e00\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u0e04\n\u00d7\3"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e09\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\7\u00d8\u0e11\n\u00d8\f\u00d8\16\u00d8\u0e14\13"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e18\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u0e23\n\u00d9\f"+
		"\u00d9\16\u00d9\u0e26\13\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\7\u00da\u0e2f\n\u00da\f\u00da\16\u00da\u0e32\13\u00da"+
		"\3\u00da\3\u00da\5\u00da\u0e36\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\7\u00da\u0e3e\n\u00da\f\u00da\16\u00da\u0e41\13\u00da"+
		"\3\u00da\3\u00da\5\u00da\u0e45\n\u00da\5\u00da\u0e47\n\u00da\3\u00db\3"+
		"\u00db\3\u00db\5\u00db\u0e4c\n\u00db\3\u00db\3\u00db\5\u00db\u0e50\n\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u0e56\n\u00db\3\u00db\3\u00db"+
		"\5\u00db\u0e5a\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u0e65\n\u00dd\f\u00dd\16\u00dd\u0e68"+
		"\13\u00dd\3\u00dd\5\u00dd\u0e6b\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\7\u00dd\u0e73\n\u00dd\f\u00dd\16\u00dd\u0e76\13\u00dd"+
		"\5\u00dd\u0e78\n\u00dd\5\u00dd\u0e7a\n\u00dd\3\u00de\3\u00de\3\u00de\5"+
		"\u00de\u0e7f\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u0e86"+
		"\n\u00df\f\u00df\16\u00df\u0e89\13\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0e93\n\u00e0\f\u00e0\16\u00e0"+
		"\u0e96\13\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0e9d"+
		"\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\7\u00e3\u0ea4\n\u00e3"+
		"\f\u00e3\16\u00e3\u0ea7\13\u00e3\3\u00e3\5\u00e3\u0eaa\n\u00e3\3\u00e3"+
		"\7\u00e3\u0ead\n\u00e3\f\u00e3\16\u00e3\u0eb0\13\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0eba\n\u00e4"+
		"\5\u00e4\u0ebc\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u0eca\n\u00e6"+
		"\f\u00e6\16\u00e6\u0ecd\13\u00e6\3\u00e7\3\u00e7\5\u00e7\u0ed1\n\u00e7"+
		"\3\u00e7\3\u00e7\7\u00e7\u0ed5\n\u00e7\f\u00e7\16\u00e7\u0ed8\13\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e8\5\u00e8\u0edd\n\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\7\u00ea\u0eed\n\u00ea\f\u00ea\16\u00ea\u0ef0\13\u00ea"+
		"\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u0ef6\n\u00eb\3\u00ec\5\u00ec"+
		"\u0ef9\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u0eff\n\u00ec\f"+
		"\u00ec\16\u00ec\u0f02\13\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\5\u00ed\u0f0a\n\u00ed\5\u00ed\u0f0c\n\u00ed\3\u00ed\3\u00ed\5"+
		"\u00ed\u0f10\n\u00ed\3\u00ed\5\u00ed\u0f13\n\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u0f18\n\u00ee\5\u00ee\u0f1a\n\u00ee\3\u00ee\3\u00ee\5\u00ee\u0f1e"+
		"\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\5\u00f0\u0f2a\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f2\3\u00f2\5\u00f2\u0f33\n\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\7\u00f2\u0f39\n\u00f2\f\u00f2\16\u00f2\u0f3c\13\u00f2\3\u00f3"+
		"\3\u00f3\5\u00f3\u0f40\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u0f44\n\u00f3\3"+
		"\u00f4\3\u00f4\3\u00f4\5\u00f4\u0f49\n\u00f4\3\u00f4\5\u00f4\u0f4c\n\u00f4"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u0f52\n\u00f5\f\u00f5\16\u00f5"+
		"\u0f55\13\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0f5c"+
		"\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0f62\n\u00f7\3\u00f7"+
		"\5\u00f7\u0f65\n\u00f7\3\u00f7\5\u00f7\u0f68\n\u00f7\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\7\u00f8\u0f6e\n\u00f8\f\u00f8\16\u00f8\u0f71\13\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0f7a\n"+
		"\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\7\u00f9\u0f84\n\u00f9\f\u00f9\16\u00f9\u0f87\13\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\5\u00f9\u0f8d\n\u00f9\3\u00fa\3\u00fa\5\u00fa\u0f91\n"+
		"\u00fa\3\u00fa\3\u00fa\5\u00fa\u0f95\n\u00fa\3\u00fa\5\u00fa\u0f98\n\u00fa"+
		"\3\u00fa\5\u00fa\u0f9b\n\u00fa\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u0fa0\n"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0fa5\n\u00fc\3\u00fc\5\u00fc\u0fa8"+
		"\n\u00fc\3\u00fc\5\u00fc\u0fab\n\u00fc\3\u00fd\3\u00fd\6\u00fd\u0faf\n"+
		"\u00fd\r\u00fd\16\u00fd\u0fb0\3\u00fd\5\u00fd\u0fb4\n\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fe\3\u00fe\5\u00fe\u0fba\n\u00fe\3\u00fe\5\u00fe\u0fbd\n\u00fe"+
		"\3\u00ff\5\u00ff\u0fc0\n\u00ff\3\u00ff\6\u00ff\u0fc3\n\u00ff\r\u00ff\16"+
		"\u00ff\u0fc4\3\u00ff\5\u00ff\u0fc8\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\6\u0100\u0fce\n\u0100\r\u0100\16\u0100\u0fcf\3\u0101\3\u0101\6\u0101"+
		"\u0fd4\n\u0101\r\u0101\16\u0101\u0fd5\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\7\u0102\u0fde\n\u0102\f\u0102\16\u0102\u0fe1\13\u0102"+
		"\3\u0102\3\u0102\5\u0102\u0fe5\n\u0102\3\u0103\3\u0103\3\u0103\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u0fee\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u0ff8\n\u0104\3\u0104"+
		"\3\u0104\5\u0104\u0ffc\n\u0104\5\u0104\u0ffe\n\u0104\3\u0104\5\u0104\u1001"+
		"\n\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\7\u0105\u100b\n\u0105\f\u0105\16\u0105\u100e\13\u0105\3\u0105\5\u0105"+
		"\u1011\n\u0105\3\u0105\5\u0105\u1014\n\u0105\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108\u1026\n\u0108\f\u0108\16\u0108"+
		"\u1029\13\u0108\3\u0108\3\u0108\5\u0108\u102d\n\u0108\3\u0108\3\u0108"+
		"\3\u0108\5\u0108\u1032\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1039\n\u0109\3\u0109\5\u0109\u103c\n\u0109\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\7\u010a\u1043\n\u010a\f\u010a\16\u010a\u1046\13"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u104c\n\u010a\3\u010b\3"+
		"\u010b\3\u010b\5\u010b\u1051\n\u010b\3\u010c\3\u010c\5\u010c\u1055\n\u010c"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u105d\n\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u1063\n\u010d\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u106b\n\u010e\3\u010e\5\u010e"+
		"\u106e\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\7\u010f\u1074\n\u010f\f"+
		"\u010f\16\u010f\u1077\13\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u107e\n\u0110\3\u0110\5\u0110\u1081\n\u0110\3\u0110\5\u0110\u1084"+
		"\n\u0110\3\u0111\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u108d\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1093\n\u0113\3"+
		"\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1099\n\u0113\5\u0113\u109b\n\u0113"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u10a8\n\u0114\5\u0114\u10aa\n\u0114\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u10b3\n\u0115\5"+
		"\u0115\u10b5\n\u0115\3\u0116\3\u0116\5\u0116\u10b9\n\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\5\u0116\u10bf\n\u0116\3\u0116\3\u0116\5\u0116\u10c3\n"+
		"\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0119\3\u0119\5\u0119\u10d1\n\u0119\3\u0119\3\u0119"+
		"\7\u0119\u10d5\n\u0119\f\u0119\16\u0119\u10d8\13\u0119\3\u0119\3\u0119"+
		"\3\u011a\3\u011a\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\7\u011c"+
		"\u10e4\n\u011c\f\u011c\16\u011c\u10e7\13\u011c\5\u011c\u10e9\n\u011c\3"+
		"\u011d\3\u011d\3\u011e\3\u011e\3\u011e\7\u011e\u10f0\n\u011e\f\u011e\16"+
		"\u011e\u10f3\13\u011e\3\u011f\3\u011f\3\u011f\5\u011f\u10f8\n\u011f\3"+
		"\u0120\3\u0120\3\u0120\5\u0120\u10fd\n\u0120\3\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1108\n\u0120\3"+
		"\u0120\3\u0120\5\u0120\u110c\n\u0120\3\u0120\3\u0120\3\u0120\7\u0120\u1111"+
		"\n\u0120\f\u0120\16\u0120\u1114\13\u0120\3\u0120\3\u0120\5\u0120\u1118"+
		"\n\u0120\7\u0120\u111a\n\u0120\f\u0120\16\u0120\u111d\13\u0120\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u1122\n\u0121\3\u0121\3\u0121\5\u0121\u1126\n"+
		"\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\5\u0123\u1131\n\u0123\3\u0123\7\u0123\u1134\n\u0123\f\u0123\16"+
		"\u0123\u1137\13\u0123\3\u0124\3\u0124\5\u0124\u113b\n\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1144\n\u0124\5"+
		"\u0124\u1146\n\u0124\5\u0124\u1148\n\u0124\3\u0125\3\u0125\3\u0126\3\u0126"+
		"\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\7\u0127\u1157\n\u0127\f\u0127\16\u0127\u115a\13\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u1161\n\u0127\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u116b\n\u0129\f\u0129"+
		"\16\u0129\u116e\13\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\7\u012b"+
		"\u1175\n\u012b\f\u012b\16\u012b\u1178\13\u012b\3\u012c\3\u012c\3\u012c"+
		"\7\u012c\u117d\n\u012c\f\u012c\16\u012c\u1180\13\u012c\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1188\n\u012d\3\u012d\5\u012d"+
		"\u118b\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1192\n"+
		"\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u119a\n"+
		"\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u11a1\n\u012e\3"+
		"\u012e\3\u012e\5\u012e\u11a5\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\5\u012f\u11ac\n\u012f\3\u0130\3\u0130\5\u0130\u11b0\n\u0130\3\u0130"+
		"\3\u0130\3\u0130\5\u0130\u11b5\n\u0130\7\u0130\u11b7\n\u0130\f\u0130\16"+
		"\u0130\u11ba\13\u0130\3\u0130\3\u0130\3\u0130\7\u0130\u11bf\n\u0130\f"+
		"\u0130\16\u0130\u11c2\13\u0130\3\u0130\5\u0130\u11c5\n\u0130\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u11cc\n\u0131\3\u0131\3\u0131\3"+
		"\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u11d5\n\u0131\3\u0132\3"+
		"\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\7\u0134\u11e1\n\u0134\f\u0134\16\u0134\u11e4\13\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u11ee\n\u0134"+
		"\f\u0134\16\u0134\u11f1\13\u0134\3\u0134\3\u0134\5\u0134\u11f5\n\u0134"+
		"\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\5\u0135\u120b\n\u0135\3\u0136\3\u0136\5\u0136\u120f\n"+
		"\u0136\3\u0137\5\u0137\u1212\n\u0137\3\u0137\3\u0137\3\u0137\6\u0137\u1217"+
		"\n\u0137\r\u0137\16\u0137\u1218\3\u0137\5\u0137\u121c\n\u0137\3\u0137"+
		"\3\u0137\5\u0137\u1220\n\u0137\3\u0137\5\u0137\u1223\n\u0137\3\u0138\3"+
		"\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u122a\n\u0138\3\u0139\5\u0139\u122d"+
		"\n\u0139\3\u0139\3\u0139\6\u0139\u1231\n\u0139\r\u0139\16\u0139\u1232"+
		"\3\u0139\5\u0139\u1236\n\u0139\3\u0139\3\u0139\5\u0139\u123a\n\u0139\3"+
		"\u0139\5\u0139\u123d\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5"+
		"\u013a\u1244\n\u013a\3\u013b\3\u013b\3\u013b\5\u013b\u1249\n\u013b\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\7\u013c\u1255\n\u013c\f\u013c\16\u013c\u1258\13\u013c\3\u013c\3\u013c"+
		"\3\u013c\5\u013c\u125d\n\u013c\5\u013c\u125f\n\u013c\3\u013d\3\u013d\5"+
		"\u013d\u1263\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\7\u013e\u1269\n\u013e"+
		"\f\u013e\16\u013e\u126c\13\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1277\n\u013f\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u127c\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1281\n"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1287\n\u0140\3\u0140\5"+
		"\u0140\u128a\n\u0140\3\u0140\3\u0140\5\u0140\u128e\n\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1298\n\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u12a8\n\u0140\3\u0140"+
		"\3\u0140\5\u0140\u12ac\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\6\u0140\u12b3\n\u0140\r\u0140\16\u0140\u12b4\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u12bb\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u12c9"+
		"\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140"+
		"\u12d2\n\u0140\f\u0140\16\u0140\u12d5\13\u0140\3\u0140\5\u0140\u12d8\n"+
		"\u0140\3\u0140\5\u0140\u12db\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\5\u0140\u12e4\n\u0140\3\u0140\3\u0140\7\u0140\u12e8"+
		"\n\u0140\f\u0140\16\u0140\u12eb\13\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\5\u0140\u12f4\n\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\5\u0140\u12fc\n\u0140\3\u0140\5\u0140\u12ff\n"+
		"\u0140\3\u0140\5\u0140\u1302\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\5\u0140\u130b\n\u0140\3\u0140\3\u0140\3\u0140\5"+
		"\u0140\u1310\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1317"+
		"\n\u0140\f\u0140\16\u0140\u131a\13\u0140\3\u0140\3\u0140\3\u0140\5\u0140"+
		"\u131f\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1324\n\u0140\3\u0140\5"+
		"\u0140\u1327\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u132c\n\u0140\3\u0140"+
		"\3\u0140\3\u0140\5\u0140\u1331\n\u0140\7\u0140\u1333\n\u0140\f\u0140\16"+
		"\u0140\u1336\13\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u133b\n\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1341\n\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u134a\n\u0140\3\u0140\3"+
		"\u0140\3\u0140\5\u0140\u134f\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\5\u0140\u1357\n\u0140\3\u0140\3\u0140\5\u0140\u135b\n\u0140"+
		"\3\u0140\3\u0140\3\u0140\5\u0140\u1360\n\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\5\u0140\u1366\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\5\u0140\u136d\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1372\n\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u137a\n\u0140\3"+
		"\u0140\3\u0140\3\u0140\5\u0140\u137f\n\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\5\u0140\u1387\n\u0140\3\u0140\5\u0140\u138a\n\u0140"+
		"\3\u0140\5\u0140\u138d\n\u0140\3\u0140\5\u0140\u1390\n\u0140\3\u0140\3"+
		"\u0140\5\u0140\u1394\n\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u1399\n\u0140"+
		"\3\u0140\3\u0140\3\u0140\5\u0140\u139e\n\u0140\3\u0140\3\u0140\5\u0140"+
		"\u13a2\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u13a9\n"+
		"\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u13ae\n\u0140\5\u0140\u13b0\n\u0140"+
		"\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144\3\u0144\3\u0144"+
		"\5\u0144\u13bb\n\u0144\3\u0144\3\u0144\5\u0144\u13bf\n\u0144\5\u0144\u13c1"+
		"\n\u0144\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u13cc\n\u0145\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13d7\n\u0147\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\7\u0148\u13de\n\u0148\f\u0148\16\u0148\u13e1"+
		"\13\u0148\5\u0148\u13e3\n\u0148\3\u0149\3\u0149\5\u0149\u13e7\n\u0149"+
		"\3\u0149\5\u0149\u13ea\n\u0149\3\u0149\3\u0149\5\u0149\u13ee\n\u0149\3"+
		"\u014a\3\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\5\u014b\u13fb\n\u014b\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u1400\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c\7\u014c\u1406\n\u014c\f"+
		"\u014c\16\u014c\u1409\13\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u140f\n\u014c\3\u014d\3\u014d\3\u014d\5\u014d\u1414\n\u014d\3\u014d\3"+
		"\u014d\5\u014d\u1418\n\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u141d\n\u014d"+
		"\3\u014e\3\u014e\3\u014e\5\u014e\u1422\n\u014e\3\u014e\5\u014e\u1425\n"+
		"\u014e\3\u014e\3\u014e\3\u014e\7\u014e\u142a\n\u014e\f\u014e\16\u014e"+
		"\u142d\13\u014e\3\u014e\3\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\5\u014f\u1436\n\u014f\3\u014f\3\u014f\3\u014f\3\u014f\7\u014f\u143c\n"+
		"\u014f\f\u014f\16\u014f\u143f\13\u014f\3\u014f\5\u014f\u1442\n\u014f\3"+
		"\u014f\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u144c\n\u0150\3\u0150\5\u0150\u144f\n\u0150\5\u0150\u1451\n\u0150\3\u0151"+
		"\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u145b"+
		"\n\u0152\5\u0152\u145d\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153"+
		"\u1463\n\u0153\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1469\n\u0154\5"+
		"\u0154\u146b\n\u0154\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3"+
		"\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1479\n\u0157\5"+
		"\u0157\u147b\n\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1482"+
		"\n\u0158\3\u0158\5\u0158\u1485\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\5\u0159\u148e\n\u0159\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1497\n\u015a\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\3\u015d\3\u015d\5\u015d\u149f\n\u015d\3\u015d\3\u015d"+
		"\3\u015e\5\u015e\u14a4\n\u015e\3\u015e\3\u015e\5\u015e\u14a8\n\u015e\3"+
		"\u015e\5\u015e\u14ab\n\u015e\3\u015f\3\u015f\5\u015f\u14af\n\u015f\3\u0160"+
		"\3\u0160\3\u0161\3\u0161\3\u0161\5\u0161\u14b6\n\u0161\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\3\u0163\7\u0163\u14c0\n\u0163"+
		"\f\u0163\16\u0163\u14c3\13\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\7\u0163\u14cb\n\u0163\f\u0163\16\u0163\u14ce\13\u0163\5\u0163"+
		"\u14d0\n\u0163\3\u0164\3\u0164\5\u0164\u14d4\n\u0164\3\u0165\3\u0165\3"+
		"\u0166\3\u0166\3\u0167\3\u0167\3\u0168\3\u0168\3\u0169\3\u0169\3\u016a"+
		"\3\u016a\3\u016b\3\u016b\3\u016b\7\u016b\u14e5\n\u016b\f\u016b\16\u016b"+
		"\u14e8\13\u016b\3\u016b\3\u016b\5\u016b\u14ec\n\u016b\3\u016c\3\u016c"+
		"\3\u016d\3\u016d\3\u016d\5\u016d\u14f3\n\u016d\3\u016e\3\u016e\3\u016f"+
		"\3\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\7\u0171\u14fe\n\u0171"+
		"\f\u0171\16\u0171\u1501\13\u0171\3\u0172\3\u0172\3\u0173\3\u0173\3\u0173"+
		"\7\u0173\u1508\n\u0173\f\u0173\16\u0173\u150b\13\u0173\3\u0173\3\u0173"+
		"\5\u0173\u150f\n\u0173\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\7\u0175"+
		"\u1516\n\u0175\f\u0175\16\u0175\u1519\13\u0175\3\u0176\3\u0176\3\u0176"+
		"\5\u0176\u151e\n\u0176\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177\7\u0177"+
		"\u1525\n\u0177\f\u0177\16\u0177\u1528\13\u0177\3\u0178\3\u0178\3\u0178"+
		"\5\u0178\u152d\n\u0178\3\u0178\3\u0178\3\u0179\3\u0179\3\u0179\5\u0179"+
		"\u1534\n\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u153b\n"+
		"\u017a\3\u017a\3\u017a\3\u017b\3\u017b\5\u017b\u1541\n\u017b\3\u017b\3"+
		"\u017b\3\u017b\5\u017b\u1546\n\u017b\3\u017b\5\u017b\u1549\n\u017b\3\u017c"+
		"\3\u017c\3\u017d\3\u017d\5\u017d\u154f\n\u017d\3\u017e\3\u017e\5\u017e"+
		"\u1553\n\u017e\3\u017f\3\u017f\3\u017f\5\u017f\u1558\n\u017f\3\u0180\3"+
		"\u0180\3\u0181\3\u0181\3\u0181\7\u0181\u155f\n\u0181\f\u0181\16\u0181"+
		"\u1562\13\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u1567\n\u0182\3\u0182"+
		"\3\u0182\3\u0182\5\u0182\u156c\n\u0182\3\u0183\3\u0183\3\u0183\7\u0183"+
		"\u1571\n\u0183\f\u0183\16\u0183\u1574\13\u0183\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184\u157d\n\u0184\3\u0185\3\u0185"+
		"\5\u0185\u1581\n\u0185\3\u0185\3\u0185\7\u0185\u1585\n\u0185\f\u0185\16"+
		"\u0185\u1588\13\u0185\3\u0185\3\u0185\5\u0185\u158c\n\u0185\3\u0186\3"+
		"\u0186\3\u0186\5\u0186\u1591\n\u0186\5\u0186\u1593\n\u0186\3\u0186\3\u0186"+
		"\3\u0186\5\u0186\u1598\n\u0186\7\u0186\u159a\n\u0186\f\u0186\16\u0186"+
		"\u159d\13\u0186\3\u0186\3\u0186\5\u0186\u15a1\n\u0186\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\5\u0187\u15a8\n\u0187\3\u0187\3\u0187\3\u0187"+
		"\5\u0187\u15ad\n\u0187\5\u0187\u15af\n\u0187\5\u0187\u15b1\n\u0187\3\u0187"+
		"\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u15bb"+
		"\n\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u15c0\n\u0187\7\u0187\u15c2\n"+
		"\u0187\f\u0187\16\u0187\u15c5\13\u0187\5\u0187\u15c7\n\u0187\3\u0187\3"+
		"\u0187\5\u0187\u15cb\n\u0187\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3"+
		"\u0189\3\u0189\5\u0189\u15d4\n\u0189\3\u0189\3\u0189\3\u018a\3\u018a\5"+
		"\u018a\u15da\n\u018a\3\u018a\3\u018a\5\u018a\u15de\n\u018a\5\u018a\u15e0"+
		"\n\u018a\3\u018b\3\u018b\5\u018b\u15e4\n\u018b\3\u018b\3\u018b\5\u018b"+
		"\u15e8\n\u018b\3\u018b\3\u018b\5\u018b\u15ec\n\u018b\3\u018b\3\u018b\3"+
		"\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u15f4\n\u018b\3\u018b\3\u018b\3"+
		"\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u15fc\n\u018b\5\u018b\u15fe\n\u018b"+
		"\3\u018c\3\u018c\3\u018c\5\u018c\u1603\n\u018c\3\u018c\3\u018c\5\u018c"+
		"\u1607\n\u018c\3\u018c\5\u018c\u160a\n\u018c\3\u018c\3\u018c\3\u018d\3"+
		"\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\5\u018d\u1622\n\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\5\u018d\u1629\n\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u164a"+
		"\n\u018d\3\u018e\3\u018e\3\u018e\5\u018e\u164f\n\u018e\3\u018e\5\u018e"+
		"\u1652\n\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u1657\n\u018e\5\u018e\u1659"+
		"\n\u018e\3\u018e\3\u018e\7\u018e\u165d\n\u018e\f\u018e\16\u018e\u1660"+
		"\13\u018e\3\u018f\3\u018f\3\u018f\7\u018f\u1665\n\u018f\f\u018f\16\u018f"+
		"\u1668\13\u018f\3\u0190\3\u0190\5\u0190\u166c\n\u0190\3\u0190\3\u0190"+
		"\3\u0190\7\u0190\u1671\n\u0190\f\u0190\16\u0190\u1674\13\u0190\3\u0190"+
		"\5\u0190\u1677\n\u0190\3\u0191\3\u0191\5\u0191\u167b\n\u0191\3\u0191\3"+
		"\u0191\3\u0191\7\u0191\u1680\n\u0191\f\u0191\16\u0191\u1683\13\u0191\3"+
		"\u0192\3\u0192\3\u0192\5\u0192\u1688\n\u0192\3\u0192\3\u0192\3\u0192\3"+
		"\u0192\5\u0192\u168e\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u1694"+
		"\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u169a\n\u0192\3\u0192"+
		"\3\u0192\3\u0192\5\u0192\u169f\n\u0192\5\u0192\u16a1\n\u0192\3\u0192\5"+
		"\u0192\u16a4\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3"+
		"\u0192\3\u0192\5\u0192\u16ae\n\u0192\3\u0192\5\u0192\u16b1\n\u0192\5\u0192"+
		"\u16b3\n\u0192\5\u0192\u16b5\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3"+
		"\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192"+
		"\u16c3\n\u0192\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195"+
		"\3\u0196\3\u0196\5\u0196\u16ce\n\u0196\3\u0196\3\u0196\3\u0197\3\u0197"+
		"\5\u0197\u16d4\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\5\u0198\u16dd\n\u0198\3\u0199\3\u0199\3\u0199\5\u0199\u16e2\n"+
		"\u0199\3\u019a\3\u019a\3\u019a\5\u019a\u16e7\n\u019a\3\u019b\3\u019b\3"+
		"\u019b\5\u019b\u16ec\n\u019b\3\u019c\3\u019c\3\u019c\3\u019c\3\u019d\3"+
		"\u019d\3\u019d\2\2\u019e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c"+
		"\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324"+
		"\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\2[\3\2\u022d"+
		"\u022d\4\2rr\u00b7\u00b7\4\2\u01c7\u01c7\u021b\u021b\5\2oo\u00d7\u00d7"+
		"\u015c\u015c\5\2oo\u00d7\u00d7\u011c\u011c\4\2\16\16\u0154\u0154\4\2\u00b3"+
		"\u00b3\u00f2\u00f2\5\2\u009a\u009a\u00ed\u00ed\u0119\u0119\4\2\33\33\u017e"+
		"\u017e\4\2yy\u0085\u0085\4\2nn\u00d8\u00d8\5\2\u00b3\u00b3\u00f2\u00f2"+
		"\u00fa\u00fa\4\2\20\20\u00d2\u00d2\4\2\b\b\u0147\u0147\4\2\u00b0\u00b0"+
		"\u0156\u0156\4\2>>\u0134\u0134\5\2&&\u013b\u013b\u0198\u0198\4\2\6\6\35"+
		"\35\5\2tt\u00c9\u00c9\u01ca\u01ca\5\2\u0110\u0110\u012c\u012c\u013e\u013e"+
		"\4\2\u00a4\u00a4\u01d0\u01d0\4\2&&\u0198\u0198\4\2\5\5~~\5\2\5\5~~\u0104"+
		"\u0104\5\2__\u0133\u0133\u0199\u0199\4\2\u00f4\u00f4\u0134\u0134\4\2\u00fb"+
		"\u00fb\u01a0\u01a0\5\2\u009b\u009b\u00ca\u00ca\u013a\u013a\4\2]]ss\6\2"+
		"\u00b8\u00b8\u00c8\u00c8\u0116\u0116\u0137\u0137\4\2oo\u022a\u022a\3\2"+
		"\u0145\u0146\3\3\u022d\u022d\3\2\u016a\u016b\4\2\u012f\u012f\u01e5\u01e5"+
		"\3\2MN\4\2\u0122\u0122\u01db\u01db\4\2\34\34\u00b7\u00b7\4\2))uu\5\2\t"+
		"\t{{\u01c6\u01c6\4\2ZZ\u0109\u0109\5\2\u00a9\u00a9\u00de\u00de\u016f\u016f"+
		"\4\2\u017b\u017b\u01b1\u01b1\5\2\u017b\u017b\u0196\u0196\u01b1\u01b1\4"+
		"\2\u008f\u008f\u00b9\u00b9\4\2[[\u0171\u0171\4\2\u00b6\u00b6\u00d7\u00d7"+
		"\4\2\t\t\u01cb\u01cb\4\2\30\30\u0184\u0184\4\2\21\21vv\4\2\u009c\u009c"+
		"\u00db\u00db\4\2\t\t\u009c\u009c\4\2\u01ac\u01ac\u01ae\u01ae\4\2\u00fb"+
		"\u00fb\u01a5\u01a5\3\2\u00e3\u00e6\3\2\u0225\u0226\4\2\u0224\u0224\u0228"+
		"\u0228\4\2mm\u00bb\u00bb\6\2\t\t\r\r\u0092\u0092\u0197\u0197\4\2\64\64"+
		"\u01e9\u01e9\4\2{{\u01c6\u01c6\4\2\61\61EE\4\2\u009d\u009d\u00dc\u00dc"+
		"\4\2\67\67\u010d\u010d\5\2((\u00dd\u00dd\u01ba\u01ba\4\2\u01ea\u01ea\u01ed"+
		"\u01ed\4\2\u0088\u0088\u0118\u0118\4\2\u008b\u008b\u0107\u0107\4\2PP|"+
		"|\4\2\u00b2\u00b2\u018d\u018d\3\2\u0206\u0215\3\2\u01ff\u0205\3\2\u01f9"+
		"\u01fe\4\2\u0156\u0156\u0174\u0174\4\2\u00a0\u00a0\u014e\u014e\4\2\u011f"+
		"\u011f\u017a\u017a\4\2\u0136\u0136\u019a\u019a\5\2\u0097\u0097\u01a9\u01a9"+
		"\u01dc\u01dc\4\2CC\u0170\u0170\5\2CC\u011c\u011c\u0170\u0170\4\2\u013f"+
		"\u013f\u01a6\u01a6\4\2\u00b6\u00b6\u0166\u0166\4\2dd\u01f5\u01f5\4\2\u0105"+
		"\u0105\u017d\u017d\4\2--\66\66\6\2dd\u00b4\u00b4\u00ff\u00ff\u017d\u017d"+
		"\3\2\u021b\u021c\4\2\u0216\u0216\u021d\u021d`\2\4\b\13\13\17\17\22\31"+
		"\34\35 (++-.\60\62\64\64\668::<?AGLWZ[]bdjlmpprswz|}\177\u0081\u0084\u0086"+
		"\u0088\u008b\u008d\u008f\u0091\u0091\u0093\u0097\u009b\u009d\u009f\u00a1"+
		"\u00a3\u00a4\u00a9\u00aa\u00af\u00b0\u00b2\u00b2\u00b4\u00b4\u00b6\u00b7"+
		"\u00b9\u00bc\u00be\u00be\u00c0\u00c2\u00c6\u00c8\u00ca\u00cd\u00cf\u00cf"+
		"\u00d1\u00d1\u00d3\u00d7\u00da\u00e0\u00e2\u00e2\u00e4\u00e7\u00e9\u00e9"+
		"\u00eb\u00ec\u00ee\u00f1\u00f3\u00f5\u00f8\u00f9\u00fb\u00fc\u00ff\u0101"+
		"\u0103\u0110\u0112\u0113\u0116\u0118\u011c\u011c\u011f\u011f\u0124\u0128"+
		"\u012a\u012c\u012f\u0130\u0133\u0133\u0135\u0141\u0147\u0147\u0149\u0150"+
		"\u0155\u0158\u015a\u015b\u015d\u015e\u0160\u0162\u0164\u016d\u016f\u017b"+
		"\u017d\u017d\u017f\u0180\u0182\u0182\u0184\u018b\u018d\u0192\u0194\u019b"+
		"\u019d\u01a1\u01a4\u01aa\u01b0\u01b8\u01ba\u01bf\u01c1\u01c4\u01c7\u01c7"+
		"\u01c9\u01c9\u01cb\u01ce\u01d0\u01d1\u01d3\u01d9\u01db\u01dd\u01df\u01df"+
		"\u01e1\u01e1\u01e3\u0215\u029c\u029c\u19a0\2\u033b\3\2\2\2\4\u0342\3\2"+
		"\2\2\6\u034b\3\2\2\2\b\u0367\3\2\2\2\n\u0369\3\2\2\2\f\u0387\3\2\2\2\16"+
		"\u038b\3\2\2\2\20\u0392\3\2\2\2\22\u03a1\3\2\2\2\24\u03a5\3\2\2\2\26\u03cf"+
		"\3\2\2\2\30\u03d1\3\2\2\2\32\u03d3\3\2\2\2\34\u03f4\3\2\2\2\36\u0407\3"+
		"\2\2\2 \u040b\3\2\2\2\"\u0412\3\2\2\2$\u0414\3\2\2\2&\u0423\3\2\2\2(\u0427"+
		"\3\2\2\2*\u0436\3\2\2\2,\u0447\3\2\2\2.\u0455\3\2\2\2\60\u0486\3\2\2\2"+
		"\62\u048a\3\2\2\2\64\u04bd\3\2\2\2\66\u04e8\3\2\2\28\u04ec\3\2\2\2:\u04f3"+
		"\3\2\2\2<\u04fe\3\2\2\2>\u0502\3\2\2\2@\u052d\3\2\2\2B\u0531\3\2\2\2D"+
		"\u053a\3\2\2\2F\u055a\3\2\2\2H\u056c\3\2\2\2J\u057d\3\2\2\2L\u057f\3\2"+
		"\2\2N\u0584\3\2\2\2P\u059c\3\2\2\2R\u05d0\3\2\2\2T\u05d4\3\2\2\2V\u05ec"+
		"\3\2\2\2X\u05f0\3\2\2\2Z\u05fc\3\2\2\2\\\u060a\3\2\2\2^\u0612\3\2\2\2"+
		"`\u0628\3\2\2\2b\u0634\3\2\2\2d\u0645\3\2\2\2f\u065c\3\2\2\2h\u065e\3"+
		"\2\2\2j\u066f\3\2\2\2l\u068c\3\2\2\2n\u068e\3\2\2\2p\u0693\3\2\2\2r\u06ab"+
		"\3\2\2\2t\u06d0\3\2\2\2v\u06d5\3\2\2\2x\u06ee\3\2\2\2z\u0706\3\2\2\2|"+
		"\u070f\3\2\2\2~\u0718\3\2\2\2\u0080\u0721\3\2\2\2\u0082\u0725\3\2\2\2"+
		"\u0084\u072a\3\2\2\2\u0086\u0742\3\2\2\2\u0088\u0744\3\2\2\2\u008a\u0748"+
		"\3\2\2\2\u008c\u077c\3\2\2\2\u008e\u0798\3\2\2\2\u0090\u079a\3\2\2\2\u0092"+
		"\u07a8\3\2\2\2\u0094\u07b4\3\2\2\2\u0096\u07b9\3\2\2\2\u0098\u07bf\3\2"+
		"\2\2\u009a\u07c2\3\2\2\2\u009c\u07cd\3\2\2\2\u009e\u07dc\3\2\2\2\u00a0"+
		"\u07ed\3\2\2\2\u00a2\u07fe\3\2\2\2\u00a4\u0806\3\2\2\2\u00a6\u080b\3\2"+
		"\2\2\u00a8\u081b\3\2\2\2\u00aa\u081f\3\2\2\2\u00ac\u0837\3\2\2\2\u00ae"+
		"\u083a\3\2\2\2\u00b0\u0840\3\2\2\2\u00b2\u084c\3\2\2\2\u00b4\u0855\3\2"+
		"\2\2\u00b6\u0871\3\2\2\2\u00b8\u0877\3\2\2\2\u00ba\u087a\3\2\2\2\u00bc"+
		"\u0881\3\2\2\2\u00be\u0889\3\2\2\2\u00c0\u0898\3\2\2\2\u00c2\u089a\3\2"+
		"\2\2\u00c4\u089e\3\2\2\2\u00c6\u08a4\3\2\2\2\u00c8\u08c0\3\2\2\2\u00ca"+
		"\u08e2\3\2\2\2\u00cc\u0912\3\2\2\2\u00ce\u091c\3\2\2\2\u00d0\u091e\3\2"+
		"\2\2\u00d2\u0923\3\2\2\2\u00d4\u0931\3\2\2\2\u00d6\u0933\3\2\2\2\u00d8"+
		"\u0938\3\2\2\2\u00da\u0948\3\2\2\2\u00dc\u0969\3\2\2\2\u00de\u098c\3\2"+
		"\2\2\u00e0\u0990\3\2\2\2\u00e2\u099f\3\2\2\2\u00e4\u09a1\3\2\2\2\u00e6"+
		"\u09a4\3\2\2\2\u00e8\u09a9\3\2\2\2\u00ea\u09b3\3\2\2\2\u00ec\u09cf\3\2"+
		"\2\2\u00ee\u09d1\3\2\2\2\u00f0\u09d5\3\2\2\2\u00f2\u09d8\3\2\2\2\u00f4"+
		"\u09dc\3\2\2\2\u00f6\u09e1\3\2\2\2\u00f8\u09e5\3\2\2\2\u00fa\u09f6\3\2"+
		"\2\2\u00fc\u0a03\3\2\2\2\u00fe\u0a14\3\2\2\2\u0100\u0a21\3\2\2\2\u0102"+
		"\u0a2d\3\2\2\2\u0104\u0a2f\3\2\2\2\u0106\u0a3d\3\2\2\2\u0108\u0a4e\3\2"+
		"\2\2\u010a\u0a67\3\2\2\2\u010c\u0a71\3\2\2\2\u010e\u0a75\3\2\2\2\u0110"+
		"\u0a9a\3\2\2\2\u0112\u0a9c\3\2\2\2\u0114\u0ab5\3\2\2\2\u0116\u0ac0\3\2"+
		"\2\2\u0118\u0ac7\3\2\2\2\u011a\u0acb\3\2\2\2\u011c\u0add\3\2\2\2\u011e"+
		"\u0ae5\3\2\2\2\u0120\u0af0\3\2\2\2\u0122\u0af7\3\2\2\2\u0124\u0afb\3\2"+
		"\2\2\u0126\u0b18\3\2\2\2\u0128\u0b1c\3\2\2\2\u012a\u0b21\3\2\2\2\u012c"+
		"\u0b29\3\2\2\2\u012e\u0b31\3\2\2\2\u0130\u0b34\3\2\2\2\u0132\u0b44\3\2"+
		"\2\2\u0134\u0b49\3\2\2\2\u0136\u0b4d\3\2\2\2\u0138\u0b71\3\2\2\2\u013a"+
		"\u0b73\3\2\2\2\u013c\u0b89\3\2\2\2\u013e\u0b8b\3\2\2\2\u0140\u0b90\3\2"+
		"\2\2\u0142\u0b92\3\2\2\2\u0144\u0b94\3\2\2\2\u0146\u0b96\3\2\2\2\u0148"+
		"\u0b9a\3\2\2\2\u014a\u0b9f\3\2\2\2\u014c\u0ba5\3\2\2\2\u014e\u0bae\3\2"+
		"\2\2\u0150\u0bb4\3\2\2\2\u0152\u0bc8\3\2\2\2\u0154\u0bcd\3\2\2\2\u0156"+
		"\u0bda\3\2\2\2\u0158\u0bdc\3\2\2\2\u015a\u0bea\3\2\2\2\u015c\u0bf4\3\2"+
		"\2\2\u015e\u0bfa\3\2\2\2\u0160\u0bfc\3\2\2\2\u0162\u0bff\3\2\2\2\u0164"+
		"\u0c04\3\2\2\2\u0166\u0c1c\3\2\2\2\u0168\u0c2b\3\2\2\2\u016a\u0c2d\3\2"+
		"\2\2\u016c\u0c42\3\2\2\2\u016e\u0c51\3\2\2\2\u0170\u0c67\3\2\2\2\u0172"+
		"\u0c6e\3\2\2\2\u0174\u0c7b\3\2\2\2\u0176\u0c7e\3\2\2\2\u0178\u0c93\3\2"+
		"\2\2\u017a\u0c9d\3\2\2\2\u017c\u0ca6\3\2\2\2\u017e\u0cc1\3\2\2\2\u0180"+
		"\u0cec\3\2\2\2\u0182\u0cfc\3\2\2\2\u0184\u0d09\3\2\2\2\u0186\u0d12\3\2"+
		"\2\2\u0188\u0d14\3\2\2\2\u018a\u0d33\3\2\2\2\u018c\u0d37\3\2\2\2\u018e"+
		"\u0d3f\3\2\2\2\u0190\u0d41\3\2\2\2\u0192\u0d49\3\2\2\2\u0194\u0d70\3\2"+
		"\2\2\u0196\u0d7c\3\2\2\2\u0198\u0d91\3\2\2\2\u019a\u0d94\3\2\2\2\u019c"+
		"\u0da0\3\2\2\2\u019e\u0da4\3\2\2\2\u01a0\u0dbd\3\2\2\2\u01a2\u0dbf\3\2"+
		"\2\2\u01a4\u0dd0\3\2\2\2\u01a6\u0dd7\3\2\2\2\u01a8\u0de6\3\2\2\2\u01aa"+
		"\u0dfd\3\2\2\2\u01ac\u0e03\3\2\2\2\u01ae\u0e05\3\2\2\2\u01b0\u0e1d\3\2"+
		"\2\2\u01b2\u0e35\3\2\2\2\u01b4\u0e59\3\2\2\2\u01b6\u0e5b\3\2\2\2\u01b8"+
		"\u0e79\3\2\2\2\u01ba\u0e7e\3\2\2\2\u01bc\u0e80\3\2\2\2\u01be\u0e8c\3\2"+
		"\2\2\u01c0\u0e9c\3\2\2\2\u01c2\u0e9e\3\2\2\2\u01c4\u0ea1\3\2\2\2\u01c6"+
		"\u0ebb\3\2\2\2\u01c8\u0ebd\3\2\2\2\u01ca\u0ec1\3\2\2\2\u01cc\u0ed0\3\2"+
		"\2\2\u01ce\u0edc\3\2\2\2\u01d0\u0ee4\3\2\2\2\u01d2\u0ee8\3\2\2\2\u01d4"+
		"\u0ef3\3\2\2\2\u01d6\u0ef8\3\2\2\2\u01d8\u0f05\3\2\2\2\u01da\u0f19\3\2"+
		"\2\2\u01dc\u0f22\3\2\2\2\u01de\u0f24\3\2\2\2\u01e0\u0f2b\3\2\2\2\u01e2"+
		"\u0f30\3\2\2\2\u01e4\u0f3d\3\2\2\2\u01e6\u0f45\3\2\2\2\u01e8\u0f4d\3\2"+
		"\2\2\u01ea\u0f5b\3\2\2\2\u01ec\u0f5d\3\2\2\2\u01ee\u0f69\3\2\2\2\u01f0"+
		"\u0f8c\3\2\2\2\u01f2\u0f8e\3\2\2\2\u01f4\u0f9c\3\2\2\2\u01f6\u0fa1\3\2"+
		"\2\2\u01f8\u0fb3\3\2\2\2\u01fa\u0fb7\3\2\2\2\u01fc\u0fbf\3\2\2\2\u01fe"+
		"\u0fc9\3\2\2\2\u0200\u0fd1\3\2\2\2\u0202\u0fd7\3\2\2\2\u0204\u0fe6\3\2"+
		"\2\2\u0206\u0fe9\3\2\2\2\u0208\u1002\3\2\2\2\u020a\u1015\3\2\2\2\u020c"+
		"\u1019\3\2\2\2\u020e\u101c\3\2\2\2\u0210\u1038\3\2\2\2\u0212\u103d\3\2"+
		"\2\2\u0214\u1050\3\2\2\2\u0216\u1052\3\2\2\2\u0218\u1062\3\2\2\2\u021a"+
		"\u106a\3\2\2\2\u021c\u106f\3\2\2\2\u021e\u107a\3\2\2\2\u0220\u1085\3\2"+
		"\2\2\u0222\u1088\3\2\2\2\u0224\u109a\3\2\2\2\u0226\u109c\3\2\2\2\u0228"+
		"\u10ab\3\2\2\2\u022a\u10b6\3\2\2\2\u022c\u10c4\3\2\2\2\u022e\u10c9\3\2"+
		"\2\2\u0230\u10ce\3\2\2\2\u0232\u10db\3\2\2\2\u0234\u10dd\3\2\2\2\u0236"+
		"\u10e8\3\2\2\2\u0238\u10ea\3\2\2\2\u023a\u10ec\3\2\2\2\u023c\u10f7\3\2"+
		"\2\2\u023e\u10f9\3\2\2\2\u0240\u111e\3\2\2\2\u0242\u1127\3\2\2\2\u0244"+
		"\u1129\3\2\2\2\u0246\u1138\3\2\2\2\u0248\u1149\3\2\2\2\u024a\u114b\3\2"+
		"\2\2\u024c\u1160\3\2\2\2\u024e\u1162\3\2\2\2\u0250\u1166\3\2\2\2\u0252"+
		"\u116f\3\2\2\2\u0254\u1171\3\2\2\2\u0256\u1179\3\2\2\2\u0258\u1181\3\2"+
		"\2\2\u025a\u11a4\3\2\2\2\u025c\u11a6\3\2\2\2\u025e\u11c4\3\2\2\2\u0260"+
		"\u11c6\3\2\2\2\u0262\u11d6\3\2\2\2\u0264\u11d9\3\2\2\2\u0266\u11db\3\2"+
		"\2\2\u0268\u120a\3\2\2\2\u026a\u120e\3\2\2\2\u026c\u1211\3\2\2\2\u026e"+
		"\u1224\3\2\2\2\u0270\u122c\3\2\2\2\u0272\u123e\3\2\2\2\u0274\u1245\3\2"+
		"\2\2\u0276\u125e\3\2\2\2\u0278\u1260\3\2\2\2\u027a\u1264\3\2\2\2\u027c"+
		"\u126d\3\2\2\2\u027e\u13af\3\2\2\2\u0280\u13b1\3\2\2\2\u0282\u13b3\3\2"+
		"\2\2\u0284\u13b5\3\2\2\2\u0286\u13b7\3\2\2\2\u0288\u13c4\3\2\2\2\u028a"+
		"\u13cd\3\2\2\2\u028c\u13d6\3\2\2\2\u028e\u13d8\3\2\2\2\u0290\u13e9\3\2"+
		"\2\2\u0292\u13ef\3\2\2\2\u0294\u13fa\3\2\2\2\u0296\u13fc\3\2\2\2\u0298"+
		"\u1410\3\2\2\2\u029a\u141e\3\2\2\2\u029c\u1430\3\2\2\2\u029e\u1445\3\2"+
		"\2\2\u02a0\u1452\3\2\2\2\u02a2\u1455\3\2\2\2\u02a4\u145e\3\2\2\2\u02a6"+
		"\u1464\3\2\2\2\u02a8\u146c\3\2\2\2\u02aa\u146f\3\2\2\2\u02ac\u147a\3\2"+
		"\2\2\u02ae\u1481\3\2\2\2\u02b0\u1486\3\2\2\2\u02b2\u148f\3\2\2\2\u02b4"+
		"\u1498\3\2\2\2\u02b6\u149a\3\2\2\2\u02b8\u149c\3\2\2\2\u02ba\u14aa\3\2"+
		"\2\2\u02bc\u14ae\3\2\2\2\u02be\u14b0\3\2\2\2\u02c0\u14b2\3\2\2\2\u02c2"+
		"\u14b7\3\2\2\2\u02c4\u14cf\3\2\2\2\u02c6\u14d3\3\2\2\2\u02c8\u14d5\3\2"+
		"\2\2\u02ca\u14d7\3\2\2\2\u02cc\u14d9\3\2\2\2\u02ce\u14db\3\2\2\2\u02d0"+
		"\u14dd\3\2\2\2\u02d2\u14df\3\2\2\2\u02d4\u14e1\3\2\2\2\u02d6\u14ed\3\2"+
		"\2\2\u02d8\u14ef\3\2\2\2\u02da\u14f4\3\2\2\2\u02dc\u14f6\3\2\2\2\u02de"+
		"\u14f8\3\2\2\2\u02e0\u14fa\3\2\2\2\u02e2\u1502\3\2\2\2\u02e4\u1504\3\2"+
		"\2\2\u02e6\u1510\3\2\2\2\u02e8\u1512\3\2\2\2\u02ea\u151d\3\2\2\2\u02ec"+
		"\u1521\3\2\2\2\u02ee\u152c\3\2\2\2\u02f0\u1533\3\2\2\2\u02f2\u153a\3\2"+
		"\2\2\u02f4\u1548\3\2\2\2\u02f6\u154a\3\2\2\2\u02f8\u154e\3\2\2\2\u02fa"+
		"\u1552\3\2\2\2\u02fc\u1554\3\2\2\2\u02fe\u1559\3\2\2\2\u0300\u155b\3\2"+
		"\2\2\u0302\u1563\3\2\2\2\u0304\u156d\3\2\2\2\u0306\u1575\3\2\2\2\u0308"+
		"\u157e\3\2\2\2\u030a\u158d\3\2\2\2\u030c\u15a2\3\2\2\2\u030e\u15cc\3\2"+
		"\2\2\u0310\u15d3\3\2\2\2\u0312\u15df\3\2\2\2\u0314\u15fd\3\2\2\2\u0316"+
		"\u15ff\3\2\2\2\u0318\u1649\3\2\2\2\u031a\u164e\3\2\2\2\u031c\u1661\3\2"+
		"\2\2\u031e\u166b\3\2\2\2\u0320\u167a\3\2\2\2\u0322\u16c2\3\2\2\2\u0324"+
		"\u16c4\3\2\2\2\u0326\u16c6\3\2\2\2\u0328\u16c9\3\2\2\2\u032a\u16cd\3\2"+
		"\2\2\u032c\u16d3\3\2\2\2\u032e\u16dc\3\2\2\2\u0330\u16e1\3\2\2\2\u0332"+
		"\u16e6\3\2\2\2\u0334\u16eb\3\2\2\2\u0336\u16ed\3\2\2\2\u0338\u16f1\3\2"+
		"\2\2\u033a\u033c\n\2\2\2\u033b\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d"+
		"\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e\3\3\2\2\2\u033f\u0341\5\b\5\2"+
		"\u0340\u033f\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343"+
		"\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0346\7\2\2\3\u0346"+
		"\5\3\2\2\2\u0347\u034a\5\b\5\2\u0348\u034a\5\u02ae\u0158\2\u0349\u0347"+
		"\3\2\2\2\u0349\u0348\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b"+
		"\u034c\3\2\2\2\u034c\u034e\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u034f\7\2"+
		"\2\3\u034f\7\3\2\2\2\u0350\u0368\5N(\2\u0351\u0368\5^\60\2\u0352\u0368"+
		"\5p9\2\u0353\u0368\5\u00e8u\2\u0354\u0368\5v<\2\u0355\u0368\5\u009cO\2"+
		"\u0356\u0368\5$\23\2\u0357\u0368\5P)\2\u0358\u0368\5r:\2\u0359\u0368\5"+
		"`\61\2\u035a\u0368\5F$\2\u035b\u0368\5\n\6\2\u035c\u0368\5D#\2\u035d\u0368"+
		"\5\u00eav\2\u035e\u0368\5x=\2\u035f\u0368\5\u00b0Y\2\u0360\u0368\5L\'"+
		"\2\u0361\u0368\5\\/\2\u0362\u0368\5n8\2\u0363\u0368\5\u00e6t\2\u0364\u0368"+
		"\5t;\2\u0365\u0368\5\u009aN\2\u0366\u0368\5\u015c\u00af\2\u0367\u0350"+
		"\3\2\2\2\u0367\u0351\3\2\2\2\u0367\u0352\3\2\2\2\u0367\u0353\3\2\2\2\u0367"+
		"\u0354\3\2\2\2\u0367\u0355\3\2\2\2\u0367\u0356\3\2\2\2\u0367\u0357\3\2"+
		"\2\2\u0367\u0358\3\2\2\2\u0367\u0359\3\2\2\2\u0367\u035a\3\2\2\2\u0367"+
		"\u035b\3\2\2\2\u0367\u035c\3\2\2\2\u0367\u035d\3\2\2\2\u0367\u035e\3\2"+
		"\2\2\u0367\u035f\3\2\2\2\u0367\u0360\3\2\2\2\u0367\u0361\3\2\2\2\u0367"+
		"\u0362\3\2\2\2\u0367\u0363\3\2\2\2\u0367\u0364\3\2\2\2\u0367\u0365\3\2"+
		"\2\2\u0367\u0366\3\2\2\2\u0368\t\3\2\2\2\u0369\u036a\7X\2\2\u036a\u036e"+
		"\7\u01ac\2\2\u036b\u036c\5\u02d2\u016a\2\u036c\u036d\7\u021a\2\2\u036d"+
		"\u036f\3\2\2\2\u036e\u036b\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370\3\2"+
		"\2\2\u0370\u0371\5\u0302\u0182\2\u0371\u0372\7\u0221\2\2\u0372\u0377\5"+
		"\u0114\u008b\2\u0373\u0374\7\u0227\2\2\u0374\u0376\5\u0114\u008b\2\u0375"+
		"\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2"+
		"\2\2\u0378\u037a\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u037c\7\u0222\2\2\u037b"+
		"\u037d\5\f\7\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0381\3\2"+
		"\2\2\u037e\u0380\5\32\16\2\u037f\u037e\3\2\2\2\u0380\u0383\3\2\2\2\u0381"+
		"\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384\3\2\2\2\u0383\u0381\3\2"+
		"\2\2\u0384\u0385\7\u022d\2\2\u0385\13\3\2\2\2\u0386\u0388\5\16\b\2\u0387"+
		"\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\5\20"+
		"\t\2\u038a\r\3\2\2\2\u038b\u038c\7\u0180\2\2\u038c\u038d\7Y\2\2\u038d"+
		"\u038e\t\3\2\2\u038e\17\3\2\2\2\u038f\u0393\5\22\n\2\u0390\u0391\7\u01ad"+
		"\2\2\u0391\u0393\5\u032a\u0196\2\u0392\u038f\3\2\2\2\u0392\u0390\3\2\2"+
		"\2\u0393\u0394\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395\21"+
		"\3\2\2\2\u0396\u0397\7\u0142\2\2\u0397\u03a2\7\u021b\2\2\u0398\u0399\7"+
		"\u0144\2\2\u0399\u03a2\7\u021b\2\2\u039a\u039b\7\u00c5\2\2\u039b\u03a2"+
		"\7\u021b\2\2\u039c\u039d\7\u00f7\2\2\u039d\u03a2\7\u021b\2\2\u039e\u03a2"+
		"\5\26\f\2\u039f\u03a2\5\30\r\2\u03a0\u03a2\5\24\13\2\u03a1\u0396\3\2\2"+
		"\2\u03a1\u0398\3\2\2\2\u03a1\u039a\3\2\2\2\u03a1\u039c\3\2\2\2\u03a1\u039e"+
		"\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3"+
		"\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\23\3\2\2\2\u03a5\u03a6\7\u01a2"+
		"\2\2\u03a6\u03bc\7\u0221\2\2\u03a7\u03a8\7\u00c3\2\2\u03a8\u03bd\7\u021b"+
		"\2\2\u03a9\u03aa\7\u0111\2\2\u03aa\u03bd\7\u021b\2\2\u03ab\u03ac\7\u00fd"+
		"\2\2\u03ac\u03bd\7\u021b\2\2\u03ad\u03ae\7\u00f6\2\2\u03ae\u03bd\t\4\2"+
		"\2\u03af\u03b0\7\u0143\2\2\u03b0\u03bd\7\u021b\2\2\u03b1\u03b2\7\u00a7"+
		"\2\2\u03b2\u03bd\7\u021b\2\2\u03b3\u03b4\7\u00a6\2\2\u03b4\u03b5\7\u00ae"+
		"\2\2\u03b5\u03bd\7\u021b\2\2\u03b6\u03b7\7*\2\2\u03b7\u03bd\t\5\2\2\u03b8"+
		"\u03b9\7\u009e\2\2\u03b9\u03bd\t\6\2\2\u03ba\u03bb\7\65\2\2\u03bb\u03bd"+
		"\7o\2\2\u03bc\u03a7\3\2\2\2\u03bc\u03a9\3\2\2\2\u03bc\u03ab\3\2\2\2\u03bc"+
		"\u03ad\3\2\2\2\u03bc\u03af\3\2\2\2\u03bc\u03b1\3\2\2\2\u03bc\u03b3\3\2"+
		"\2\2\u03bc\u03b6\3\2\2\2\u03bc\u03b8\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd"+
		"\u03be\3\2\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c0\3\2"+
		"\2\2\u03c0\u03c1\7\u0222\2\2\u03c1\25\3\2\2\2\u03c2\u03cc\7H\2\2\u03c3"+
		"\u03cd\7\32\2\2\u03c4\u03ca\7\u00a2\2\2\u03c5\u03cb\7\u012d\2\2\u03c6"+
		"\u03c8\t\7\2\2\u03c7\u03c9\t\b\2\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2"+
		"\2\2\u03c9\u03cb\3\2\2\2\u03ca\u03c5\3\2\2\2\u03ca\u03c6\3\2\2\2\u03cb"+
		"\u03cd\3\2\2\2\u03cc\u03c3\3\2\2\2\u03cc\u03c4\3\2\2\2\u03cc\u03cd\3\2"+
		"\2\2\u03cd\u03d0\3\2\2\2\u03ce\u03d0\7\u0115\2\2\u03cf\u03c2\3\2\2\2\u03cf"+
		"\u03ce\3\2\2\2\u03d0\27\3\2\2\2\u03d1\u03d2\t\t\2\2\u03d2\31\3\2\2\2\u03d3"+
		"\u03d4\7\u00e8\2\2\u03d4\u03d5\7\u0221\2\2\u03d5\u03da\5\u032a\u0196\2"+
		"\u03d6\u03d7\7\u0227\2\2\u03d7\u03d9\5\u032a\u0196\2\u03d8\u03d6\3\2\2"+
		"\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd"+
		"\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03de\7\u0222\2\2\u03de\u03df\7\u01a3"+
		"\2\2\u03df\u03e5\7\20\2\2\u03e0\u03e6\t\n\2\2\u03e1\u03e2\7\u0221\2\2"+
		"\u03e2\u03e3\5\34\17\2\u03e3\u03e4\7\u0222\2\2\u03e4\u03e6\3\2\2\2\u03e5"+
		"\u03e0\3\2\2\2\u03e5\u03e1\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e5\3\2"+
		"\2\2\u03e7\u03e8\3\2\2\2\u03e8\33\3\2\2\2\u03e9\u03ea\7\u01ad\2\2\u03ea"+
		"\u03f0\5\u032a\u0196\2\u03eb\u03ed\5\36\20\2\u03ec\u03ee\5\24\13\2\u03ed"+
		"\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03e9\3\2"+
		"\2\2\u03ef\u03eb\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1"+
		"\u03f2\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f5\5\24\13\2\u03f4\u03ef\3"+
		"\2\2\2\u03f4\u03f3\3\2\2\2\u03f5\35\3\2\2\2\u03f6\u03f7\t\13\2\2\u03f7"+
		"\u03f8\7\u01a2\2\2\u03f8\u03f9\7\u00b8\2\2\u03f9\u0408\7\u0172\2\2\u03fa"+
		"\u03fb\7;\2\2\u03fb\u0408\7\u021b\2\2\u03fc\u0408\5 \21\2\u03fd\u0408"+
		"\5\"\22\2\u03fe\u0403\7/\2\2\u03ff\u0403\7\u0114\2\2\u0400\u0401\7/\2"+
		"\2\u0401\u0403\7\u0159\2\2\u0402\u03fe\3\2\2\2\u0402\u03ff\3\2\2\2\u0402"+
		"\u0400\3\2\2\2\u0403\u0405\3\2\2\2\u0404\u0406\5\30\r\2\u0405\u0404\3"+
		"\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407\u03f6\3\2\2\2\u0407"+
		"\u03fa\3\2\2\2\u0407\u03fc\3\2\2\2\u0407\u03fd\3\2\2\2\u0407\u0402\3\2"+
		"\2\2\u0408\u0409\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a\3\2\2\2\u040a"+
		"\37\3\2\2\2\u040b\u040c\t\f\2\2\u040c!\3\2\2\2\u040d\u040f\7H\2\2\u040e"+
		"\u0410\t\r\2\2\u040f\u040e\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0413\3\2"+
		"\2\2\u0411\u0413\7\u0115\2\2\u0412\u040d\3\2\2\2\u0412\u0411\3\2\2\2\u0413"+
		"#\3\2\2\2\u0414\u0415\7\n\2\2\u0415\u0419\7\u01ac\2\2\u0416\u0417\5\u02d2"+
		"\u016a\2\u0417\u0418\7\u021a\2\2\u0418\u041a\3\2\2\2\u0419\u0416\3\2\2"+
		"\2\u0419\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041e\5\u0302\u0182\2"+
		"\u041c\u041f\5&\24\2\u041d\u041f\5\60\31\2\u041e\u041c\3\2\2\2\u041e\u041d"+
		"\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0421\7\u022d\2"+
		"\2\u0421%\3\2\2\2\u0422\u0424\5(\25\2\u0423\u0422\3\2\2\2\u0424\u0425"+
		"\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426\'\3\2\2\2\u0427"+
		"\u0434\7\u0104\2\2\u0428\u0429\7\u0221\2\2\u0429\u042e\5*\26\2\u042a\u042b"+
		"\7\u0227\2\2\u042b\u042d\5*\26\2\u042c\u042a\3\2\2\2\u042d\u0430\3\2\2"+
		"\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u042e"+
		"\3\2\2\2\u0431\u0432\7\u0222\2\2\u0432\u0435\3\2\2\2\u0433\u0435\5,\27"+
		"\2\u0434\u0428\3\2\2\2\u0434\u0433\3\2\2\2\u0435)\3\2\2\2\u0436\u0438"+
		"\5\u0300\u0181\2\u0437\u0439\5\u0312\u018a\2\u0438\u0437\3\2\2\2\u0438"+
		"\u0439\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u043b\7o\2\2\u043b\u043d\5\u0236"+
		"\u011c\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u0441\3\2\2\2\u043e"+
		"\u0440\5.\30\2\u043f\u043e\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2"+
		"\2\2\u0441\u0442\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441\3\2\2\2\u0444"+
		"\u0446\5\32\16\2\u0445\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446+\3\2\2"+
		"\2\u0447\u0448\7@\2\2\u0448\u044a\5\u0300\u0181\2\u0449\u044b\7\u0120"+
		"\2\2\u044a\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2\u044c"+
		"\u044d\7\u01a7\2\2\u044d\u044e\7\23\2\2\u044e\u044f\7\t\2\2\u044f\u0451"+
		"\7\u00e1\2\2\u0450\u0452\7\u00a4\2\2\u0451\u0450\3\2\2\2\u0451\u0452\3"+
		"\2\2\2\u0452-\3\2\2\2\u0453\u0454\7M\2\2\u0454\u0456\5\u02e4\u0173\2\u0455"+
		"\u0453\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u045f\3\2\2\2\u0457\u0459\7\u0120"+
		"\2\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\3\2\2\2\u045a"+
		"\u0460\7\u0123\2\2\u045b\u0460\7\u01c6\2\2\u045c\u045d\7\u0151\2\2\u045d"+
		"\u0460\7\u00d9\2\2\u045e\u0460\5\64\33\2\u045f\u0458\3\2\2\2\u045f\u045b"+
		"\3\2\2\2\u045f\u045c\3\2\2\2\u045f\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461"+
		"\u0462\5\66\34\2\u0462/\3\2\2\2\u0463\u0465\7\5\2\2\u0464\u0466\5\62\32"+
		"\2\u0465\u0464\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468"+
		"\3\2\2\2\u0468\u0487\3\2\2\2\u0469\u047a\7\u0104\2\2\u046a\u046b\7M\2"+
		"\2\u046b\u047b\5\u02e4\u0173\2\u046c\u046d\7\u0151\2\2\u046d\u047b\7\u00d9"+
		"\2\2\u046e\u046f\7\u01c6\2\2\u046f\u0470\7\u0221\2\2\u0470\u0475\5\u0300"+
		"\u0181\2\u0471\u0472\7\u0227\2\2\u0472\u0474\5\u0300\u0181\2\u0473\u0471"+
		"\3\2\2\2\u0474\u0477\3\2\2\2\u0475\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476"+
		"\u0478\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u0479\7\u0222\2\2\u0479\u047b"+
		"\3\2\2\2\u047a\u046a\3\2\2\2\u047a\u046c\3\2\2\2\u047a\u046e\3\2\2\2\u047b"+
		"\u047c\3\2\2\2\u047c\u047e\5\66\34\2\u047d\u047f\7\62\2\2\u047e\u047d"+
		"\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0487\3\2\2\2\u0480\u0481\7\u0164\2"+
		"\2\u0481\u0482\7M\2\2\u0482\u0483\5\u02e4\u0173\2\u0483\u0484\7\u01b9"+
		"\2\2\u0484\u0485\5\u02e4\u0173\2\u0485\u0487\3\2\2\2\u0486\u0463\3\2\2"+
		"\2\u0486\u0469\3\2\2\2\u0486\u0480\3\2\2\2\u0487\61\3\2\2\2\u0488\u0489"+
		"\7M\2\2\u0489\u048b\5\u02e4\u0173\2\u048a\u0488\3\2\2\2\u048a\u048b\3"+
		"\2\2\2\u048b\u04b8\3\2\2\2\u048c\u048d\7\u01c6\2\2\u048d\u048e\7\u0221"+
		"\2\2\u048e\u0493\5\u0300\u0181\2\u048f\u0490\7\u0227\2\2\u0490\u0492\5"+
		"\u0300\u0181\2\u0491\u048f\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0491\3\2"+
		"\2\2\u0493\u0494\3\2\2\2\u0494\u0496\3\2\2\2\u0495\u0493\3\2\2\2\u0496"+
		"\u0497\7\u0222\2\2\u0497\u04b9\3\2\2\2\u0498\u0499\7\u0151\2\2\u0499\u049a"+
		"\7\u00d9\2\2\u049a\u049b\7\u0221\2\2\u049b\u04a0\5\u0300\u0181\2\u049c"+
		"\u049d\7\u0227\2\2\u049d\u049f\5\u0300\u0181\2\u049e\u049c\3\2\2\2\u049f"+
		"\u04a2\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\3\2"+
		"\2\2\u04a2\u04a0\3\2\2\2\u04a3\u04a4\7\u0222\2\2\u04a4\u04b9\3\2\2\2\u04a5"+
		"\u04a6\7\u00a5\2\2\u04a6\u04a7\7\u00d9\2\2\u04a7\u04a8\7\u0221\2\2\u04a8"+
		"\u04ad\5\u0300\u0181\2\u04a9\u04aa\7\u0227\2\2\u04aa\u04ac\5\u0300\u0181"+
		"\2\u04ab\u04a9\3\2\2\2\u04ac\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad\u04ae"+
		"\3\2\2\2\u04ae\u04b0\3\2\2\2\u04af\u04ad\3\2\2\2\u04b0\u04b1\7\u0222\2"+
		"\2\u04b1\u04b2\5\64\33\2\u04b2\u04b9\3\2\2\2\u04b3\u04b4\79\2\2\u04b4"+
		"\u04b5\7\u0221\2\2\u04b5\u04b6\5\u0232\u011a\2\u04b6\u04b7\7\u0222\2\2"+
		"\u04b7\u04b9\3\2\2\2\u04b8\u048c\3\2\2\2\u04b8\u0498\3\2\2\2\u04b8\u04a5"+
		"\3\2\2\2\u04b8\u04b3\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04bc\5\66\34\2"+
		"\u04bb\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\63\3\2\2\2\u04bd\u04c1"+
		"\7\u015f\2\2\u04be\u04bf\5\u02d2\u016a\2\u04bf\u04c0\7\u021a\2\2\u04c0"+
		"\u04c2\3\2\2\2\u04c1\u04be\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\3\2"+
		"\2\2\u04c3\u04cf\5\u032a\u0196\2\u04c4\u04c5\7\u0221\2\2\u04c5\u04ca\5"+
		"\u0300\u0181\2\u04c6\u04c7\7\u0227\2\2\u04c7\u04c9\5\u0300\u0181\2\u04c8"+
		"\u04c6\3\2\2\2\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3\2"+
		"\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd\u04ce\7\u0222\2\2\u04ce"+
		"\u04d0\3\2\2\2\u04cf\u04c4\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d8\3\2"+
		"\2\2\u04d1\u04d2\7\u012e\2\2\u04d2\u04d6\7t\2\2\u04d3\u04d7\7\62\2\2\u04d4"+
		"\u04d5\7\u0189\2\2\u04d5\u04d7\7\u0123\2\2\u04d6\u04d3\3\2\2\2\u04d6\u04d4"+
		"\3\2\2\2\u04d7\u04d9\3\2\2\2\u04d8\u04d1\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9"+
		"\65\3\2\2\2\u04da\u04dc\7\u0120\2\2\u04db\u04da\3\2\2\2\u04db\u04dc\3"+
		"\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04e9\7q\2\2\u04de\u04df\7\u00c4\2\2"+
		"\u04df\u04e9\t\3\2\2\u04e0\u04e9\7\u0163\2\2\u04e1\u04e9\7\u011e\2\2\u04e2"+
		"\u04e9\7\u0085\2\2\u04e3\u04e9\7y\2\2\u04e4\u04e9\7\u01d0\2\2\u04e5\u04e9"+
		"\7\u0121\2\2\u04e6\u04e9\5B\"\2\u04e7\u04e9\58\35\2\u04e8\u04db\3\2\2"+
		"\2\u04e8\u04de\3\2\2\2\u04e8\u04e0\3\2\2\2\u04e8\u04e1\3\2\2\2\u04e8\u04e2"+
		"\3\2\2\2\u04e8\u04e3\3\2\2\2\u04e8\u04e4\3\2\2\2\u04e8\u04e5\3\2\2\2\u04e8"+
		"\u04e6\3\2\2\2\u04e8\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04e8\3\2"+
		"\2\2\u04ea\u04eb\3\2\2\2\u04eb\67\3\2\2\2\u04ec\u04ed\7\u01cf\2\2\u04ed"+
		"\u04ee\7\u00bd\2\2\u04ee\u04ef\5:\36\2\u04ef9\3\2\2\2\u04f0\u04f2\5<\37"+
		"\2\u04f1\u04f0\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3\u04f1\3\2\2\2\u04f3\u04f4"+
		"\3\2\2\2\u04f4;\3\2\2\2\u04f5\u04f3\3\2\2\2\u04f6\u04ff\5\22\n\2\u04f7"+
		"\u04ff\5\30\r\2\u04f8\u04fb\7\u01ad\2\2\u04f9\u04fc\5\u032a\u0196\2\u04fa"+
		"\u04fc\7o\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fa\3\2\2\2\u04fc\u04ff\3\2"+
		"\2\2\u04fd\u04ff\5> \2\u04fe\u04f6\3\2\2\2\u04fe\u04f7\3\2\2\2\u04fe\u04f8"+
		"\3\2\2\2\u04fe\u04fd\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u04fe\3\2\2\2\u0500"+
		"\u0501\3\2\2\2\u0501=\3\2\2\2\u0502\u0504\7I\2\2\u0503\u0505\7\u01ab\2"+
		"\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508"+
		"\7\u01a1\2\2\u0507\u0509\5@!\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2"+
		"\u0509?\3\2\2\2\u050a\u052b\7\u00a2\2\2\u050b\u052c\7\u01ac\2\2\u050c"+
		"\u050e\7\t\2\2\u050d\u050f\7\u00be\2\2\u050e\u050d\3\2\2\2\u050e\u050f"+
		"\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0513\7A\2\2\u0511\u0512\7\u0193\2"+
		"\2\u0512\u0514\7\u021b\2\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514"+
		"\u052c\3\2\2\2\u0515\u0518\7A\2\2\u0516\u0517\7\u0193\2\2\u0517\u0519"+
		"\7\u021b\2\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u0522\3\2\2"+
		"\2\u051a\u051d\5\u0300\u0181\2\u051b\u051d\5\u02ca\u0166\2\u051c\u051a"+
		"\3\2\2\2\u051c\u051b\3\2\2\2\u051d\u0520\3\2\2\2\u051e\u051f\7\u0193\2"+
		"\2\u051f\u0521\7\u021b\2\2\u0520\u051e\3\2\2\2\u0520\u0521\3\2\2\2\u0521"+
		"\u0523\3\2\2\2\u0522\u051c\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0522\3\2"+
		"\2\2\u0524\u0525\3\2\2\2\u0525\u052c\3\2\2\2\u0526\u0528\7\t\2\2\u0527"+
		"\u0529\7\u00e9\2\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a"+
		"\3\2\2\2\u052a\u052c\7\u00bf\2\2\u052b\u050b\3\2\2\2\u052b\u050c\3\2\2"+
		"\2\u052b\u0515\3\2\2\2\u052b\u0526\3\2\2\2\u052c\u052e\3\2\2\2\u052d\u050a"+
		"\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u052d\3\2\2\2\u052f\u0530\3\2\2\2\u0530"+
		"A\3\2\2\2\u0531\u0532\7\u008e\2\2\u0532\u0536\7\u00d0\2\2\u0533\u0534"+
		"\5\u02d2\u016a\2\u0534\u0535\7\u021a\2\2\u0535\u0537\3\2\2\2\u0536\u0533"+
		"\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539\5\u0302\u0182"+
		"\2\u0539C\3\2\2\2\u053a\u053d\7X\2\2\u053b\u053c\7\u0132\2\2\u053c\u053e"+
		"\7\u0165\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0543\3\2\2"+
		"\2\u053f\u0541\7\u0112\2\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541"+
		"\u0542\3\2\2\2\u0542\u0544\7\u00a4\2\2\u0543\u0540\3\2\2\2\u0543\u0544"+
		"\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0549\7\u01da\2\2\u0546\u0547\5\u02d2"+
		"\u016a\2\u0547\u0548\7\u021a\2\2\u0548\u054a\3\2\2\2\u0549\u0546\3\2\2"+
		"\2\u0549\u054a\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\5\u0302\u0182\2"+
		"\u054c\u054d\7\u0221\2\2\u054d\u0552\5\u032c\u0197\2\u054e\u054f\7\u0227"+
		"\2\2\u054f\u0551\5\u032c\u0197\2\u0550\u054e\3\2\2\2\u0551\u0554\3\2\2"+
		"\2\u0552\u0550\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0555\3\2\2\2\u0554\u0552"+
		"\3\2\2\2\u0555\u0556\7\u0222\2\2\u0556\u0557\7\20\2\2\u0557\u0558\5\u0182"+
		"\u00c2\2\u0558\u0559\7\u022d\2\2\u0559E\3\2\2\2\u055a\u055c\7X\2\2\u055b"+
		"\u055d\7\u01c6\2\2\u055c\u055b\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e"+
		"\3\2\2\2\u055e\u0562\7\u00bd\2\2\u055f\u0560\5\u02d2\u016a\2\u0560\u0561"+
		"\7\u021a\2\2\u0561\u0563\3\2\2\2\u0562\u055f\3\2\2\2\u0562\u0563\3\2\2"+
		"\2\u0563\u0564\3\2\2\2\u0564\u0565\5\u032c\u0197\2\u0565\u0566\7\u012e"+
		"\2\2\u0566\u0567\5H%\2\u0567\u0568\7\u022d\2\2\u0568G\3\2\2\2\u0569\u056a"+
		"\5\u02d2\u016a\2\u056a\u056b\7\u021a\2\2\u056b\u056d\3\2\2\2\u056c\u0569"+
		"\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u056f\5\u0302\u0182"+
		"\2\u056f\u0570\7\u0221\2\2\u0570\u0575\5J&\2\u0571\u0572\7\u0227\2\2\u0572"+
		"\u0574\5J&\2\u0573\u0571\3\2\2\2\u0574\u0577\3\2\2\2\u0575\u0573\3\2\2"+
		"\2\u0575\u0576\3\2\2\2\u0576\u0578\3\2\2\2\u0577\u0575\3\2\2\2\u0578\u0579"+
		"\7\u0222\2\2\u0579\u057a\5:\36\2\u057aI\3\2\2\2\u057b\u057e\5\u032c\u0197"+
		"\2\u057c\u057e\5\u0268\u0135\2\u057d\u057b\3\2\2\2\u057d\u057c\3\2\2\2"+
		"\u057eK\3\2\2\2\u057f\u0580\7~\2\2\u0580\u0581\7\u00aa\2\2\u0581\u0582"+
		"\5\u02ee\u0178\2\u0582\u0583\7\u022d\2\2\u0583M\3\2\2\2\u0584\u0585\7"+
		"\n\2\2\u0585\u0586\7\u00aa\2\2\u0586\u0587\5\u02ee\u0178\2\u0587\u0589"+
		"\7F\2\2\u0588\u058a\7h\2\2\u0589\u0588\3\2\2\2\u0589\u058a\3\2\2\2\u058a"+
		"\u058e\3\2\2\2\u058b\u058d\5\u00f2z\2\u058c\u058b\3\2\2\2\u058d\u0590"+
		"\3\2\2\2\u058e\u058c\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0593\3\2\2\2\u0590"+
		"\u058e\3\2\2\2\u0591\u0592\7\u016c\2\2\u0592\u0594\7\u018b\2\2\u0593\u0591"+
		"\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596\7\u022d\2"+
		"\2\u0596O\3\2\2\2\u0597\u059a\7X\2\2\u0598\u0599\7\u0132\2\2\u0599\u059b"+
		"\7\u0165\2\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\3\2\2"+
		"\2\u059c\u0597\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059f"+
		"\7\u00aa\2\2\u059f\u05ab\5\u02ee\u0178\2\u05a0\u05a1\7\u0221\2\2\u05a1"+
		"\u05a6\5\u00fe\u0080\2\u05a2\u05a3\7\u0227\2\2\u05a3\u05a5\5\u00fe\u0080"+
		"\2\u05a4\u05a2\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7"+
		"\3\2\2\2\u05a7\u05a9\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05aa\7\u0222\2"+
		"\2\u05aa\u05ac\3\2\2\2\u05ab\u05a0\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad"+
		"\3\2\2\2\u05ad\u05ae\7\u016a\2\2\u05ae\u05b5\5\u0312\u018a\2\u05af\u05b4"+
		"\5\u00f0y\2\u05b0\u05b4\5R*\2\u05b1\u05b4\5V,\2\u05b2\u05b4\7w\2\2\u05b3"+
		"\u05af\3\2\2\2\u05b3\u05b0\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b2\3\2"+
		"\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6"+
		"\u05cc\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8\u05ba\7\u0147\2\2\u05b9\u05b8"+
		"\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05c7\t\16\2\2"+
		"\u05bc\u05be\7k\2\2\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c2"+
		"\3\2\2\2\u05bf\u05c1\5\u0102\u0082\2\u05c0\u05bf\3\2\2\2\u05c1\u05c4\3"+
		"\2\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5\3\2\2\2\u05c4"+
		"\u05c2\3\2\2\2\u05c5\u05c8\5\u014c\u00a7\2\u05c6\u05c8\5\u00f4{\2\u05c7"+
		"\u05bd\3\2\2\2\u05c7\u05c6\3\2\2\2\u05c8\u05cd\3\2\2\2\u05c9\u05ca\t\17"+
		"\2\2\u05ca\u05cb\7\u01cf\2\2\u05cb\u05cd\5\u02d8\u016d\2\u05cc\u05b9\3"+
		"\2\2\2\u05cc\u05c9\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf\7\u022d\2\2"+
		"\u05cfQ\3\2\2\2\u05d0\u05d2\7\u013c\2\2\u05d1\u05d3\5T+\2\u05d2\u05d1"+
		"\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3S\3\2\2\2\u05d4\u05d5\7\u0221\2\2\u05d5"+
		"\u05d6\7\u013f\2\2\u05d6\u05d7\5\u0236\u011c\2\u05d7\u05e5\7,\2\2\u05d8"+
		"\u05e6\7\r\2\2\u05d9\u05da\t\20\2\2\u05da\u05db\7\u0221\2\2\u05db\u05e0"+
		"\5\u0300\u0181\2\u05dc\u05dd\7\u0227\2\2\u05dd\u05df\5\u0300\u0181\2\u05de"+
		"\u05dc\3\2\2\2\u05df\u05e2\3\2\2\2\u05e0\u05de\3\2\2\2\u05e0\u05e1\3\2"+
		"\2\2\u05e1\u05e3\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e3\u05e4\7\u0222\2\2\u05e4"+
		"\u05e6\3\2\2\2\u05e5\u05d8\3\2\2\2\u05e5\u05d9\3\2\2\2\u05e6\u05e8\3\2"+
		"\2\2\u05e7\u05e9\5Z.\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea"+
		"\3\2\2\2\u05ea\u05eb\7\u0222\2\2\u05ebU\3\2\2\2\u05ec\u05ee\7\u0169\2"+
		"\2\u05ed\u05ef\5X-\2\u05ee\u05ed\3\2\2\2\u05ee\u05ef\3\2\2\2\u05efW\3"+
		"\2\2\2\u05f0\u05f1\7\u0162\2\2\u05f1\u05f2\7\u0221\2\2\u05f2\u05f7\5\u0302"+
		"\u0182\2\u05f3\u05f4\7\u0227\2\2\u05f4\u05f6\5\u0302\u0182\2\u05f5\u05f3"+
		"\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8"+
		"\u05fa\3\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fb\7\u0222\2\2\u05fbY\3\2"+
		"\2\2\u05fc\u05fd\t\21\2\2\u05fd\u05fe\5\u0236\u011c\2\u05fe\u05ff\7,\2"+
		"\2\u05ff\u0600\7\u0221\2\2\u0600\u0605\5\u0300\u0181\2\u0601\u0602\7\u0227"+
		"\2\2\u0602\u0604\5\u0300\u0181\2\u0603\u0601\3\2\2\2\u0604\u0607\3\2\2"+
		"\2\u0605\u0603\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607\u0605"+
		"\3\2\2\2\u0608\u0609\7\u0222\2\2\u0609[\3\2\2\2\u060a\u060b\7~\2\2\u060b"+
		"\u060d\7\u013b\2\2\u060c\u060e\7&\2\2\u060d\u060c\3\2\2\2\u060d\u060e"+
		"\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0610\5\u02d6\u016c\2\u0610\u0611\7"+
		"\u022d\2\2\u0611]\3\2\2\2\u0612\u0613\7\n\2\2\u0613\u0614\7\u013b\2\2"+
		"\u0614\u0615\5\u02d6\u016c\2\u0615\u0617\7F\2\2\u0616\u0618\7h\2\2\u0617"+
		"\u0616\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061a\3\2\2\2\u0619\u061b\t\22"+
		"\2\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061f\3\2\2\2\u061c"+
		"\u061e\5\u00f2z\2\u061d\u061c\3\2\2\2\u061e\u0621\3\2\2\2\u061f\u061d"+
		"\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0624\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0621\u061f\3\2\2\2\u0622\u0623\7\u016c\2\2\u0623\u0625\7\u018b"+
		"\2\2\u0624\u0622\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2\2\u0626"+
		"\u0627\7\u022d\2\2\u0627_\3\2\2\2\u0628\u062b\7X\2\2\u0629\u062a\7\u0132"+
		"\2\2\u062a\u062c\7\u0165\2\2\u062b\u0629\3\2\2\2\u062b\u062c\3\2\2\2\u062c"+
		"\u062d\3\2\2\2\u062d\u0630\7\u013b\2\2\u062e\u0631\5d\63\2\u062f\u0631"+
		"\5b\62\2\u0630\u062e\3\2\2\2\u0630\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631"+
		"\u0632\3\2\2\2\u0632\u0633\7\u022d\2\2\u0633a\3\2\2\2\u0634\u0635\7&\2"+
		"\2\u0635\u0636\5\u02d6\u016c\2\u0636\u063a\t\16\2\2\u0637\u0639\5l\67"+
		"\2\u0638\u0637\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638\3\2\2\2\u063a\u063b"+
		"\3\2\2\2\u063b\u0643\3\2\2\2\u063c\u063a\3\2\2\2\u063d\u063e\7\36\2\2"+
		"\u063e\u0644\5\u0122\u0092\2\u063f\u0641\7\u0087\2\2\u0640\u0642\5\u02d6"+
		"\u016c\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0644\3\2\2\2\u0643"+
		"\u063d\3\2\2\2\u0643\u063f\3\2\2\2\u0644c\3\2\2\2\u0645\u0647\5\u02d6"+
		"\u016c\2\u0646\u0648\5\u00f0y\2\u0647\u0646\3\2\2\2\u0647\u0648\3\2\2"+
		"\2\u0648\u0649\3\2\2\2\u0649\u064d\t\16\2\2\u064a\u064c\5f\64\2\u064b"+
		"\u064a\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2"+
		"\2\2\u064e\u0650\3\2\2\2\u064f\u064d\3\2\2\2\u0650\u0652\7\u0087\2\2\u0651"+
		"\u0653\5\u02d6\u016c\2\u0652\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653e"+
		"\3\2\2\2\u0654\u065d\5\u0104\u0083\2\u0655\u065d\5\u0106\u0084\2\u0656"+
		"\u065d\5\u0108\u0085\2\u0657\u065d\5\u010c\u0087\2\u0658\u065d\5\u0110"+
		"\u0089\2\u0659\u065d\5\u0118\u008d\2\u065a\u065d\5h\65\2\u065b\u065d\5"+
		"j\66\2\u065c\u0654\3\2\2\2\u065c\u0655\3\2\2\2\u065c\u0656\3\2\2\2\u065c"+
		"\u0657\3\2\2\2\u065c\u0658\3\2\2\2\u065c\u0659\3\2\2\2\u065c\u065a\3\2"+
		"\2\2\u065c\u065b\3\2\2\2\u065dg\3\2\2\2\u065e\u065f\7\u0153\2\2\u065f"+
		"\u066b\5\u02f0\u0179\2\u0660\u0661\7\u0221\2\2\u0661\u0666\5\u00fe\u0080"+
		"\2\u0662\u0663\7\u0227\2\2\u0663\u0665\5\u00fe\u0080\2\u0664\u0662\3\2"+
		"\2\2\u0665\u0668\3\2\2\2\u0666\u0664\3\2\2\2\u0666\u0667\3\2\2\2\u0667"+
		"\u0669\3\2\2\2\u0668\u0666\3\2\2\2\u0669\u066a\7\u0222\2\2\u066a\u066c"+
		"\3\2\2\2\u066b\u0660\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\3\2\2\2\u066d"+
		"\u066e\7\u022d\2\2\u066ei\3\2\2\2\u066f\u0670\7\u00aa\2\2\u0670\u067c"+
		"\5\u02ee\u0178\2\u0671\u0672\7\u0221\2\2\u0672\u0677\5\u00fe\u0080\2\u0673"+
		"\u0674\7\u0227\2\2\u0674\u0676\5\u00fe\u0080\2\u0675\u0673\3\2\2\2\u0676"+
		"\u0679\3\2\2\2\u0677\u0675\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3\2"+
		"\2\2\u0679\u0677\3\2\2\2\u067a\u067b\7\u0222\2\2\u067b\u067d\3\2\2\2\u067c"+
		"\u0671\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f\7\u016a"+
		"\2\2\u067f\u0680\5\u0312\u018a\2\u0680\u0681\7\u022d\2\2\u0681k\3\2\2"+
		"\2\u0682\u068d\5\u0104\u0083\2\u0683\u068d\5\u0106\u0084\2\u0684\u068d"+
		"\5\u0108\u0085\2\u0685\u068d\5\u010c\u0087\2\u0686\u068d\5\u0110\u0089"+
		"\2\u0687\u068d\5\u0118\u008d\2\u0688\u068d\5r:\2\u0689\u068d\5P)\2\u068a"+
		"\u068d\5h\65\2\u068b\u068d\5j\66\2\u068c\u0682\3\2\2\2\u068c\u0683\3\2"+
		"\2\2\u068c\u0684\3\2\2\2\u068c\u0685\3\2\2\2\u068c\u0686\3\2\2\2\u068c"+
		"\u0687\3\2\2\2\u068c\u0688\3\2\2\2\u068c\u0689\3\2\2\2\u068c\u068a\3\2"+
		"\2\2\u068c\u068b\3\2\2\2\u068dm\3\2\2\2\u068e\u068f\7~\2\2\u068f\u0690"+
		"\7\u0153\2\2\u0690\u0691\5\u02f0\u0179\2\u0691\u0692\7\u022d\2\2\u0692"+
		"o\3\2\2\2\u0693\u0694\7\n\2\2\u0694\u0695\7\u0153\2\2\u0695\u0696\5\u02f0"+
		"\u0179\2\u0696\u0698\7F\2\2\u0697\u0699\7h\2\2\u0698\u0697\3\2\2\2\u0698"+
		"\u0699\3\2\2\2\u0699\u069d\3\2\2\2\u069a\u069c\5\u00f2z\2\u069b\u069a"+
		"\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069b\3\2\2\2\u069d\u069e\3\2\2\2\u069e"+
		"\u06a2\3\2\2\2\u069f\u069d\3\2\2\2\u06a0\u06a1\7\u016c\2\2\u06a1\u06a3"+
		"\7\u018b\2\2\u06a2\u06a0\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2"+
		"\2\u06a4\u06a5\7\u022d\2\2\u06a5q\3\2\2\2\u06a6\u06a9\7X\2\2\u06a7\u06a8"+
		"\7\u0132\2\2\u06a8\u06aa\7\u0165\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3"+
		"\2\2\2\u06aa\u06ac\3\2\2\2\u06ab\u06a6\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac"+
		"\u06ad\3\2\2\2\u06ad\u06ae\7\u0153\2\2\u06ae\u06ba\5\u02f0\u0179\2\u06af"+
		"\u06b0\7\u0221\2\2\u06b0\u06b5\5\u00fe\u0080\2\u06b1\u06b2\7\u0227\2\2"+
		"\u06b2\u06b4\5\u00fe\u0080\2\u06b3\u06b1\3\2\2\2\u06b4\u06b7\3\2\2\2\u06b5"+
		"\u06b3\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b8\3\2\2\2\u06b7\u06b5\3\2"+
		"\2\2\u06b8\u06b9\7\u0222\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06af\3\2\2\2\u06ba"+
		"\u06bb\3\2\2\2\u06bb\u06bd\3\2\2\2\u06bc\u06be\5\u00f0y\2\u06bd\u06bc"+
		"\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06cc\t\16\2\2"+
		"\u06c0\u06c2\7k\2\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c6"+
		"\3\2\2\2\u06c3\u06c5\5\u0102\u0082\2\u06c4\u06c3\3\2\2\2\u06c5\u06c8\3"+
		"\2\2\2\u06c6\u06c4\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c9\3\2\2\2\u06c8"+
		"\u06c6\3\2\2\2\u06c9\u06cd\5\u014c\u00a7\2\u06ca\u06cd\5\u00f4{\2\u06cb"+
		"\u06cd\7\u0095\2\2\u06cc\u06c1\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cb"+
		"\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\7\u022d\2\2\u06cfs\3\2\2\2\u06d0"+
		"\u06d1\7~\2\2\u06d1\u06d2\7\u01be\2\2\u06d2\u06d3\5\u02f2\u017a\2\u06d3"+
		"\u06d4\7\u022d\2\2\u06d4u\3\2\2\2\u06d5\u06d6\7\n\2\2\u06d6\u06d7\7\u01be"+
		"\2\2\u06d7\u06ea\5\u02f2\u017a\2\u06d8\u06eb\t\13\2\2\u06d9\u06da\7\u0164"+
		"\2\2\u06da\u06db\7\u01b9\2\2\u06db\u06eb\5\u02f2\u017a\2\u06dc\u06de\7"+
		"F\2\2\u06dd\u06df\7h\2\2\u06de\u06dd\3\2\2\2\u06de\u06df\3\2\2\2\u06df"+
		"\u06e3\3\2\2\2\u06e0\u06e2\5\u00f2z\2\u06e1\u06e0\3\2\2\2\u06e2\u06e5"+
		"\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e8\3\2\2\2\u06e5"+
		"\u06e3\3\2\2\2\u06e6\u06e7\7\u016c\2\2\u06e7\u06e9\7\u018b\2\2\u06e8\u06e6"+
		"\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb\3\2\2\2\u06ea\u06d8\3\2\2\2\u06ea"+
		"\u06d9\3\2\2\2\u06ea\u06dc\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\7\u022d"+
		"\2\2\u06edw\3\2\2\2\u06ee\u06f1\7X\2\2\u06ef\u06f0\7\u0132\2\2\u06f0\u06f2"+
		"\7\u0165\2\2\u06f1\u06ef\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\3\2\2"+
		"\2\u06f3\u06f4\7\u01be\2\2\u06f4\u06f8\5\u02f2\u017a\2\u06f5\u06f9\5~"+
		"@\2\u06f6\u06f9\5\u0082B\2\u06f7\u06f9\5\u0084C\2\u06f8\u06f5\3\2\2\2"+
		"\u06f8\u06f6\3\2\2\2\u06f8\u06f7\3\2\2\2\u06f9\u06fb\3\2\2\2\u06fa\u06fc"+
		"\5z>\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fe\3\2\2\2\u06fd"+
		"\u06ff\t\13\2\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0701\3"+
		"\2\2\2\u0700\u0702\5|?\2\u0701\u0700\3\2\2\2\u0701\u0702\3\2\2\2\u0702"+
		"\u0703\3\2\2\2\u0703\u0704\5\u0086D\2\u0704\u0705\7\u022d\2\2\u0705y\3"+
		"\2\2\2\u0706\u0707\7\u00a1\2\2\u0707\u070c\5\u02f2\u017a\2\u0708\u0709"+
		"\7\u0227\2\2\u0709\u070b\5\u02f2\u017a\2\u070a\u0708\3\2\2\2\u070b\u070e"+
		"\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070d\3\2\2\2\u070d{\3\2\2\2\u070e"+
		"\u070c\3\2\2\2\u070f\u0710\7\u01de\2\2\u0710\u0711\7\u0221\2\2\u0711\u0712"+
		"\5\u0232\u011a\2\u0712\u0713\7\u0222\2\2\u0713}\3\2\2\2\u0714\u0719\7"+
		"\35\2\2\u0715\u0719\7\6\2\2\u0716\u0717\7\u00cb\2\2\u0717\u0719\7\u0129"+
		"\2\2\u0718\u0714\3\2\2\2\u0718\u0715\3\2\2\2\u0718\u0716\3\2\2\2\u0719"+
		"\u071a\3\2\2\2\u071a\u071c\5\u0090I\2\u071b\u071d\5\u0096L\2\u071c\u071b"+
		"\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071f\3\2\2\2\u071e\u0720\5\u0080A"+
		"\2\u071f\u071e\3\2\2\2\u071f\u0720\3\2\2\2\u0720\177\3\2\2\2\u0721\u0722"+
		"\7\u00a2\2\2\u0722\u0723\7\u0080\2\2\u0723\u0724\7\u0172\2\2\u0724\u0081"+
		"\3\2\2\2\u0725\u0726\7\u00a2\2\2\u0726\u0728\5\u0090I\2\u0727\u0729\5"+
		"\u0096L\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u0083\3\2\2\2"+
		"\u072a\u072b\t\23\2\2\u072b\u0730\5\u008eH\2\u072c\u072d\7\u0132\2\2\u072d"+
		"\u072f\5\u008eH\2\u072e\u072c\3\2\2\2\u072f\u0732\3\2\2\2\u0730\u072e"+
		"\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0733\3\2\2\2\u0732\u0730\3\2\2\2\u0733"+
		"\u073b\7\u012e\2\2\u0734\u073c\7b\2\2\u0735\u0736\5\u02d2\u016a\2\u0736"+
		"\u0737\7\u021a\2\2\u0737\u0739\3\2\2\2\u0738\u0735\3\2\2\2\u0738\u0739"+
		"\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c\7\u0179\2\2\u073b\u0734\3\2\2"+
		"\2\u073b\u0738\3\2\2\2\u073c\u0085\3\2\2\2\u073d\u073e\7G\2\2\u073e\u0743"+
		"\7\u01be\2\2\u073f\u0740\7\60\2\2\u0740\u0743\5\u032a\u0196\2\u0741\u0743"+
		"\5\u0152\u00aa\2\u0742\u073d\3\2\2\2\u0742\u073f\3\2\2\2\u0742\u0741\3"+
		"\2\2\2\u0743\u0087\3\2\2\2\u0744\u0746\5\u02d4\u016b\2\u0745\u0747\5\u0308"+
		"\u0185\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0089\3\2\2\2\u0748"+
		"\u0749\7G\2\2\u0749\u074d\7\u01be\2\2\u074a\u074c\5\u0102\u0082\2\u074b"+
		"\u074a\3\2\2\2\u074c\u074f\3\2\2\2\u074d\u074b\3\2\2\2\u074d\u074e\3\2"+
		"\2\2\u074e\u0751\3\2\2\2\u074f\u074d\3\2\2\2\u0750\u0752\5\u008cG\2\u0751"+
		"\u0750\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0751\3\2\2\2\u0753\u0754\3\2"+
		"\2\2\u0754\u0755\3\2\2\2\u0755\u0756\7\u0087\2\2\u0756\u0757\5\u02f2\u017a"+
		"\2\u0757\u008b\3\2\2\2\u0758\u0759\7\35\2\2\u0759\u075a\7\u019e\2\2\u075a"+
		"\u075b\7\u00d2\2\2\u075b\u075c\5\u0152\u00aa\2\u075c\u075d\7\35\2\2\u075d"+
		"\u075e\7\u019e\2\2\u075e\u075f\7\u022d\2\2\u075f\u077d\3\2\2\2\u0760\u0761"+
		"\7\35\2\2\u0761\u0762\7\u0080\2\2\u0762\u0763\7\u0172\2\2\u0763\u0764"+
		"\7\u00d2\2\2\u0764\u0765\5\u0152\u00aa\2\u0765\u0766\7\35\2\2\u0766\u0767"+
		"\7\u0080\2\2\u0767\u0768\7\u0172\2\2\u0768\u0769\7\u022d\2\2\u0769\u077d"+
		"\3\2\2\2\u076a\u076b\7\6\2\2\u076b\u076c\7\u019e\2\2\u076c\u076d\7\u00d2"+
		"\2\2\u076d\u076e\5\u0152\u00aa\2\u076e\u076f\7\6\2\2\u076f\u0770\7\u019e"+
		"\2\2\u0770\u0771\7\u022d\2\2\u0771\u077d\3\2\2\2\u0772\u0773\7\6\2\2\u0773"+
		"\u0774\7\u0080\2\2\u0774\u0775\7\u0172\2\2\u0775\u0776\7\u00d2\2\2\u0776"+
		"\u0777\5\u0152\u00aa\2\u0777\u0778\7\6\2\2\u0778\u0779\7\u0080\2\2\u0779"+
		"\u077a\7\u0172\2\2\u077a\u077b\7\u022d\2\2\u077b\u077d\3\2\2\2\u077c\u0758"+
		"\3\2\2\2\u077c\u0760\3\2\2\2\u077c\u076a\3\2\2\2\u077c\u0772\3\2\2\2\u077d"+
		"\u008d\3\2\2\2\u077e\u0799\7\n\2\2\u077f\u0799\7\13\2\2\u0780\u0781\7"+
		"\22\2\2\u0781\u0799\7\u01a1\2\2\u0782\u0799\7\25\2\2\u0783\u0799\7B\2"+
		"\2\u0784\u0799\7X\2\2\u0785\u0786\7z\2\2\u0786\u0799\7\u01a1\2\2\u0787"+
		"\u0799\7~\2\2\u0788\u0799\7\u00ac\2\2\u0789\u0799\7\u0113\2\2\u078a\u0799"+
		"\7\u0164\2\2\u078b\u0799\7\u016e\2\2\u078c\u0799\7\u01c1\2\2\u078d\u0799"+
		"\7g\2\2\u078e\u0799\7\u019d\2\2\u078f\u0799\7\u018e\2\2\u0790\u0799\7"+
		"e\2\2\u0791\u0799\7\u00ef\2\2\u0792\u0799\7\u00ee\2\2\u0793\u0799\7\u0187"+
		"\2\2\u0794\u0799\7\u01aa\2\2\u0795\u0799\7b\2\2\u0796\u0799\7\u0179\2"+
		"\2\u0797\u0799\7\u00a1\2\2\u0798\u077e\3\2\2\2\u0798\u077f\3\2\2\2\u0798"+
		"\u0780\3\2\2\2\u0798\u0782\3\2\2\2\u0798\u0783\3\2\2\2\u0798\u0784\3\2"+
		"\2\2\u0798\u0785\3\2\2\2\u0798\u0787\3\2\2\2\u0798\u0788\3\2\2\2\u0798"+
		"\u0789\3\2\2\2\u0798\u078a\3\2\2\2\u0798\u078b\3\2\2\2\u0798\u078c\3\2"+
		"\2\2\u0798\u078d\3\2\2\2\u0798\u078e\3\2\2\2\u0798\u078f\3\2\2\2\u0798"+
		"\u0790\3\2\2\2\u0798\u0791\3\2\2\2\u0798\u0792\3\2\2\2\u0798\u0793\3\2"+
		"\2\2\u0798\u0794\3\2\2\2\u0798\u0795\3\2\2\2\u0798\u0796\3\2\2\2\u0798"+
		"\u0797\3\2\2\2\u0799\u008f\3\2\2\2\u079a\u079f\5\u0092J\2\u079b\u079c"+
		"\7\u0132\2\2\u079c\u079e\5\u0092J\2\u079d\u079b\3\2\2\2\u079e\u07a1\3"+
		"\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a2\3\2\2\2\u07a1"+
		"\u079f\3\2\2\2\u07a2\u07a4\7\u012e\2\2\u07a3\u07a5\5\u0094K\2\u07a4\u07a3"+
		"\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a7\5\u0302\u0182"+
		"\2\u07a7\u0091\3\2\2\2\u07a8\u07b2\t\24\2\2\u07a9\u07aa\7\u0129\2\2\u07aa"+
		"\u07af\5\u0300\u0181\2\u07ab\u07ac\7\u0227\2\2\u07ac\u07ae\5\u0300\u0181"+
		"\2\u07ad\u07ab\3\2\2\2\u07ae\u07b1\3\2\2\2\u07af\u07ad\3\2\2\2\u07af\u07b0"+
		"\3\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2\2\u07b2\u07a9\3\2\2\2\u07b2"+
		"\u07b3\3\2\2\2\u07b3\u0093\3\2\2\2\u07b4\u07b5\7\u010f\2\2\u07b5\u07b6"+
		"\7\u01ac\2\2\u07b6\u07b7\5\u0302\u0182\2\u07b7\u07b8\7\u0129\2\2\u07b8"+
		"\u0095\3\2\2\2\u07b9\u07bb\7\u0160\2\2\u07ba\u07bc\5\u0098M\2\u07bb\u07ba"+
		"\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bb\3\2\2\2\u07bd\u07be\3\2\2\2\u07be"+
		"\u0097\3\2\2\2\u07bf\u07c0\t\25\2\2\u07c0\u07c1\5\u02ba\u015e\2\u07c1"+
		"\u0099\3\2\2\2\u07c2\u07c3\7~\2\2\u07c3\u07c5\7\u01c2\2\2\u07c4\u07c6"+
		"\7&\2\2\u07c5\u07c4\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7"+
		"\u07c9\5\u02e8\u0175\2\u07c8\u07ca\t\26\2\2\u07c9\u07c8\3\2\2\2\u07c9"+
		"\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\7\u022d\2\2\u07cc\u009b"+
		"\3\2\2\2\u07cd\u07ce\7\n\2\2\u07ce\u07cf\7\u01c2\2\2\u07cf\u07d5\5\u02e8"+
		"\u0175\2\u07d0\u07d6\5\u009eP\2\u07d1\u07d6\5\u00a0Q\2\u07d2\u07d6\5\u00a2"+
		"R\2\u07d3\u07d6\5\u00aaV\2\u07d4\u07d6\5\u00ccg\2\u07d5\u07d0\3\2\2\2"+
		"\u07d5\u07d1\3\2\2\2\u07d5\u07d2\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5\u07d4"+
		"\3\2\2\2\u07d6\u07d8\3\2\2\2\u07d7\u07d9\5\u00acW\2\u07d8\u07d7\3\2\2"+
		"\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\7\u022d\2\2\u07db"+
		"\u009d\3\2\2\2\u07dc\u07de\7F\2\2\u07dd\u07df\7h\2\2\u07de\u07dd\3\2\2"+
		"\2\u07de\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0\u07e2\t\27\2\2\u07e1"+
		"\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e6\3\2\2\2\u07e3\u07e5\5\u00f2"+
		"z\2\u07e4\u07e3\3\2\2\2\u07e5\u07e8\3\2\2\2\u07e6\u07e4\3\2\2\2\u07e6"+
		"\u07e7\3\2\2\2\u07e7\u07eb\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e9\u07ea\7\u016c"+
		"\2\2\u07ea\u07ec\7\u018b\2\2\u07eb\u07e9\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec"+
		"\u009f\3\2\2\2\u07ed\u07ef\7\u0165\2\2\u07ee\u07f0\5\u00f0y\2\u07ef\u07ee"+
		"\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\7\20\2\2"+
		"\u07f2\u07f3\7\u0128\2\2\u07f3\u07f4\7\u0221\2\2\u07f4\u07f9\5\u00ceh"+
		"\2\u07f5\u07f6\7\u0227\2\2\u07f6\u07f8\5\u00ceh\2\u07f7\u07f5\3\2\2\2"+
		"\u07f8\u07fb\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fc"+
		"\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fc\u07fd\7\u0222\2\2\u07fd\u00a1\3\2\2"+
		"\2\u07fe\u0803\5\u00a4S\2\u07ff\u0800\7\u0227\2\2\u0800\u0802\5\u00a4"+
		"S\2\u0801\u07ff\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0801\3\2\2\2\u0803"+
		"\u0804\3\2\2\2\u0804\u00a3\3\2\2\2\u0805\u0803\3\2\2\2\u0806\u0809\t\30"+
		"\2\2\u0807\u080a\5\u00dep\2\u0808\u080a\5\u00d6l\2\u0809\u0807\3\2\2\2"+
		"\u0809\u0808\3\2\2\2\u080a\u00a5\3\2\2\2\u080b\u080c\t\31\2\2\u080c\u0819"+
		"\7\24\2\2\u080d\u081a\5\u00a8U\2\u080e\u080f\7\u0221\2\2\u080f\u0814\5"+
		"\u00a8U\2\u0810\u0811\7\u0227\2\2\u0811\u0813\5\u00a8U\2\u0812\u0810\3"+
		"\2\2\2\u0813\u0816\3\2\2\2\u0814\u0812\3\2\2\2\u0814\u0815\3\2\2\2\u0815"+
		"\u0817\3\2\2\2\u0816\u0814\3\2\2\2\u0817\u0818\7\u0222\2\2\u0818\u081a"+
		"\3\2\2\2\u0819\u080d\3\2\2\2\u0819\u080e\3\2\2\2\u081a\u00a7\3\2\2\2\u081b"+
		"\u081d\5\u02ca\u0166\2\u081c\u081e\5\u0312\u018a\2\u081d\u081c\3\2\2\2"+
		"\u081d\u081e\3\2\2\2\u081e\u00a9\3\2\2\2\u081f\u0825\7\u0104\2\2\u0820"+
		"\u0821\7\u00e7\2\2\u0821\u0826\5\u0236\u011c\2\u0822\u0823\7\u0081\2\2"+
		"\u0823\u0824\7\u01c2\2\2\u0824\u0826\5\u0312\u018a\2\u0825\u0820\3\2\2"+
		"\2\u0825\u0822\3\2\2\2\u0826\u00ab\3\2\2\2\u0827\u0838\7\u00d1\2\2\u0828"+
		"\u0832\7\62\2\2\u0829\u082a\7S\2\2\u082a\u082b\7\u01b9\2\2\u082b\u0833"+
		"\7\u01a7\2\2\u082c\u082e\7\u0120\2\2\u082d\u082c\3\2\2\2\u082d\u082e\3"+
		"\2\2\2\u082e\u082f\3\2\2\2\u082f\u0830\7\u00ba\2\2\u0830\u0831\7\u01ac"+
		"\2\2\u0831\u0833\7a\2\2\u0832\u0829\3\2\2\2\u0832\u082d\3\2\2\2\u0832"+
		"\u0833\3\2\2\2\u0833\u0835\3\2\2\2\u0834\u0836\5\u00aeX\2\u0835\u0834"+
		"\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0838\3\2\2\2\u0837\u0827\3\2\2\2\u0837"+
		"\u0828\3\2\2\2\u0838\u00ad\3\2\2\2\u0839\u083b\7\u00a4\2\2\u083a\u0839"+
		"\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083d\7\u008e\2"+
		"\2\u083d\u083e\7\u00d0\2\2\u083e\u083f\5\u0302\u0182\2\u083f\u00af\3\2"+
		"\2\2\u0840\u0843\7X\2\2\u0841\u0842\7\u0132\2\2\u0842\u0844\7\u0165\2"+
		"\2\u0843\u0841\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0848"+
		"\7\u01c2\2\2\u0846\u0849\5\u00b2Z\2\u0847\u0849\5\u00be`\2\u0848\u0846"+
		"\3\2\2\2\u0848\u0847\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084b\7\u022d\2"+
		"\2\u084b\u00b1\3\2\2\2\u084c\u084f\5\u02e8\u0175\2\u084d\u084e\7\u012b"+
		"\2\2\u084e\u0850\7\u021d\2\2\u084f\u084d\3\2\2\2\u084f\u0850\3\2\2\2\u0850"+
		"\u0852\3\2\2\2\u0851\u0853\5\u00b4[\2\u0852\u0851\3\2\2\2\u0852\u0853"+
		"\3\2\2\2\u0853\u00b3\3\2\2\2\u0854\u0856\5\u00f0y\2\u0855\u0854\3\2\2"+
		"\2\u0855\u0856\3\2\2\2\u0856\u0859\3\2\2\2\u0857\u085a\5\u00b6\\\2\u0858"+
		"\u085a\5\u00b8]\2\u0859\u0857\3\2\2\2\u0859\u0858\3\2\2\2\u085a\u085c"+
		"\3\2\2\2\u085b\u085d\5\u00bc_\2\u085c\u085b\3\2\2\2\u085c\u085d\3\2\2"+
		"\2\u085d\u0869\3\2\2\2\u085e\u085f\7\u0221\2\2\u085f\u0864\5\u00ceh\2"+
		"\u0860\u0861\7\u0227\2\2\u0861\u0863\5\u00ceh\2\u0862\u0860\3\2\2\2\u0863"+
		"\u0866\3\2\2\2\u0864\u0862\3\2\2\2\u0864\u0865\3\2\2\2\u0865\u0867\3\2"+
		"\2\2\u0866\u0864\3\2\2\2\u0867\u0868\7\u0222\2\2\u0868\u086a\3\2\2\2\u0869"+
		"\u085e\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086e\3\2\2\2\u086b\u086d\5\u00cc"+
		"g\2\u086c\u086b\3\2\2\2\u086d\u0870\3\2\2\2\u086e\u086c\3\2\2\2\u086e"+
		"\u086f\3\2\2\2\u086f\u00b5\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0875\t\16"+
		"\2\2\u0872\u0876\7\u0128\2\2\u0873\u0876\5\u011e\u0090\2\u0874\u0876\5"+
		"\u00ba^\2\u0875\u0872\3\2\2\2\u0875\u0873\3\2\2\2\u0875\u0874\3\2\2\2"+
		"\u0876\u00b7\3\2\2\2\u0877\u0878\7\u01c4\2\2\u0878\u0879\5\u0312\u018a"+
		"\2\u0879\u00b9\3\2\2\2\u087a\u087b\7\u01ac\2\2\u087b\u087c\7\u0129\2\2"+
		"\u087c\u087f\5\u0312\u018a\2\u087d\u087e\7\u0120\2\2\u087e\u0880\7\u0123"+
		"\2\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2\2\2\u0880\u00bb\3\2\2\2\u0881"+
		"\u0882\7\u0095\2\2\u0882\u0883\7\u0107\2\2\u0883\u0884\5\u0236\u011c\2"+
		"\u0884\u0885\7\u00da\2\2\u0885\u0886\7\u00d5\2\2\u0886\u0887\7\u01cf\2"+
		"\2\u0887\u0888\t\32\2\2\u0888\u00bd\3\2\2\2\u0889\u088a\7&\2\2\u088a\u088b"+
		"\5\u02e8\u0175\2\u088b\u088c\t\16\2\2\u088c\u0891\5\u00c0a\2\u088d\u088e"+
		"\7\u0227\2\2\u088e\u0890\5\u00c0a\2\u088f\u088d\3\2\2\2\u0890\u0893\3"+
		"\2\2\2\u0891\u088f\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0894\3\2\2\2\u0893"+
		"\u0891\3\2\2\2\u0894\u0895\7\u0087\2\2\u0895\u00bf\3\2\2\2\u0896\u0899"+
		"\5\u00c2b\2\u0897\u0899\5\u00c4c\2\u0898\u0896\3\2\2\2\u0898\u0897\3\2"+
		"\2\2\u0899\u00c1\3\2\2\2\u089a\u089b\t\33\2\2\u089b\u089c\7\u00fb\2\2"+
		"\u089c\u089d\5\u00c8e\2\u089d\u00c3\3\2\2\2\u089e\u08a2\t\34\2\2\u089f"+
		"\u08a3\5\u00c6d\2\u08a0\u08a3\5\u00c8e\2\u08a1\u08a3\5\u00caf\2\u08a2"+
		"\u089f\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a2\u08a1\3\2\2\2\u08a3\u00c5\3\2"+
		"\2\2\u08a4\u08a5\7\u0153\2\2\u08a5\u08a6\5\u02f0\u0179\2\u08a6\u08a7\7"+
		"\u0221\2\2\u08a7\u08ac\5\u00e4s\2\u08a8\u08a9\7\u0227\2\2\u08a9\u08ab"+
		"\5\u00e4s\2\u08aa\u08a8\3\2\2\2\u08ab\u08ae\3\2\2\2\u08ac\u08aa\3\2\2"+
		"\2\u08ac\u08ad\3\2\2\2\u08ad\u08af\3\2\2\2\u08ae\u08ac\3\2\2\2\u08af\u08b0"+
		"\7\u0222\2\2\u08b0\u08be\t\16\2\2\u08b1\u08bf\5\u00f4{\2\u08b2\u08b4\7"+
		"k\2\2\u08b3\u08b2\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b8\3\2\2\2\u08b5"+
		"\u08b7\5\u0102\u0082\2\u08b6\u08b5\3\2\2\2\u08b7\u08ba\3\2\2\2\u08b8\u08b6"+
		"\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08bb\3\2\2\2\u08ba\u08b8\3\2\2\2\u08bb"+
		"\u08bc\5\u014c\u00a7\2\u08bc\u08bd\7\u022d\2\2\u08bd\u08bf\3\2\2\2\u08be"+
		"\u08b1\3\2\2\2\u08be\u08b3\3\2\2\2\u08bf\u00c7\3\2\2\2\u08c0\u08c1\7\u00aa"+
		"\2\2\u08c1\u08cd\5\u02ee\u0178\2\u08c2\u08c3\7\u0221\2\2\u08c3\u08c8\5"+
		"\u00e4s\2\u08c4\u08c5\7\u0227\2\2\u08c5\u08c7\5\u00e4s\2\u08c6\u08c4\3"+
		"\2\2\2\u08c7\u08ca\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9"+
		"\u08cb\3\2\2\2\u08ca\u08c8\3\2\2\2\u08cb\u08cc\7\u0222\2\2\u08cc\u08ce"+
		"\3\2\2\2\u08cd\u08c2\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf"+
		"\u08d0\7\u016a\2\2\u08d0\u08d1\5\u0312\u018a\2\u08d1\u08df\t\16\2\2\u08d2"+
		"\u08e0\5\u00f4{\2\u08d3\u08d5\7k\2\2\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3"+
		"\2\2\2\u08d5\u08d9\3\2\2\2\u08d6\u08d8\5\u0102\u0082\2\u08d7\u08d6\3\2"+
		"\2\2\u08d8\u08db\3\2\2\2\u08d9\u08d7\3\2\2\2\u08d9\u08da\3\2\2\2\u08da"+
		"\u08dc\3\2\2\2\u08db\u08d9\3\2\2\2\u08dc\u08dd\5\u014c\u00a7\2\u08dd\u08de"+
		"\7\u022d\2\2\u08de\u08e0\3\2\2\2\u08df\u08d2\3\2\2\2\u08df\u08d4\3\2\2"+
		"\2\u08e0\u00c9\3\2\2\2\u08e1\u08e3\7\u009b\2\2\u08e2\u08e1\3\2\2\2\u08e2"+
		"\u08e3\3\2\2\2\u08e3\u08e5\3\2\2\2\u08e4\u08e6\7\u00ca\2\2\u08e5\u08e4"+
		"\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8\7O\2\2\u08e8"+
		"\u08e9\7\u00aa\2\2\u08e9\u08fb\5\u0312\u018a\2\u08ea\u08eb\7\u0221\2\2"+
		"\u08eb\u08ec\7\u0182\2\2\u08ec\u08ed\7\u00b8\2\2\u08ed\u08ee\7\u0137\2"+
		"\2\u08ee\u08ef\5\u0312\u018a\2\u08ef\u08f0\7\u0227\2\2\u08f0\u08f1\3\2"+
		"\2\2\u08f1\u08f6\5\u00e4s\2\u08f2\u08f3\7\u0227\2\2\u08f3\u08f5\5\u00e4"+
		"s\2\u08f4\u08f2\3\2\2\2\u08f5\u08f8\3\2\2\2\u08f6\u08f4\3\2\2\2\u08f6"+
		"\u08f7\3\2\2\2\u08f7\u08f9\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f9\u08fa\7\u0222"+
		"\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08ea\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc"+
		"\u08fd\3\2\2\2\u08fd\u08fe\7\u016a\2\2\u08fe\u08ff\7\u0182\2\2\u08ff\u0900"+
		"\7\20\2\2\u0900\u0901\7\u0168\2\2\u0901\u090f\t\16\2\2\u0902\u0910\5\u00f4"+
		"{\2\u0903\u0905\7k\2\2\u0904\u0903\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0909"+
		"\3\2\2\2\u0906\u0908\5\u0102\u0082\2\u0907\u0906\3\2\2\2\u0908\u090b\3"+
		"\2\2\2\u0909\u0907\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090c\3\2\2\2\u090b"+
		"\u0909\3\2\2\2\u090c\u090d\5\u014c\u00a7\2\u090d\u090e\7\u022d\2\2\u090e"+
		"\u0910\3\2\2\2\u090f\u0902\3\2\2\2\u090f\u0904\3\2\2\2\u0910\u00cb\3\2"+
		"\2\2\u0911\u0913\7\u0120\2\2\u0912\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913"+
		"\u0914\3\2\2\2\u0914\u0915\t\35\2\2\u0915\u00cd\3\2\2\2\u0916\u0917\5"+
		"\u032a\u0196\2\u0917\u0919\5\u0312\u018a\2\u0918\u091a\5\u00d0i\2\u0919"+
		"\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091d\3\2\2\2\u091b\u091d\5\u00d2"+
		"j\2\u091c\u0916\3\2\2\2\u091c\u091b\3\2\2\2\u091d\u00cf\3\2\2\2\u091e"+
		"\u091f\7\u0095\2\2\u091f\u0920\7\u0107\2\2\u0920\u0921\5\u0236\u011c\2"+
		"\u0921\u00d1\3\2\2\2\u0922\u0924\5\u00ccg\2\u0923\u0922\3\2\2\2\u0923"+
		"\u0924\3\2\2\2\u0924\u0926\3\2\2\2\u0925\u0927\5\u00d4k\2\u0926\u0925"+
		"\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u0926\3\2\2\2\u0928\u0929\3\2\2\2\u0929"+
		"\u092c\3\2\2\2\u092a\u092b\7\u0227\2\2\u092b\u092d\5\u00e0q\2\u092c\u092a"+
		"\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u00d3\3\2\2\2\u092e\u0932\5\u00d6l"+
		"\2\u092f\u0932\5\u00dco\2\u0930\u0932\5\u00dep\2\u0931\u092e\3\2\2\2\u0931"+
		"\u092f\3\2\2\2\u0931\u0930\3\2\2\2\u0932\u00d5\3\2\2\2\u0933\u0936\t\34"+
		"\2\2\u0934\u0937\5\u00d8m\2\u0935\u0937\5\u00dan\2\u0936\u0934\3\2\2\2"+
		"\u0936\u0935\3\2\2\2\u0937\u00d7\3\2\2\2\u0938\u0939\7\u0153\2\2\u0939"+
		"\u093a\5\u02f0\u0179\2\u093a\u093b\7\u0221\2\2\u093b\u0940\5\u00e4s\2"+
		"\u093c\u093d\7\u0227\2\2\u093d\u093f\5\u00e4s\2\u093e\u093c\3\2\2\2\u093f"+
		"\u0942\3\2\2\2\u0940\u093e\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0943\3\2"+
		"\2\2\u0942\u0940\3\2\2\2\u0943\u0946\7\u0222\2\2\u0944\u0945\t\16\2\2"+
		"\u0945\u0947\5\u00f4{\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947"+
		"\u00d9\3\2\2\2\u0948\u0949\7\u00aa\2\2\u0949\u0955\5\u02ee\u0178\2\u094a"+
		"\u094b\7\u0221\2\2\u094b\u0950\5\u00e4s\2\u094c\u094d\7\u0227\2\2\u094d"+
		"\u094f\5\u00e4s\2\u094e\u094c\3\2\2\2\u094f\u0952\3\2\2\2\u0950\u094e"+
		"\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0953\3\2\2\2\u0952\u0950\3\2\2\2\u0953"+
		"\u0954\7\u0222\2\2\u0954\u0956\3\2\2\2\u0955\u094a\3\2\2\2\u0955\u0956"+
		"\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u095c\7\u016a\2\2\u0958\u095d\5\u0312"+
		"\u018a\2\u0959\u095a\7\u0182\2\2\u095a\u095b\7\20\2\2\u095b\u095d\7\u0168"+
		"\2\2\u095c\u0958\3\2\2\2\u095c\u0959\3\2\2\2\u095d\u0966\3\2\2\2\u095e"+
		"\u095f\t\16\2\2\u095f\u0967\5\u00f4{\2\u0960\u0962\7\u0095\2\2\u0961\u0963"+
		"\7\u01d5\2\2\u0962\u0961\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0964\3\2\2"+
		"\2\u0964\u0965\7\u0107\2\2\u0965\u0967\5\u0236\u011c\2\u0966\u095e\3\2"+
		"\2\2\u0966\u0960\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u00db\3\2\2\2\u0968"+
		"\u096a\7\u009b\2\2\u0969\u0968\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096c"+
		"\3\2\2\2\u096b\u096d\7\u00ca\2\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2"+
		"\2\u096d\u096e\3\2\2\2\u096e\u096f\7O\2\2\u096f\u0970\7\u00aa\2\2\u0970"+
		"\u0982\5\u0312\u018a\2\u0971\u0972\7\u0221\2\2\u0972\u0973\7\u0182\2\2"+
		"\u0973\u0974\7\u00b8\2\2\u0974\u0975\7\u0137\2\2\u0975\u0976\5\u0312\u018a"+
		"\2\u0976\u0977\7\u0227\2\2\u0977\u0978\3\2\2\2\u0978\u097d\5\u00e4s\2"+
		"\u0979\u097a\7\u0227\2\2\u097a\u097c\5\u00e4s\2\u097b\u0979\3\2\2\2\u097c"+
		"\u097f\3\2\2\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0980\3\2"+
		"\2\2\u097f\u097d\3\2\2\2\u0980\u0981\7\u0222\2\2\u0981\u0983\3\2\2\2\u0982"+
		"\u0971\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0985\7\u016a"+
		"\2\2\u0985\u0986\7\u0182\2\2\u0986\u0987\7\20\2\2\u0987\u098a\7\u0168"+
		"\2\2\u0988\u0989\t\16\2\2\u0989\u098b\5\u00f4{\2\u098a\u0988\3\2\2\2\u098a"+
		"\u098b\3\2\2\2\u098b\u00dd\3\2\2\2\u098c\u098d\t\33\2\2\u098d\u098e\7"+
		"\u00fb\2\2\u098e\u098f\5\u00dan\2\u098f\u00df\3\2\2\2\u0990\u0991\7\u014d"+
		"\2\2\u0991\u0992\7\u0167\2\2\u0992\u0993\7\u0221\2\2\u0993\u0998\5\u00e2"+
		"r\2\u0994\u0995\7\u0227\2\2\u0995\u0997\5\u00e2r\2\u0996\u0994\3\2\2\2"+
		"\u0997\u099a\3\2\2\2\u0998\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u099b"+
		"\3\2\2\2\u099a\u0998\3\2\2\2\u099b\u099c\7\u0222\2\2\u099c\u00e1\3\2\2"+
		"\2\u099d\u09a0\5\u032a\u0196\2\u099e\u09a0\7o\2\2\u099f\u099d\3\2\2\2"+
		"\u099f\u099e\3\2\2\2\u09a0\u00e3\3\2\2\2\u09a1\u09a2\5\u02da\u016e\2\u09a2"+
		"\u09a3\5\u0312\u018a\2\u09a3\u00e5\3\2\2\2\u09a4\u09a5\7~\2\2\u09a5\u09a6"+
		"\7\u0183\2\2\u09a6\u09a7\5\u02ea\u0176\2\u09a7\u09a8\7\u022d\2\2\u09a8"+
		"\u00e7\3\2\2\2\u09a9\u09aa\7\n\2\2\u09aa\u09ab\7\u0183\2\2\u09ab\u09ad"+
		"\5\u02ea\u0176\2\u09ac\u09ae\5\u00ecw\2\u09ad\u09ac\3\2\2\2\u09ae\u09af"+
		"\3\2\2\2\u09af\u09ad\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1"+
		"\u09b2\7\u022d\2\2\u09b2\u00e9\3\2\2\2\u09b3\u09b4\7X\2\2\u09b4\u09b5"+
		"\7\u0183\2\2\u09b5\u09ba\5\u02ea\u0176\2\u09b6\u09b9\5\u00eex\2\u09b7"+
		"\u09b9\5\u00ecw\2\u09b8\u09b6\3\2\2\2\u09b8\u09b7\3\2\2\2\u09b9\u09bc"+
		"\3\2\2\2\u09ba\u09b8\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bd\3\2\2\2\u09bc"+
		"\u09ba\3\2\2\2\u09bd\u09be\7\u022d\2\2\u09be\u00eb\3\2\2\2\u09bf\u09c0"+
		"\7\u00bb\2\2\u09c0\u09c1\7,\2\2\u09c1\u09d0\7\u021b\2\2\u09c2\u09c3\7"+
		"\u00f8\2\2\u09c3\u09d0\7\u021b\2\2\u09c4\u09d0\7\u011a\2\2\u09c5\u09c6"+
		"\7\u0100\2\2\u09c6\u09d0\7\u021b\2\2\u09c7\u09d0\7\u011b\2\2\u09c8\u09d0"+
		"\7`\2\2\u09c9\u09d0\7\u0117\2\2\u09ca\u09cb\7/\2\2\u09cb\u09d0\7\u021b"+
		"\2\2\u09cc\u09d0\7\u0114\2\2\u09cd\u09d0\7\u0134\2\2\u09ce\u09d0\7\u011d"+
		"\2\2\u09cf\u09bf\3\2\2\2\u09cf\u09c2\3\2\2\2\u09cf\u09c4\3\2\2\2\u09cf"+
		"\u09c5\3\2\2\2\u09cf\u09c7\3\2\2\2\u09cf\u09c8\3\2\2\2\u09cf\u09c9\3\2"+
		"\2\2\u09cf\u09ca\3\2\2\2\u09cf\u09cc\3\2\2\2\u09cf\u09cd\3\2\2\2\u09cf"+
		"\u09ce\3\2\2\2\u09d0\u00ed\3\2\2\2\u09d1\u09d2\7\u019c\2\2\u09d2\u09d3"+
		"\7\u01e2\2\2\u09d3\u09d4\7\u021b\2\2\u09d4\u00ef\3\2\2\2\u09d5\u09d6\7"+
		"\26\2\2\u09d6\u09d7\t\36\2\2\u09d7\u00f1\3\2\2\2\u09d8\u09d9\5\u032a\u0196"+
		"\2\u09d9\u09da\7\u0238\2\2\u09da\u09db\5\u0236\u011c\2\u09db\u00f3\3\2"+
		"\2\2\u09dc\u09df\7\u00da\2\2\u09dd\u09e0\5\u00f6|\2\u09de\u09e0\5\u00f8"+
		"}\2\u09df\u09dd\3\2\2\2\u09df\u09de\3\2\2\2\u09e0\u00f5\3\2\2\2\u09e1"+
		"\u09e2\7\u00d5\2\2\u09e2\u09e3\7\u0107\2\2\u09e3\u09e4\7\u021d\2\2\u09e4"+
		"\u00f7\3\2\2\2\u09e5\u09e8\7.\2\2\u09e6\u09e7\7\u0107\2\2\u09e7\u09e9"+
		"\7\u021d\2\2\u09e8\u09e6\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea\3\2\2"+
		"\2\u09ea\u09eb\7\u00e2\2\2\u09eb\u09ed\5\u032a\u0196\2\u09ec\u09ee\5\u00fa"+
		"~\2\u09ed\u09ec\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09f1\3\2\2\2\u09ef"+
		"\u09f0\7\u01e2\2\2\u09f0\u09f2\7Q\2\2\u09f1\u09ef\3\2\2\2\u09f1\u09f2"+
		"\3\2\2\2\u09f2\u09f4\3\2\2\2\u09f3\u09f5\5\u00fc\177\2\u09f4\u09f3\3\2"+
		"\2\2\u09f4\u09f5\3\2\2\2\u09f5\u00f9\3\2\2\2\u09f6\u09f7\7\7\2\2\u09f7"+
		"\u09f8\7\u00b8\2\2\u09f8\u09f9\7\u0221\2\2\u09f9\u09fe\5\u0236\u011c\2"+
		"\u09fa\u09fb\7\u0227\2\2\u09fb\u09fd\5\u0236\u011c\2\u09fc\u09fa\3\2\2"+
		"\2\u09fd\u0a00\3\2\2\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a01"+
		"\3\2\2\2\u0a00\u09fe\3\2\2\2\u0a01\u0a02\7\u0222\2\2\u0a02\u00fb\3\2\2"+
		"\2\u0a03\u0a04\7\u013d\2\2\u0a04\u0a10\7\u0221\2\2\u0a05\u0a0a\5\u0236"+
		"\u011c\2\u0a06\u0a07\7\u0227\2\2\u0a07\u0a09\5\u0236\u011c\2\u0a08\u0a06"+
		"\3\2\2\2\u0a09\u0a0c\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b"+
		"\u0a11\3\2\2\2\u0a0c\u0a0a\3\2\2\2\u0a0d\u0a0e\7\u021a\2\2\u0a0e\u0a0f"+
		"\7\u021a\2\2\u0a0f\u0a11\7\u021a\2\2\u0a10\u0a05\3\2\2\2\u0a10\u0a0d\3"+
		"\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a13\7\u0222\2\2\u0a13\u00fd\3\2\2\2"+
		"\u0a14\u0a18\5\u02da\u016e\2\u0a15\u0a17\t\37\2\2\u0a16\u0a15\3\2\2\2"+
		"\u0a17\u0a1a\3\2\2\2\u0a18\u0a16\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1c"+
		"\3\2\2\2\u0a1a\u0a18\3\2\2\2\u0a1b\u0a1d\5\u0312\u018a\2\u0a1c\u0a1b\3"+
		"\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a1f\3\2\2\2\u0a1e\u0a20\5\u0100\u0081"+
		"\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u00ff\3\2\2\2\u0a21\u0a22"+
		"\t \2\2\u0a22\u0a23\5\u0236\u011c\2\u0a23\u0101\3\2\2\2\u0a24\u0a2e\5"+
		"\u010e\u0088\2\u0a25\u0a2e\5\u0104\u0083\2\u0a26\u0a2e\5\u0106\u0084\2"+
		"\u0a27\u0a2e\5\u0108\u0085\2\u0a28\u0a2e\5\u010c\u0087\2\u0a29\u0a2e\5"+
		"\u0110\u0089\2\u0a2a\u0a2e\5\u0118\u008d\2\u0a2b\u0a2e\5r:\2\u0a2c\u0a2e"+
		"\5P)\2\u0a2d\u0a24\3\2\2\2\u0a2d\u0a25\3\2\2\2\u0a2d\u0a26\3\2\2\2\u0a2d"+
		"\u0a27\3\2\2\2\u0a2d\u0a28\3\2\2\2\u0a2d\u0a29\3\2\2\2\u0a2d\u0a2a\3\2"+
		"\2\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2c\3\2\2\2\u0a2e\u0103\3\2\2\2\u0a2f"+
		"\u0a31\5\u02f4\u017b\2\u0a30\u0a32\7L\2\2\u0a31\u0a30\3\2\2\2\u0a31\u0a32"+
		"\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a36\5\u0312\u018a\2\u0a34\u0a35\7"+
		"\u0120\2\2\u0a35\u0a37\7\u0123\2\2\u0a36\u0a34\3\2\2\2\u0a36\u0a37\3\2"+
		"\2\2\u0a37\u0a39\3\2\2\2\u0a38\u0a3a\5\u0100\u0081\2\u0a39\u0a38\3\2\2"+
		"\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\7\u022d\2\2\u0a3c"+
		"\u0105\3\2\2\2\u0a3d\u0a3e\7\u01a8\2\2\u0a3e\u0a3f\5\u02e8\u0175\2\u0a3f"+
		"\u0a40\7\u00d2\2\2\u0a40\u0a46\5\u0312\u018a\2\u0a41\u0a42\7\u0156\2\2"+
		"\u0a42\u0a43\5\u0236\u011c\2\u0a43\u0a44\7\3\2\2\u0a44\u0a45\5\u0236\u011c"+
		"\2\u0a45\u0a47\3\2\2\2\u0a46\u0a41\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a4a"+
		"\3\2\2\2\u0a48\u0a49\7\u0120\2\2\u0a49\u0a4b\7\u0123\2\2\u0a4a\u0a48\3"+
		"\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\7\u022d\2\2"+
		"\u0a4d\u0107\3\2\2\2\u0a4e\u0a4f\7^\2\2\u0a4f\u0a5b\5\u02f8\u017d\2\u0a50"+
		"\u0a51\7\u0221\2\2\u0a51\u0a56\5\u010a\u0086\2\u0a52\u0a53\7\u0227\2\2"+
		"\u0a53\u0a55\5\u010a\u0086\2\u0a54\u0a52\3\2\2\2\u0a55\u0a58\3\2\2\2\u0a56"+
		"\u0a54\3\2\2\2\u0a56\u0a57\3\2\2\2\u0a57\u0a59\3\2\2\2\u0a58\u0a56\3\2"+
		"\2\2\u0a59\u0a5a\7\u0222\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a50\3\2\2\2\u0a5b"+
		"\u0a5c\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5e\7\u016a\2\2\u0a5e\u0a60"+
		"\5\u0312\u018a\2\u0a5f\u0a5d\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a63\3"+
		"\2\2\2\u0a61\u0a62\7\u00d2\2\2\u0a62\u0a64\5\u0178\u00bd\2\u0a63\u0a61"+
		"\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\7\u022d\2"+
		"\2\u0a66\u0109\3\2\2\2\u0a67\u0a6c\5\u02da\u016e\2\u0a68\u0a6a\7\u00b8"+
		"\2\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b"+
		"\u0a6d\5\u0312\u018a\2\u0a6c\u0a69\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6f"+
		"\3\2\2\2\u0a6e\u0a70\5\u0100\u0081\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3"+
		"\2\2\2\u0a70\u010b\3\2\2\2\u0a71\u0a72\5\u02ec\u0177\2\u0a72\u0a73\7\u008c"+
		"\2\2\u0a73\u0a74\7\u022d\2\2\u0a74\u010d\3\2\2\2\u0a75\u0a94\7\u014d\2"+
		"\2\u0a76\u0a95\7\u0186\2\2\u0a77\u0a95\7\31\2\2\u0a78\u0a79\7\u008d\2"+
		"\2\u0a79\u0a7a\7\u0221\2\2\u0a7a\u0a7b\5\u02ec\u0177\2\u0a7b\u0a7c\7\u0227"+
		"\2\2\u0a7c\u0a7d\5\u0326\u0194\2\u0a7d\u0a7e\7\u0222\2\2\u0a7e\u0a95\3"+
		"\2\2\2\u0a7f\u0a80\7\u00c6\2\2\u0a80\u0a81\7\u0221\2\2\u0a81\u0a82\5\u032a"+
		"\u0196\2\u0a82\u0a83\7\u0227\2\2\u0a83\u0a84\5\u0236\u011c\2\u0a84\u0a85"+
		"\7\u0222\2\2\u0a85\u0a95\3\2\2\2\u0a86\u0a87\7\u0167\2\2\u0a87\u0a8a\7"+
		"\u0221\2\2\u0a88\u0a8b\5\u032a\u0196\2\u0a89\u0a8b\7o\2\2\u0a8a\u0a88"+
		"\3\2\2\2\u0a8a\u0a89\3\2\2\2\u0a8b\u0a8e\3\2\2\2\u0a8c\u0a8d\7\u0227\2"+
		"\2\u0a8d\u0a8f\5\u032a\u0196\2\u0a8e\u0a8c\3\2\2\2\u0a8f\u0a90\3\2\2\2"+
		"\u0a90\u0a8e\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a93"+
		"\7\u0222\2\2\u0a93\u0a95\3\2\2\2\u0a94\u0a76\3\2\2\2\u0a94\u0a77\3\2\2"+
		"\2\u0a94\u0a78\3\2\2\2\u0a94\u0a7f\3\2\2\2\u0a94\u0a86\3\2\2\2\u0a95\u0a96"+
		"\3\2\2\2\u0a96\u0a97\7\u022d\2\2\u0a97\u010f\3\2\2\2\u0a98\u0a9b\5\u0112"+
		"\u008a\2\u0a99\u0a9b\5\u0116\u008c\2\u0a9a\u0a98\3\2\2\2\u0a9a\u0a99\3"+
		"\2\2\2\u0a9b\u0111\3\2\2\2\u0a9c\u0a9d\7\u01c2\2\2\u0a9d\u0a9e\5\u02e8"+
		"\u0175\2\u0a9e\u0ab1\7\u00d2\2\2\u0a9f\u0aa0\7\u015b\2\2\u0aa0\u0aa1\7"+
		"\u0221\2\2\u0aa1\u0aa6\5\u0114\u008b\2\u0aa2\u0aa3\7\u0227\2\2\u0aa3\u0aa5"+
		"\5\u0114\u008b\2\u0aa4\u0aa2\3\2\2\2\u0aa5\u0aa8\3\2\2\2\u0aa6\u0aa4\3"+
		"\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa9\3\2\2\2\u0aa8\u0aa6\3\2\2\2\u0aa9"+
		"\u0aaa\7\u0222\2\2\u0aaa\u0ab2\3\2\2\2\u0aab\u0aac\7\u015d\2\2\u0aac\u0aaf"+
		"\7^\2\2\u0aad\u0aae\7\u016a\2\2\u0aae\u0ab0\5\u0312\u018a\2\u0aaf\u0aad"+
		"\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab2\3\2\2\2\u0ab1\u0a9f\3\2\2\2\u0ab1"+
		"\u0aab\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab4\7\u022d\2\2\u0ab4\u0113"+
		"\3\2\2\2\u0ab5\u0ab7\5\u0300\u0181\2\u0ab6\u0ab8\5\u0312\u018a\2\u0ab7"+
		"\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0aba\7\u0120"+
		"\2\2\u0aba\u0abc\7\u0123\2\2\u0abb\u0ab9\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc"+
		"\u0abe\3\2\2\2\u0abd\u0abf\5\u0100\u0081\2\u0abe\u0abd\3\2\2\2\u0abe\u0abf"+
		"\3\2\2\2\u0abf\u0115\3\2\2\2\u0ac0\u0ac1\5\u02fa\u017e\2\u0ac1\u0ac2\5"+
		"\u02e8\u0175\2\u0ac2\u0ac3\t!\2\2\u0ac3\u0ac4\7\u022d\2\2\u0ac4\u0117"+
		"\3\2\2\2\u0ac5\u0ac8\5\u011a\u008e\2\u0ac6\u0ac8\5\u0120\u0091\2\u0ac7"+
		"\u0ac5\3\2\2\2\u0ac7\u0ac6\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0aca\7\u022d"+
		"\2\2\u0aca\u0119\3\2\2\2\u0acb\u0acc\7\u01c2\2\2\u0acc\u0acd\5\u02e8\u0175"+
		"\2\u0acd\u0ad9\7\u00d2\2\2\u0ace\u0acf\7\u01ac\2\2\u0acf\u0ad0\7\u0129"+
		"\2\2\u0ad0\u0ad2\5\u0312\u018a\2\u0ad1\u0ad3\5\u011c\u008f\2\u0ad2\u0ad1"+
		"\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad6\3\2\2\2\u0ad4\u0ad5\7\u0120\2"+
		"\2\u0ad5\u0ad7\7\u0123\2\2\u0ad6\u0ad4\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7"+
		"\u0ada\3\2\2\2\u0ad8\u0ada\5\u011e\u0090\2\u0ad9\u0ace\3\2\2\2\u0ad9\u0ad8"+
		"\3\2\2\2\u0ada\u011b\3\2\2\2\u0adb\u0ade\7\u00be\2\2\u0adc\u0ade\7\u00bd"+
		"\2\2\u0add\u0adb\3\2\2\2\u0add\u0adc\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf"+
		"\u0ae0\7,\2\2\u0ae0\u0ae1\5\u0312\u018a\2\u0ae1\u011d\3\2\2\2\u0ae2\u0ae6"+
		"\7\u01d6\2\2\u0ae3\u0ae4\7\u01d7\2\2\u0ae4\u0ae6\7\17\2\2\u0ae5\u0ae2"+
		"\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae8\7\u0221\2"+
		"\2\u0ae8\u0ae9\5\u0236\u011c\2\u0ae9\u0aea\7\u0222\2\2\u0aea\u0aeb\7\u0129"+
		"\2\2\u0aeb\u0aee\5\u0312\u018a\2\u0aec\u0aed\7\u0120\2\2\u0aed\u0aef\7"+
		"\u0123\2\2\u0aee\u0aec\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u011f\3\2\2\2"+
		"\u0af0\u0af1\5\u02d0\u0169\2\u0af1\u0af2\5\u0312\u018a\2\u0af2\u0121\3"+
		"\2\2\2\u0af3\u0af4\5\u0126\u0094\2\u0af4\u0af5\t\"\2\2\u0af5\u0af8\3\2"+
		"\2\2\u0af6\u0af8\5\u0124\u0093\2\u0af7\u0af3\3\2\2\2\u0af7\u0af6\3\2\2"+
		"\2\u0af8\u0af9\3\2\2\2\u0af9\u0af7\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0123"+
		"\3\2\2\2\u0afb\u0afc\7\u022f\2\2\u0afc\u0afd\7\u022f\2\2\u0afd\u0afe\5"+
		"\u02e6\u0174\2\u0afe\u0aff\7\u0235\2\2\u0aff\u0b00\7\u0235\2\2\u0b00\u0125"+
		"\3\2\2\2\u0b01\u0b02\7X\2\2\u0b02\u0b19\5\2\2\2\u0b03\u0b04\7\n\2\2\u0b04"+
		"\u0b19\5\2\2\2\u0b05\u0b06\7\u00ac\2\2\u0b06\u0b19\5\2\2\2\u0b07\u0b08"+
		"\7\u01c1\2\2\u0b08\u0b19\5\2\2\2\u0b09\u0b19\5\u014c\u00a7\2\u0b0a\u0b19"+
		"\5\u0154\u00ab\2\u0b0b\u0b19\5\u0128\u0095\2\u0b0c\u0b19\5\u012a\u0096"+
		"\2\u0b0d\u0b19\5\u012c\u0097\2\u0b0e\u0b19\5\u012e\u0098\2\u0b0f\u0b19"+
		"\5\u0130\u0099\2\u0b10\u0b19\5\u0136\u009c\2\u0b11\u0b19\5\u013a\u009e"+
		"\2\u0b12\u0b19\5\u0144\u00a3\2\u0b13\u0b19\5\u0146\u00a4\2\u0b14\u0b19"+
		"\5\u0148\u00a5\2\u0b15\u0b19\5\u026a\u0136\2\u0b16\u0b19\5\u0156\u00ac"+
		"\2\u0b17\u0b19\5\u014a\u00a6\2\u0b18\u0b01\3\2\2\2\u0b18\u0b03\3\2\2\2"+
		"\u0b18\u0b05\3\2\2\2\u0b18\u0b07\3\2\2\2\u0b18\u0b09\3\2\2\2\u0b18\u0b0a"+
		"\3\2\2\2\u0b18\u0b0b\3\2\2\2\u0b18\u0b0c\3\2\2\2\u0b18\u0b0d\3\2\2\2\u0b18"+
		"\u0b0e\3\2\2\2\u0b18\u0b0f\3\2\2\2\u0b18\u0b10\3\2\2\2\u0b18\u0b11\3\2"+
		"\2\2\u0b18\u0b12\3\2\2\2\u0b18\u0b13\3\2\2\2\u0b18\u0b14\3\2\2\2\u0b18"+
		"\u0b15\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18\u0b17\3\2\2\2\u0b19\u0127\3\2"+
		"\2\2\u0b1a\u0b1d\5\u031c\u018f\2\u0b1b\u0b1d\5\u031a\u018e\2\u0b1c\u0b1a"+
		"\3\2\2\2\u0b1c\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f\7\u022a\2"+
		"\2\u0b1f\u0b20\5\u0236\u011c\2\u0b20\u0129\3\2\2\2\u0b21\u0b23\7R\2\2"+
		"\u0b22\u0b24\5\u02e6\u0174\2\u0b23\u0b22\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24"+
		"\u0b27\3\2\2\2\u0b25\u0b26\7\u01de\2\2\u0b26\u0b28\5\u0232\u011a\2\u0b27"+
		"\u0b25\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u012b\3\2\2\2\u0b29\u0b2b\7\u0093"+
		"\2\2\u0b2a\u0b2c\5\u02e6\u0174\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2"+
		"\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b2e\7\u01de\2\2\u0b2e\u0b30\5\u0232\u011a"+
		"\2\u0b2f\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u012d\3\2\2\2\u0b31\u0b32"+
		"\7\u00ab\2\2\u0b32\u0b33\5\u02e6\u0174\2\u0b33\u012f\3\2\2\2\u0b34\u0b35"+
		"\7\u00b5\2\2\u0b35\u0b36\5\u0232\u011a\2\u0b36\u0b37\7\u01af\2\2\u0b37"+
		"\u0b3b\5\u0122\u0092\2\u0b38\u0b3a\5\u0132\u009a\2\u0b39\u0b38\3\2\2\2"+
		"\u0b3a\u0b3d\3\2\2\2\u0b3b\u0b39\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3f"+
		"\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3e\u0b40\5\u0134\u009b\2\u0b3f\u0b3e\3"+
		"\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42\7\u0087\2\2"+
		"\u0b42\u0b43\7\u00b5\2\2\u0b43\u0131\3\2\2\2\u0b44\u0b45\7\u0083\2\2\u0b45"+
		"\u0b46\5\u0232\u011a\2\u0b46\u0b47\7\u01af\2\2\u0b47\u0b48\5\u0122\u0092"+
		"\2\u0b48\u0133\3\2\2\2\u0b49\u0b4a\7\u0082\2\2\u0b4a\u0b4b\5\u0122\u0092"+
		"\2\u0b4b\u0135\3\2\2\2\u0b4c\u0b4e\5\u02e6\u0174\2\u0b4d\u0b4c\3\2\2\2"+
		"\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b53\3\2\2\2\u0b4f\u0b50\7\u01e1\2\2\u0b50"+
		"\u0b54\5\u0232\u011a\2\u0b51\u0b52\7\u00a2\2\2\u0b52\u0b54\5\u0138\u009d"+
		"\2\u0b53\u0b4f\3\2\2\2\u0b53\u0b51\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b55"+
		"\3\2\2\2\u0b55\u0b56\7\u00f1\2\2\u0b56\u0b57\5\u0122\u0092\2\u0b57\u0b58"+
		"\7\u0087\2\2\u0b58\u0b5a\7\u00f1\2\2\u0b59\u0b5b\5\u02e6\u0174\2\u0b5a"+
		"\u0b59\3\2\2\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0137\3\2\2\2\u0b5c\u0b5d\5\u02f6"+
		"\u017c\2\u0b5d\u0b5f\7\u00b8\2\2\u0b5e\u0b60\7\u016d\2\2\u0b5f\u0b5e\3"+
		"\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b62\5\u0140\u00a1"+
		"\2\u0b62\u0b63\7\3\2\2\u0b63\u0b64\5\u0142\u00a2\2\u0b64\u0b72\3\2\2\2"+
		"\u0b65\u0b66\5\u02fa\u017e\2\u0b66\u0b6f\7\u00b8\2\2\u0b67\u0b69\5\u02f8"+
		"\u017d\2\u0b68\u0b6a\5\u0230\u0119\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3"+
		"\2\2\2\u0b6a\u0b70\3\2\2\2\u0b6b\u0b6c\7\u0221\2\2\u0b6c\u0b6d\5\u0178"+
		"\u00bd\2\u0b6d\u0b6e\7\u0222\2\2\u0b6e\u0b70\3\2\2\2\u0b6f\u0b67\3\2\2"+
		"\2\u0b6f\u0b6b\3\2\2\2\u0b70\u0b72\3\2\2\2\u0b71\u0b5c\3\2\2\2\u0b71\u0b65"+
		"\3\2\2\2\u0b72\u0139\3\2\2\2\u0b73\u0b74\7\u00a3\2\2\u0b74\u0b75\5\u02f6"+
		"\u017c\2\u0b75\u0b76\7\u00b8\2\2\u0b76\u0b77\5\u013c\u009f\2\u0b77\u0b7a"+
		"\5\u0156\u00ac\2\u0b78\u0b79\7\u0177\2\2\u0b79\u0b7b\7\u008e\2\2\u0b7a"+
		"\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u013b\3\2\2\2\u0b7c\u0b7d\5\u0140"+
		"\u00a1\2\u0b7d\u0b7e\7\3\2\2\u0b7e\u0b7f\5\u0142\u00a2\2\u0b7f\u0b8a\3"+
		"\2\2\2\u0b80\u0b81\7\u00c1\2\2\u0b81\u0b82\7\u0129\2\2\u0b82\u0b84\5\u02fc"+
		"\u017f\2\u0b83\u0b85\5\u013e\u00a0\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3"+
		"\2\2\2\u0b85\u0b8a\3\2\2\2\u0b86\u0b87\7\u01d2\2\2\u0b87\u0b88\7\u0129"+
		"\2\2\u0b88\u0b8a\5\u02f6\u017c\2\u0b89\u0b7c\3\2\2\2\u0b89\u0b80\3\2\2"+
		"\2\u0b89\u0b86\3\2\2\2\u0b8a\u013d\3\2\2\2\u0b8b\u0b8c\7\37\2\2\u0b8c"+
		"\u0b8d\5\u0140\u00a1\2\u0b8d\u0b8e\7\f\2\2\u0b8e\u0b8f\5\u0142\u00a2\2"+
		"\u0b8f\u013f\3\2\2\2\u0b90\u0b91\5\u0250\u0129\2\u0b91\u0141\3\2\2\2\u0b92"+
		"\u0b93\5\u0250\u0129\2\u0b93\u0143\3\2\2\2\u0b94\u0b95\7\u0123\2\2\u0b95"+
		"\u0145\3\2\2\2\u0b96\u0b98\7\u0155\2\2\u0b97\u0b99\5\u02ec\u0177\2\u0b98"+
		"\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0147\3\2\2\2\u0b9a\u0b9c\7\u016a"+
		"\2\2\u0b9b\u0b9d\5\u0232\u011a\2\u0b9c\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2"+
		"\2\u0b9d\u0149\3\2\2\2\u0b9e\u0ba0\7\60\2\2\u0b9f\u0b9e\3\2\2\2\u0b9f"+
		"\u0ba0\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba3\5\u02d4\u016b\2\u0ba2\u0ba4"+
		"\5\u0308\u0185\2\u0ba3\u0ba2\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u014b\3"+
		"\2\2\2\u0ba5\u0ba6\7\36\2\2\u0ba6\u0ba8\5\u0122\u0092\2\u0ba7\u0ba9\5"+
		"\u014e\u00a8\2\u0ba8\u0ba7\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0baa\3\2"+
		"\2\2\u0baa\u0bac\7\u0087\2\2\u0bab\u0bad\5\u02e6\u0174\2\u0bac\u0bab\3"+
		"\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u014d\3\2\2\2\u0bae\u0bb0\7\u008c\2\2"+
		"\u0baf\u0bb1\5\u0150\u00a9\2\u0bb0\u0baf\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2"+
		"\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u014f\3\2\2\2\u0bb4\u0bb5\7\u01de"+
		"\2\2\u0bb5\u0bba\5\u02ec\u0177\2\u0bb6\u0bb7\7\u0132\2\2\u0bb7\u0bb9\5"+
		"\u02ec\u0177\2\u0bb8\u0bb6\3\2\2\2\u0bb9\u0bbc\3\2\2\2\u0bba\u0bb8\3\2"+
		"\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bbd\3\2\2\2\u0bbc\u0bba\3\2\2\2\u0bbd"+
		"\u0bbe\7\u01af\2\2\u0bbe\u0bbf\5\u0122\u0092\2\u0bbf\u0151\3\2\2\2\u0bc0"+
		"\u0bc2\7k\2\2\u0bc1\u0bc0\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc4\3\2"+
		"\2\2\u0bc3\u0bc5\5\u0102\u0082\2\u0bc4\u0bc3\3\2\2\2\u0bc5\u0bc6\3\2\2"+
		"\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc9\3\2\2\2\u0bc8\u0bc1"+
		"\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bcb\5\u014c\u00a7"+
		"\2\u0bcb\u0153\3\2\2\2\u0bcc\u0bce\7k\2\2\u0bcd\u0bcc\3\2\2\2\u0bcd\u0bce"+
		"\3\2\2\2\u0bce\u0bd0\3\2\2\2\u0bcf\u0bd1\5\u0102\u0082\2\u0bd0\u0bcf\3"+
		"\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd0\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3"+
		"\u0bd4\3\2\2\2\u0bd4\u0bd5\5\u014c\u00a7\2\u0bd5\u0155\3\2\2\2\u0bd6\u0bdb"+
		"\5\u0158\u00ad\2\u0bd7\u0bdb\5\u015c\u00af\2\u0bd8\u0bdb\5\u015e\u00b0"+
		"\2\u0bd9\u0bdb\5\u0168\u00b5\2\u0bda\u0bd6\3\2\2\2\u0bda\u0bd7\3\2\2\2"+
		"\u0bda\u0bd8\3\2\2\2\u0bda\u0bd9\3\2\2\2\u0bdb\u0157\3\2\2\2\u0bdc\u0bdd"+
		"\7\u0091\2\2\u0bdd\u0bde\7\u00b7\2\2\u0bde\u0be8\5\u0236\u011c\2\u0bdf"+
		"\u0be1\5\u02c4\u0163\2\u0be0\u0be2\5\u028e\u0148\2\u0be1\u0be0\3\2\2\2"+
		"\u0be1\u0be2\3\2\2\2\u0be2\u0be9\3\2\2\2\u0be3\u0be5\5\u028e\u0148\2\u0be4"+
		"\u0be6\5\u015a\u00ae\2\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be9"+
		"\3\2\2\2\u0be7\u0be9\5\u015a\u00ae\2\u0be8\u0bdf\3\2\2\2\u0be8\u0be3\3"+
		"\2\2\2\u0be8\u0be7\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0159\3\2\2\2\u0bea"+
		"\u0beb\t#\2\2\u0beb\u0bec\5\u02c4\u0163\2\u0bec\u015b\3\2\2\2\u0bed\u0bf5"+
		"\5\u0206\u0104\2\u0bee\u0bf5\5\u0212\u010a\2\u0bef\u0bf5\5\u0178\u00bd"+
		"\2\u0bf0\u0bf5\5\u01ec\u00f7\2\u0bf1\u0bf5\5\u01f2\u00fa\2\u0bf2\u0bf5"+
		"\5\u01f4\u00fb\2\u0bf3\u0bf5\5\u0176\u00bc\2\u0bf4\u0bed\3\2\2\2\u0bf4"+
		"\u0bee\3\2\2\2\u0bf4\u0bef\3\2\2\2\u0bf4\u0bf0\3\2\2\2\u0bf4\u0bf1\3\2"+
		"\2\2\u0bf4\u0bf2\3\2\2\2\u0bf4\u0bf3\3\2\2\2\u0bf5\u015d\3\2\2\2\u0bf6"+
		"\u0bfb\5\u0160\u00b1\2\u0bf7\u0bfb\5\u0162\u00b2\2\u0bf8\u0bfb\5\u0164"+
		"\u00b3\2\u0bf9\u0bfb\5\u0166\u00b4\2\u0bfa\u0bf6\3\2\2\2\u0bfa\u0bf7\3"+
		"\2\2\2\u0bfa\u0bf8\3\2\2\2\u0bfa\u0bf9\3\2\2\2\u0bfb\u015f\3\2\2\2\u0bfc"+
		"\u0bfd\7=\2\2\u0bfd\u0bfe\5\u02f8\u017d\2\u0bfe\u0161\3\2\2\2\u0bff\u0c00"+
		"\7\u0130\2\2\u0c00\u0c02\5\u02f8\u017d\2\u0c01\u0c03\5\u0230\u0119\2\u0c02"+
		"\u0c01\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0163\3\2\2\2\u0c04\u0c05\7\u0099"+
		"\2\2\u0c05\u0c1a\5\u02f8\u017d\2\u0c06\u0c07\7\u00d0\2\2\u0c07\u0c0c\5"+
		"\u02f4\u017b\2\u0c08\u0c09\7\u0227\2\2\u0c09\u0c0b\5\u02f4\u017b\2\u0c0a"+
		"\u0c08\3\2\2\2\u0c0b\u0c0e\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0d\3\2"+
		"\2\2\u0c0d\u0c1b\3\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0f\u0c10\7+\2\2\u0c10"+
		"\u0c11\7?\2\2\u0c11\u0c12\7\u00d0\2\2\u0c12\u0c17\5\u02f4\u017b\2\u0c13"+
		"\u0c14\7\u0227\2\2\u0c14\u0c16\5\u02f4\u017b\2\u0c15\u0c13\3\2\2\2\u0c16"+
		"\u0c19\3\2\2\2\u0c17\u0c15\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1b\3\2"+
		"\2\2\u0c19\u0c17\3\2\2\2\u0c1a\u0c06\3\2\2\2\u0c1a\u0c0f\3\2\2\2\u0c1b"+
		"\u0165\3\2\2\2\u0c1c\u0c1d\7\u0130\2\2\u0c1d\u0c1e\5\u02f4\u017b\2\u0c1e"+
		"\u0c21\7\u00a2\2\2\u0c1f\u0c22\5\u0178\u00bd\2\u0c20\u0c22\5\u0236\u011c"+
		"\2\u0c21\u0c1f\3\2\2\2\u0c21\u0c20\3\2\2\2\u0c22\u0c24\3\2\2\2\u0c23\u0c25"+
		"\5\u028e\u0148\2\u0c24\u0c23\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0167\3"+
		"\2\2\2\u0c26\u0c2c\5\u016a\u00b6\2\u0c27\u0c2c\5\u016c\u00b7\2\u0c28\u0c2c"+
		"\5\u016e\u00b8\2\u0c29\u0c2c\5\u0172\u00ba\2\u0c2a\u0c2c\5\u0174\u00bb"+
		"\2\u0c2b\u0c26\3\2\2\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c28\3\2\2\2\u0c2b\u0c29"+
		"\3\2\2\2\u0c2b\u0c2a\3\2\2\2\u0c2c\u0169\3\2\2\2\u0c2d\u0c2e\7\u0189\2"+
		"\2\u0c2e\u0c3c\7\u01bb\2\2\u0c2f\u0c30\7\u0158\2\2\u0c30\u0c3d\t$\2\2"+
		"\u0c31\u0c32\7\u00d3\2\2\u0c32\u0c36\7\u00e0\2\2\u0c33\u0c37\7\u0185\2"+
		"\2\u0c34\u0c35\7\u0158\2\2\u0c35\u0c37\7D\2\2\u0c36\u0c33\3\2\2\2\u0c36"+
		"\u0c34\3\2\2\2\u0c37\u0c3d\3\2\2\2\u0c38\u0c39\7\u01ce\2\2\u0c39\u0c3a"+
		"\7\u0170\2\2\u0c3a\u0c3b\7\u0180\2\2\u0c3b\u0c3d\5\u02ce\u0168\2\u0c3c"+
		"\u0c2f\3\2\2\2\u0c3c\u0c31\3\2\2\2\u0c3c\u0c38\3\2\2\2\u0c3c\u0c3d\3\2"+
		"\2\2\u0c3d\u0c40\3\2\2\2\u0c3e\u0c3f\7\u0107\2\2\u0c3f\u0c41\5\u0328\u0195"+
		"\2\u0c40\u0c3e\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u016b\3\2\2\2\u0c42\u0c43"+
		"\7\u0189\2\2\u0c43\u0c4d\t%\2\2\u0c44\u0c4e\7\t\2\2\u0c45\u0c4a\5\u02e4"+
		"\u0173\2\u0c46\u0c47\7\u0227\2\2\u0c47\u0c49\5\u02e4\u0173\2\u0c48\u0c46"+
		"\3\2\2\2\u0c49\u0c4c\3\2\2\2\u0c4a\u0c48\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b"+
		"\u0c4e\3\2\2\2\u0c4c\u0c4a\3\2\2\2\u0c4d\u0c44\3\2\2\2\u0c4d\u0c45\3\2"+
		"\2\2\u0c4e\u0c4f\3\2\2\2\u0c4f\u0c50\t\3\2\2\u0c50\u016d\3\2\2\2\u0c51"+
		"\u0c53\7C\2\2\u0c52\u0c54\7\u01e4\2\2\u0c53\u0c52\3\2\2\2\u0c53\u0c54"+
		"\3\2\2\2\u0c54\u0c62\3\2\2\2\u0c55\u0c56\7B\2\2\u0c56\u0c63\5\u0236\u011c"+
		"\2\u0c57\u0c60\7\u00a4\2\2\u0c58\u0c59\7T\2\2\u0c59\u0c61\5\u0236\u011c"+
		"\2\u0c5a\u0c61\7U\2\2\u0c5b\u0c5e\5\u0236\u011c\2\u0c5c\u0c5d\7\u0227"+
		"\2\2\u0c5d\u0c5f\5\u0236\u011c\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f\3\2\2"+
		"\2\u0c5f\u0c61\3\2\2\2\u0c60\u0c58\3\2\2\2\u0c60\u0c5a\3\2\2\2\u0c60\u0c5b"+
		"\3\2\2\2\u0c61\u0c63\3\2\2\2\u0c62\u0c55\3\2\2\2\u0c62\u0c57\3\2\2\2\u0c62"+
		"\u0c63\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c66\5\u0170\u00b9\2\u0c65\u0c64"+
		"\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u016f\3\2\2\2\u0c67\u0c69\7\u01e5\2"+
		"\2\u0c68\u0c6a\t&\2\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6c"+
		"\3\2\2\2\u0c6b\u0c6d\t\'\2\2\u0c6c\u0c6b\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d"+
		"\u0171\3\2\2\2\u0c6e\u0c70\7\u0170\2\2\u0c6f\u0c71\7\u01e4\2\2\u0c70\u0c6f"+
		"\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c79\3\2\2\2\u0c72\u0c74\7\u01b9\2"+
		"\2\u0c73\u0c75\7\u0178\2\2\u0c74\u0c73\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75"+
		"\u0c76\3\2\2\2\u0c76\u0c7a\5\u02cc\u0167\2\u0c77\u0c78\7\u00a4\2\2\u0c78"+
		"\u0c7a\5\u0328\u0195\2\u0c79\u0c72\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c79\u0c7a"+
		"\3\2\2\2\u0c7a\u0173\3\2\2\2\u0c7b\u0c7c\7\u0178\2\2\u0c7c\u0c7d\5\u02cc"+
		"\u0167\2\u0c7d\u0175\3\2\2\2\u0c7e\u0c7f\7\u0094\2\2\u0c7f\u0c84\7\u0149"+
		"\2\2\u0c80\u0c81\7\u0189\2\2\u0c81\u0c82\7\u019f\2\2\u0c82\u0c83\7\u0238"+
		"\2\2\u0c83\u0c85\5\u0328\u0195\2\u0c84\u0c80\3\2\2\2\u0c84\u0c85\3\2\2"+
		"\2\u0c85\u0c88\3\2\2\2\u0c86\u0c87\7\u00d0\2\2\u0c87\u0c89\5\u0302\u0182"+
		"\2\u0c88\u0c86\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0c90"+
		"\7\u00a2\2\2\u0c8b\u0c91\5\u0178\u00bd\2\u0c8c\u0c91\5\u01ec\u00f7\2\u0c8d"+
		"\u0c91\5\u01f2\u00fa\2\u0c8e\u0c91\5\u01f4\u00fb\2\u0c8f\u0c91\5\u0206"+
		"\u0104\2\u0c90\u0c8b\3\2\2\2\u0c90\u0c8c\3\2\2\2\u0c90\u0c8d\3\2\2\2\u0c90"+
		"\u0c8e\3\2\2\2\u0c90\u0c8f\3\2\2\2\u0c91\u0177\3\2\2\2\u0c92\u0c94\5\u017a"+
		"\u00be\2\u0c93\u0c92\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95"+
		"\u0c9a\5\u0182\u00c2\2\u0c96\u0c99\5\u01e6\u00f4\2\u0c97\u0c99\5\u01e2"+
		"\u00f2\2\u0c98\u0c96\3\2\2\2\u0c98\u0c97\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a"+
		"\u0c98\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0179\3\2\2\2\u0c9c\u0c9a\3\2"+
		"\2\2\u0c9d\u0c9e\7\u01e2\2\2\u0c9e\u0ca3\5\u017c\u00bf\2\u0c9f\u0ca0\7"+
		"\u0227\2\2\u0ca0\u0ca2\5\u017c\u00bf\2\u0ca1\u0c9f\3\2\2\2\u0ca2\u0ca5"+
		"\3\2\2\2\u0ca3\u0ca1\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u017b\3\2\2\2\u0ca5"+
		"\u0ca3\3\2\2\2\u0ca6\u0cb2\5\u02e2\u0172\2\u0ca7\u0ca8\7\u0221\2\2\u0ca8"+
		"\u0cad\5\u0300\u0181\2\u0ca9\u0caa\7\u0227\2\2\u0caa\u0cac\5\u0300\u0181"+
		"\2\u0cab\u0ca9\3\2\2\2\u0cac\u0caf\3\2\2\2\u0cad\u0cab\3\2\2\2\u0cad\u0cae"+
		"\3\2\2\2\u0cae\u0cb0\3\2\2\2\u0caf\u0cad\3\2\2\2\u0cb0\u0cb1\7\u0222\2"+
		"\2\u0cb1\u0cb3\3\2\2\2\u0cb2\u0ca7\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb4"+
		"\3\2\2\2\u0cb4\u0cb5\7\20\2\2\u0cb5\u0cb6\7\u0221\2\2\u0cb6\u0cb8\5\u0182"+
		"\u00c2\2\u0cb7\u0cb9\5\u01e2\u00f2\2\u0cb8\u0cb7\3\2\2\2\u0cb8\u0cb9\3"+
		"\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbc\7\u0222\2\2\u0cbb\u0cbd\5\u017e"+
		"\u00c0\2\u0cbc\u0cbb\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cbf\3\2\2\2\u0cbe"+
		"\u0cc0\5\u0180\u00c1\2\u0cbf\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u017d"+
		"\3\2\2\2\u0cc1\u0cc2\7\u017c\2\2\u0cc2\u0cc3\t(\2\2\u0cc3\u0cc4\7\u009c"+
		"\2\2\u0cc4\u0cc5\7,\2\2\u0cc5\u0cc7\5\u0300\u0181\2\u0cc6\u0cc8\7\21\2"+
		"\2\u0cc7\u0cc6\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cca\3\2\2\2\u0cc9\u0ccb"+
		"\7v\2\2\u0cca\u0cc9\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0cce\3\2\2\2\u0ccc"+
		"\u0ccd\7\u0124\2\2\u0ccd\u0ccf\7\u009c\2\2\u0cce\u0ccc\3\2\2\2\u0cce\u0ccf"+
		"\3\2\2\2\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cd1\7\u0124\2\2\u0cd1\u0cd3\7\u00db"+
		"\2\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0ce6\3\2\2\2\u0cd4"+
		"\u0cd5\7\u0227\2\2\u0cd5\u0cd7\5\u0300\u0181\2\u0cd6\u0cd8\7\21\2\2\u0cd7"+
		"\u0cd6\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8\u0cda\3\2\2\2\u0cd9\u0cdb\7v"+
		"\2\2\u0cda\u0cd9\3\2\2\2\u0cda\u0cdb\3\2\2\2\u0cdb\u0cde\3\2\2\2\u0cdc"+
		"\u0cdd\7\u0124\2\2\u0cdd\u0cdf\7\u009c\2\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdf"+
		"\3\2\2\2\u0cdf\u0ce2\3\2\2\2\u0ce0\u0ce1\7\u0124\2\2\u0ce1\u0ce3\7\u00db"+
		"\2\2\u0ce2\u0ce0\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3\u0ce5\3\2\2\2\u0ce4"+
		"\u0cd4\3\2\2\2\u0ce5\u0ce8\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7\3\2"+
		"\2\2\u0ce7\u0ce9\3\2\2\2\u0ce8\u0ce6\3\2\2\2\u0ce9\u0cea\7\u0189\2\2\u0cea"+
		"\u0ceb\5\u0300\u0181\2\u0ceb\u017f\3\2\2\2\u0cec\u0ced\7`\2\2\u0ced\u0cf2"+
		"\5\u0300\u0181\2\u0cee\u0cef\7\u0227\2\2\u0cef\u0cf1\5\u0300\u0181\2\u0cf0"+
		"\u0cee\3\2\2\2\u0cf1\u0cf4\3\2\2\2\u0cf2\u0cf0\3\2\2\2\u0cf2\u0cf3\3\2"+
		"\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0cf2\3\2\2\2\u0cf5\u0cf6\7\u0189\2\2\u0cf6"+
		"\u0cf7\5\u0300\u0181\2\u0cf7\u0cf8\7\u01b9\2\2\u0cf8\u0cf9\5\u0236\u011c"+
		"\2\u0cf9\u0cfa\7o\2\2\u0cfa\u0cfb\5\u0236\u011c\2\u0cfb\u0181\3\2\2\2"+
		"\u0cfc\u0d00\5\u0186\u00c4\2\u0cfd\u0cff\5\u0184\u00c3\2\u0cfe\u0cfd\3"+
		"\2\2\2\u0cff\u0d02\3\2\2\2\u0d00\u0cfe\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01"+
		"\u0183\3\2\2\2\u0d02\u0d00\3\2\2\2\u0d03\u0d05\7\u01c5\2\2\u0d04\u0d06"+
		"\7\t\2\2\u0d05\u0d04\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d0a\3\2\2\2\u0d07"+
		"\u0d0a\7\u00ce\2\2\u0d08\u0d0a\7\u00fe\2\2\u0d09\u0d03\3\2\2\2\u0d09\u0d07"+
		"\3\2\2\2\u0d09\u0d08\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0c\5\u0186\u00c4"+
		"\2\u0d0c\u0185\3\2\2\2\u0d0d\u0d13\5\u0188\u00c5\2\u0d0e\u0d0f\7\u0221"+
		"\2\2\u0d0f\u0d10\5\u0182\u00c2\2\u0d10\u0d11\7\u0222\2\2\u0d11\u0d13\3"+
		"\2\2\2\u0d12\u0d0d\3\2\2\2\u0d12\u0d0e\3\2\2\2\u0d13\u0187\3\2\2\2\u0d14"+
		"\u0d16\7\u0181\2\2\u0d15\u0d17\t)\2\2\u0d16\u0d15\3\2\2\2\u0d16\u0d17"+
		"\3\2\2\2\u0d17\u0d21\3\2\2\2\u0d18\u0d22\7\u0224\2\2\u0d19\u0d1e\5\u018a"+
		"\u00c6\2\u0d1a\u0d1b\7\u0227\2\2\u0d1b\u0d1d\5\u018a\u00c6\2\u0d1c\u0d1a"+
		"\3\2\2\2\u0d1d\u0d20\3\2\2\2\u0d1e\u0d1c\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f"+
		"\u0d22\3\2\2\2\u0d20\u0d1e\3\2\2\2\u0d21\u0d18\3\2\2\2\u0d21\u0d19\3\2"+
		"\2\2\u0d22\u0d24\3\2\2\2\u0d23\u0d25\5\u02c4\u0163\2\u0d24\u0d23\3\2\2"+
		"\2\u0d24\u0d25\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\5\u018c\u00c7\2"+
		"\u0d27\u0d29\5\u02c0\u0161\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29"+
		"\u0d2b\3\2\2\2\u0d2a\u0d2c\5\u01b4\u00db\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c"+
		"\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d2f\5\u01b8\u00dd\2\u0d2e\u0d2d\3"+
		"\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d31\3\2\2\2\u0d30\u0d32\5\u01c4\u00e3"+
		"\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0189\3\2\2\2\u0d33\u0d35"+
		"\5\u018e\u00c8\2\u0d34\u0d36\5\u02ba\u015e\2\u0d35\u0d34\3\2\2\2\u0d35"+
		"\u0d36\3\2\2\2\u0d36\u018b\3\2\2\2\u0d37\u0d38\7\u00a8\2\2\u0d38\u0d39"+
		"\5\u0190\u00c9\2\u0d39\u018d\3\2\2\2\u0d3a\u0d3b\5\u0302\u0182\2\u0d3b"+
		"\u0d3c\7\u021a\2\2\u0d3c\u0d3d\7\u0224\2\2\u0d3d\u0d40\3\2\2\2\u0d3e\u0d40"+
		"\5\u0236\u011c\2\u0d3f\u0d3a\3\2\2\2\u0d3f\u0d3e\3\2\2\2\u0d40\u018f\3"+
		"\2\2\2\u0d41\u0d46\5\u0192\u00ca\2\u0d42\u0d43\7\u0227\2\2\u0d43\u0d45"+
		"\5\u0192\u00ca\2\u0d44\u0d42\3\2\2\2\u0d45\u0d48\3\2\2\2\u0d46\u0d44\3"+
		"\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0191\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d49"+
		"\u0d4d\5\u0194\u00cb\2\u0d4a\u0d4c\5\u0196\u00cc\2\u0d4b\u0d4a\3\2\2\2"+
		"\u0d4c\u0d4f\3\2\2\2\u0d4d\u0d4b\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d52"+
		"\3\2\2\2\u0d4f\u0d4d\3\2\2\2\u0d50\u0d53\5\u01a2\u00d2\2\u0d51\u0d53\5"+
		"\u01ae\u00d8\2\u0d52\u0d50\3\2\2\2\u0d52\u0d51\3\2\2\2\u0d52\u0d53\3\2"+
		"\2\2\u0d53\u0193\3\2\2\2\u0d54\u0d57\5\u0224\u0113\2\u0d55\u0d58\5\u01a2"+
		"\u00d2\2\u0d56\u0d58\5\u01ae\u00d8\2\u0d57\u0d55\3\2\2\2\u0d57\u0d56\3"+
		"\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d71\3\2\2\2\u0d59\u0d5a\7\u0221\2\2"+
		"\u0d5a\u0d5e\5\u0192\u00ca\2\u0d5b\u0d5d\5\u0184\u00c3\2\u0d5c\u0d5b\3"+
		"\2\2\2\u0d5d\u0d60\3\2\2\2\u0d5e\u0d5c\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f"+
		"\u0d61\3\2\2\2\u0d60\u0d5e\3\2\2\2\u0d61\u0d64\7\u0222\2\2\u0d62\u0d65"+
		"\5\u01a2\u00d2\2\u0d63\u0d65\5\u01ae\u00d8\2\u0d64\u0d62\3\2\2\2\u0d64"+
		"\u0d63\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d71\3\2\2\2\u0d66\u0d67\7\u012f"+
		"\2\2\u0d67\u0d68\7\u0221\2\2\u0d68\u0d69\5\u0224\u0113\2\u0d69\u0d6a\7"+
		"\u0222\2\2\u0d6a\u0d71\3\2\2\2\u0d6b\u0d6e\5\u0224\u0113\2\u0d6c\u0d6f"+
		"\5\u01a2\u00d2\2\u0d6d\u0d6f\5\u01ae\u00d8\2\u0d6e\u0d6c\3\2\2\2\u0d6e"+
		"\u0d6d\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d71\3\2\2\2\u0d70\u0d54\3\2"+
		"\2\2\u0d70\u0d59\3\2\2\2\u0d70\u0d66\3\2\2\2\u0d70\u0d6b\3\2\2\2\u0d71"+
		"\u0d75\3\2\2\2\u0d72\u0d74\5\u01a0\u00d1\2\u0d73\u0d72\3\2\2\2\u0d74\u0d77"+
		"\3\2\2\2\u0d75\u0d73\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u0d79\3\2\2\2\u0d77"+
		"\u0d75\3\2\2\2\u0d78\u0d7a\5\u02bc\u015f\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a"+
		"\3\2\2\2\u0d7a\u0195\3\2\2\2\u0d7b\u0d7d\5\u019e\u00d0\2\u0d7c\u0d7b\3"+
		"\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f\3\2\2\2\u0d7e\u0d80\t*\2\2\u0d7f"+
		"\u0d7e\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d83\3\2\2\2\u0d81\u0d84\7\u00c7"+
		"\2\2\u0d82\u0d84\5\u019c\u00cf\2\u0d83\u0d81\3\2\2\2\u0d83\u0d82\3\2\2"+
		"\2\u0d83\u0d84\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d86\7\u00d6\2\2\u0d86"+
		"\u0d88\5\u0194\u00cb\2\u0d87\u0d89\5\u019e\u00d0\2\u0d88\u0d87\3\2\2\2"+
		"\u0d88\u0d89\3\2\2\2\u0d89\u0d8e\3\2\2\2\u0d8a\u0d8d\5\u0198\u00cd\2\u0d8b"+
		"\u0d8d\5\u019a\u00ce\2\u0d8c\u0d8a\3\2\2\2\u0d8c\u0d8b\3\2\2\2\u0d8d\u0d90"+
		"\3\2\2\2\u0d8e\u0d8c\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0197\3\2\2\2\u0d90"+
		"\u0d8e\3\2\2\2\u0d91\u0d92\7\u012e\2\2\u0d92\u0d93\5\u0232\u011a\2\u0d93"+
		"\u0199\3\2\2\2\u0d94\u0d95\7\u01cf\2\2\u0d95\u0d96\7\u0221\2\2\u0d96\u0d9b"+
		"\5\u0300\u0181\2\u0d97\u0d98\7\u0227\2\2\u0d98\u0d9a\5\u0300\u0181\2\u0d99"+
		"\u0d97\3\2\2\2\u0d9a\u0d9d\3\2\2\2\u0d9b\u0d99\3\2\2\2\u0d9b\u0d9c\3\2"+
		"\2\2\u0d9c\u0d9e\3\2\2\2\u0d9d\u0d9b\3\2\2\2\u0d9e\u0d9f\7\u0222\2\2\u0d9f"+
		"\u019b\3\2\2\2\u0da0\u0da2\t+\2\2\u0da1\u0da3\7\u0138\2\2\u0da2\u0da1"+
		"\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u019d\3\2\2\2\u0da4\u0da5\7\u013f\2"+
		"\2\u0da5\u0db3\7,\2\2\u0da6\u0da7\7\u0221\2\2\u0da7\u0da8\5\u0182\u00c2"+
		"\2\u0da8\u0da9\7\u0222\2\2\u0da9\u0db4\3\2\2\2\u0daa\u0db4\5\u0230\u0119"+
		"\2\u0dab\u0db0\5\u0236\u011c\2\u0dac\u0dad\7\u0227\2\2\u0dad\u0daf\5\u0236"+
		"\u011c\2\u0dae\u0dac\3\2\2\2\u0daf\u0db2\3\2\2\2\u0db0\u0dae\3\2\2\2\u0db0"+
		"\u0db1\3\2\2\2\u0db1\u0db4\3\2\2\2\u0db2\u0db0\3\2\2\2\u0db3\u0da6\3\2"+
		"\2\2\u0db3\u0daa\3\2\2\2\u0db3\u0dab\3\2\2\2\u0db4\u019f\3\2\2\2\u0db5"+
		"\u0db6\7\u01d9\2\2\u0db6\u0db7\7\37\2\2\u0db7\u0db8\t,\2\2\u0db8\u0dbe"+
		"\5\u0236\u011c\2\u0db9\u0dba\7\20\2\2\u0dba\u0dbb\7\u0129\2\2\u0dbb\u0dbc"+
		"\t-\2\2\u0dbc\u0dbe\5\u0236\u011c\2\u0dbd\u0db5\3\2\2\2\u0dbd\u0db9\3"+
		"\2\2\2\u0dbe\u01a1\3\2\2\2\u0dbf\u0dc1\7\u0148\2\2\u0dc0\u0dc2\7\u01e6"+
		"\2\2\u0dc1\u0dc0\3\2\2\2\u0dc1\u0dc2\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3"+
		"\u0dc4\7\u0221\2\2\u0dc4\u0dc9\5\u01a4\u00d3\2\u0dc5\u0dc6\7\u0227\2\2"+
		"\u0dc6\u0dc8\5\u01a4\u00d3\2\u0dc7\u0dc5\3\2\2\2\u0dc8\u0dcb\3\2\2\2\u0dc9"+
		"\u0dc7\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcc\3\2\2\2\u0dcb\u0dc9\3\2"+
		"\2\2\u0dcc\u0dcd\5\u01a6\u00d4\2\u0dcd\u0dce\5\u01a8\u00d5\2\u0dce\u0dcf"+
		"\7\u0222\2\2\u0dcf\u01a3\3\2\2\2\u0dd0\u0dd1\5\u02e0\u0171\2\u0dd1\u0dd2"+
		"\7\u0221\2\2\u0dd2\u0dd3\5\u0236\u011c\2\u0dd3\u0dd5\7\u0222\2\2\u0dd4"+
		"\u0dd6\5\u02ba\u015e\2\u0dd5\u0dd4\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u01a5"+
		"\3\2\2\2\u0dd7\u0de4\7\u00a2\2\2\u0dd8\u0de5\5\u0300\u0181\2\u0dd9\u0dda"+
		"\7\u0221\2\2\u0dda\u0ddf\5\u0300\u0181\2\u0ddb\u0ddc\7\u0227\2\2\u0ddc"+
		"\u0dde\5\u0300\u0181\2\u0ddd\u0ddb\3\2\2\2\u0dde\u0de1\3\2\2\2\u0ddf\u0ddd"+
		"\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de2\3\2\2\2\u0de1\u0ddf\3\2\2\2\u0de2"+
		"\u0de3\7\u0222\2\2\u0de3\u0de5\3\2\2\2\u0de4\u0dd8\3\2\2\2\u0de4\u0dd9"+
		"\3\2\2\2\u0de5\u01a7\3\2\2\2\u0de6\u0de7\7\u00b8\2\2\u0de7\u0df9\7\u0221"+
		"\2\2\u0de8\u0dfa\5\u0182\u00c2\2\u0de9\u0dee\7\r\2\2\u0dea\u0deb\7\u0227"+
		"\2\2\u0deb\u0ded\7\r\2\2\u0dec\u0dea\3\2\2\2\u0ded\u0df0\3\2\2\2\u0dee"+
		"\u0dec\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0dfa\3\2\2\2\u0df0\u0dee\3\2"+
		"\2\2\u0df1\u0df6\5\u01aa\u00d6\2\u0df2\u0df3\7\u0227\2\2\u0df3\u0df5\5"+
		"\u01aa\u00d6\2\u0df4\u0df2\3\2\2\2\u0df5\u0df8\3\2\2\2\u0df6\u0df4\3\2"+
		"\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0dfa\3\2\2\2\u0df8\u0df6\3\2\2\2\u0df9"+
		"\u0de8\3\2\2\2\u0df9\u0de9\3\2\2\2\u0df9\u0df1\3\2\2\2\u0dfa\u0dfb\3\2"+
		"\2\2\u0dfb\u0dfc\7\u0222\2\2\u0dfc\u01a9\3\2\2\2\u0dfd\u0dff\5\u01ac\u00d7"+
		"\2\u0dfe\u0e00\5\u02ba\u015e\2\u0dff\u0dfe\3\2\2\2\u0dff\u0e00\3\2\2\2"+
		"\u0e00\u01ab\3\2\2\2\u0e01\u0e04\5\u0236\u011c\2\u0e02\u0e04\5\u0230\u0119"+
		"\2\u0e03\u0e01\3\2\2\2\u0e03\u0e02\3\2\2\2\u0e04\u01ad\3\2\2\2\u0e05\u0e08"+
		"\7\u01c8\2\2\u0e06\u0e07\t.\2\2\u0e07\u0e09\7\u0124\2\2\u0e08\u0e06\3"+
		"\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e17\7\u0221\2\2"+
		"\u0e0b\u0e18\5\u0300\u0181\2\u0e0c\u0e0d\7\u0221\2\2\u0e0d\u0e12\5\u0300"+
		"\u0181\2\u0e0e\u0e0f\7\u0227\2\2\u0e0f\u0e11\5\u0300\u0181\2\u0e10\u0e0e"+
		"\3\2\2\2\u0e11\u0e14\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13"+
		"\u0e15\3\2\2\2\u0e14\u0e12\3\2\2\2\u0e15\u0e16\7\u0222\2\2\u0e16\u0e18"+
		"\3\2\2\2\u0e17\u0e0b\3\2\2\2\u0e17\u0e0c\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19"+
		"\u0e1a\5\u01a6\u00d4\2\u0e1a\u0e1b\5\u01b0\u00d9\2\u0e1b\u0e1c\7\u0222"+
		"\2\2\u0e1c\u01af\3\2\2\2\u0e1d\u0e1e\7\u00b8\2\2\u0e1e\u0e1f\7\u0221\2"+
		"\2\u0e1f\u0e24\5\u01b2\u00da\2\u0e20\u0e21\7\u0227\2\2\u0e21\u0e23\5\u01b2"+
		"\u00da\2\u0e22\u0e20\3\2\2\2\u0e23\u0e26\3\2\2\2\u0e24\u0e22\3\2\2\2\u0e24"+
		"\u0e25\3\2\2\2\u0e25\u0e27\3\2\2\2\u0e26\u0e24\3\2\2\2\u0e27\u0e28\7\u0222"+
		"\2\2\u0e28\u01b1\3\2\2\2\u0e29\u0e36\5\u0300\u0181\2\u0e2a\u0e2b\7\u0221"+
		"\2\2\u0e2b\u0e30\5\u0300\u0181\2\u0e2c\u0e2d\7\u0227\2\2\u0e2d\u0e2f\5"+
		"\u0300\u0181\2\u0e2e\u0e2c\3\2\2\2\u0e2f\u0e32\3\2\2\2\u0e30\u0e2e\3\2"+
		"\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e33\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e33"+
		"\u0e34\7\u0222\2\2\u0e34\u0e36\3\2\2\2\u0e35\u0e29\3\2\2\2\u0e35\u0e2a"+
		"\3\2\2\2\u0e36\u0e46\3\2\2\2\u0e37\u0e44\7\20\2\2\u0e38\u0e45\5\u0322"+
		"\u0192\2\u0e39\u0e3a\7\u0221\2\2\u0e3a\u0e3f\5\u0322\u0192\2\u0e3b\u0e3c"+
		"\7\u0227\2\2\u0e3c\u0e3e\5\u0322\u0192\2\u0e3d\u0e3b\3\2\2\2\u0e3e\u0e41"+
		"\3\2\2\2\u0e3f\u0e3d\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e42\3\2\2\2\u0e41"+
		"\u0e3f\3\2\2\2\u0e42\u0e43\7\u0222\2\2\u0e43\u0e45\3\2\2\2\u0e44\u0e38"+
		"\3\2\2\2\u0e44\u0e39\3\2\2\2\u0e45\u0e47\3\2\2\2\u0e46\u0e37\3\2\2\2\u0e46"+
		"\u0e47\3\2\2\2\u0e47\u01b3\3\2\2\2\u0e48\u0e49\7J\2\2\u0e49\u0e4b\7,\2"+
		"\2\u0e4a\u0e4c\7\u0117\2\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c"+
		"\u0e4d\3\2\2\2\u0e4d\u0e4f\5\u0232\u011a\2\u0e4e\u0e50\5\u01b6\u00dc\2"+
		"\u0e4f\u0e4e\3\2\2\2\u0e4f\u0e50\3\2\2\2\u0e50\u0e5a\3\2\2\2\u0e51\u0e52"+
		"\5\u01b6\u00dc\2\u0e52\u0e53\7J\2\2\u0e53\u0e55\7,\2\2\u0e54\u0e56\7\u0117"+
		"\2\2\u0e55\u0e54\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57"+
		"\u0e58\5\u0232\u011a\2\u0e58\u0e5a\3\2\2\2\u0e59\u0e48\3\2\2\2\u0e59\u0e51"+
		"\3\2\2\2\u0e5a\u01b5\3\2\2\2\u0e5b\u0e5c\7\u019c\2\2\u0e5c\u0e5d\7\u01e2"+
		"\2\2\u0e5d\u0e5e\5\u0232\u011a\2\u0e5e\u01b7\3\2\2\2\u0e5f\u0e60\7\u00ad"+
		"\2\2\u0e60\u0e61\7,\2\2\u0e61\u0e66\5\u01ba\u00de\2\u0e62\u0e63\7\u0227"+
		"\2\2\u0e63\u0e65\5\u01ba\u00de\2\u0e64\u0e62\3\2\2\2\u0e65\u0e68\3\2\2"+
		"\2\u0e66\u0e64\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67\u0e6a\3\2\2\2\u0e68\u0e66"+
		"\3\2\2\2\u0e69\u0e6b\5\u01c2\u00e2\2\u0e6a\u0e69\3\2\2\2\u0e6a\u0e6b\3"+
		"\2\2\2\u0e6b\u0e7a\3\2\2\2\u0e6c\u0e77\5\u01c2\u00e2\2\u0e6d\u0e6e\7\u00ad"+
		"\2\2\u0e6e\u0e6f\7,\2\2\u0e6f\u0e74\5\u01ba\u00de\2\u0e70\u0e71\7\u0227"+
		"\2\2\u0e71\u0e73\5\u01ba\u00de\2\u0e72\u0e70\3\2\2\2\u0e73\u0e76\3\2\2"+
		"\2\u0e74\u0e72\3\2\2\2\u0e74\u0e75\3\2\2\2\u0e75\u0e78\3\2\2\2\u0e76\u0e74"+
		"\3\2\2\2\u0e77\u0e6d\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e7a\3\2\2\2\u0e79"+
		"\u0e5f\3\2\2\2\u0e79\u0e6c\3\2\2\2\u0e7a\u01b9\3\2\2\2\u0e7b\u0e7f\5\u01be"+
		"\u00e0\2\u0e7c\u0e7f\5\u01bc\u00df\2\u0e7d\u0e7f\5\u0236\u011c\2\u0e7e"+
		"\u0e7b\3\2\2\2\u0e7e\u0e7c\3\2\2\2\u0e7e\u0e7d\3\2\2\2\u0e7f\u01bb\3\2"+
		"\2\2\u0e80\u0e81\t/\2\2\u0e81\u0e82\7\u0221\2\2\u0e82\u0e87\5\u01c0\u00e1"+
		"\2\u0e83\u0e84\7\u0227\2\2\u0e84\u0e86\5\u01c0\u00e1\2\u0e85\u0e83\3\2"+
		"\2\2\u0e86\u0e89\3\2\2\2\u0e87\u0e85\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88"+
		"\u0e8a\3\2\2\2\u0e89\u0e87\3\2\2\2\u0e8a\u0e8b\7\u0222\2\2\u0e8b\u01bd"+
		"\3\2\2\2\u0e8c\u0e8d\7\u00af\2\2\u0e8d\u0e8e\7\u018a\2\2\u0e8e\u0e8f\7"+
		"\u0221\2\2\u0e8f\u0e94\5\u01c0\u00e1\2\u0e90\u0e91\7\u0227\2\2\u0e91\u0e93"+
		"\5\u01c0\u00e1\2\u0e92\u0e90\3\2\2\2\u0e93\u0e96\3\2\2\2\u0e94\u0e92\3"+
		"\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e97\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e97"+
		"\u0e98\7\u0222\2\2\u0e98\u01bf\3\2\2\2\u0e99\u0e9d\5\u01bc\u00df\2\u0e9a"+
		"\u0e9d\5\u0230\u0119\2\u0e9b\u0e9d\5\u0236\u011c\2\u0e9c\u0e99\3\2\2\2"+
		"\u0e9c\u0e9a\3\2\2\2\u0e9c\u0e9b\3\2\2\2\u0e9d\u01c1\3\2\2\2\u0e9e\u0e9f"+
		"\7\u00b1\2\2\u0e9f\u0ea0\5\u0232\u011a\2\u0ea0\u01c3\3\2\2\2\u0ea1\u0ea5"+
		"\7\u0103\2\2\u0ea2\u0ea4\5\u01c6\u00e4\2\u0ea3\u0ea2\3\2\2\2\u0ea4\u0ea7"+
		"\3\2\2\2\u0ea5\u0ea3\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0ea9\3\2\2\2\u0ea7"+
		"\u0ea5\3\2\2\2\u0ea8\u0eaa\5\u01c8\u00e5\2\u0ea9\u0ea8\3\2\2\2\u0ea9\u0eaa"+
		"\3\2\2\2\u0eaa\u0eae\3\2\2\2\u0eab\u0ead\5\u01ca\u00e6\2\u0eac\u0eab\3"+
		"\2\2\2\u0ead\u0eb0\3\2\2\2\u0eae\u0eac\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf"+
		"\u0eb1\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb1\u0eb2\5\u01cc\u00e7\2\u0eb2\u01c5"+
		"\3\2\2\2\u0eb3\u0eb4\t\60\2\2\u0eb4\u0ebc\7\u010b\2\2\u0eb5\u0eb9\7\u01c6"+
		"\2\2\u0eb6\u0eba\7x\2\2\u0eb7\u0eb8\7\u0192\2\2\u0eb8\u0eba\7\u015e\2"+
		"\2\u0eb9\u0eb6\3\2\2\2\u0eb9\u0eb7\3\2\2\2\u0eba\u0ebc\3\2\2\2\u0ebb\u0eb3"+
		"\3\2\2\2\u0ebb\u0eb5\3\2\2\2\u0ebc\u01c7\3\2\2\2\u0ebd\u0ebe\7\u016a\2"+
		"\2\u0ebe\u0ebf\t\61\2\2\u0ebf\u0ec0\7\u0174\2\2\u0ec0\u01c9\3\2\2\2\u0ec1"+
		"\u0ec2\7\u015e\2\2\u0ec2\u0ec3\5\u02dc\u016f\2\u0ec3\u0ec4\7\u012e\2\2"+
		"\u0ec4\u0ec5\7\u0221\2\2\u0ec5\u0ec6\5\u0182\u00c2\2\u0ec6\u0ec7\7\u0222"+
		"\2\2\u0ec7\u0ecb\5\u01ce\u00e8\2\u0ec8\u0eca\5\u01c6\u00e4\2\u0ec9\u0ec8"+
		"\3\2\2\2\u0eca\u0ecd\3\2\2\2\u0ecb\u0ec9\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc"+
		"\u01cb\3\2\2\2\u0ecd\u0ecb\3\2\2\2\u0ece\u0ecf\7\u00f3\2\2\u0ecf\u0ed1"+
		"\5\u02de\u0170\2\u0ed0\u0ece\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed2\3"+
		"\2\2\2\u0ed2\u0ed6\5\u01ce\u00e8\2\u0ed3\u0ed5\5\u01c6\u00e4\2\u0ed4\u0ed3"+
		"\3\2\2\2\u0ed5\u0ed8\3\2\2\2\u0ed6\u0ed4\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7"+
		"\u0ed9\3\2\2\2\u0ed8\u0ed6\3\2\2\2\u0ed9\u0eda\5\u01d6\u00ec\2\u0eda\u01cd"+
		"\3\2\2\2\u0edb\u0edd\5\u01d0\u00e9\2\u0edc\u0edb\3\2\2\2\u0edc\u0edd\3"+
		"\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0edf\7x\2\2\u0edf\u0ee0\7,\2\2\u0ee0"+
		"\u0ee1\5\u01d2\u00ea\2\u0ee1\u0ee2\7\u00f9\2\2\u0ee2\u0ee3\5\u01d2\u00ea"+
		"\2\u0ee3\u01cf\3\2\2\2\u0ee4\u0ee5\7\u013f\2\2\u0ee5\u0ee6\7,\2\2\u0ee6"+
		"\u0ee7\5\u01d2\u00ea\2\u0ee7\u01d1\3\2\2\2\u0ee8\u0ee9\7\u0221\2\2\u0ee9"+
		"\u0eee\5\u01d4\u00eb\2\u0eea\u0eeb\7\u0227\2\2\u0eeb\u0eed\5\u01d4\u00eb"+
		"\2\u0eec\u0eea\3\2\2\2\u0eed\u0ef0\3\2\2\2\u0eee\u0eec\3\2\2\2\u0eee\u0eef"+
		"\3\2\2\2\u0eef\u0ef1\3\2\2\2\u0ef0\u0eee\3\2\2\2\u0ef1\u0ef2\7\u0222\2"+
		"\2\u0ef2\u01d3\3\2\2\2\u0ef3\u0ef5\5\u0236\u011c\2\u0ef4\u0ef6\5\u02bc"+
		"\u015f\2\u0ef5\u0ef4\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u01d5\3\2\2\2\u0ef7"+
		"\u0ef9\5\u01d8\u00ed\2\u0ef8\u0ef7\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa"+
		"\3\2\2\2\u0efa\u0efb\7\u0221\2\2\u0efb\u0f00\5\u01da\u00ee\2\u0efc\u0efd"+
		"\7\u0227\2\2\u0efd\u0eff\5\u01da\u00ee\2\u0efe\u0efc\3\2\2\2\u0eff\u0f02"+
		"\3\2\2\2\u0f00\u0efe\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0f03\3\2\2\2\u0f02"+
		"\u0f00\3\2\2\2\u0f03\u0f04\7\u0222\2\2\u0f04\u01d7\3\2\2\2\u0f05\u0f0b"+
		"\7\u0175\2\2\u0f06\u0f0c\7\u01ca\2\2\u0f07\u0f09\7\u01cc\2\2\u0f08\u0f0a"+
		"\7\t\2\2\u0f09\u0f08\3\2\2\2\u0f09\u0f0a\3\2\2\2\u0f0a\u0f0c\3\2\2\2\u0f0b"+
		"\u0f06\3\2\2\2\u0f0b\u0f07\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f0f\3\2"+
		"\2\2\u0f0d\u0f0e\t\62\2\2\u0f0e\u0f10\7\u0134\2\2\u0f0f\u0f0d\3\2\2\2"+
		"\u0f0f\u0f10\3\2\2\2\u0f10\u0f12\3\2\2\2\u0f11\u0f13\5\u01de\u00f0\2\u0f12"+
		"\u0f11\3\2\2\2\u0f12\u0f13\3\2\2\2\u0f13\u01d9\3\2\2\2\u0f14\u0f1a\7\u01ca"+
		"\2\2\u0f15\u0f17\7\u01cc\2\2\u0f16\u0f18\7\t\2\2\u0f17\u0f16\3\2\2\2\u0f17"+
		"\u0f18\3\2\2\2\u0f18\u0f1a\3\2\2\2\u0f19\u0f14\3\2\2\2\u0f19\u0f15\3\2"+
		"\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f1d\5\u01dc\u00ef"+
		"\2\u0f1c\u0f1e\5\u01e2\u00f2\2\u0f1d\u0f1c\3\2\2\2\u0f1d\u0f1e\3\2\2\2"+
		"\u0f1e\u0f1f\3\2\2\2\u0f1f\u0f20\7\u0238\2\2\u0f20\u0f21\5\u0236\u011c"+
		"\2\u0f21\u01db\3\2\2\2\u0f22\u0f23\5\u025c\u012f\2\u0f23\u01dd\3\2\2\2"+
		"\u0f24\u0f25\7\u00d4\2\2\u0f25\u0f26\7\u0221\2\2\u0f26\u0f27\5\u0236\u011c"+
		"\2\u0f27\u0f29\7\u0222\2\2\u0f28\u0f2a\5\u01e0\u00f1\2\u0f29\u0f28\3\2"+
		"\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u01df\3\2\2\2\u0f2b\u0f2c\7\u01c9\2\2\u0f2c"+
		"\u0f2d\7\u0221\2\2\u0f2d\u0f2e\5\u0232\u011a\2\u0f2e\u0f2f\7\u0222\2\2"+
		"\u0f2f\u01e1\3\2\2\2\u0f30\u0f32\7\u0134\2\2\u0f31\u0f33\7\u018f\2\2\u0f32"+
		"\u0f31\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f35\7,"+
		"\2\2\u0f35\u0f3a\5\u01e4\u00f3\2\u0f36\u0f37\7\u0227\2\2\u0f37\u0f39\5"+
		"\u01e4\u00f3\2\u0f38\u0f36\3\2\2\2\u0f39\u0f3c\3\2\2\2\u0f3a\u0f38\3\2"+
		"\2\2\u0f3a\u0f3b\3\2\2\2\u0f3b\u01e3\3\2\2\2\u0f3c\u0f3a\3\2\2\2\u0f3d"+
		"\u0f3f\5\u0236\u011c\2\u0f3e\u0f40\t\63\2\2\u0f3f\u0f3e\3\2\2\2\u0f3f"+
		"\u0f40\3\2\2\2\u0f40\u0f43\3\2\2\2\u0f41\u0f42\7\u0124\2\2\u0f42\u0f44"+
		"\t\64\2\2\u0f43\u0f41\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44\u01e5\3\2\2\2"+
		"\u0f45\u0f46\7\u00a2\2\2\u0f46\u0f48\7\u01ca\2\2\u0f47\u0f49\5\u01e8\u00f5"+
		"\2\u0f48\u0f47\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4b\3\2\2\2\u0f4a\u0f4c"+
		"\5\u01ea\u00f6\2\u0f4b\u0f4a\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u01e7\3"+
		"\2\2\2\u0f4d\u0f4e\7\u0129\2\2\u0f4e\u0f53\5\u0300\u0181\2\u0f4f\u0f50"+
		"\7\u0227\2\2\u0f50\u0f52\5\u0300\u0181\2\u0f51\u0f4f\3\2\2\2\u0f52\u0f55"+
		"\3\2\2\2\u0f53\u0f51\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u01e9\3\2\2\2\u0f55"+
		"\u0f53\3\2\2\2\u0f56\u0f57\7\u0194\2\2\u0f57\u0f5c\7\u00eb\2\2\u0f58\u0f5c"+
		"\7\u0122\2\2\u0f59\u0f5a\7\u01db\2\2\u0f5a\u0f5c\5\u0236\u011c\2\u0f5b"+
		"\u0f56\3\2\2\2\u0f5b\u0f58\3\2\2\2\u0f5b\u0f59\3\2\2\2\u0f5c\u01eb\3\2"+
		"\2\2\u0f5d\u0f5e\7\u01ca\2\2\u0f5e\u0f5f\5\u021a\u010e\2\u0f5f\u0f61\5"+
		"\u01ee\u00f8\2\u0f60\u0f62\5\u02c0\u0161\2\u0f61\u0f60\3\2\2\2\u0f61\u0f62"+
		"\3\2\2\2\u0f62\u0f64\3\2\2\2\u0f63\u0f65\5\u021c\u010f\2\u0f64\u0f63\3"+
		"\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f67\3\2\2\2\u0f66\u0f68\5\u021e\u0110"+
		"\2\u0f67\u0f66\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u01ed\3\2\2\2\u0f69\u0f79"+
		"\7\u0189\2\2\u0f6a\u0f6f\5\u01f0\u00f9\2\u0f6b\u0f6c\7\u0227\2\2\u0f6c"+
		"\u0f6e\5\u01f0\u00f9\2\u0f6d\u0f6b\3\2\2\2\u0f6e\u0f71\3\2\2\2\u0f6f\u0f6d"+
		"\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f7a\3\2\2\2\u0f71\u0f6f\3\2\2\2\u0f72"+
		"\u0f73\7\u01d1\2\2\u0f73\u0f74\7\u0221\2\2\u0f74\u0f75\5\u032a\u0196\2"+
		"\u0f75\u0f76\7\u0222\2\2\u0f76\u0f77\7\u0238\2\2\u0f77\u0f78\5\u0236\u011c"+
		"\2\u0f78\u0f7a\3\2\2\2\u0f79\u0f6a\3\2\2\2\u0f79\u0f72\3\2\2\2\u0f7a\u01ef"+
		"\3\2\2\2\u0f7b\u0f7c\5\u0300\u0181\2\u0f7c\u0f7d\7\u0238\2\2\u0f7d\u0f7e"+
		"\5\u0236\u011c\2\u0f7e\u0f8d\3\2\2\2\u0f7f\u0f80\7\u0221\2\2\u0f80\u0f85"+
		"\5\u0300\u0181\2\u0f81\u0f82\7\u0227\2\2\u0f82\u0f84\5\u0300\u0181\2\u0f83"+
		"\u0f81\3\2\2\2\u0f84\u0f87\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f85\u0f86\3\2"+
		"\2\2\u0f86\u0f88\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f88\u0f89\7\u0222\2\2\u0f89"+
		"\u0f8a\7\u0238\2\2\u0f8a\u0f8b\5\u0182\u00c2\2\u0f8b\u0f8d\3\2\2\2\u0f8c"+
		"\u0f7b\3\2\2\2\u0f8c\u0f7f\3\2\2\2\u0f8d\u01f1\3\2\2\2\u0f8e\u0f90\7t"+
		"\2\2\u0f8f\u0f91\7\u00a8\2\2\u0f90\u0f8f\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91"+
		"\u0f92\3\2\2\2\u0f92\u0f94\5\u021a\u010e\2\u0f93\u0f95\5\u02c0\u0161\2"+
		"\u0f94\u0f93\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0f97\3\2\2\2\u0f96\u0f98"+
		"\5\u021c\u010f\2\u0f97\u0f96\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f9a\3"+
		"\2\2\2\u0f99\u0f9b\5\u021e\u0110\2\u0f9a\u0f99\3\2\2\2\u0f9a\u0f9b\3\2"+
		"\2\2\u0f9b\u01f3\3\2\2\2\u0f9c\u0f9f\7\u00c9\2\2\u0f9d\u0fa0\5\u01f6\u00fc"+
		"\2\u0f9e\u0fa0\5\u01f8\u00fd\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0f9e\3\2\2\2"+
		"\u0fa0\u01f5\3\2\2\2\u0fa1\u0fa7\5\u0202\u0102\2\u0fa2\u0fa4\5\u0204\u0103"+
		"\2\u0fa3\u0fa5\5\u021c\u010f\2\u0fa4\u0fa3\3\2\2\2\u0fa4\u0fa5\3\2\2\2"+
		"\u0fa5\u0fa8\3\2\2\2\u0fa6\u0fa8\5\u0178\u00bd\2\u0fa7\u0fa2\3\2\2\2\u0fa7"+
		"\u0fa6\3\2\2\2\u0fa8\u0faa\3\2\2\2\u0fa9\u0fab\5\u021e\u0110\2\u0faa\u0fa9"+
		"\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u01f7\3\2\2\2\u0fac\u0fae\7\t\2\2\u0fad"+
		"\u0faf\5\u01fa\u00fe\2\u0fae\u0fad\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fae"+
		"\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u0fb4\3\2\2\2\u0fb2\u0fb4\5\u01fc\u00ff"+
		"\2\u0fb3\u0fac\3\2\2\2\u0fb3\u0fb2\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0fb6"+
		"\5\u0178\u00bd\2\u0fb6\u01f9\3\2\2\2\u0fb7\u0fb9\5\u0202\u0102\2\u0fb8"+
		"\u0fba\5\u0204\u0103\2\u0fb9\u0fb8\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba\u0fbc"+
		"\3\2\2\2\u0fbb\u0fbd\5\u021e\u0110\2\u0fbc\u0fbb\3\2\2\2\u0fbc\u0fbd\3"+
		"\2\2\2\u0fbd\u01fb\3\2\2\2\u0fbe\u0fc0\t\65\2\2\u0fbf\u0fbe\3\2\2\2\u0fbf"+
		"\u0fc0\3\2\2\2\u0fc0\u0fc2\3\2\2\2\u0fc1\u0fc3\5\u01fe\u0100\2\u0fc2\u0fc1"+
		"\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc2\3\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5"+
		"\u0fc7\3\2\2\2\u0fc6\u0fc8\5\u0200\u0101\2\u0fc7\u0fc6\3\2\2\2\u0fc7\u0fc8"+
		"\3\2\2\2\u0fc8\u01fd\3\2\2\2\u0fc9\u0fca\7\u01de\2\2\u0fca\u0fcb\5\u0232"+
		"\u011a\2\u0fcb\u0fcd\7\u01af\2\2\u0fcc\u0fce\5\u01fa\u00fe\2\u0fcd\u0fcc"+
		"\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u0fcd\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0"+
		"\u01ff\3\2\2\2\u0fd1\u0fd3\7\u0082\2\2\u0fd2\u0fd4\5\u01fa\u00fe\2\u0fd3"+
		"\u0fd2\3\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5\u0fd3\3\2\2\2\u0fd5\u0fd6\3\2"+
		"\2\2\u0fd6\u0201\3\2\2\2\u0fd7\u0fd8\7\u00d0\2\2\u0fd8\u0fe4\5\u021a\u010e"+
		"\2\u0fd9\u0fda\7\u0221\2\2\u0fda\u0fdf\5\u0300\u0181\2\u0fdb\u0fdc\7\u0227"+
		"\2\2\u0fdc\u0fde\5\u0300\u0181\2\u0fdd\u0fdb\3\2\2\2\u0fde\u0fe1\3\2\2"+
		"\2\u0fdf\u0fdd\3\2\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe2\3\2\2\2\u0fe1\u0fdf"+
		"\3\2\2\2\u0fe2\u0fe3\7\u0222\2\2\u0fe3\u0fe5\3\2\2\2\u0fe4\u0fd9\3\2\2"+
		"\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0203\3\2\2\2\u0fe6\u0fe7\7\u01d2\2\2\u0fe7"+
		"\u0fe8\5\u0230\u0119\2\u0fe8\u0205\3\2\2\2\u0fe9\u0fea\7\u00fc\2\2\u0fea"+
		"\u0feb\7\u00d0\2\2\u0feb\u0fed\5\u0302\u0182\2\u0fec\u0fee\5\u02bc\u015f"+
		"\2\u0fed\u0fec\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0fef\3\2\2\2\u0fef\u0ff0"+
		"\7\u01cf\2\2\u0ff0\u0ff1\5\u0210\u0109\2\u0ff1\u0ff2\7\u012e\2\2\u0ff2"+
		"\u0ff3\7\u0221\2\2\u0ff3\u0ff4\5\u0232\u011a\2\u0ff4\u0ffd\7\u0222\2\2"+
		"\u0ff5\u0ff7\5\u0208\u0105\2\u0ff6\u0ff8\5\u020e\u0108\2\u0ff7\u0ff6\3"+
		"\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0ffe\3\2\2\2\u0ff9\u0ffb\5\u020e\u0108"+
		"\2\u0ffa\u0ffc\5\u0208\u0105\2\u0ffb\u0ffa\3\2\2\2\u0ffb\u0ffc\3\2\2\2"+
		"\u0ffc\u0ffe\3\2\2\2\u0ffd\u0ff5\3\2\2\2\u0ffd\u0ff9\3\2\2\2\u0ffd\u0ffe"+
		"\3\2\2\2\u0ffe\u1000\3\2\2\2\u0fff\u1001\5\u021e\u0110\2\u1000\u0fff\3"+
		"\2\2\2\u1000\u1001\3\2\2\2\u1001\u0207\3\2\2\2\u1002\u1003\7\u01de\2\2"+
		"\u1003\u1004\7\u00f5\2\2\u1004\u1005\7\u01af\2\2\u1005\u1006\7\u01ca\2"+
		"\2\u1006\u1007\7\u0189\2\2\u1007\u100c\5\u020a\u0106\2\u1008\u1009\7\u0227"+
		"\2\2\u1009\u100b\5\u020a\u0106\2\u100a\u1008\3\2\2\2\u100b\u100e\3\2\2"+
		"\2\u100c\u100a\3\2\2\2\u100c\u100d\3\2\2\2\u100d\u1010\3\2\2\2\u100e\u100c"+
		"\3\2\2\2\u100f\u1011\5\u02c0\u0161\2\u1010\u100f\3\2\2\2\u1010\u1011\3"+
		"\2\2\2\u1011\u1013\3\2\2\2\u1012\u1014\5\u020c\u0107\2\u1013\u1012\3\2"+
		"\2\2\u1013\u1014\3\2\2\2\u1014\u0209\3\2\2\2\u1015\u1016\5\u0300\u0181"+
		"\2\u1016\u1017\7\u0238\2\2\u1017\u1018\5\u0236\u011c\2\u1018\u020b\3\2"+
		"\2\2\u1019\u101a\7t\2\2\u101a\u101b\5\u02c0\u0161\2\u101b\u020d\3\2\2"+
		"\2\u101c\u101d\7\u01de\2\2\u101d\u101e\7\u0120\2\2\u101e\u101f\7\u00f5"+
		"\2\2\u101f\u1020\7\u01af\2\2\u1020\u102c\7\u00c9\2\2\u1021\u1022\7\u0221"+
		"\2\2\u1022\u1027\5\u0300\u0181\2\u1023\u1024\7\u0227\2\2\u1024\u1026\5"+
		"\u0300\u0181\2\u1025\u1023\3\2\2\2\u1026\u1029\3\2\2\2\u1027\u1025\3\2"+
		"\2\2\u1027\u1028\3\2\2\2\u1028\u102a\3\2\2\2\u1029\u1027\3\2\2\2\u102a"+
		"\u102b\7\u0222\2\2\u102b\u102d\3\2\2\2\u102c\u1021\3\2\2\2\u102c\u102d"+
		"\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u102f\7\u01d2\2\2\u102f\u1031\5\u0230"+
		"\u0119\2\u1030\u1032\5\u02c0\u0161\2\u1031\u1030\3\2\2\2\u1031\u1032\3"+
		"\2\2\2\u1032\u020f\3\2\2\2\u1033\u1039\5\u0302\u0182\2\u1034\u1035\7\u0221"+
		"\2\2\u1035\u1036\5\u0178\u00bd\2\u1036\u1037\7\u0222\2\2\u1037\u1039\3"+
		"\2\2\2\u1038\u1033\3\2\2\2\u1038\u1034\3\2\2\2\u1039\u103b\3\2\2\2\u103a"+
		"\u103c\5\u02bc\u015f\2\u103b\u103a\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u0211"+
		"\3\2\2\2\u103d\u103e\7\u00ea\2\2\u103e\u103f\7\u01ac\2\2\u103f\u1044\5"+
		"\u0216\u010c\2\u1040\u1041\7\u0227\2\2\u1041\u1043\5\u0216\u010c\2\u1042"+
		"\u1040\3\2\2\2\u1043\u1046\3\2\2\2\u1044\u1042\3\2\2\2\u1044\u1045\3\2"+
		"\2\2\u1045\u1047\3\2\2\2\u1046\u1044\3\2\2\2\u1047\u1048\7\u00b8\2\2\u1048"+
		"\u1049\5\u0218\u010d\2\u1049\u104b\7\u0102\2\2\u104a\u104c\5\u0214\u010b"+
		"\2\u104b\u104a\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u0213\3\2\2\2\u104d\u104e"+
		"\7\u01db\2\2\u104e\u1051\5\u0236\u011c\2\u104f\u1051\7\u0122\2\2\u1050"+
		"\u104d\3\2\2\2\u1050\u104f\3\2\2\2\u1051\u0215\3\2\2\2\u1052\u1054\5\u0302"+
		"\u0182\2\u1053\u1055\5\u02b8\u015d\2\u1054\u1053\3\2\2\2\u1054\u1055\3"+
		"\2\2\2\u1055\u0217\3\2\2\2\u1056\u1057\7\u0172\2\2\u1057\u1063\7\u018c"+
		"\2\2\u1058\u1059\7\u0172\2\2\u1059\u1063\7\u0090\2\2\u105a\u105c\7\u018c"+
		"\2\2\u105b\u105d\7\u01ca\2\2\u105c\u105b\3\2\2\2\u105c\u105d\3\2\2\2\u105d"+
		"\u1063\3\2\2\2\u105e\u105f\7\u018c\2\2\u105f\u1060\7\u0172\2\2\u1060\u1063"+
		"\7\u0090\2\2\u1061\u1063\7\u0090\2\2\u1062\u1056\3\2\2\2\u1062\u1058\3"+
		"\2\2\2\u1062\u105a\3\2\2\2\u1062\u105e\3\2\2\2\u1062\u1061\3\2\2\2\u1063"+
		"\u0219\3\2\2\2\u1064\u106b\5\u0224\u0113\2\u1065\u1066\7\u012f\2\2\u1066"+
		"\u1067\7\u0221\2\2\u1067\u1068\5\u0224\u0113\2\u1068\u1069\7\u0222\2\2"+
		"\u1069\u106b\3\2\2\2\u106a\u1064\3\2\2\2\u106a\u1065\3\2\2\2\u106b\u106d"+
		"\3\2\2\2\u106c\u106e\5\u02bc\u015f\2\u106d\u106c\3\2\2\2\u106d\u106e\3"+
		"\2\2\2\u106e\u021b\3\2\2\2\u106f\u1070\t#\2\2\u1070\u1075\5\u0236\u011c"+
		"\2\u1071\u1072\7\u0227\2\2\u1072\u1074\5\u0236\u011c\2\u1073\u1071\3\2"+
		"\2\2\u1074\u1077\3\2\2\2\u1075\u1073\3\2\2\2\u1075\u1076\3\2\2\2\u1076"+
		"\u1078\3\2\2\2\u1077\u1075\3\2\2\2\u1078\u1079\5\u02c4\u0163\2\u1079\u021d"+
		"\3\2\2\2\u107a\u107b\7\u00ec\2\2\u107b\u107d\7\u0089\2\2\u107c\u107e\5"+
		"\u0220\u0111\2\u107d\u107c\3\2\2\2\u107d\u107e\3\2\2\2\u107e\u1080\3\2"+
		"\2\2\u107f\u1081\5\u0238\u011d\2\u1080\u107f\3\2\2\2\u1080\u1081\3\2\2"+
		"\2\u1081\u1083\3\2\2\2\u1082\u1084\5\u0222\u0112\2\u1083\u1082\3\2\2\2"+
		"\u1083\u1084\3\2\2\2\u1084\u021f\3\2\2\2\u1085\u1086\7\u00d0\2\2\u1086"+
		"\u1087\5\u0302\u0182\2\u1087\u0221\3\2\2\2\u1088\u1089\7\u0161\2\2\u1089"+
		"\u108c\7\u00e7\2\2\u108a\u108d\7\u01c7\2\2\u108b\u108d\5\u0238\u011d\2"+
		"\u108c\u108a\3\2\2\2\u108c\u108b\3\2\2\2\u108d\u0223\3\2\2\2\u108e\u109b"+
		"\5\u0226\u0114\2\u108f\u1090\7\u0221\2\2\u1090\u1092\5\u0178\u00bd\2\u1091"+
		"\u1093\5\u0228\u0115\2\u1092\u1091\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1094"+
		"\3\2\2\2\u1094\u1095\7\u0222\2\2\u1095\u109b\3\2\2\2\u1096\u1098\5\u0302"+
		"\u0182\2\u1097\u1099\5\u022a\u0116\2\u1098\u1097\3\2\2\2\u1098\u1099\3"+
		"\2\2\2\u1099\u109b\3\2\2\2\u109a\u108e\3\2\2\2\u109a\u108f\3\2\2\2\u109a"+
		"\u1096\3\2\2\2\u109b\u0225\3\2\2\2\u109c\u10a9\t\66\2\2\u109d\u109e\7"+
		"\u0221\2\2\u109e\u109f\5\u0182\u00c2\2\u109f\u10a0\7\u0222\2\2\u10a0\u10aa"+
		"\3\2\2\2\u10a1\u10a2\7\u0221\2\2\u10a2\u10a3\5\u0236\u011c\2\u10a3\u10a7"+
		"\7\u0222\2\2\u10a4\u10a5\7\u0221\2\2\u10a5\u10a6\7\u0225\2\2\u10a6\u10a8"+
		"\7\u0222\2\2\u10a7\u10a4\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10aa\3\2\2"+
		"\2\u10a9\u109d\3\2\2\2\u10a9\u10a1\3\2\2\2\u10aa\u0227\3\2\2\2\u10ab\u10b4"+
		"\7\u01e2\2\2\u10ac\u10ad\7\u0158\2\2\u10ad\u10b5\7\u012f\2\2\u10ae\u10af"+
		"\79\2\2\u10af\u10b2\7\u0131\2\2\u10b0\u10b1\7M\2\2\u10b1\u10b3\5\u02e4"+
		"\u0173\2\u10b2\u10b0\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u10b5\3\2\2\2\u10b4"+
		"\u10ac\3\2\2\2\u10b4\u10ae\3\2\2\2\u10b5\u0229\3\2\2\2\u10b6\u10b8\7\u0176"+
		"\2\2\u10b7\u10b9\7%\2\2\u10b8\u10b7\3\2\2\2\u10b8\u10b9\3\2\2\2\u10b9"+
		"\u10ba\3\2\2\2\u10ba\u10bb\7\u0221\2\2\u10bb\u10be\5\u0236\u011c\2\u10bc"+
		"\u10bd\7\u0227\2\2\u10bd\u10bf\5\u0236\u011c\2\u10be\u10bc\3\2\2\2\u10be"+
		"\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c2\7\u0222\2\2\u10c1\u10c3"+
		"\5\u022c\u0117\2\u10c2\u10c1\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u022b\3"+
		"\2\2\2\u10c4\u10c5\7\u017f\2\2\u10c5\u10c6\7\u0221\2\2\u10c6\u10c7\5\u0236"+
		"\u011c\2\u10c7\u10c8\7\u0222\2\2\u10c8\u022d\3\2\2\2\u10c9\u10ca\7^\2"+
		"\2\u10ca\u10cb\7\u0221\2\2\u10cb\u10cc\5\u0182\u00c2\2\u10cc\u10cd\7\u0222"+
		"\2\2\u10cd\u022f\3\2\2\2\u10ce\u10d0\7\u0221\2\2\u10cf\u10d1\5\u0236\u011c"+
		"\2\u10d0\u10cf\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d6\3\2\2\2\u10d2\u10d3"+
		"\7\u0227\2\2\u10d3\u10d5\5\u0236\u011c\2\u10d4\u10d2\3\2\2\2\u10d5\u10d8"+
		"\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10d9\3\2\2\2\u10d8"+
		"\u10d6\3\2\2\2\u10d9\u10da\7\u0222\2\2\u10da\u0231\3\2\2\2\u10db\u10dc"+
		"\5\u0236\u011c\2\u10dc\u0233\3\2\2\2\u10dd\u10de\5\u0236\u011c\2\u10de"+
		"\u0235\3\2\2\2\u10df\u10e9\5\u022e\u0118\2\u10e0\u10e5\5\u023a\u011e\2"+
		"\u10e1\u10e2\7\u0132\2\2\u10e2\u10e4\5\u023a\u011e\2\u10e3\u10e1\3\2\2"+
		"\2\u10e4\u10e7\3\2\2\2\u10e5\u10e3\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10e9"+
		"\3\2\2\2\u10e7\u10e5\3\2\2\2\u10e8\u10df\3\2\2\2\u10e8\u10e0\3\2\2\2\u10e9"+
		"\u0237\3\2\2\2\u10ea\u10eb\5\u0236\u011c\2\u10eb\u0239\3\2\2\2\u10ec\u10f1"+
		"\5\u023c\u011f\2\u10ed\u10ee\7\f\2\2\u10ee\u10f0\5\u023c\u011f\2\u10ef"+
		"\u10ed\3\2\2\2\u10f0\u10f3\3\2\2\2\u10f1\u10ef\3\2\2\2\u10f1\u10f2\3\2"+
		"\2\2\u10f2\u023b\3\2\2\2\u10f3\u10f1\3\2\2\2\u10f4\u10f5\7\u0120\2\2\u10f5"+
		"\u10f8\5\u023c\u011f\2\u10f6\u10f8\5\u023e\u0120\2\u10f7\u10f4\3\2\2\2"+
		"\u10f7\u10f6\3\2\2\2\u10f8\u023d\3\2\2\2\u10f9\u111b\5\u0240\u0121\2\u10fa"+
		"\u10fc\7\u00d2\2\2\u10fb\u10fd\7\u0120\2\2\u10fc\u10fb\3\2\2\2\u10fc\u10fd"+
		"\3\2\2\2\u10fd\u1117\3\2\2\2\u10fe\u1118\7\u0123\2\2\u10ff\u1118\7\u0108"+
		"\2\2\u1100\u1118\7\u0150\2\2\u1101\u1118\7\u00c2\2\2\u1102\u1103\7\4\2"+
		"\2\u1103\u1118\7\u0189\2\2\u1104\u1118\7\u0084\2\2\u1105\u1107\7\u0129"+
		"\2\2\u1106\u1108\7\u01c2\2\2\u1107\u1106\3\2\2\2\u1107\u1108\3\2\2\2\u1108"+
		"\u1109\3\2\2\2\u1109\u110b\7\u0221\2\2\u110a\u110c\7\u012f\2\2\u110b\u110a"+
		"\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u110d\3\2\2\2\u110d\u1112\5\u0312\u018a"+
		"\2\u110e\u110f\7\u0227\2\2\u110f\u1111\5\u0312\u018a\2\u1110\u110e\3\2"+
		"\2\2\u1111\u1114\3\2\2\2\u1112\u1110\3\2\2\2\u1112\u1113\3\2\2\2\u1113"+
		"\u1115\3\2\2\2\u1114\u1112\3\2\2\2\u1115\u1116\7\u0222\2\2\u1116\u1118"+
		"\3\2\2\2\u1117\u10fe\3\2\2\2\u1117\u10ff\3\2\2\2\u1117\u1100\3\2\2\2\u1117"+
		"\u1101\3\2\2\2\u1117\u1102\3\2\2\2\u1117\u1104\3\2\2\2\u1117\u1105\3\2"+
		"\2\2\u1118\u111a\3\2\2\2\u1119\u10fa\3\2\2\2\u111a\u111d\3\2\2\2\u111b"+
		"\u1119\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u023f\3\2\2\2\u111d\u111b\3\2"+
		"\2\2\u111e\u1125\5\u0244\u0123\2\u111f\u1121\5\u0242\u0122\2\u1120\u1122"+
		"\7\u0129\2\2\u1121\u1120\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123\3\2\2"+
		"\2\u1123\u1124\5\u0250\u0129\2\u1124\u1126\3\2\2\2\u1125\u111f\3\2\2\2"+
		"\u1125\u1126\3\2\2\2\u1126\u0241\3\2\2\2\u1127\u1128\t\67\2\2\u1128\u0243"+
		"\3\2\2\2\u1129\u1135\5\u0246\u0124\2\u112a\u1131\7\u0238\2\2\u112b\u1131"+
		"\5\u032e\u0198\2\u112c\u1131\7\u022f\2\2\u112d\u1131\7\u0235\2\2\u112e"+
		"\u1131\5\u0332\u019a\2\u112f\u1131\5\u0330\u0199\2\u1130\u112a\3\2\2\2"+
		"\u1130\u112b\3\2\2\2\u1130\u112c\3\2\2\2\u1130\u112d\3\2\2\2\u1130\u112e"+
		"\3\2\2\2\u1130\u112f\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1134\5\u0246\u0124"+
		"\2\u1133\u1130\3\2\2\2\u1134\u1137\3\2\2\2\u1135\u1133\3\2\2\2\u1135\u1136"+
		"\3\2\2\2\u1136\u0245\3\2\2\2\u1137\u1135\3\2\2\2\u1138\u1147\5\u0250\u0129"+
		"\2\u1139\u113b\7\u0120\2\2\u113a\u1139\3\2\2\2\u113a\u113b\3\2\2\2\u113b"+
		"\u1145\3\2\2\2\u113c\u113d\7\u00b8\2\2\u113d\u1146\5\u024c\u0127\2\u113e"+
		"\u113f\7\37\2\2\u113f\u1146\5\u024e\u0128\2\u1140\u1141\5\u0248\u0125"+
		"\2\u1141\u1143\5\u0250\u0129\2\u1142\u1144\5\u024a\u0126\2\u1143\u1142"+
		"\3\2\2\2\u1143\u1144\3\2\2\2\u1144\u1146\3\2\2\2\u1145\u113c\3\2\2\2\u1145"+
		"\u113e\3\2\2\2\u1145\u1140\3\2\2\2\u1146\u1148\3\2\2\2\u1147\u113a\3\2"+
		"\2\2\u1147\u1148\3\2\2\2\u1148\u0247\3\2\2\2\u1149\u114a\t8\2\2\u114a"+
		"\u0249\3\2\2\2\u114b\u114c\7\u008a\2\2\u114c\u114d\5\u0250\u0129\2\u114d"+
		"\u024b\3\2\2\2\u114e\u114f\7\u0221\2\2\u114f\u1150\5\u0182\u00c2\2\u1150"+
		"\u1151\7\u0222\2\2\u1151\u1161\3\2\2\2\u1152\u1153\7\u0221\2\2\u1153\u1158"+
		"\5\u0252\u012a\2\u1154\u1155\7\u0227\2\2\u1155\u1157\5\u0252\u012a\2\u1156"+
		"\u1154\3\2\2\2\u1157\u115a\3\2\2\2\u1158\u1156\3\2\2\2\u1158\u1159\3\2"+
		"\2\2\u1159\u115b\3\2\2\2\u115a\u1158\3\2\2\2\u115b\u115c\7\u0222\2\2\u115c"+
		"\u1161\3\2\2\2\u115d\u1161\5\u0322\u0192\2\u115e\u1161\5\u031a\u018e\2"+
		"\u115f\u1161\5\u031c\u018f\2\u1160\u114e\3\2\2\2\u1160\u1152\3\2\2\2\u1160"+
		"\u115d\3\2\2\2\u1160\u115e\3\2\2\2\u1160\u115f\3\2\2\2\u1161\u024d\3\2"+
		"\2\2\u1162\u1163\5\u0250\u0129\2\u1163\u1164\7\f\2\2\u1164\u1165\5\u0250"+
		"\u0129\2\u1165\u024f\3\2\2\2\u1166\u116c\5\u0254\u012b\2\u1167\u1168\5"+
		"\u0334\u019b\2\u1168\u1169\5\u0254\u012b\2\u1169\u116b\3\2\2\2\u116a\u1167"+
		"\3\2\2\2\u116b\u116e\3\2\2\2\u116c\u116a\3\2\2\2\u116c\u116d\3\2\2\2\u116d"+
		"\u0251\3\2\2\2\u116e\u116c\3\2\2\2\u116f\u1170\5\u0250\u0129\2\u1170\u0253"+
		"\3\2\2\2\u1171\u1176\5\u0256\u012c\2\u1172\u1173\t9\2\2\u1173\u1175\5"+
		"\u0256\u012c\2\u1174\u1172\3\2\2\2\u1175\u1178\3\2\2\2\u1176\u1174\3\2"+
		"\2\2\u1176\u1177\3\2\2\2\u1177\u0255\3\2\2\2\u1178\u1176\3\2\2\2\u1179"+
		"\u117e\5\u0258\u012d\2\u117a\u117b\t:\2\2\u117b\u117d\5\u0258\u012d\2"+
		"\u117c\u117a\3\2\2\2\u117d\u1180\3\2\2\2\u117e\u117c\3\2\2\2\u117e\u117f"+
		"\3\2\2\2\u117f\u0257\3\2\2\2\u1180\u117e\3\2\2\2\u1181\u118a\5\u025c\u012f"+
		"\2\u1182\u1187\7\23\2\2\u1183\u1188\7\u00e9\2\2\u1184\u1185\7\u01b0\2"+
		"\2\u1185\u1186\7\u01f8\2\2\u1186\u1188\5\u0252\u012a\2\u1187\u1183\3\2"+
		"\2\2\u1187\u1184\3\2\2\2\u1188\u118b\3\2\2\2\u1189\u118b\5\u025a\u012e"+
		"\2\u118a\u1182\3\2\2\2\u118a\u1189\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u0259"+
		"\3\2\2\2\u118c\u1191\7d\2\2\u118d\u118e\7\u0221\2\2\u118e\u118f\5\u0252"+
		"\u012a\2\u118f\u1190\7\u0222\2\2\u1190\u1192\3\2\2\2\u1191\u118d\3\2\2"+
		"\2\u1191\u1192\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1194\7\u01b9\2\2\u1194"+
		"\u1199\7\u017d\2\2\u1195\u1196\7\u0221\2\2\u1196\u1197\5\u0252\u012a\2"+
		"\u1197\u1198\7\u0222\2\2\u1198\u119a\3\2\2\2\u1199\u1195\3\2\2\2\u1199"+
		"\u119a\3\2\2\2\u119a\u11a5\3\2\2\2\u119b\u11a0\7\u01f5\2\2\u119c\u119d"+
		"\7\u0221\2\2\u119d\u119e\5\u0252\u012a\2\u119e\u119f\7\u0222\2\2\u119f"+
		"\u11a1\3\2\2\2\u11a0\u119c\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\3\2"+
		"\2\2\u11a2\u11a3\7\u01b9\2\2\u11a3\u11a5\7\u0105\2\2\u11a4\u118c\3\2\2"+
		"\2\u11a4\u119b\3\2\2\2\u11a5\u025b\3\2\2\2\u11a6\u11ab\5\u0268\u0135\2"+
		"\u11a7\u11a8\7\u0239\2\2\u11a8\u11a9\5\u025e\u0130\2\u11a9\u11aa\7\u023a"+
		"\2\2\u11aa\u11ac\3\2\2\2\u11ab\u11a7\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac"+
		"\u025d\3\2\2\2\u11ad\u11b0\7\r\2\2\u11ae\u11b0\5\u0234\u011b\2\u11af\u11ad"+
		"\3\2\2\2\u11af\u11ae\3\2\2\2\u11b0\u11b8\3\2\2\2\u11b1\u11b4\7\u0227\2"+
		"\2\u11b2\u11b5\7\r\2\2\u11b3\u11b5\5\u0234\u011b\2\u11b4\u11b2\3\2\2\2"+
		"\u11b4\u11b3\3\2\2\2\u11b5\u11b7\3\2\2\2\u11b6\u11b1\3\2\2\2\u11b7\u11ba"+
		"\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9\u11c5\3\2\2\2\u11ba"+
		"\u11b8\3\2\2\2\u11bb\u11c0\5\u0260\u0131\2\u11bc\u11bd\7\u0227\2\2\u11bd"+
		"\u11bf\5\u0260\u0131\2\u11be\u11bc\3\2\2\2\u11bf\u11c2\3\2\2\2\u11c0\u11be"+
		"\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c5\3\2\2\2\u11c2\u11c0\3\2\2\2\u11c3"+
		"\u11c5\5\u0266\u0134\2\u11c4\u11af\3\2\2\2\u11c4\u11bb\3\2\2\2\u11c4\u11c3"+
		"\3\2\2\2\u11c5\u025f\3\2\2\2\u11c6\u11c7\7\u00a2\2\2\u11c7\u11d4\5\u0300"+
		"\u0181\2\u11c8\u11c9\7\u00b8\2\2\u11c9\u11d5\5\u0230\u0119\2\u11ca\u11cc"+
		"\5\u0262\u0132\2\u11cb\u11ca\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11cd\3"+
		"\2\2\2\u11cd\u11ce\7\u00a8\2\2\u11ce\u11cf\5\u0236\u011c\2\u11cf\u11d0"+
		"\7\u01b9\2\2\u11d0\u11d1\5\u0236\u011c\2\u11d1\u11d2\5\u0264\u0133\2\u11d2"+
		"\u11d3\5\u0236\u011c\2\u11d3\u11d5\3\2\2\2\u11d4\u11c8\3\2\2\2\u11d4\u11cb"+
		"\3\2\2\2\u11d5\u0261\3\2\2\2\u11d6\u11d7\7\u00e3\2\2\u11d7\u11d8\5\u0236"+
		"\u011c\2\u11d8\u0263\3\2\2\2\u11d9\u11da\t;\2\2\u11da\u0265\3\2\2\2\u11db"+
		"\u11dc\7\u00a2\2\2\u11dc\u11dd\7\u0221\2\2\u11dd\u11e2\5\u0300\u0181\2"+
		"\u11de\u11df\7\u0227\2\2\u11df\u11e1\5\u0300\u0181\2\u11e0\u11de\3\2\2"+
		"\2\u11e1\u11e4\3\2\2\2\u11e2\u11e0\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e5"+
		"\3\2\2\2\u11e4\u11e2\3\2\2\2\u11e5\u11e6\7\u0222\2\2\u11e6\u11e7\7\u00b8"+
		"\2\2\u11e7\u11f4\7\u0221\2\2\u11e8\u11f5\5\u0182\u00c2\2\u11e9\u11ea\7"+
		"\u0221\2\2\u11ea\u11ef\5\u0230\u0119\2\u11eb\u11ec\7\u0227\2\2\u11ec\u11ee"+
		"\5\u0230\u0119\2\u11ed\u11eb\3\2\2\2\u11ee\u11f1\3\2\2\2\u11ef\u11ed\3"+
		"\2\2\2\u11ef\u11f0\3\2\2\2\u11f0\u11f2\3\2\2\2\u11f1\u11ef\3\2\2\2\u11f2"+
		"\u11f3\7\u0222\2\2\u11f3\u11f5\3\2\2\2\u11f4\u11e8\3\2\2\2\u11f4\u11e9"+
		"\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11f7\7\u0222\2\2\u11f7\u0267\3\2\2"+
		"\2\u11f8\u11f9\7\u0226\2\2\u11f9\u120b\5\u0268\u0135\2\u11fa\u11fb\7\u0225"+
		"\2\2\u11fb\u120b\5\u0268\u0135\2\u11fc\u11fd\7\u0152\2\2\u11fd\u120b\5"+
		"\u0268\u0135\2\u11fe\u11ff";
	private static final String _serializedATNSegment2 =
		"\7K\2\2\u11ff\u120b\5\u0268\u0135\2\u1200\u1201\7\u0110\2\2\u1201\u120b"+
		"\5\u0268\u0135\2\u1202\u1203\7{\2\2\u1203\u120b\5\u0268\u0135\2\u1204"+
		"\u1205\7\t\2\2\u1205\u120b\5\u0268\u0135\2\u1206\u120b\5\u026a\u0136\2"+
		"\u1207\u120b\5\u027c\u013f\2\u1208\u120b\5\u027e\u0140\2\u1209\u120b\5"+
		"\u0276\u013c\2\u120a\u11f8\3\2\2\2\u120a\u11fa\3\2\2\2\u120a\u11fc\3\2"+
		"\2\2\u120a\u11fe\3\2\2\2\u120a\u1200\3\2\2\2\u120a\u1202\3\2\2\2\u120a"+
		"\u1204\3\2\2\2\u120a\u1206\3\2\2\2\u120a\u1207\3\2\2\2\u120a\u1208\3\2"+
		"\2\2\u120a\u1209\3\2\2\2\u120b\u0269\3\2\2\2\u120c\u120f\5\u0270\u0139"+
		"\2\u120d\u120f\5\u026c\u0137\2\u120e\u120c\3\2\2\2\u120e\u120d\3\2\2\2"+
		"\u120f\u026b\3\2\2\2\u1210\u1212\5\u02e6\u0174\2\u1211\u1210\3\2\2\2\u1211"+
		"\u1212\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1214\7\63\2\2\u1214\u1216\5"+
		"\u0276\u013c\2\u1215\u1217\5\u026e\u0138\2\u1216\u1215\3\2\2\2\u1217\u1218"+
		"\3\2\2\2\u1218\u1216\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121b\3\2\2\2\u121a"+
		"\u121c\5\u0274\u013b\2\u121b\u121a\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121d"+
		"\3\2\2\2\u121d\u121f\7\u0087\2\2\u121e\u1220\7\63\2\2\u121f\u121e\3\2"+
		"\2\2\u121f\u1220\3\2\2\2\u1220\u1222\3\2\2\2\u1221\u1223\5\u02e6\u0174"+
		"\2\u1222\u1221\3\2\2\2\u1222\u1223\3\2\2\2\u1223\u026d\3\2\2\2\u1224\u1225"+
		"\7\u01de\2\2\u1225\u1226\5\u0238\u011d\2\u1226\u1229\7\u01af\2\2\u1227"+
		"\u122a\5\u0122\u0092\2\u1228\u122a\5\u0238\u011d\2\u1229\u1227\3\2\2\2"+
		"\u1229\u1228\3\2\2\2\u122a\u026f\3\2\2\2\u122b\u122d\5\u02e6\u0174\2\u122c"+
		"\u122b\3\2\2\2\u122c\u122d\3\2\2\2\u122d\u122e\3\2\2\2\u122e\u1230\7\63"+
		"\2\2\u122f\u1231\5\u0272\u013a\2\u1230\u122f\3\2\2\2\u1231\u1232\3\2\2"+
		"\2\u1232\u1230\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u1235\3\2\2\2\u1234\u1236"+
		"\5\u0274\u013b\2\u1235\u1234\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u1237\3"+
		"\2\2\2\u1237\u1239\7\u0087\2\2\u1238\u123a\7\63\2\2\u1239\u1238\3\2\2"+
		"\2\u1239\u123a\3\2\2\2\u123a\u123c\3\2\2\2\u123b\u123d\5\u02e6\u0174\2"+
		"\u123c\u123b\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u0271\3\2\2\2\u123e\u123f"+
		"\7\u01de\2\2\u123f\u1240\5\u0234\u011b\2\u1240\u1243\7\u01af\2\2\u1241"+
		"\u1244\5\u0122\u0092\2\u1242\u1244\5\u0238\u011d\2\u1243\u1241\3\2\2\2"+
		"\u1243\u1242\3\2\2\2\u1244\u0273\3\2\2\2\u1245\u1248\7\u0082\2\2\u1246"+
		"\u1249\5\u0122\u0092\2\u1247\u1249\5\u0238\u011d\2\u1248\u1246\3\2\2\2"+
		"\u1248\u1247\3\2\2\2\u1249\u0275\3\2\2\2\u124a\u124b\5\u0320\u0191\2\u124b"+
		"\u124c\5\u0336\u019c\2\u124c\u125f\3\2\2\2\u124d\u125f\5\u031a\u018e\2"+
		"\u124e\u125f\5\u0322\u0192\2\u124f\u125f\5\u031c\u018f\2\u1250\u125c\7"+
		"\u0221\2\2\u1251\u1252\5\u0182\u00c2\2\u1252\u1256\7\u0222\2\2\u1253\u1255"+
		"\5\u0184\u00c3\2\u1254\u1253\3\2\2\2\u1255\u1258\3\2\2\2\u1256\u1254\3"+
		"\2\2\2\u1256\u1257\3\2\2\2\u1257\u125d\3\2\2\2\u1258\u1256\3\2\2\2\u1259"+
		"\u125a\5\u0278\u013d\2\u125a\u125b\7\u0222\2\2\u125b\u125d\3\2\2\2\u125c"+
		"\u1251\3\2\2\2\u125c\u1259\3\2\2\2\u125d\u125f\3\2\2\2\u125e\u124a\3\2"+
		"\2\2\u125e\u124d\3\2\2\2\u125e\u124e\3\2\2\2\u125e\u124f\3\2\2\2\u125e"+
		"\u1250\3\2\2\2\u125f\u0277\3\2\2\2\u1260\u1262\5\u0236\u011c\2\u1261\u1263"+
		"\5\u027a\u013e\2\u1262\u1261\3\2\2\2\u1262\u1263\3\2\2\2\u1263\u0279\3"+
		"\2\2\2\u1264\u1265\7\u0227\2\2\u1265\u126a\5\u0236\u011c\2\u1266\u1267"+
		"\7\u0227\2\2\u1267\u1269\5\u0236\u011c\2\u1268\u1266\3\2\2\2\u1269\u126c"+
		"\3\2\2\2\u126a\u1268\3\2\2\2\u126a\u126b\3\2\2\2\u126b\u027b\3\2\2\2\u126c"+
		"\u126a\3\2\2\2\u126d\u1276\t<\2\2\u126e\u126f\7\u0221\2\2\u126f\u1270"+
		"\5\u0182\u00c2\2\u1270\u1271\7\u0222\2\2\u1271\u1277\3\2\2\2\u1272\u1273"+
		"\7\u0221\2\2\u1273\u1274\5\u0238\u011d\2\u1274\u1275\7\u0222\2\2\u1275"+
		"\u1277\3\2\2\2\u1276\u126e\3\2\2\2\u1276\u1272\3\2\2\2\u1277\u027d\3\2"+
		"\2\2\u1278\u1279\5\u0280\u0141\2\u1279\u127b\5\u030a\u0186\2\u127a\u127c"+
		"\5\u0286\u0144\2\u127b\u127a\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u13b0\3"+
		"\2\2\2\u127d\u127e\5\u0338\u019d\2\u127e\u1280\5\u030c\u0187\2\u127f\u1281"+
		"\5\u028e\u0148\2\u1280\u127f\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u13b0\3"+
		"\2\2\2\u1282\u1283\7W\2\2\u1283\u1289\7\u0221\2\2\u1284\u128a\7\u0224"+
		"\2\2\u1285\u1287\t)\2\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2\2\2\u1287"+
		"\u1288\3\2\2\2\u1288\u128a\5\u0252\u012a\2\u1289\u1284\3\2\2\2\u1289\u1286"+
		"\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u128d\7\u0222\2\2\u128c\u128e\5\u0286"+
		"\u0144\2\u128d\u128c\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u13b0\3\2\2\2\u128f"+
		"\u1290\t=\2\2\u1290\u1297\7\u0221\2\2\u1291\u1292\7\u0106\2\2\u1292\u1293"+
		"\7\u0221\2\2\u1293\u1294\5\u0182\u00c2\2\u1294\u1295\7\u0222\2\2\u1295"+
		"\u1298\3\2\2\2\u1296\u1298\5\u0252\u012a\2\u1297\u1291\3\2\2\2\u1297\u1296"+
		"\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u129a\7\20\2\2\u129a\u129b\5\u0312"+
		"\u018a\2\u129b\u129c\7\u0222\2\2\u129c\u13b0\3\2\2\2\u129d\u129e\7:\2"+
		"\2\u129e\u129f\7\u0221\2\2\u129f\u12a0\5\u0252\u012a\2\u12a0\u12a1\7\u01cf"+
		"\2\2\u12a1\u12a2\7\u010d\2\2\u12a2\u12a3\7\u0222\2\2\u12a3\u13b0\3\2\2"+
		"\2\u12a4\u12a5\7?\2\2\u12a5\u12a7\7\u0221\2\2\u12a6\u12a8\t>\2\2\u12a7"+
		"\u12a6\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9\u12ab\5\u0252"+
		"\u012a\2\u12aa\u12ac\5\u0292\u014a\2\u12ab\u12aa\3\2\2\2\u12ab\u12ac\3"+
		"\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12ae\7\u0222\2\2\u12ae\u13b0\3\2\2\2"+
		"\u12af\u12b0\5\u0282\u0142\2\u12b0\u12b2\5\u0308\u0185\2\u12b1\u12b3\5"+
		"\u0294\u014b\2\u12b2\u12b1\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b2\3\2"+
		"\2\2\u12b4\u12b5\3\2\2\2\u12b5\u13b0\3\2\2\2\u12b6\u12b7\7l\2\2\u12b7"+
		"\u12b8\7\u0221\2\2\u12b8\u12ba\5\u0252\u012a\2\u12b9\u12bb\t?\2\2\u12ba"+
		"\u12b9\3\2\2\2\u12ba\u12bb\3\2\2\2\u12bb\u12bc\3\2\2\2\u12bc\u12bd\7\u0222"+
		"\2\2\u12bd\u13b0\3\2\2\2\u12be\u12bf\7\u0096\2\2\u12bf\u12c0\7\u0221\2"+
		"\2\u12c0\u12c1\5\u0338\u019d\2\u12c1\u12c2\7\u00a8\2\2\u12c2\u12c3\5\u0252"+
		"\u012a\2\u12c3\u12c4\7\u0222\2\2\u12c4\u13b0\3\2\2\2\u12c5\u12c6\t@\2"+
		"\2\u12c6\u12c8\5\u030a\u0186\2\u12c7\u12c9\5\u030e\u0188\2\u12c8\u12c7"+
		"\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u12ca\3\2\2\2\u12ca\u12cb\5\u0286\u0144"+
		"\2\u12cb\u13b0\3\2\2\2\u12cc\u12cd\5\u0284\u0143\2\u12cd\u12ce\7\u0221"+
		"\2\2\u12ce\u12d3\5\u0238\u011d\2\u12cf\u12d0\7\u0227\2\2\u12d0\u12d2\5"+
		"\u0238\u011d\2\u12d1\u12cf\3\2\2\2\u12d2\u12d5\3\2\2\2\u12d3\u12d1\3\2"+
		"\2\2\u12d3\u12d4\3\2\2\2\u12d4\u12d7\3\2\2\2\u12d5\u12d3\3\2\2\2\u12d6"+
		"\u12d8\5\u0296\u014c\2\u12d7\u12d6\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12da"+
		"\3\2\2\2\u12d9\u12db\5\u028e\u0148\2\u12da\u12d9\3\2\2\2\u12da\u12db\3"+
		"\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12dd\7\u0222\2\2\u12dd\u13b0\3\2\2\2"+
		"\u12de\u12df\7\u01bc\2\2\u12df\u12e0\7\u0221\2\2\u12e0\u12e3\5\u0238\u011d"+
		"\2\u12e1\u12e2\7\u01cf\2\2\u12e2\u12e4\tA\2\2\u12e3\u12e1\3\2\2\2\u12e3"+
		"\u12e4\3\2\2\2\u12e4\u12e9\3\2\2\2\u12e5\u12e6\7\u0227\2\2\u12e6\u12e8"+
		"\5\u0238\u011d\2\u12e7\u12e5\3\2\2\2\u12e8\u12eb\3\2\2\2\u12e9\u12e7\3"+
		"\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12ec\3\2\2\2\u12eb\u12e9\3\2\2\2\u12ec"+
		"\u12ed\7\u0222\2\2\u12ed\u13b0\3\2\2\2\u12ee\u12ef\7\u01bd\2\2\u12ef\u12f0"+
		"\7\u0221\2\2\u12f0\u12f1\5\u0238\u011d\2\u12f1\u12f3\7\20\2\2\u12f2\u12f4"+
		"\7\u015d\2\2\u12f3\u12f2\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u12f5\3\2\2"+
		"\2\u12f5\u12f6\5\u0312\u018a\2\u12f6\u12f7\7\u0222\2\2\u12f7\u13b0\3\2"+
		"\2\2\u12f8\u12f9\7\u01bf\2\2\u12f9\u1301\7\u0221\2\2\u12fa\u12fc\tB\2"+
		"\2\u12fb\u12fa\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12fe\3\2\2\2\u12fd\u12ff"+
		"\5\u0328\u0195\2\u12fe\u12fd\3\2\2\2\u12fe\u12ff\3\2\2\2\u12ff\u1300\3"+
		"\2\2\2\u1300\u1302\7\u00a8\2\2\u1301\u12fb\3\2\2\2\u1301\u1302\3\2\2\2"+
		"\u1302\u1303\3\2\2\2\u1303\u1304\5\u0252\u012a\2\u1304\u1305\7\u0222\2"+
		"\2\u1305\u13b0\3\2\2\2\u1306\u1307\7\u01e7\2\2\u1307\u1308\7\u0221\2\2"+
		"\u1308\u130a\5\u0238\u011d\2\u1309\u130b\5\u01e2\u00f2\2\u130a\u1309\3"+
		"\2\2\2\u130a\u130b\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u130f\7\u0222\2\2"+
		"\u130d\u130e\7\u021a\2\2\u130e\u1310\5\u031e\u0190\2\u130f\u130d\3\2\2"+
		"\2\u130f\u1310\3\2\2\2\u1310\u13b0\3\2\2\2\u1311\u1312\tC\2\2\u1312\u1313"+
		"\7\u0221\2\2\u1313\u1318\5\u02a2\u0152\2\u1314\u1315\7\u0227\2\2\u1315"+
		"\u1317\5\u02a2\u0152\2\u1316\u1314\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316"+
		"\3\2\2\2\u1318\u1319\3\2\2\2\u1319\u131b\3\2\2\2\u131a\u1318\3\2\2\2\u131b"+
		"\u131e\7\u0222\2\2\u131c\u131d\7\u021a\2\2\u131d\u131f\5\u031e\u0190\2"+
		"\u131e\u131c\3\2\2\2\u131e\u131f\3\2\2\2\u131f\u13b0\3\2\2\2\u1320\u1321"+
		"\7\u01eb\2\2\u1321\u1323\7\u0221\2\2\u1322\u1324\tD\2\2\u1323\u1322\3"+
		"\2\2\2\u1323\u1324\3\2\2\2\u1324\u1326\3\2\2\2\u1325\u1327\tE\2\2\u1326"+
		"\u1325\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u132b\5\u0238"+
		"\u011d\2\u1329\u132a\7\u0227\2\2\u132a\u132c\5\u029a\u014e\2\u132b\u1329"+
		"\3\2\2\2\u132b\u132c\3\2\2\2\u132c\u1334\3\2\2\2\u132d\u132e\7\u0227\2"+
		"\2\u132e\u1330\5\u0238\u011d\2\u132f\u1331\5\u02ba\u015e\2\u1330\u132f"+
		"\3\2\2\2\u1330\u1331\3\2\2\2\u1331\u1333\3\2\2\2\u1332\u132d\3\2\2\2\u1333"+
		"\u1336\3\2\2\2\u1334\u1332\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1337\3\2"+
		"\2\2\u1336\u1334\3\2\2\2\u1337\u133a\7\u0222\2\2\u1338\u1339\7\u021a\2"+
		"\2\u1339\u133b\5\u031e\u0190\2\u133a\u1338\3\2\2\2\u133a\u133b\3\2\2\2"+
		"\u133b\u13b0\3\2\2\2\u133c\u133d\7\u01ec\2\2\u133d\u133e\7\u0221\2\2\u133e"+
		"\u1340\5\u0238\u011d\2\u133f\u1341\5\u0298\u014d\2\u1340\u133f\3\2\2\2"+
		"\u1340\u1341\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1343\7\u0222\2\2\u1343"+
		"\u13b0\3\2\2\2\u1344\u1345\7\u01ef\2\2\u1345\u1346\7\u0221\2\2\u1346\u1347"+
		"\tF\2\2\u1347\u1349\5\u0252\u012a\2\u1348\u134a\7\u01dd\2\2\u1349\u1348"+
		"\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134e\7\u0222\2"+
		"\2\u134c\u134d\7\u021a\2\2\u134d\u134f\5\u031e\u0190\2\u134e\u134c\3\2"+
		"\2\2\u134e\u134f\3\2\2\2\u134f\u13b0\3\2\2\2\u1350\u1351\7\u01f0\2\2\u1351"+
		"\u1356\7\u0221\2\2\u1352\u1353\7\u0107\2\2\u1353\u1357\5\u032a\u0196\2"+
		"\u1354\u1355\7\u008b\2\2\u1355\u1357\5\u0252\u012a\2\u1356\u1352\3\2\2"+
		"\2\u1356\u1354\3\2\2\2\u1357\u135a\3\2\2\2\u1358\u1359\7\u0227\2\2\u1359"+
		"\u135b\5\u0252\u012a\2\u135a\u1358\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u135c"+
		"\3\2\2\2\u135c\u135f\7\u0222\2\2\u135d\u135e\7\u021a\2\2\u135e\u1360\5"+
		"\u031e\u0190\2\u135f\u135d\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u13b0\3\2"+
		"\2\2\u1361\u1362\7\u01f1\2\2\u1362\u1363\7\u0221\2\2\u1363\u1365\5\u0252"+
		"\u012a\2\u1364\u1366\5\u0298\u014d\2\u1365\u1364\3\2\2\2\u1365\u1366\3"+
		"\2\2\2\u1366\u1367\3\2\2\2\u1367\u1368\7\u016b\2\2\u1368\u136c\7P\2\2"+
		"\u1369\u136a\7\u0123\2\2\u136a\u136b\7\u012e\2\2\u136b\u136d\7\u0084\2"+
		"\2\u136c\u1369\3\2\2\2\u136c\u136d\3\2\2\2\u136d\u136e\3\2\2\2\u136e\u1371"+
		"\7\u0222\2\2\u136f\u1370\7\u021a\2\2\u1370\u1372\5\u031e\u0190\2\u1371"+
		"\u136f\3\2\2\2\u1371\u1372\3\2\2\2\u1372\u13b0\3\2\2\2\u1373\u1374\7\u01f2"+
		"\2\2\u1374\u1375\7\u0221\2\2\u1375\u1376\5\u0252\u012a\2\u1376\u1379\5"+
		"\u02a4\u0153\2\u1377\u1378\7\u0227\2\2\u1378\u137a\5\u02a6\u0154\2\u1379"+
		"\u1377\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u137e\7\u0222"+
		"\2\2\u137c\u137d\7\u021a\2\2\u137d\u137f\5\u031e\u0190\2\u137e\u137c\3"+
		"\2\2\2\u137e\u137f\3\2\2\2\u137f\u13b0\3\2\2\2\u1380\u1381\7\u01f3\2\2"+
		"\u1381\u1382\7\u0221\2\2\u1382\u1383\tF\2\2\u1383\u1386\5\u0252\u012a"+
		"\2\u1384\u1385\7\20\2\2\u1385\u1387\5\u0312\u018a\2\u1386\u1384\3\2\2"+
		"\2\u1386\u1387\3\2\2\2\u1387\u1389\3\2\2\2\u1388\u138a\5\u02a8\u0155\2"+
		"\u1389\u1388\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138c\3\2\2\2\u138b\u138d"+
		"\5\u02aa\u0156\2\u138c\u138b\3\2\2\2\u138c\u138d\3\2\2\2\u138d\u138f\3"+
		"\2\2\2\u138e\u1390\5\u02ac\u0157\2\u138f\u138e\3\2\2\2\u138f\u1390\3\2"+
		"\2\2\u1390\u1393\3\2\2\2\u1391\u1392\tG\2\2\u1392\u1394\7p\2\2\u1393\u1391"+
		"\3\2\2\2\u1393\u1394\3\2\2\2\u1394\u1395\3\2\2\2\u1395\u1398\7\u0222\2"+
		"\2\u1396\u1397\7\u021a\2\2\u1397\u1399\5\u031e\u0190\2\u1398\u1396\3\2"+
		"\2\2\u1398\u1399\3\2\2\2\u1399\u13b0\3\2\2\2\u139a\u139b\7\u01f4\2\2\u139b"+
		"\u139d\7\u0221\2\2\u139c\u139e\5\u029c\u014f\2\u139d\u139c\3\2\2\2\u139d"+
		"\u139e\3\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a1\5\u0252\u012a\2\u13a0\u13a2"+
		"\5\u0298\u014d\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u13a8\3"+
		"\2\2\2\u13a3\u13a4\7A\2\2\u13a4\u13a5\5\u029e\u0150\2\u13a5\u13a6\7\u0227"+
		"\2\2\u13a6\u13a7\5\u029e\u0150\2\u13a7\u13a9\3\2\2\2\u13a8\u13a3\3\2\2"+
		"\2\u13a8\u13a9\3\2\2\2\u13a9\u13aa\3\2\2\2\u13aa\u13ad\7\u0222\2\2\u13ab"+
		"\u13ac\7\u021a\2\2\u13ac\u13ae\5\u031e\u0190\2\u13ad\u13ab\3\2\2\2\u13ad"+
		"\u13ae\3\2\2\2\u13ae\u13b0\3\2\2\2\u13af\u1278\3\2\2\2\u13af\u127d\3\2"+
		"\2\2\u13af\u1282\3\2\2\2\u13af\u128f\3\2\2\2\u13af\u129d\3\2\2\2\u13af"+
		"\u12a4\3\2\2\2\u13af\u12af\3\2\2\2\u13af\u12b6\3\2\2\2\u13af\u12be\3\2"+
		"\2\2\u13af\u12c5\3\2\2\2\u13af\u12cc\3\2\2\2\u13af\u12de\3\2\2\2\u13af"+
		"\u12ee\3\2\2\2\u13af\u12f8\3\2\2\2\u13af\u1306\3\2\2\2\u13af\u1311\3\2"+
		"\2\2\u13af\u1320\3\2\2\2\u13af\u133c\3\2\2\2\u13af\u1344\3\2\2\2\u13af"+
		"\u1350\3\2\2\2\u13af\u1361\3\2\2\2\u13af\u1373\3\2\2\2\u13af\u1380\3\2"+
		"\2\2\u13af\u139a\3\2\2\2\u13b0\u027f\3\2\2\2\u13b1\u13b2\tH\2\2\u13b2"+
		"\u0281\3\2\2\2\u13b3\u13b4\tI\2\2\u13b4\u0283\3\2\2\2\u13b5\u13b6\tJ\2"+
		"\2\u13b6\u0285\3\2\2\2\u13b7\u13b8\7\u0139\2\2\u13b8\u13ba\7\u0221\2\2"+
		"\u13b9\u13bb\5\u019e\u00d0\2\u13ba\u13b9\3\2\2\2\u13ba\u13bb\3\2\2\2\u13bb"+
		"\u13c0\3\2\2\2\u13bc\u13be\5\u01e2\u00f2\2\u13bd\u13bf\5\u0288\u0145\2"+
		"\u13be\u13bd\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf\u13c1\3\2\2\2\u13c0\u13bc"+
		"\3\2\2\2\u13c0\u13c1\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13c3\7\u0222\2"+
		"\2\u13c3\u0287\3\2\2\2\u13c4\u13cb\5\u028a\u0146\2\u13c5\u13c6\7\37\2"+
		"\2\u13c6\u13c7\5\u028c\u0147\2\u13c7\u13c8\7\f\2\2\u13c8\u13c9\5\u028c"+
		"\u0147\2\u13c9\u13cc\3\2\2\2\u13ca\u13cc\5\u028c\u0147\2\u13cb\u13c5\3"+
		"\2\2\2\u13cb\u13ca\3\2\2\2\u13cc\u0289\3\2\2\2\u13cd\u13ce\tK\2\2\u13ce"+
		"\u028b\3\2\2\2\u13cf\u13d0\7\u01c3\2\2\u13d0\u13d7\7\u014e\2\2\u13d1\u13d2"+
		"\7\\\2\2\u13d2\u13d7\7\u0172\2\2\u13d3\u13d4\5\u0252\u012a\2\u13d4\u13d5"+
		"\tL\2\2\u13d5\u13d7\3\2\2\2\u13d6\u13cf\3\2\2\2\u13d6\u13d1\3\2\2\2\u13d6"+
		"\u13d3\3\2\2\2\u13d7\u028d\3\2\2\2\u13d8\u13e2\7\u01cf\2\2\u13d9\u13e3"+
		"\7\u0224\2\2\u13da\u13df\5\u0290\u0149\2\u13db\u13dc\7\u0227\2\2\u13dc"+
		"\u13de\5\u0290\u0149\2\u13dd\u13db\3\2\2\2\u13de\u13e1\3\2\2\2\u13df\u13dd"+
		"\3\2\2\2\u13df\u13e0\3\2\2\2\u13e0\u13e3\3\2\2\2\u13e1\u13df\3\2\2\2\u13e2"+
		"\u13d9\3\2\2\2\u13e2\u13da\3\2\2\2\u13e3\u028f\3\2\2\2\u13e4\u13e6\7\u00b8"+
		"\2\2\u13e5\u13e7\7\u0137\2\2\u13e6\u13e5\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7"+
		"\u13ea\3\2\2\2\u13e8\u13ea\7\u0137\2\2\u13e9\u13e4\3\2\2\2\u13e9\u13e8"+
		"\3\2\2\2\u13e9\u13ea\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb\u13ed\5\u018e\u00c8"+
		"\2\u13ec\u13ee\5\u02ba\u015e\2\u13ed\u13ec\3\2\2\2\u13ed\u13ee\3\2\2\2"+
		"\u13ee\u0291\3\2\2\2\u13ef\u13f0\7\u0134\2\2\u13f0\u13f1\7,\2\2\u13f1"+
		"\u13f2\5\u0252\u012a\2\u13f2\u0293\3\2\2\2\u13f3\u13f4\7\u01e3\2\2\u13f4"+
		"\u13f5\7\u00ad\2\2\u13f5\u13f6\7\u0221\2\2\u13f6\u13f7\5\u01e2\u00f2\2"+
		"\u13f7\u13f8\7\u0222\2\2\u13f8\u13fb\3\2\2\2\u13f9\u13fb\5\u0286\u0144"+
		"\2\u13fa\u13f3\3\2\2\2\u13fa\u13f9\3\2\2\2\u13fb\u0295\3\2\2\2\u13fc\u140e"+
		"\7V\2\2\u13fd\u13ff\7\u0103\2\2\u13fe\u1400\7\27\2\2\u13ff\u13fe\3\2\2"+
		"\2\u13ff\u1400\3\2\2\2\u1400\u140f\3\2\2\2\u1401\u1402\7\u0221\2\2\u1402"+
		"\u1407\5\u02c8\u0165\2\u1403\u1404\7\u0227\2\2\u1404\u1406\5\u02c8\u0165"+
		"\2\u1405\u1403\3\2\2\2\u1406\u1409\3\2\2\2\u1407\u1405\3\2\2\2\u1407\u1408"+
		"\3\2\2\2\u1408\u140a\3\2\2\2\u1409\u1407\3\2\2\2\u140a\u140b\7\u0222\2"+
		"\2\u140b\u140c\7\u01d2\2\2\u140c\u140d\5\u0230\u0119\2\u140d\u140f\3\2"+
		"\2\2\u140e\u13fd\3\2\2\2\u140e\u1401\3\2\2\2\u140f\u0297\3\2\2\2\u1410"+
		"\u1413\7\u0140\2\2\u1411\u1412\7,\2\2\u1412\u1414\7\u01d1\2\2\u1413\u1411"+
		"\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u1417\5\u0238\u011d"+
		"\2\u1416\u1418\5\u02ba\u015e\2\u1417\u1416\3\2\2\2\u1417\u1418\3\2\2\2"+
		"\u1418\u1419\3\2\2\2\u1419\u141a\7\u0227\2\2\u141a\u141c\5\u0238\u011d"+
		"\2\u141b\u141d\5\u02ba\u015e\2\u141c\u141b\3\2\2\2\u141c\u141d\3\2\2\2"+
		"\u141d\u0299\3\2\2\2\u141e\u141f\7\u01e8\2\2\u141f\u1421\7\u0221\2\2\u1420"+
		"\u1422\tD\2\2\u1421\u1420\3\2\2\2\u1421\u1422\3\2\2\2\u1422\u1424\3\2"+
		"\2\2\u1423\u1425\tM\2\2\u1424\u1423\3\2\2\2\u1424\u1425\3\2\2\2\u1425"+
		"\u1426\3\2\2\2\u1426\u142b\5\u02a2\u0152\2\u1427\u1428\7\u0227\2\2\u1428"+
		"\u142a\5\u02a2\u0152\2\u1429\u1427\3\2\2\2\u142a\u142d\3\2\2\2\u142b\u1429"+
		"\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142e\3\2\2\2\u142d\u142b\3\2\2\2\u142e"+
		"\u142f\7\u0222\2\2\u142f\u029b\3\2\2\2\u1430\u1431\7\u01ee\2\2\u1431\u1435"+
		"\7\u0221\2\2\u1432\u1433\5\u0252\u012a\2\u1433\u1434\5\u02ba\u015e\2\u1434"+
		"\u1436\3\2\2\2\u1435\u1432\3\2\2\2\u1435\u1436\3\2\2\2\u1436\u143d\3\2"+
		"\2\2\u1437\u1438\7\u0227\2\2\u1438\u1439\5\u0252\u012a\2\u1439\u143a\5"+
		"\u02ba\u015e\2\u143a\u143c\3\2\2\2\u143b\u1437\3\2\2\2\u143c\u143f\3\2"+
		"\2\2\u143d\u143b\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u1441\3\2\2\2\u143f"+
		"\u143d\3\2\2\2\u1440\u1442\5\u02a0\u0151\2\u1441\u1440\3\2\2\2\u1441\u1442"+
		"\3\2\2\2\u1442\u1443\3\2\2\2\u1443\u1444\7\u0222\2\2\u1444\u029d\3\2\2"+
		"\2\u1445\u1450\5\u02c6\u0164\2\u1446\u1447\7\u00a2\2\2\u1447\u1451\7\u0135"+
		"\2\2\u1448\u144b\5\u0312\u018a\2\u1449\u144a\7\u0141\2\2\u144a\u144c\5"+
		"\u0252\u012a\2\u144b\u1449\3\2\2\2\u144b\u144c\3\2\2\2\u144c\u144e\3\2"+
		"\2\2\u144d\u144f\5\u02a0\u0151\2\u144e\u144d\3\2\2\2\u144e\u144f\3\2\2"+
		"\2\u144f\u1451\3\2\2\2\u1450\u1446\3\2\2\2\u1450\u1448\3\2\2\2\u1451\u029f"+
		"\3\2\2\2\u1452\u1453\7o\2\2\u1453\u1454\5\u0252\u012a\2\u1454\u02a1\3"+
		"\2\2\2\u1455\u145c\5\u0236\u011c\2\u1456\u145a\7\20\2\2\u1457\u145b\5"+
		"\u032c\u0197\2\u1458\u1459\7\u008b\2\2\u1459\u145b\5\u0250\u0129\2\u145a"+
		"\u1457\3\2\2\2\u145a\u1458\3\2\2\2\u145b\u145d\3\2\2\2\u145c\u1456\3\2"+
		"\2\2\u145c\u145d\3\2\2\2\u145d\u02a3\3\2\2\2\u145e\u1462\7\u01d8\2\2\u145f"+
		"\u1460\7\u0112\2\2\u1460\u1463\7\u01d1\2\2\u1461\u1463\5\u0238\u011d\2"+
		"\u1462\u145f\3\2\2\2\u1462\u1461\3\2\2\2\u1463\u02a5\3\2\2\2\u1464\u146a"+
		"\7\u019b\2\2\u1465\u146b\7\u01f6\2\2\u1466\u1468\7\u0112\2\2\u1467\u1469"+
		"\7\u01d1\2\2\u1468\u1467\3\2\2\2\u1468\u1469\3\2\2\2\u1469\u146b\3\2\2"+
		"\2\u146a\u1465\3\2\2\2\u146a\u1466\3\2\2\2\u146b\u02a7\3\2\2\2\u146c\u146d"+
		"\7\u0086\2\2\u146d\u146e\5\u0252\u012a\2\u146e\u02a9\3\2\2\2\u146f\u1470"+
		"\7\u01d8\2\2\u1470\u1471\5\u0252\u012a\2\u1471\u02ab\3\2\2\2\u1472\u1473"+
		"\7\u0112\2\2\u1473\u147b\7\u00bc\2\2\u1474\u1478\7\u00bc\2\2\u1475\u1476"+
		"\7\u0193\2\2\u1476\u1477\7\u0238\2\2\u1477\u1479\5\u0252\u012a\2\u1478"+
		"\u1475\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u147b\3\2\2\2\u147a\u1472\3\2"+
		"\2\2\u147a\u1474\3\2\2\2\u147b\u02ad\3\2\2\2\u147c\u1482\7\u0228\2\2\u147d"+
		"\u1482\5\u02b0\u0159\2\u147e\u1482\5\u02b4\u015b\2\u147f\u1482\5\u02b6"+
		"\u015c\2\u1480\u1482\5\u02b2\u015a\2\u1481\u147c\3\2\2\2\u1481\u147d\3"+
		"\2\2\2\u1481\u147e\3\2\2\2\u1481\u147f\3\2\2\2\u1481\u1480\3\2\2\2\u1482"+
		"\u1484\3\2\2\2\u1483\u1485\7\u022d\2\2\u1484\u1483\3\2\2\2\u1484\u1485"+
		"\3\2\2\2\u1485\u02af\3\2\2\2\u1486\u1487\7\u01df\2\2\u1487\u148d\tN\2"+
		"\2\u1488\u1489\7\u0093\2\2\u1489\u148a\tO\2\2\u148a\u148e\tP\2\2\u148b"+
		"\u148c\7R\2\2\u148c\u148e\tQ\2\2\u148d\u1488\3\2\2\2\u148d\u148b\3\2\2"+
		"\2\u148e\u02b1\3\2\2\2\u148f\u1490\7\u0189\2\2\u1490\u1496\5\u0338\u019d"+
		"\2\u1491\u1497\7\u021d\2\2\u1492\u1497\7\u012e\2\2\u1493\u1497\7\u012a"+
		"\2\2\u1494\u1497\5\u0324\u0193\2\u1495\u1497\5\u0338\u019d\2\u1496\u1491"+
		"\3\2\2\2\u1496\u1492\3\2\2\2\u1496\u1493\3\2\2\2\u1496\u1494\3\2\2\2\u1496"+
		"\u1495\3\2\2\2\u1497\u02b3\3\2\2\2\u1498\u1499\7\u0093\2\2\u1499\u02b5"+
		"\3\2\2\2\u149a\u149b\7\u023f\2\2\u149b\u02b7\3\2\2\2\u149c\u149e\tR\2"+
		"\2\u149d\u149f\7\u00a2\2\2\u149e\u149d\3\2\2\2\u149e\u149f\3\2\2\2\u149f"+
		"\u14a0\3\2\2\2\u14a0\u14a1\5\u0230\u0119\2\u14a1\u02b9\3\2\2\2\u14a2\u14a4"+
		"\7\20\2\2\u14a3\u14a2\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a7\3\2\2\2"+
		"\u14a5\u14a8\5\u032a\u0196\2\u14a6\u14a8\5\u02be\u0160\2\u14a7\u14a5\3"+
		"\2\2\2\u14a7\u14a6\3\2\2\2\u14a8\u14ab\3\2\2\2\u14a9\u14ab\7\20\2\2\u14aa"+
		"\u14a3\3\2\2\2\u14aa\u14a9\3\2\2\2\u14ab\u02bb\3\2\2\2\u14ac\u14af\5\u032a"+
		"\u0196\2\u14ad\u14af\5\u02be\u0160\2\u14ae\u14ac\3\2\2\2\u14ae\u14ad\3"+
		"\2\2\2\u14af\u02bd\3\2\2\2\u14b0\u14b1\5\u0328\u0195\2\u14b1\u02bf\3\2"+
		"\2\2\u14b2\u14b5\7\u01e0\2\2\u14b3\u14b6\5\u02c2\u0162\2\u14b4\u14b6\5"+
		"\u0234\u011b\2\u14b5\u14b3\3\2\2\2\u14b5\u14b4\3\2\2\2\u14b6\u02c1\3\2"+
		"\2\2\u14b7\u14b8\7\\\2\2\u14b8\u14b9\7\u0129\2\2\u14b9\u14ba\5\u02f8\u017d"+
		"\2\u14ba\u02c3\3\2\2\2\u14bb\u14bc\7\u00d0\2\2\u14bc\u14c1\5\u02f4\u017b"+
		"\2\u14bd\u14be\7\u0227\2\2\u14be\u14c0\5\u02f4\u017b\2\u14bf\u14bd\3\2"+
		"\2\2\u14c0\u14c3\3\2\2\2\u14c1\u14bf\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2"+
		"\u14d0\3\2\2\2\u14c3\u14c1\3\2\2\2\u14c4\u14c5\7+\2\2\u14c5\u14c6\7?\2"+
		"\2\u14c6\u14c7\7\u00d0\2\2\u14c7\u14cc\5\u02f4\u017b\2\u14c8\u14c9\7\u0227"+
		"\2\2\u14c9\u14cb\5\u02f4\u017b\2\u14ca\u14c8\3\2\2\2\u14cb\u14ce\3\2\2"+
		"\2\u14cc\u14ca\3\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u14d0\3\2\2\2\u14ce\u14cc"+
		"\3\2\2\2\u14cf\u14bb\3\2\2\2\u14cf\u14c4\3\2\2\2\u14d0\u02c5\3\2\2\2\u14d1"+
		"\u14d4\5\u032a\u0196\2\u14d2\u14d4\5\u0328\u0195\2\u14d3\u14d1\3\2\2\2"+
		"\u14d3\u14d2\3\2\2\2\u14d4\u02c7\3\2\2\2\u14d5\u14d6\5\u032a\u0196\2\u14d6"+
		"\u02c9\3\2\2\2\u14d7\u14d8\5\u032a\u0196\2\u14d8\u02cb\3\2\2\2\u14d9\u14da"+
		"\5\u032a\u0196\2\u14da\u02cd\3\2\2\2\u14db\u14dc\5\u032a\u0196\2\u14dc"+
		"\u02cf\3\2\2\2\u14dd\u14de\5\u032a\u0196\2\u14de\u02d1\3\2\2\2\u14df\u14e0"+
		"\5\u032a\u0196\2\u14e0\u02d3\3\2\2\2\u14e1\u14e6\5\u032a\u0196\2\u14e2"+
		"\u14e3\7\u021a\2\2\u14e3\u14e5\5\u032c\u0197\2\u14e4\u14e2\3\2\2\2\u14e5"+
		"\u14e8\3\2\2\2\u14e6\u14e4\3\2\2\2\u14e6\u14e7\3\2\2\2\u14e7\u14eb\3\2"+
		"\2\2\u14e8\u14e6\3\2\2\2\u14e9\u14ea\7\u0229\2\2\u14ea\u14ec\5\u02fe\u0180"+
		"\2\u14eb\u14e9\3\2\2\2\u14eb\u14ec\3\2\2\2\u14ec\u02d5\3\2\2\2\u14ed\u14ee"+
		"\5\u032a\u0196\2\u14ee\u02d7\3\2\2\2\u14ef\u14f2\5\u032a\u0196\2\u14f0"+
		"\u14f1\7\u021a\2\2\u14f1\u14f3\5\u032c\u0197\2\u14f2\u14f0\3\2\2\2\u14f2"+
		"\u14f3\3\2\2\2\u14f3\u02d9\3\2\2\2\u14f4\u14f5\5\u032a\u0196\2\u14f5\u02db"+
		"\3\2\2\2\u14f6\u14f7\5\u032a\u0196\2\u14f7\u02dd\3\2\2\2\u14f8\u14f9\5"+
		"\u032a\u0196\2\u14f9\u02df\3\2\2\2\u14fa\u14ff\5\u032a\u0196\2\u14fb\u14fc"+
		"\7\u021a\2\2\u14fc\u14fe\5\u032c\u0197\2\u14fd\u14fb\3\2\2\2\u14fe\u1501"+
		"\3\2\2\2\u14ff\u14fd\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u02e1\3\2\2\2\u1501"+
		"\u14ff\3\2\2\2\u1502\u1503\5\u032a\u0196\2\u1503\u02e3\3\2\2\2\u1504\u1509"+
		"\5\u032a\u0196\2\u1505\u1506\7\u021a\2\2\u1506\u1508\5\u032c\u0197\2\u1507"+
		"\u1505\3\2\2\2\u1508\u150b\3\2\2\2\u1509\u1507\3\2\2\2\u1509\u150a\3\2"+
		"\2\2\u150a\u150e\3\2\2\2\u150b\u1509\3\2\2\2\u150c\u150d\7\u0229\2\2\u150d"+
		"\u150f\5\u02fe\u0180\2\u150e\u150c\3\2\2\2\u150e\u150f\3\2\2\2\u150f\u02e5"+
		"\3\2\2\2\u1510\u1511\5\u032c\u0197\2\u1511\u02e7\3\2\2\2\u1512\u1517\5"+
		"\u032c\u0197\2\u1513\u1514\7\u021a\2\2\u1514\u1516\5\u032c\u0197\2\u1515"+
		"\u1513\3\2\2\2\u1516\u1519\3\2\2\2\u1517\u1515\3\2\2\2\u1517\u1518\3\2"+
		"\2\2\u1518\u02e9\3\2\2\2\u1519\u1517\3\2\2\2\u151a\u151b\5\u02d2\u016a"+
		"\2\u151b\u151c\7\u021a\2\2\u151c\u151e\3\2\2\2\u151d\u151a\3\2\2\2\u151d"+
		"\u151e\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u1520\5\u032c\u0197\2\u1520\u02eb"+
		"\3\2\2\2\u1521\u1526\5\u032a\u0196\2\u1522\u1523\7\u021a\2\2\u1523\u1525"+
		"\5\u032c\u0197\2\u1524\u1522\3\2\2\2\u1525\u1528\3\2\2\2\u1526\u1524\3"+
		"\2\2\2\u1526\u1527\3\2\2\2\u1527\u02ed\3\2\2\2\u1528\u1526\3\2\2\2\u1529"+
		"\u152a\5\u02d2\u016a\2\u152a\u152b\7\u021a\2\2\u152b\u152d\3\2\2\2\u152c"+
		"\u1529\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u152f\5\u032c"+
		"\u0197\2\u152f\u02ef\3\2\2\2\u1530\u1531\5\u02d2\u016a\2\u1531\u1532\7"+
		"\u021a\2\2\u1532\u1534\3\2\2\2\u1533\u1530\3\2\2\2\u1533\u1534\3\2\2\2"+
		"\u1534\u1535\3\2\2\2\u1535\u1536\5\u032c\u0197\2\u1536\u02f1\3\2\2\2\u1537"+
		"\u1538\5\u02d2\u016a\2\u1538\u1539\7\u021a\2\2\u1539\u153b\3\2\2\2\u153a"+
		"\u1537\3\2\2\2\u153a\u153b\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u153d\5\u032c"+
		"\u0197\2\u153d\u02f3\3\2\2\2\u153e\u153f\7\u023b\2\2\u153f\u1541\5\u0304"+
		"\u0183\2\u1540\u153e\3\2\2\2\u1540\u1541\3\2\2\2\u1541\u1542\3\2\2\2\u1542"+
		"\u1545\5\u032c\u0197\2\u1543\u1544\7\u021a\2\2\u1544\u1546\5\u032c\u0197"+
		"\2\u1545\u1543\3\2\2\2\u1545\u1546\3\2\2\2\u1546\u1549\3\2\2\2\u1547\u1549"+
		"\5\u031a\u018e\2\u1548\u1540\3\2\2\2\u1548\u1547\3\2\2\2\u1549\u02f5\3"+
		"\2\2\2\u154a\u154b\5\u032a\u0196\2\u154b\u02f7\3\2\2\2\u154c\u154f\5\u032a"+
		"\u0196\2\u154d\u154f\5\u031a\u018e\2\u154e\u154c\3\2\2\2\u154e\u154d\3"+
		"\2\2\2\u154f\u02f9\3\2\2\2\u1550\u1553\5\u032a\u0196\2\u1551\u1553\5\u031a"+
		"\u018e\2\u1552\u1550\3\2\2\2\u1552\u1551\3\2\2\2\u1553\u02fb\3\2\2\2\u1554"+
		"\u1557\5\u032a\u0196\2\u1555\u1556\7\u021a\2\2\u1556\u1558\5\u032c\u0197"+
		"\2\u1557\u1555\3\2\2\2\u1557\u1558\3\2\2\2\u1558\u02fd\3\2\2\2\u1559\u155a"+
		"\5\u032a\u0196\2\u155a\u02ff\3\2\2\2\u155b\u1560\5\u032a\u0196\2\u155c"+
		"\u155d\7\u021a\2\2\u155d\u155f\5\u032c\u0197\2\u155e\u155c\3\2\2\2\u155f"+
		"\u1562\3\2\2\2\u1560\u155e\3\2\2\2\u1560\u1561\3\2\2\2\u1561\u0301\3\2"+
		"\2\2\u1562\u1560\3\2\2\2\u1563\u1566\5\u032a\u0196\2\u1564\u1565\7\u021a"+
		"\2\2\u1565\u1567\5\u032c\u0197\2\u1566\u1564\3\2\2\2\u1566\u1567\3\2\2"+
		"\2\u1567\u156b\3\2\2\2\u1568\u1569\7\u0229\2\2\u1569\u156c\5\u02fe\u0180"+
		"\2\u156a\u156c\5\u02b8\u015d\2\u156b\u1568\3\2\2\2\u156b\u156a\3\2\2\2"+
		"\u156b\u156c\3\2\2\2\u156c\u0303\3\2\2\2\u156d\u1572\5\u032c\u0197\2\u156e"+
		"\u156f\7\u021a\2\2\u156f\u1571\5\u032c\u0197\2\u1570\u156e\3\2\2\2\u1571"+
		"\u1574\3\2\2\2\u1572\u1570\3\2\2\2\u1572\u1573\3\2\2\2\u1573\u0305\3\2"+
		"\2\2\u1574\u1572\3\2\2\2\u1575\u1576\7\u00d7\2\2\u1576\u1577\7\u0221\2"+
		"\2\u1577\u1578\7\u0200\2\2\u1578\u1579\t\64\2\2\u1579\u157a\5\u01e2\u00f2"+
		"\2\u157a\u157c\7\u0222\2\2\u157b\u157d\5\u0286\u0144\2\u157c\u157b\3\2"+
		"\2\2\u157c\u157d\3\2\2\2\u157d\u0307\3\2\2\2\u157e\u1580\7\u0221\2\2\u157f"+
		"\u1581\5\u0310\u0189\2\u1580\u157f\3\2\2\2\u1580\u1581\3\2\2\2\u1581\u1586"+
		"\3\2\2\2\u1582\u1583\7\u0227\2\2\u1583\u1585\5\u0310\u0189\2\u1584\u1582"+
		"\3\2\2\2\u1585\u1588\3\2\2\2\u1586\u1584\3\2\2\2\u1586\u1587\3\2\2\2\u1587"+
		"\u1589\3\2\2\2\u1588\u1586\3\2\2\2\u1589\u158b\7\u0222\2\2\u158a\u158c"+
		"\5\u0306\u0184\2\u158b\u158a\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u0309\3"+
		"\2\2\2\u158d\u1592\7\u0221\2\2\u158e\u1590\5\u0310\u0189\2\u158f\u1591"+
		"\5\u030e\u0188\2\u1590\u158f\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1593\3"+
		"\2\2\2\u1592\u158e\3\2\2\2\u1592\u1593\3\2\2\2\u1593\u159b\3\2\2\2\u1594"+
		"\u1595\7\u0227\2\2\u1595\u1597\5\u0310\u0189\2\u1596\u1598\5\u030e\u0188"+
		"\2\u1597\u1596\3\2\2\2\u1597\u1598\3\2\2\2\u1598\u159a\3\2\2\2\u1599\u1594"+
		"\3\2\2\2\u159a\u159d\3\2\2\2\u159b\u1599\3\2\2\2\u159b\u159c\3\2\2\2\u159c"+
		"\u159e\3\2\2\2\u159d\u159b\3\2\2\2\u159e\u15a0\7\u0222\2\2\u159f\u15a1"+
		"\5\u0306\u0184\2\u15a0\u159f\3\2\2\2\u15a0\u15a1\3\2\2\2\u15a1\u030b\3"+
		"\2\2\2\u15a2\u15a3\7\u0221\2\2\u15a3\u15b0\5\u0300\u0181\2\u15a4\u15a7"+
		"\7\u0227\2\2\u15a5\u15a8\5\u0324\u0193\2\u15a6\u15a8\7\u0123\2\2\u15a7"+
		"\u15a5\3\2\2\2\u15a7\u15a6\3\2\2\2\u15a8\u15ae\3\2\2\2\u15a9\u15ac\7\u0227"+
		"\2\2\u15aa\u15ad\5\u0324\u0193\2\u15ab\u15ad\7\u0123\2\2\u15ac\u15aa\3"+
		"\2\2\2\u15ac\u15ab\3\2\2\2\u15ad\u15af\3\2\2\2\u15ae\u15a9\3\2\2\2\u15ae"+
		"\u15af\3\2\2\2\u15af\u15b1\3\2\2\2\u15b0\u15a4\3\2\2\2\u15b0\u15b1\3\2"+
		"\2\2\u15b1\u15b2\3\2\2\2\u15b2\u15c6\7\u01cf\2\2\u15b3\u15b4\5\u0302\u0182"+
		"\2\u15b4\u15b5\7\u021a\2\2\u15b5\u15b6\7\u0224\2\2\u15b6\u15c7\3\2\2\2"+
		"\u15b7\u15c7\7\u0224\2\2\u15b8\u15ba\5\u0236\u011c\2\u15b9\u15bb\5\u02ba"+
		"\u015e\2\u15ba\u15b9\3\2\2\2\u15ba\u15bb\3\2\2\2\u15bb\u15c3\3\2\2\2\u15bc"+
		"\u15bd\7\u0227\2\2\u15bd\u15bf\5\u0236\u011c\2\u15be\u15c0\5\u02ba\u015e"+
		"\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3\2\2\2\u15c0\u15c2\3\2\2\2\u15c1\u15bc"+
		"\3\2\2\2\u15c2\u15c5\3\2\2\2\u15c3\u15c1\3\2\2\2\u15c3\u15c4\3\2\2\2\u15c4"+
		"\u15c7\3\2\2\2\u15c5\u15c3\3\2\2\2\u15c6\u15b3\3\2\2\2\u15c6\u15b7\3\2"+
		"\2\2\u15c6\u15b8\3\2\2\2\u15c7\u15c8\3\2\2\2\u15c8\u15ca\7\u0222\2\2\u15c9"+
		"\u15cb\5\u0306\u0184\2\u15ca\u15c9\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u030d"+
		"\3\2\2\2\u15cc\u15cd\tS\2\2\u15cd\u15ce\7\u0124\2\2\u15ce\u030f\3\2\2"+
		"\2\u15cf\u15d0\5\u032a\u0196\2\u15d0\u15d1\7\u0238\2\2\u15d1\u15d2\7\u0235"+
		"\2\2\u15d2\u15d4\3\2\2\2\u15d3\u15cf\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4"+
		"\u15d5\3\2\2\2\u15d5\u15d6\5\u0238\u011d\2\u15d6\u0311\3\2\2\2\u15d7\u15e0"+
		"\5\u0314\u018b\2\u15d8\u15da\7\u015d\2\2\u15d9\u15d8\3\2\2\2\u15d9\u15da"+
		"\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dd\5\u02e8\u0175\2\u15dc\u15de\t"+
		"!\2\2\u15dd\u15dc\3\2\2\2\u15dd\u15de\3\2\2\2\u15de\u15e0\3\2\2\2\u15df"+
		"\u15d7\3\2\2\2\u15df\u15d9\3\2\2\2\u15e0\u0313\3\2\2\2\u15e1\u15e3\5\u0318"+
		"\u018d\2\u15e2\u15e4\5\u0316\u018c\2\u15e3\u15e2\3\2\2\2\u15e3\u15e4\3"+
		"\2\2\2\u15e4\u15eb\3\2\2\2\u15e5\u15e7\7\u01e2\2\2\u15e6\u15e8\7\u00e9"+
		"\2\2\u15e7\u15e6\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9"+
		"\u15ea\7\u01b0\2\2\u15ea\u15ec\7\u01f8\2\2\u15eb\u15e5\3\2\2\2\u15eb\u15ec"+
		"\3\2\2\2\u15ec\u15fe\3\2\2\2\u15ed\u15ee\7\u00cf\2\2\u15ee\u15f3\tT\2"+
		"\2\u15ef\u15f0\7\u0221\2\2\u15f0\u15f1\5\u0238\u011d\2\u15f1\u15f2\7\u0222"+
		"\2\2\u15f2\u15f4\3\2\2\2\u15f3\u15ef\3\2\2\2\u15f3\u15f4\3\2\2\2\u15f4"+
		"\u15f5\3\2\2\2\u15f5\u15f6\7\u01b9\2\2\u15f6\u15fb\tU\2\2\u15f7\u15f8"+
		"\7\u0221\2\2\u15f8\u15f9\5\u0238\u011d\2\u15f9\u15fa\7\u0222\2\2\u15fa"+
		"\u15fc\3\2\2\2\u15fb\u15f7\3\2\2\2\u15fb\u15fc\3\2\2\2\u15fc\u15fe\3\2"+
		"\2\2\u15fd\u15e1\3\2\2\2\u15fd\u15ed\3\2\2\2\u15fe\u0315\3\2\2\2\u15ff"+
		"\u1602\7\u0221\2\2\u1600\u1603\5\u0324\u0193\2\u1601\u1603\7\u0224\2\2"+
		"\u1602\u1600\3\2\2\2\u1602\u1601\3\2\2\2\u1603\u1606\3\2\2\2\u1604\u1605"+
		"\7\u0227\2\2\u1605\u1607\5\u0324\u0193\2\u1606\u1604\3\2\2\2\u1606\u1607"+
		"\3\2\2\2\u1607\u1609\3\2\2\2\u1608\u160a\tV\2\2\u1609\u1608\3\2\2\2\u1609"+
		"\u160a\3\2\2\2\u160a\u160b\3\2\2\2\u160b\u160c\7\u0222\2\2\u160c\u0317"+
		"\3\2\2\2\u160d\u164a\7#\2\2\u160e\u164a\7\u014a\2\2\u160f\u164a\7\u0109"+
		"\2\2\u1610\u164a\7\"\2\2\u1611\u164a\7!\2\2\u1612\u164a\7\u010a\2\2\u1613"+
		"\u164a\7\u014b\2\2\u1614\u164a\7\u014c\2\2\u1615\u164a\7\u0190\2\2\u1616"+
		"\u164a\7\u0191\2\2\u1617\u164a\7\u0127\2\2\u1618\u164a\7i\2\2\u1619\u164a"+
		"\7\u00cd\2\2\u161a\u164a\7\u00cc\2\2\u161b\u164a\7\u0126\2\2\u161c\u164a"+
		"\7\u0195\2\2\u161d\u164a\7\u0125\2\2\u161e\u164a\7j\2\2\u161f\u1621\7"+
		"}\2\2\u1620\u1622\7\u014f\2\2\u1621\u1620\3\2\2\2\u1621\u1622\3\2\2\2"+
		"\u1622\u164a\3\2\2\2\u1623\u164a\7\u009f\2\2\u1624\u164a\7\u015a\2\2\u1625"+
		"\u164a\7\u010c\2\2\u1626\u1628\7\u00f0\2\2\u1627\u1629\7\u0157\2\2\u1628"+
		"\u1627\3\2\2\2\u1628\u1629\3\2\2\2\u1629\u164a\3\2\2\2\u162a\u164a\7\66"+
		"\2\2\u162b\u164a\78\2\2\u162c\u164a\7\u01d4\2\2\u162d\u164a\7\u01d3\2"+
		"\2\u162e\u164a\7\u01a4\2\2\u162f\u164a\7\u0157\2\2\u1630\u164a\7\'\2\2"+
		"\u1631\u164a\7c\2\2\u1632\u164a\7\u0173\2\2\u1633\u164a\7\u01cd\2\2\u1634"+
		"\u164a\7\u01f5\2\2\u1635\u164a\7\u0105\2\2\u1636\u164a\7d\2\2\u1637\u164a"+
		"\7\u00b4\2\2\u1638\u164a\7\u00ff\2\2\u1639\u164a\7\u017d\2\2\u163a\u164a"+
		"\7\u01b6\2\2\u163b\u164a\7\u01b7\2\2\u163c\u164a\7\u01b8\2\2\u163d\u164a"+
		"\7\u01b5\2\2\u163e\u164a\7\u01b1\2\2\u163f\u164a\7\u01b4\2\2\u1640\u164a"+
		"\7\u01b3\2\2\u1641\u164a\7\u01b2\2\2\u1642\u164a\7\u01f7\2\2\u1643\u164a"+
		"\7\177\2\2\u1644\u164a\7 \2\2\u1645\u164a\7$\2\2\u1646\u164a\7<\2\2\u1647"+
		"\u164a\7\u010e\2\2\u1648\u164a\7\u0101\2\2\u1649\u160d\3\2\2\2\u1649\u160e"+
		"\3\2\2\2\u1649\u160f\3\2\2\2\u1649\u1610\3\2\2\2\u1649\u1611\3\2\2\2\u1649"+
		"\u1612\3\2\2\2\u1649\u1613\3\2\2\2\u1649\u1614\3\2\2\2\u1649\u1615\3\2"+
		"\2\2\u1649\u1616\3\2\2\2\u1649\u1617\3\2\2\2\u1649\u1618\3\2\2\2\u1649"+
		"\u1619\3\2\2\2\u1649\u161a\3\2\2\2\u1649\u161b\3\2\2\2\u1649\u161c\3\2"+
		"\2\2\u1649\u161d\3\2\2\2\u1649\u161e\3\2\2\2\u1649\u161f\3\2\2\2\u1649"+
		"\u1623\3\2\2\2\u1649\u1624\3\2\2\2\u1649\u1625\3\2\2\2\u1649\u1626\3\2"+
		"\2\2\u1649\u162a\3\2\2\2\u1649\u162b\3\2\2\2\u1649\u162c\3\2\2\2\u1649"+
		"\u162d\3\2\2\2\u1649\u162e\3\2\2\2\u1649\u162f\3\2\2\2\u1649\u1630\3\2"+
		"\2\2\u1649\u1631\3\2\2\2\u1649\u1632\3\2\2\2\u1649\u1633\3\2\2\2\u1649"+
		"\u1634\3\2\2\2\u1649\u1635\3\2\2\2\u1649\u1636\3\2\2\2\u1649\u1637\3\2"+
		"\2\2\u1649\u1638\3\2\2\2\u1649\u1639\3\2\2\2\u1649\u163a\3\2\2\2\u1649"+
		"\u163b\3\2\2\2\u1649\u163c\3\2\2\2\u1649\u163d\3\2\2\2\u1649\u163e\3\2"+
		"\2\2\u1649\u163f\3\2\2\2\u1649\u1640\3\2\2\2\u1649\u1641\3\2\2\2\u1649"+
		"\u1642\3\2\2\2\u1649\u1643\3\2\2\2\u1649\u1644\3\2\2\2\u1649\u1645\3\2"+
		"\2\2\u1649\u1646\3\2\2\2\u1649\u1647\3\2\2\2\u1649\u1648\3\2\2\2\u164a"+
		"\u0319\3\2\2\2\u164b\u164f\7\u022b\2\2\u164c\u164d\7\u022c\2\2\u164d\u164f"+
		"\7\u021b\2\2\u164e\u164b\3\2\2\2\u164e\u164c\3\2\2\2\u164f\u1658\3\2\2"+
		"\2\u1650\u1652\7\u00c0\2\2\u1651\u1650\3\2\2\2\u1651\u1652\3\2\2\2\u1652"+
		"\u1656\3\2\2\2\u1653\u1657\7\u022b\2\2\u1654\u1655\7\u022c\2\2\u1655\u1657"+
		"\7\u021b\2\2\u1656\u1653\3\2\2\2\u1656\u1654\3\2\2\2\u1657\u1659\3\2\2"+
		"\2\u1658\u1651\3\2\2\2\u1658\u1659\3\2\2\2\u1659\u165e\3\2\2\2\u165a\u165b"+
		"\7\u021a\2\2\u165b\u165d\5\u031e\u0190\2\u165c\u165a\3\2\2\2\u165d\u1660"+
		"\3\2\2\2\u165e\u165c\3\2\2\2\u165e\u165f\3\2\2\2\u165f\u031b\3\2\2\2\u1660"+
		"\u165e\3\2\2\2\u1661\u1666\5\u031e\u0190\2\u1662\u1663\7\u021a\2\2\u1663"+
		"\u1665\5\u031e\u0190\2\u1664\u1662\3\2\2\2\u1665\u1668\3\2\2\2\u1666\u1664"+
		"\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u031d\3\2\2\2\u1668\u1666\3\2\2\2\u1669"+
		"\u166a\7\u023b\2\2\u166a\u166c\5\u0304\u0183\2\u166b\u1669\3\2\2\2\u166b"+
		"\u166c\3\2\2\2\u166c\u166d\3\2\2\2\u166d\u1672\5\u032c\u0197\2\u166e\u166f"+
		"\7\u021a\2\2\u166f\u1671\5\u032c\u0197\2\u1670\u166e\3\2\2\2\u1671\u1674"+
		"\3\2\2\2\u1672\u1670\3\2\2\2\u1672\u1673\3\2\2\2\u1673\u1676\3\2\2\2\u1674"+
		"\u1672\3\2\2\2\u1675\u1677\5\u0308\u0185\2\u1676\u1675\3\2\2\2\u1676\u1677"+
		"\3\2\2\2\u1677\u031f\3\2\2\2\u1678\u1679\7\u023b\2\2\u1679\u167b\5\u0304"+
		"\u0183\2\u167a\u1678\3\2\2\2\u167a\u167b\3\2\2\2\u167b\u167c\3\2\2\2\u167c"+
		"\u1681\5\u032c\u0197\2\u167d\u167e\7\u021a\2\2\u167e\u1680\5\u032c\u0197"+
		"\2\u167f\u167d\3\2\2\2\u1680\u1683\3\2\2\2\u1681\u167f\3\2\2\2\u1681\u1682"+
		"\3\2\2\2\u1682\u0321\3\2\2\2\u1683\u1681\3\2\2\2\u1684\u1687\7\u01b1\2"+
		"\2\u1685\u1688\5\u0328\u0195\2\u1686\u1688\5\u031a\u018e\2\u1687\u1685"+
		"\3\2\2\2\u1687\u1686\3\2\2\2\u1688\u168d\3\2\2\2\u1689\u168a\7\23\2\2"+
		"\u168a\u168b\7\u01b0\2\2\u168b\u168c\7\u01f8\2\2\u168c\u168e\5\u0328\u0195"+
		"\2\u168d\u1689\3\2\2\2\u168d\u168e\3\2\2\2\u168e\u16c3\3\2\2\2\u168f\u1693"+
		"\7\u00cf\2\2\u1690\u1694\5\u0328\u0195\2\u1691\u1694\5\u031a\u018e\2\u1692"+
		"\u1694\5\u031e\u0190\2\u1693\u1690\3\2\2\2\u1693\u1691\3\2\2\2\u1693\u1692"+
		"\3\2\2\2\u1694\u1695\3\2\2\2\u1695\u16a3\tW\2\2\u1696\u1699\7\u0221\2"+
		"\2\u1697\u169a\7\u021b\2\2\u1698\u169a\5\u031a\u018e\2\u1699\u1697\3\2"+
		"\2\2\u1699\u1698\3\2\2\2\u169a\u16a0\3\2\2\2\u169b\u169e\7\u0227\2\2\u169c"+
		"\u169f\7\u021b\2\2\u169d\u169f\5\u031a\u018e\2\u169e\u169c\3\2\2\2\u169e"+
		"\u169d\3\2\2\2\u169f\u16a1\3\2\2\2\u16a0\u169b\3\2\2\2\u16a0\u16a1\3\2"+
		"\2\2\u16a1\u16a2\3\2\2\2\u16a2\u16a4\7\u0222\2\2\u16a3\u1696\3\2\2\2\u16a3"+
		"\u16a4\3\2\2\2\u16a4\u16b4\3\2\2\2\u16a5\u16b2\7\u01b9\2\2\u16a6\u16b3"+
		"\7d\2\2\u16a7\u16b3\7\u00b4\2\2\u16a8\u16b3\7\u00ff\2\2\u16a9\u16b0\7"+
		"\u017d\2\2\u16aa\u16ad\7\u0221\2\2\u16ab\u16ae\7\u021b\2\2\u16ac\u16ae"+
		"\5\u031a\u018e\2\u16ad\u16ab\3\2\2\2\u16ad\u16ac\3\2\2\2\u16ae\u16af\3"+
		"\2\2\2\u16af\u16b1\7\u0222\2\2\u16b0\u16aa\3\2\2\2\u16b0\u16b1\3\2\2\2"+
		"\u16b1\u16b3\3\2\2\2\u16b2\u16a6\3\2\2\2\u16b2\u16a7\3\2\2\2\u16b2\u16a8"+
		"\3\2\2\2\u16b2\u16a9\3\2\2\2\u16b3\u16b5\3\2\2\2\u16b4\u16a5\3\2\2\2\u16b4"+
		"\u16b5\3\2\2\2\u16b5\u16c3\3\2\2\2\u16b6\u16c3\5\u0324\u0193\2\u16b7\u16b8"+
		"\7c\2\2\u16b8\u16c3\5\u0328\u0195\2\u16b9\u16c3\5\u0328\u0195\2\u16ba"+
		"\u16c3\7\u0123\2\2\u16bb\u16c3\7\u01c0\2\2\u16bc\u16c3\7\u0098\2\2\u16bd"+
		"\u16c3\7f\2\2\u16be\u16c3\7\u0188\2\2\u16bf\u16c3\7\u0100\2\2\u16c0\u16c3"+
		"\7\u00f8\2\2\u16c1\u16c3\7o\2\2\u16c2\u1684\3\2\2\2\u16c2\u168f\3\2\2"+
		"\2\u16c2\u16b6\3\2\2\2\u16c2\u16b7\3\2\2\2\u16c2\u16b9\3\2\2\2\u16c2\u16ba"+
		"\3\2\2\2\u16c2\u16bb\3\2\2\2\u16c2\u16bc\3\2\2\2\u16c2\u16bd\3\2\2\2\u16c2"+
		"\u16be\3\2\2\2\u16c2\u16bf\3\2\2\2\u16c2\u16c0\3\2\2\2\u16c2\u16c1\3\2"+
		"\2\2\u16c3\u0323\3\2\2\2\u16c4\u16c5\tX\2\2\u16c5\u0325\3\2\2\2\u16c6"+
		"\u16c7\7\u0226\2\2\u16c7\u16c8\5\u0324\u0193\2\u16c8\u0327\3\2\2\2\u16c9"+
		"\u16ca\tY\2\2\u16ca\u0329\3\2\2\2\u16cb\u16cc\7\u023b\2\2\u16cc\u16ce"+
		"\5\u0304\u0183\2\u16cd\u16cb\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cf\3"+
		"\2\2\2\u16cf\u16d0\5\u032c\u0197\2\u16d0\u032b\3\2\2\2\u16d1\u16d4\5\u0338"+
		"\u019d\2\u16d2\u16d4\7\u021e\2\2\u16d3\u16d1\3\2\2\2\u16d3\u16d2\3\2\2"+
		"\2\u16d4\u032d\3\2\2\2\u16d5\u16dd\7\u0231\2\2\u16d6\u16d7\7\u022f\2\2"+
		"\u16d7\u16dd\7\u0235\2\2\u16d8\u16d9\7\u0234\2\2\u16d9\u16dd\7\u0238\2"+
		"\2\u16da\u16db\7\u0232\2\2\u16db\u16dd\7\u0238\2\2\u16dc\u16d5\3\2\2\2"+
		"\u16dc\u16d6\3\2\2\2\u16dc\u16d8\3\2\2\2\u16dc\u16da\3\2\2\2\u16dd\u032f"+
		"\3\2\2\2\u16de\u16e2\7\u0230\2\2\u16df\u16e0\7\u0235\2\2\u16e0\u16e2\7"+
		"\u0238\2\2\u16e1\u16de\3\2\2\2\u16e1\u16df\3\2\2\2\u16e2\u0331\3\2\2\2"+
		"\u16e3\u16e7\7\u022e\2\2\u16e4\u16e5\7\u022f\2\2\u16e5\u16e7\7\u0238\2"+
		"\2\u16e6\u16e3\3\2\2\2\u16e6\u16e4\3\2\2\2\u16e7\u0333\3\2\2\2\u16e8\u16ec"+
		"\7\u0236\2\2\u16e9\u16ea\7\u0237\2\2\u16ea\u16ec\7\u0237\2\2\u16eb\u16e8"+
		"\3\2\2\2\u16eb\u16e9\3\2\2\2\u16ec\u0335\3\2\2\2\u16ed\u16ee\7\u0221\2"+
		"\2\u16ee\u16ef\7\u0225\2\2\u16ef\u16f0\7\u0222\2\2\u16f0\u0337\3\2\2\2"+
		"\u16f1\u16f2\tZ\2\2\u16f2\u0339\3\2\2\2\u030c\u033d\u0342\u0349\u034b"+
		"\u0367\u036e\u0377\u037c\u0381\u0387\u0392\u0394\u03a1\u03a3\u03bc\u03be"+
		"\u03c8\u03ca\u03cc\u03cf\u03da\u03e5\u03e7\u03ed\u03ef\u03f1\u03f4\u0402"+
		"\u0405\u0407\u0409\u040f\u0412\u0419\u041e\u0425\u042e\u0434\u0438\u043c"+
		"\u0441\u0445\u044a\u0451\u0455\u0458\u045f\u0467\u0475\u047a\u047e\u0486"+
		"\u048a\u0493\u04a0\u04ad\u04b8\u04bb\u04c1\u04ca\u04cf\u04d6\u04d8\u04db"+
		"\u04e8\u04ea\u04f3\u04fb\u04fe\u0500\u0504\u0508\u050e\u0513\u0518\u051c"+
		"\u0520\u0524\u0528\u052b\u052f\u0536\u053d\u0540\u0543\u0549\u0552\u055c"+
		"\u0562\u056c\u0575\u057d\u0589\u058e\u0593\u059a\u059c\u05a6\u05ab\u05b3"+
		"\u05b5\u05b9\u05bd\u05c2\u05c7\u05cc\u05d2\u05e0\u05e5\u05e8\u05ee\u05f7"+
		"\u0605\u060d\u0617\u061a\u061f\u0624\u062b\u0630\u063a\u0641\u0643\u0647"+
		"\u064d\u0652\u065c\u0666\u066b\u0677\u067c\u068c\u0698\u069d\u06a2\u06a9"+
		"\u06ab\u06b5\u06ba\u06bd\u06c1\u06c6\u06cc\u06de\u06e3\u06e8\u06ea\u06f1"+
		"\u06f8\u06fb\u06fe\u0701\u070c\u0718\u071c\u071f\u0728\u0730\u0738\u073b"+
		"\u0742\u0746\u074d\u0753\u077c\u0798\u079f\u07a4\u07af\u07b2\u07bd\u07c5"+
		"\u07c9\u07d5\u07d8\u07de\u07e1\u07e6\u07eb\u07ef\u07f9\u0803\u0809\u0814"+
		"\u0819\u081d\u0825\u082d\u0832\u0835\u0837\u083a\u0843\u0848\u084f\u0852"+
		"\u0855\u0859\u085c\u0864\u0869\u086e\u0875\u087f\u0891\u0898\u08a2\u08ac"+
		"\u08b3\u08b8\u08be\u08c8\u08cd\u08d4\u08d9\u08df\u08e2\u08e5\u08f6\u08fb"+
		"\u0904\u0909\u090f\u0912\u0919\u091c\u0923\u0928\u092c\u0931\u0936\u0940"+
		"\u0946\u0950\u0955\u095c\u0962\u0966\u0969\u096c\u097d\u0982\u098a\u0998"+
		"\u099f\u09af\u09b8\u09ba\u09cf\u09df\u09e8\u09ed\u09f1\u09f4\u09fe\u0a0a"+
		"\u0a10\u0a18\u0a1c\u0a1f\u0a2d\u0a31\u0a36\u0a39\u0a46\u0a4a\u0a56\u0a5b"+
		"\u0a5f\u0a63\u0a69\u0a6c\u0a6f\u0a8a\u0a90\u0a94\u0a9a\u0aa6\u0aaf\u0ab1"+
		"\u0ab7\u0abb\u0abe\u0ac7\u0ad2\u0ad6\u0ad9\u0add\u0ae5\u0aee\u0af7\u0af9"+
		"\u0b18\u0b1c\u0b23\u0b27\u0b2b\u0b2f\u0b3b\u0b3f\u0b4d\u0b53\u0b5a\u0b5f"+
		"\u0b69\u0b6f\u0b71\u0b7a\u0b84\u0b89\u0b98\u0b9c\u0b9f\u0ba3\u0ba8\u0bac"+
		"\u0bb2\u0bba\u0bc1\u0bc6\u0bc8\u0bcd\u0bd2\u0bda\u0be1\u0be5\u0be8\u0bf4"+
		"\u0bfa\u0c02\u0c0c\u0c17\u0c1a\u0c21\u0c24\u0c2b\u0c36\u0c3c\u0c40\u0c4a"+
		"\u0c4d\u0c53\u0c5e\u0c60\u0c62\u0c65\u0c69\u0c6c\u0c70\u0c74\u0c79\u0c84"+
		"\u0c88\u0c90\u0c93\u0c98\u0c9a\u0ca3\u0cad\u0cb2\u0cb8\u0cbc\u0cbf\u0cc7"+
		"\u0cca\u0cce\u0cd2\u0cd7\u0cda\u0cde\u0ce2\u0ce6\u0cf2\u0d00\u0d05\u0d09"+
		"\u0d12\u0d16\u0d1e\u0d21\u0d24\u0d28\u0d2b\u0d2e\u0d31\u0d35\u0d3f\u0d46"+
		"\u0d4d\u0d52\u0d57\u0d5e\u0d64\u0d6e\u0d70\u0d75\u0d79\u0d7c\u0d7f\u0d83"+
		"\u0d88\u0d8c\u0d8e\u0d9b\u0da2\u0db0\u0db3\u0dbd\u0dc1\u0dc9\u0dd5\u0ddf"+
		"\u0de4\u0dee\u0df6\u0df9\u0dff\u0e03\u0e08\u0e12\u0e17\u0e24\u0e30\u0e35"+
		"\u0e3f\u0e44\u0e46\u0e4b\u0e4f\u0e55\u0e59\u0e66\u0e6a\u0e74\u0e77\u0e79"+
		"\u0e7e\u0e87\u0e94\u0e9c\u0ea5\u0ea9\u0eae\u0eb9\u0ebb\u0ecb\u0ed0\u0ed6"+
		"\u0edc\u0eee\u0ef5\u0ef8\u0f00\u0f09\u0f0b\u0f0f\u0f12\u0f17\u0f19\u0f1d"+
		"\u0f29\u0f32\u0f3a\u0f3f\u0f43\u0f48\u0f4b\u0f53\u0f5b\u0f61\u0f64\u0f67"+
		"\u0f6f\u0f79\u0f85\u0f8c\u0f90\u0f94\u0f97\u0f9a\u0f9f\u0fa4\u0fa7\u0faa"+
		"\u0fb0\u0fb3\u0fb9\u0fbc\u0fbf\u0fc4\u0fc7\u0fcf\u0fd5\u0fdf\u0fe4\u0fed"+
		"\u0ff7\u0ffb\u0ffd\u1000\u100c\u1010\u1013\u1027\u102c\u1031\u1038\u103b"+
		"\u1044\u104b\u1050\u1054\u105c\u1062\u106a\u106d\u1075\u107d\u1080\u1083"+
		"\u108c\u1092\u1098\u109a\u10a7\u10a9\u10b2\u10b4\u10b8\u10be\u10c2\u10d0"+
		"\u10d6\u10e5\u10e8\u10f1\u10f7\u10fc\u1107\u110b\u1112\u1117\u111b\u1121"+
		"\u1125\u1130\u1135\u113a\u1143\u1145\u1147\u1158\u1160\u116c\u1176\u117e"+
		"\u1187\u118a\u1191\u1199\u11a0\u11a4\u11ab\u11af\u11b4\u11b8\u11c0\u11c4"+
		"\u11cb\u11d4\u11e2\u11ef\u11f4\u120a\u120e\u1211\u1218\u121b\u121f\u1222"+
		"\u1229\u122c\u1232\u1235\u1239\u123c\u1243\u1248\u1256\u125c\u125e\u1262"+
		"\u126a\u1276\u127b\u1280\u1286\u1289\u128d\u1297\u12a7\u12ab\u12b4\u12ba"+
		"\u12c8\u12d3\u12d7\u12da\u12e3\u12e9\u12f3\u12fb\u12fe\u1301\u130a\u130f"+
		"\u1318\u131e\u1323\u1326\u132b\u1330\u1334\u133a\u1340\u1349\u134e\u1356"+
		"\u135a\u135f\u1365\u136c\u1371\u1379\u137e\u1386\u1389\u138c\u138f\u1393"+
		"\u1398\u139d\u13a1\u13a8\u13ad\u13af\u13ba\u13be\u13c0\u13cb\u13d6\u13df"+
		"\u13e2\u13e6\u13e9\u13ed\u13fa\u13ff\u1407\u140e\u1413\u1417\u141c\u1421"+
		"\u1424\u142b\u1435\u143d\u1441\u144b\u144e\u1450\u145a\u145c\u1462\u1468"+
		"\u146a\u1478\u147a\u1481\u1484\u148d\u1496\u149e\u14a3\u14a7\u14aa\u14ae"+
		"\u14b5\u14c1\u14cc\u14cf\u14d3\u14e6\u14eb\u14f2\u14ff\u1509\u150e\u1517"+
		"\u151d\u1526\u152c\u1533\u153a\u1540\u1545\u1548\u154e\u1552\u1557\u1560"+
		"\u1566\u156b\u1572\u157c\u1580\u1586\u158b\u1590\u1592\u1597\u159b\u15a0"+
		"\u15a7\u15ac\u15ae\u15b0\u15ba\u15bf\u15c3\u15c6\u15ca\u15d3\u15d9\u15dd"+
		"\u15df\u15e3\u15e7\u15eb\u15f3\u15fb\u15fd\u1602\u1606\u1609\u1621\u1628"+
		"\u1649\u164e\u1651\u1656\u1658\u165e\u1666\u166b\u1672\u1676\u167a\u1681"+
		"\u1687\u168d\u1693\u1699\u169e\u16a0\u16a3\u16ad\u16b0\u16b2\u16b4\u16c2"+
		"\u16cd\u16d3\u16dc\u16e1\u16e6\u16eb";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}