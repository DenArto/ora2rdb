// Generated from plsql.g4 by ANTLR 4.7
package biz.redsoft.ora2rdb;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, A_LETTER=2, ADD=3, AFTER=4, AGENT=5, AGGREGATE=6, ALL=7, ALTER=8, 
		ANALYZE=9, AND=10, ANY=11, ARCHIVE=12, ARRAY=13, AS=14, ASC=15, ASSOCIATE=16, 
		AT=17, ATTRIBUTE=18, AUDIT=19, AUTHID=20, AUTO=21, AUTOMATIC=22, AUTONOMOUS_TRANSACTION=23, 
		BASIC=24, BASICFILE=25, BATCH=26, BEFORE=27, BEGIN=28, BETWEEN=29, BFILE=30, 
		BINARY_DOUBLE=31, BINARY_FLOAT=32, BINARY_INTEGER=33, BLOB=34, BLOCK=35, 
		BODY=36, BOOLEAN=37, BOTH=38, BREADTH=39, BUFFER_POOL=40, BULK=41, BY=42, 
		BYTE=43, C_LETTER=44, CACHE=45, CALL=46, CANONICAL=47, CASCADE=48, CASE=49, 
		CAST=50, CELL_FLASH_CACHE=51, CHAR=52, CHAR_CS=53, CHARACTER=54, CHECK=55, 
		CHR=56, CHUNK=57, CLOB=58, CLOSE=59, CLUSTER=60, COLLECT=61, COLUMN=62, 
		COLUMNS=63, COMMENT=64, COMMIT=65, COMMITTED=66, COMPATIBILITY=67, COMPILE=68, 
		COMPOUND=69, COMPRESS=70, COMPUTE=71, CONNECT=72, CONNECT_BY_ROOT=73, 
		CONSTANT=74, CONSTRAINT=75, CONSTRAINTS=76, CONSTRUCTOR=77, CONTENT=78, 
		CONTEXT=79, CONTINUE=80, CONVERT=81, CORRUPT_XID=82, CORRUPT_XID_ALL=83, 
		COST=84, COUNT=85, CREATE=86, CREATION=87, CROSS=88, CUBE=89, CURRENT=90, 
		CURRENT_USER=91, CURSOR=92, CUSTOMDATUM=93, CYCLE=94, DATA=95, DATABASE=96, 
		DATE=97, DAY=98, DB_ROLE_CHANGE=99, DBTIMEZONE=100, DDL=101, DEBUG=102, 
		DEC=103, DECIMAL=104, DECLARE=105, DECOMPOSE=106, DECREMENT=107, DEDUPLICATE=108, 
		DEFAULT=109, DEFAULTS=110, DEFERRABLE=111, DEFERRED=112, DEFINER=113, 
		DELETE=114, DEPTH=115, DESC=116, DETERMINISTIC=117, DIMENSION=118, DISABLE=119, 
		DISASSOCIATE=120, DISTINCT=121, DOCUMENT=122, DOUBLE=123, DROP=124, DSINTERVAL_UNCONSTRAINED=125, 
		EACH=126, ELEMENT=127, ELSE=128, ELSIF=129, EMPTY=130, ENABLE=131, ENCODING=132, 
		END=133, ENTITYESCAPING=134, ERRORS=135, ESCAPE=136, EVALNAME=137, EXCEPTION=138, 
		EXCEPTION_INIT=139, EXCEPTIONS=140, EXCLUDE=141, EXCLUSIVE=142, EXECUTE=143, 
		EXISTS=144, EXIT=145, EXPLAIN=146, EXTERNAL=147, EXTRACT=148, FAILURE=149, 
		FALSE=150, FETCH=151, FILESYSTEM_LIKE_LOGGING=152, FINAL=153, FIRST=154, 
		FIRST_VALUE=155, FLASH_CACHE=156, FLOAT=157, FOLLOWING=158, FOLLOWS=159, 
		FOR=160, FORALL=161, FORCE=162, FOREIGN=163, FREELIST=164, FREELISTS=165, 
		FROM=166, FULL=167, FUNCTION=168, GOTO=169, GRANT=170, GROUP=171, GROUPS=172, 
		GROUPING=173, HASH=174, HAVING=175, HEAP=176, HIDE=177, HIGH=178, HOUR=179, 
		IF=180, IGNORE=181, IMMEDIATE=182, IN=183, INCLUDE=184, INCLUDING=185, 
		INCREMENT=186, INDENT=187, INDEX=188, INDEXED=189, INDEXES=190, INDICATOR=191, 
		INDICES=192, INFINITE=193, INITIAL=194, INITIALY=195, INITRANS=196, INLINE=197, 
		INNER=198, INOUT=199, INSERT=200, INSTANTIABLE=201, INSTEAD=202, INT=203, 
		INTEGER=204, INTERSECT=205, INTERVAL=206, INTO=207, INVALIDATE=208, IS=209, 
		ISOLATION=210, ITERATE=211, JAVA=212, JOIN=213, KEEP=214, KEEP_DUPLICATES=215, 
		KEY=216, LANGUAGE=217, LAST=218, LAST_VALUE=219, LEADING=220, LEFT=221, 
		LENGTH=222, LEVEL=223, LEVELS=224, LIBRARY=225, LIKE=226, LIKE2=227, LIKE4=228, 
		LIKEC=229, LIMIT=230, LOB=231, LOCAL=232, LOCK=233, LOCKED=234, LOG=235, 
		LOGGING=236, LOGOFF=237, LOGON=238, LONG=239, LOOP=240, LOW=241, MAIN=242, 
		MAP=243, MATCHED=244, MAXEXTENTS=245, MAXTRANS=246, MAXVALUE=247, MEASURES=248, 
		MEDIUM=249, MEMBER=250, MERGE=251, MINEXTENTS=252, MINUS=253, MINUTE=254, 
		MINVALUE=255, MLSLABEL=256, MODE=257, MODEL=258, MODIFY=259, MONTH=260, 
		MULTISET=261, NAME=262, NAN=263, NATURAL=264, NATURALN=265, NAV=266, NCHAR=267, 
		NCHAR_CS=268, NCLOB=269, NESTED=270, NEW=271, NEXT=272, NO=273, NOAUDIT=274, 
		NOCACHE=275, NOCOMPRESS=276, NOCOPY=277, NOCYCLE=278, NOENTITYESCAPING=279, 
		NOLOGGING=280, NOMAXVALUE=281, NOMINVALUE=282, NONE=283, NOORDER=284, 
		NORELY=285, NOSCHEMACHECK=286, NOT=287, NOVALIDATE=288, NOWAIT=289, NULL=290, 
		NULLS=291, NUMBER=292, NUMERIC=293, NVARCHAR2=294, OBJECT=295, OF=296, 
		OFF=297, OID=298, OLD=299, OLTP=300, ON=301, ONLY=302, OPEN=303, OPTION=304, 
		OR=305, ORADATA=306, ORDER=307, ORDINALITY=308, ORGANIZATION=309, OSERROR=310, 
		OUT=311, OUTER=312, OVER=313, OVERRIDING=314, PACKAGE=315, PARALLEL_ENABLE=316, 
		PARAMETERS=317, PARENT=318, PARTITION=319, PASSING=320, PATH=321, PCTFREE=322, 
		PCTINCREASE=323, PCTTHRESHOLD=324, PCTUSED=325, PERCENT_ROWTYPE=326, PERCENT_TYPE=327, 
		PIPELINED=328, PIVOT=329, PLAN=330, PLS_INTEGER=331, POSITIVE=332, POSITIVEN=333, 
		PRAGMA=334, PRECEDING=335, PRECISION=336, PRESENT=337, PRIMARY=338, PRIOR=339, 
		PROCEDURE=340, QUERY=341, RAISE=342, RANGE=343, RAW=344, READ=345, READS=346, 
		REAL=347, RECORD=348, RECYCLE=349, REF=350, REFERENCE=351, REFERENCES=352, 
		REFERENCING=353, REJECT=354, RELIES_ON=355, RELY=356, RENAME=357, REPLACE=358, 
		RESPECT=359, RESTRICT_REFERENCES=360, RESULT=361, RESULT_CACHE=362, RETURN=363, 
		RETURNING=364, REUSE=365, REVERSE=366, REVOKE=367, RIGHT=368, ROLLBACK=369, 
		ROLLUP=370, ROW=371, ROWID=372, ROWS=373, RULES=374, SAMPLE=375, SAVE=376, 
		SAVEPOINT=377, SCHEMA=378, SCHEMACHECK=379, SCN=380, SEARCH=381, SECOND=382, 
		SECUREFILE=383, SEED=384, SEGMENT=385, SELECT=386, SELF=387, SEQUENCE=388, 
		SEQUENTIAL=389, SERIALIZABLE=390, SERIALLY_REUSABLE=391, SERVERERROR=392, 
		SESSIONTIMEZONE=393, SET=394, SETS=395, SETTINGS=396, SHARE=397, SHOW=398, 
		SHUTDOWN=399, SIBLINGS=400, SIGNTYPE=401, SIMPLE_INTEGER=402, SINGLE=403, 
		SIZE=404, SKIP_=405, SMALLINT=406, SNAPSHOT=407, SOME=408, SPECIFICATION=409, 
		SQLDATA=410, SQLERROR=411, STANDALONE=412, START=413, STARTUP=414, STATEMENT=415, 
		STATEMENT_ID=416, STATIC=417, STATISTICS=418, STORAGE=419, STORE=420, 
		STRING=421, SUBMULTISET=422, SUBPARTITION=423, SUBSTITUTABLE=424, SUBTYPE=425, 
		SUCCESS=426, SUSPEND=427, SYSTEM=428, TABLE=429, TABLESPACE=430, THE=431, 
		THEN=432, TIME=433, TIMESTAMP=434, TIMESTAMP_LTZ_UNCONSTRAINED=435, TIMESTAMP_TZ_UNCONSTRAINED=436, 
		TIMESTAMP_UNCONSTRAINED=437, TIMEZONE_ABBR=438, TIMEZONE_HOUR=439, TIMEZONE_MINUTE=440, 
		TIMEZONE_REGION=441, TO=442, TRAILING=443, TRANSACTION=444, TRANSLATE=445, 
		TREAT=446, TRIGGER=447, TRIM=448, TRUE=449, TRUNCATE=450, TYPE=451, UNBOUNDED=452, 
		UNDER=453, UNION=454, UNIQUE=455, UNLIMITED=456, UNPIVOT=457, UNTIL=458, 
		UPDATE=459, UPDATED=460, UPSERT=461, UROWID=462, USE=463, USING=464, VALIDATE=465, 
		VALUE=466, VALUES=467, VARCHAR=468, VARCHAR2=469, VARIABLE=470, VARRAY=471, 
		VARYING=472, VERSION=473, VERSIONS=474, VIEW=475, WAIT=476, WARNING=477, 
		WELLFORMED=478, WHEN=479, WHENEVER=480, WHERE=481, WHILE=482, WITH=483, 
		WITHIN=484, WORK=485, WRITE=486, XML=487, XMLAGG=488, XMLATTRIBUTES=489, 
		XMLCAST=490, XMLCOLATTVAL=491, XMLELEMENT=492, XMLEXISTS=493, XMLFOREST=494, 
		XMLNAMESPACES=495, XMLPARSE=496, XMLPI=497, XMLQUERY=498, XMLROOT=499, 
		XMLSERIALIZE=500, XMLTABLE=501, YEAR=502, YES=503, YMINTERVAL_UNCONSTRAINED=504, 
		ZONE=505, PREDICTION=506, PREDICTION_BOUNDS=507, PREDICTION_COST=508, 
		PREDICTION_DETAILS=509, PREDICTION_PROBABILITY=510, PREDICTION_SET=511, 
		CUME_DIST=512, DENSE_RANK=513, LISTAGG=514, PERCENT_RANK=515, PERCENTILE_CONT=516, 
		PERCENTILE_DISC=517, RANK=518, AVG=519, CORR=520, LAG=521, LEAD=522, MAX=523, 
		MEDIAN=524, MIN=525, NTILE=526, RATIO_TO_REPORT=527, ROW_NUMBER=528, SUM=529, 
		VARIANCE=530, REGR_=531, STDDEV=532, VAR_=533, COVAR_=534, NATIONAL_CHAR_STRING_LIT=535, 
		BIT_STRING_LIT=536, HEX_STRING_LIT=537, DOUBLE_PERIOD=538, PERIOD=539, 
		UNSIGNED_INTEGER=540, APPROXIMATE_NUM_LIT=541, CHAR_STRING=542, DELIMITED_ID=543, 
		PERCENT=544, AMPERSAND=545, LEFT_PAREN=546, RIGHT_PAREN=547, DOUBLE_ASTERISK=548, 
		ASTERISK=549, PLUS_SIGN=550, MINUS_SIGN=551, COMMA=552, SOLIDUS=553, AT_SIGN=554, 
		ASSIGN_OP=555, BINDVAR=556, COLON=557, SEMICOLON=558, LESS_THAN_OR_EQUALS_OP=559, 
		LESS_THAN_OP=560, GREATER_THAN_OR_EQUALS_OP=561, NOT_EQUAL_OP=562, CARRET_OPERATOR_PART=563, 
		TILDE_OPERATOR_PART=564, EXCLAMATION_OPERATOR_PART=565, GREATER_THAN_OP=566, 
		CONCATENATION_OP=567, VERTICAL_BAR=568, EQUALS_OP=569, LEFT_BRACKET=570, 
		RIGHT_BRACKET=571, INTRODUCER=572, SPACES=573, SINGLE_LINE_COMMENT=574, 
		MULTI_LINE_COMMENT=575, PROMPT=576, SQL92_RESERVED_ALL=577, SQL92_RESERVED_ALTER=578, 
		SQL92_RESERVED_AND=579, SQL92_RESERVED_ANY=580, SQL92_RESERVED_AS=581, 
		SQL92_RESERVED_ASC=582, SQL92_RESERVED_BEGIN=583, SQL92_RESERVED_BETWEEN=584, 
		SQL92_RESERVED_BY=585, SQL92_RESERVED_CASE=586, SQL92_RESERVED_CHECK=587, 
		PLSQL_RESERVED_CLUSTERS=588, PLSQL_RESERVED_COLAUTH=589, PLSQL_RESERVED_COMPRESS=590, 
		SQL92_RESERVED_CONNECT=591, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=592, PLSQL_RESERVED_CRASH=593, 
		SQL92_RESERVED_CREATE=594, SQL92_RESERVED_CURRENT=595, SQL92_RESERVED_CURSOR=596, 
		SQL92_RESERVED_DATE=597, SQL92_RESERVED_DECLARE=598, SQL92_RESERVED_DEFAULT=599, 
		SQL92_RESERVED_DELETE=600, SQL92_RESERVED_DESC=601, SQL92_RESERVED_DISTINCT=602, 
		SQL92_RESERVED_DROP=603, SQL92_RESERVED_ELSE=604, SQL92_RESERVED_END=605, 
		SQL92_RESERVED_EXCEPTION=606, PLSQL_RESERVED_EXCLUSIVE=607, SQL92_RESERVED_EXISTS=608, 
		SQL92_RESERVED_FALSE=609, SQL92_RESERVED_FETCH=610, SQL92_RESERVED_FOR=611, 
		SQL92_RESERVED_FROM=612, SQL92_RESERVED_GOTO=613, SQL92_RESERVED_GRANT=614, 
		SQL92_RESERVED_GROUP=615, SQL92_RESERVED_HAVING=616, PLSQL_RESERVED_IDENTIFIED=617, 
		PLSQL_RESERVED_IF=618, SQL92_RESERVED_IN=619, PLSQL_RESERVED_INDEX=620, 
		PLSQL_RESERVED_INDEXES=621, SQL92_RESERVED_INSERT=622, SQL92_RESERVED_INTERSECT=623, 
		SQL92_RESERVED_INTO=624, SQL92_RESERVED_IS=625, SQL92_RESERVED_LIKE=626, 
		PLSQL_RESERVED_LOCK=627, PLSQL_RESERVED_MINUS=628, PLSQL_RESERVED_MODE=629, 
		PLSQL_RESERVED_NOCOMPRESS=630, SQL92_RESERVED_NOT=631, PLSQL_RESERVED_NOWAIT=632, 
		SQL92_RESERVED_NULL=633, SQL92_RESERVED_OF=634, SQL92_RESERVED_ON=635, 
		SQL92_RESERVED_OPTION=636, SQL92_RESERVED_OR=637, SQL92_RESERVED_ORDER=638, 
		SQL92_RESERVED_OVERLAPS=639, SQL92_RESERVED_PRIOR=640, SQL92_RESERVED_PROCEDURE=641, 
		SQL92_RESERVED_PUBLIC=642, PLSQL_RESERVED_RESOURCE=643, SQL92_RESERVED_REVOKE=644, 
		SQL92_RESERVED_SELECT=645, PLSQL_RESERVED_SHARE=646, SQL92_RESERVED_SIZE=647, 
		PLSQL_RESERVED_START=648, PLSQL_RESERVED_TABAUTH=649, SQL92_RESERVED_TABLE=650, 
		SQL92_RESERVED_THE=651, SQL92_RESERVED_THEN=652, SQL92_RESERVED_TO=653, 
		SQL92_RESERVED_TRUE=654, SQL92_RESERVED_UNION=655, SQL92_RESERVED_UNIQUE=656, 
		SQL92_RESERVED_UPDATE=657, SQL92_RESERVED_VALUES=658, SQL92_RESERVED_VIEW=659, 
		PLSQL_RESERVED_VIEWS=660, SQL92_RESERVED_WHEN=661, SQL92_RESERVED_WHERE=662, 
		SQL92_RESERVED_WITH=663, PLSQL_NON_RESERVED_USING=664, PLSQL_NON_RESERVED_MODEL=665, 
		PLSQL_NON_RESERVED_ELSIF=666, PLSQL_NON_RESERVED_PIVOT=667, PLSQL_NON_RESERVED_UNPIVOT=668, 
		REGULAR_ID=669, ZV=670;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_create_table = 4, RULE_relational_properties = 5, 
		RULE_column_definition = 6, RULE_physical_properties = 7, RULE_deferred_segment_creation = 8, 
		RULE_segment_attributes_clause = 9, RULE_index_org_table_clause = 10, 
		RULE_physical_attributes_clause = 11, RULE_storage_clause = 12, RULE_table_compression = 13, 
		RULE_logging_clause = 14, RULE_lob_storage_clause = 15, RULE_lob_storage_parameters = 16, 
		RULE_lob_parameters = 17, RULE_lob_deduplicate_clause = 18, RULE_lob_compression_clause = 19, 
		RULE_alter_table = 20, RULE_column_clauses = 21, RULE_modify_column_clauses = 22, 
		RULE_modify_col_properties = 23, RULE_modify_col_substitutable = 24, RULE_inline_constraint = 25, 
		RULE_constraint_clauses = 26, RULE_out_of_line_constraint = 27, RULE_references_clause = 28, 
		RULE_constraint_state = 29, RULE_using_index_clause = 30, RULE_index_properties = 31, 
		RULE_index_attributes = 32, RULE_compute_statistics_clause = 33, RULE_for_clause = 34, 
		RULE_exceptions_clause = 35, RULE_create_view = 36, RULE_create_index = 37, 
		RULE_table_index_clause = 38, RULE_index_expr = 39, RULE_drop_function = 40, 
		RULE_alter_function = 41, RULE_create_function_body = 42, RULE_parallel_enable_clause = 43, 
		RULE_partition_by_clause = 44, RULE_result_cache_clause = 45, RULE_relies_on_part = 46, 
		RULE_streaming_clause = 47, RULE_drop_package = 48, RULE_alter_package = 49, 
		RULE_create_package = 50, RULE_package_body = 51, RULE_package_spec = 52, 
		RULE_package_obj_spec = 53, RULE_procedure_spec = 54, RULE_function_spec = 55, 
		RULE_package_obj_body = 56, RULE_drop_procedure = 57, RULE_alter_procedure = 58, 
		RULE_create_procedure_body = 59, RULE_drop_trigger = 60, RULE_alter_trigger = 61, 
		RULE_create_trigger = 62, RULE_trigger_follows_clause = 63, RULE_trigger_when_clause = 64, 
		RULE_simple_dml_trigger = 65, RULE_for_each_row = 66, RULE_compound_dml_trigger = 67, 
		RULE_non_dml_trigger = 68, RULE_trigger_body = 69, RULE_routine_clause = 70, 
		RULE_compound_trigger_block = 71, RULE_timing_point_section = 72, RULE_non_dml_event = 73, 
		RULE_dml_event_clause = 74, RULE_dml_event_element = 75, RULE_dml_event_nested_clause = 76, 
		RULE_referencing_clause = 77, RULE_referencing_element = 78, RULE_drop_type = 79, 
		RULE_alter_type = 80, RULE_compile_type_clause = 81, RULE_replace_type_clause = 82, 
		RULE_alter_method_spec = 83, RULE_alter_method_element = 84, RULE_alter_attribute_definition = 85, 
		RULE_attribute_definition = 86, RULE_alter_collection_clauses = 87, RULE_dependent_handling_clause = 88, 
		RULE_dependent_exceptions_part = 89, RULE_create_type = 90, RULE_type_definition = 91, 
		RULE_object_type_def = 92, RULE_object_as_part = 93, RULE_object_under_part = 94, 
		RULE_nested_table_type_def = 95, RULE_sqlj_object_type = 96, RULE_type_body = 97, 
		RULE_type_body_elements = 98, RULE_map_order_func_declaration = 99, RULE_subprog_decl_in_type = 100, 
		RULE_proc_decl_in_type = 101, RULE_func_decl_in_type = 102, RULE_constructor_declaration = 103, 
		RULE_modifier_clause = 104, RULE_object_member_spec = 105, RULE_sqlj_object_type_attr = 106, 
		RULE_element_spec = 107, RULE_element_spec_options = 108, RULE_subprogram_spec = 109, 
		RULE_type_procedure_spec = 110, RULE_type_function_spec = 111, RULE_constructor_spec = 112, 
		RULE_map_order_function_spec = 113, RULE_pragma_clause = 114, RULE_pragma_elements = 115, 
		RULE_type_elements_parameter = 116, RULE_drop_sequence = 117, RULE_alter_sequence = 118, 
		RULE_create_sequence = 119, RULE_sequence_spec = 120, RULE_sequence_start_clause = 121, 
		RULE_invoker_rights_clause = 122, RULE_compiler_parameters_clause = 123, 
		RULE_call_spec = 124, RULE_java_spec = 125, RULE_c_spec = 126, RULE_c_agent_in_clause = 127, 
		RULE_c_parameters_clause = 128, RULE_parameter = 129, RULE_default_value_part = 130, 
		RULE_declare_spec = 131, RULE_variable_declaration = 132, RULE_subtype_declaration = 133, 
		RULE_cursor_declaration = 134, RULE_parameter_spec = 135, RULE_exception_declaration = 136, 
		RULE_pragma_declaration = 137, RULE_record_declaration = 138, RULE_record_type_dec = 139, 
		RULE_field_spec = 140, RULE_record_var_dec = 141, RULE_table_declaration = 142, 
		RULE_table_type_dec = 143, RULE_table_indexed_by_part = 144, RULE_varray_type_def = 145, 
		RULE_table_var_dec = 146, RULE_seq_of_statements = 147, RULE_label_declaration = 148, 
		RULE_statement = 149, RULE_assignment_statement = 150, RULE_continue_statement = 151, 
		RULE_exit_statement = 152, RULE_goto_statement = 153, RULE_if_statement = 154, 
		RULE_elsif_part = 155, RULE_else_part = 156, RULE_loop_statement = 157, 
		RULE_cursor_loop_param = 158, RULE_forall_statement = 159, RULE_bounds_clause = 160, 
		RULE_between_bound = 161, RULE_lower_bound = 162, RULE_upper_bound = 163, 
		RULE_null_statement = 164, RULE_raise_statement = 165, RULE_return_statement = 166, 
		RULE_function_call = 167, RULE_body = 168, RULE_exception_clause = 169, 
		RULE_exception_handler = 170, RULE_trigger_block = 171, RULE_block = 172, 
		RULE_sql_statement = 173, RULE_execute_immediate = 174, RULE_dynamic_returning_clause = 175, 
		RULE_data_manipulation_language_statements = 176, RULE_cursor_manipulation_statements = 177, 
		RULE_close_statement = 178, RULE_open_statement = 179, RULE_fetch_statement = 180, 
		RULE_open_for_statement = 181, RULE_transaction_control_statements = 182, 
		RULE_set_transaction_command = 183, RULE_set_constraint_command = 184, 
		RULE_commit_statement = 185, RULE_write_clause = 186, RULE_rollback_statement = 187, 
		RULE_savepoint_statement = 188, RULE_explain_statement = 189, RULE_select_statement = 190, 
		RULE_subquery_factoring_clause = 191, RULE_factoring_element = 192, RULE_search_clause = 193, 
		RULE_cycle_clause = 194, RULE_subquery = 195, RULE_subquery_operation_part = 196, 
		RULE_subquery_basic_elements = 197, RULE_query_block = 198, RULE_selected_element = 199, 
		RULE_from_clause = 200, RULE_select_list_elements = 201, RULE_table_ref_list = 202, 
		RULE_table_ref = 203, RULE_table_ref_aux = 204, RULE_join_clause = 205, 
		RULE_join_on_part = 206, RULE_join_using_part = 207, RULE_outer_join_type = 208, 
		RULE_query_partition_clause = 209, RULE_flashback_query_clause = 210, 
		RULE_pivot_clause = 211, RULE_pivot_element = 212, RULE_pivot_for_clause = 213, 
		RULE_pivot_in_clause = 214, RULE_pivot_in_clause_element = 215, RULE_pivot_in_clause_elements = 216, 
		RULE_unpivot_clause = 217, RULE_unpivot_in_clause = 218, RULE_unpivot_in_elements = 219, 
		RULE_hierarchical_query_clause = 220, RULE_start_part = 221, RULE_group_by_clause = 222, 
		RULE_group_by_elements = 223, RULE_rollup_cube_clause = 224, RULE_grouping_sets_clause = 225, 
		RULE_grouping_sets_elements = 226, RULE_having_clause = 227, RULE_model_clause = 228, 
		RULE_cell_reference_options = 229, RULE_return_rows_clause = 230, RULE_reference_model = 231, 
		RULE_main_model = 232, RULE_model_column_clauses = 233, RULE_model_column_partition_part = 234, 
		RULE_model_column_list = 235, RULE_model_column = 236, RULE_model_rules_clause = 237, 
		RULE_model_rules_part = 238, RULE_model_rules_element = 239, RULE_cell_assignment = 240, 
		RULE_model_iterate_clause = 241, RULE_until_part = 242, RULE_order_by_clause = 243, 
		RULE_order_by_elements = 244, RULE_for_update_clause = 245, RULE_for_update_of_part = 246, 
		RULE_for_update_options = 247, RULE_update_statement = 248, RULE_update_set_clause = 249, 
		RULE_column_based_update_set_clause = 250, RULE_delete_statement = 251, 
		RULE_insert_statement = 252, RULE_single_table_insert = 253, RULE_multi_table_insert = 254, 
		RULE_multi_table_element = 255, RULE_conditional_insert_clause = 256, 
		RULE_conditional_insert_when_part = 257, RULE_conditional_insert_else_part = 258, 
		RULE_insert_into_clause = 259, RULE_values_clause = 260, RULE_merge_statement = 261, 
		RULE_merge_update_clause = 262, RULE_merge_element = 263, RULE_merge_update_delete_part = 264, 
		RULE_merge_insert_clause = 265, RULE_selected_tableview = 266, RULE_lock_table_statement = 267, 
		RULE_wait_nowait_part = 268, RULE_lock_table_element = 269, RULE_lock_mode = 270, 
		RULE_general_table_ref = 271, RULE_static_returning_clause = 272, RULE_error_logging_clause = 273, 
		RULE_error_logging_into_part = 274, RULE_error_logging_reject_part = 275, 
		RULE_dml_table_expression_clause = 276, RULE_table_collection_expression = 277, 
		RULE_subquery_restriction_clause = 278, RULE_sample_clause = 279, RULE_seed_part = 280, 
		RULE_cursor_expression = 281, RULE_expression_list = 282, RULE_condition = 283, 
		RULE_condition_wrapper = 284, RULE_expression = 285, RULE_expression_wrapper = 286, 
		RULE_logical_and_expression = 287, RULE_negated_expression = 288, RULE_equality_expression = 289, 
		RULE_is_condition = 290, RULE_multiset_expression = 291, RULE_multiset_type = 292, 
		RULE_relational_expression = 293, RULE_comparison_operator = 294, RULE_compound_expression = 295, 
		RULE_like_type = 296, RULE_like_escape_part = 297, RULE_in_elements = 298, 
		RULE_between_elements = 299, RULE_concatenation = 300, RULE_concatenation_wrapper = 301, 
		RULE_additive_expression = 302, RULE_additive_op = 303, RULE_multiply_expression = 304, 
		RULE_multiply_op = 305, RULE_datetime_expression = 306, RULE_interval_expression = 307, 
		RULE_model_expression = 308, RULE_model_expression_element = 309, RULE_single_column_for_loop = 310, 
		RULE_for_like_part = 311, RULE_for_increment_decrement_type = 312, RULE_multi_column_for_loop = 313, 
		RULE_unary_expression = 314, RULE_case_statement = 315, RULE_simple_case_statement = 316, 
		RULE_simple_case_when_part = 317, RULE_searched_case_statement = 318, 
		RULE_searched_case_when_part = 319, RULE_case_else_part = 320, RULE_atom = 321, 
		RULE_expression_or_vector = 322, RULE_vector_expr = 323, RULE_quantified_expression = 324, 
		RULE_standard_function = 325, RULE_over_clause_keyword = 326, RULE_within_or_over_clause_keyword = 327, 
		RULE_standard_prediction_function_keyword = 328, RULE_over_clause = 329, 
		RULE_windowing_clause = 330, RULE_windowing_type = 331, RULE_windowing_elements = 332, 
		RULE_using_clause = 333, RULE_using_element = 334, RULE_collect_order_by_part = 335, 
		RULE_within_or_over_part = 336, RULE_cost_matrix_clause = 337, RULE_xml_passing_clause = 338, 
		RULE_xml_attributes_clause = 339, RULE_xml_namespaces_clause = 340, RULE_xml_table_column = 341, 
		RULE_xml_general_default_part = 342, RULE_xml_multiuse_expression_element = 343, 
		RULE_xmlroot_param_version_part = 344, RULE_xmlroot_param_standalone_part = 345, 
		RULE_xmlserialize_param_enconding_part = 346, RULE_xmlserialize_param_version_part = 347, 
		RULE_xmlserialize_param_ident_part = 348, RULE_comment = 349, RULE_sql_plus_command = 350, 
		RULE_whenever_command = 351, RULE_set_command = 352, RULE_exit_command = 353, 
		RULE_prompt_command = 354, RULE_partition_extension_clause = 355, RULE_column_alias = 356, 
		RULE_table_alias = 357, RULE_alias_quoted_string = 358, RULE_where_clause = 359, 
		RULE_current_of_clause = 360, RULE_into_clause = 361, RULE_xml_column_name = 362, 
		RULE_cost_class_name = 363, RULE_attribute_name = 364, RULE_savepoint_name = 365, 
		RULE_rollback_segment_name = 366, RULE_table_var_name = 367, RULE_schema_name = 368, 
		RULE_routine_name = 369, RULE_package_name = 370, RULE_implementation_type_name = 371, 
		RULE_parameter_name = 372, RULE_reference_model_name = 373, RULE_main_model_name = 374, 
		RULE_aggregate_function_name = 375, RULE_query_name = 376, RULE_constraint_name = 377, 
		RULE_label_name = 378, RULE_type_name = 379, RULE_sequence_name = 380, 
		RULE_exception_name = 381, RULE_function_name = 382, RULE_procedure_name = 383, 
		RULE_trigger_name = 384, RULE_variable_name = 385, RULE_index_name = 386, 
		RULE_cursor_name = 387, RULE_record_name = 388, RULE_collection_name = 389, 
		RULE_link_name = 390, RULE_column_name = 391, RULE_tableview_name = 392, 
		RULE_char_set_name = 393, RULE_keep_clause = 394, RULE_function_argument = 395, 
		RULE_function_argument_analytic = 396, RULE_function_argument_modeling = 397, 
		RULE_respect_or_ignore_nulls = 398, RULE_argument = 399, RULE_type_spec = 400, 
		RULE_datatype = 401, RULE_precision_part = 402, RULE_native_datatype_element = 403, 
		RULE_bind_variable = 404, RULE_general_element = 405, RULE_general_element_part = 406, 
		RULE_table_element = 407, RULE_constant = 408, RULE_numeric = 409, RULE_numeric_negative = 410, 
		RULE_quoted_string = 411, RULE_id = 412, RULE_id_expression = 413, RULE_not_equal_op = 414, 
		RULE_greater_than_or_equals_op = 415, RULE_less_than_or_equals_op = 416, 
		RULE_concatenation_op = 417, RULE_outer_join_sign = 418, RULE_regular_id = 419;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"create_table", "relational_properties", "column_definition", "physical_properties", 
		"deferred_segment_creation", "segment_attributes_clause", "index_org_table_clause", 
		"physical_attributes_clause", "storage_clause", "table_compression", "logging_clause", 
		"lob_storage_clause", "lob_storage_parameters", "lob_parameters", "lob_deduplicate_clause", 
		"lob_compression_clause", "alter_table", "column_clauses", "modify_column_clauses", 
		"modify_col_properties", "modify_col_substitutable", "inline_constraint", 
		"constraint_clauses", "out_of_line_constraint", "references_clause", "constraint_state", 
		"using_index_clause", "index_properties", "index_attributes", "compute_statistics_clause", 
		"for_clause", "exceptions_clause", "create_view", "create_index", "table_index_clause", 
		"index_expr", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "package_body", "package_spec", "package_obj_spec", 
		"procedure_spec", "function_spec", "package_obj_body", "drop_procedure", 
		"alter_procedure", "create_procedure_body", "drop_trigger", "alter_trigger", 
		"create_trigger", "trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
		"for_each_row", "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
		"routine_clause", "compound_trigger_block", "timing_point_section", "non_dml_event", 
		"dml_event_clause", "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
		"referencing_element", "drop_type", "alter_type", "compile_type_clause", 
		"replace_type_clause", "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
		"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
		"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "body", "exception_clause", "exception_handler", "trigger_block", 
		"block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
		"data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"is_condition", "multiset_expression", "multiset_type", "relational_expression", 
		"comparison_operator", "compound_expression", "like_type", "like_escape_part", 
		"in_elements", "between_elements", "concatenation", "concatenation_wrapper", 
		"additive_expression", "additive_op", "multiply_expression", "multiply_op", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "comment", 
		"sql_plus_command", "whenever_command", "set_command", "exit_command", 
		"prompt_command", "partition_extension_clause", "column_alias", "table_alias", 
		"alias_quoted_string", "where_clause", "current_of_clause", "into_clause", 
		"xml_column_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "routine_name", 
		"package_name", "implementation_type_name", "parameter_name", "reference_model_name", 
		"main_model_name", "aggregate_function_name", "query_name", "constraint_name", 
		"label_name", "type_name", "sequence_name", "exception_name", "function_name", 
		"procedure_name", "trigger_name", "variable_name", "index_name", "cursor_name", 
		"record_name", "collection_name", "link_name", "column_name", "tableview_name", 
		"char_set_name", "keep_clause", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "constant", 
		"numeric", "numeric_negative", "quoted_string", "id", "id_expression", 
		"not_equal_op", "greater_than_or_equals_op", "less_than_or_equals_op", 
		"concatenation_op", "outer_join_sign", "regular_id"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'..'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'.'", 
		null, null, null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", 
		"'-'", "','", "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", 
		"'>='", null, "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", 
		"']'", "'_'", null, null, null, null, "'all'", "'alter'", "'and'", "'any'", 
		"'as'", "'asc'", "'begin'", "'between'", "'by'", "'case'", "'check'", 
		"'clusters'", "'colauth'", "'compress'", "'connect'", "'connect_by_root'", 
		"'crash'", "'create'", "'current'", "'cursor'", "'date'", "'declare'", 
		"'default'", "'delete'", "'desc'", "'distinct'", "'drop'", "'else'", "'end'", 
		"'exception'", "'exclusive'", "'exists'", "'false'", "'fetch'", "'for'", 
		"'from'", "'goto'", "'grant'", "'group'", "'having'", "'identified'", 
		"'if'", "'in'", "'index'", "'indexes'", "'insert'", "'intersect'", "'into'", 
		"'is'", "'like'", "'lock'", "'minus'", "'mode'", "'nocompress'", "'not'", 
		"'nowait'", "'null'", "'of'", "'on'", "'option'", "'or'", "'order'", "'overlaps'", 
		"'prior'", "'procedure'", "'public'", "'resource'", "'revoke'", "'select'", 
		"'share'", "'size'", "'start'", "'tabauth'", "'table'", "'the'", "'then'", 
		"'to'", "'true'", "'union'", "'unique'", "'update'", "'values'", "'view'", 
		"'views'", "'when'", "'where'", "'with'", "'using'", "'model'", "'elsif'", 
		"'pivot'", "'unpivot'", null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", 
		"ANALYZE", "AND", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", 
		"AT", "ATTRIBUTE", "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
		"BASIC", "BASICFILE", "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", 
		"BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BODY", 
		"BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BULK", "BY", "BYTE", "C_LETTER", 
		"CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", "CELL_FLASH_CACHE", 
		"CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CHUNK", "CLOB", "CLOSE", 
		"CLUSTER", "COLLECT", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
		"COMPATIBILITY", "COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT", 
		"CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
		"CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", 
		"COST", "COUNT", "CREATE", "CREATION", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", 
		"CURSOR", "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", 
		"DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", 
		"DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", 
		"ENTITYESCAPING", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", 
		"FINAL", "FIRST", "FIRST_VALUE", "FLASH_CACHE", "FLOAT", "FOLLOWING", 
		"FOLLOWS", "FOR", "FORALL", "FORCE", "FOREIGN", "FREELIST", "FREELISTS", 
		"FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPS", "GROUPING", 
		"HASH", "HAVING", "HEAP", "HIDE", "HIGH", "HOUR", "IF", "IGNORE", "IMMEDIATE", 
		"IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", 
		"INDEXES", "INDICATOR", "INDICES", "INFINITE", "INITIAL", "INITIALY", 
		"INITRANS", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "KEEP_DUPLICATES", "KEY", 
		"LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", "LENGTH", "LEVEL", 
		"LEVELS", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOB", 
		"LOCAL", "LOCK", "LOCKED", "LOG", "LOGGING", "LOGOFF", "LOGON", "LONG", 
		"LOOP", "LOW", "MAIN", "MAP", "MATCHED", "MAXEXTENTS", "MAXTRANS", "MAXVALUE", 
		"MEASURES", "MEDIUM", "MEMBER", "MERGE", "MINEXTENTS", "MINUS", "MINUTE", 
		"MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", 
		"NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", 
		"NESTED", "NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOMPRESS", "NOCOPY", 
		"NOCYCLE", "NOENTITYESCAPING", "NOLOGGING", "NOMAXVALUE", "NOMINVALUE", 
		"NONE", "NOORDER", "NORELY", "NOSCHEMACHECK", "NOT", "NOVALIDATE", "NOWAIT", 
		"NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", 
		"OID", "OLD", "OLTP", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
		"ORDER", "ORDINALITY", "ORGANIZATION", "OSERROR", "OUT", "OUTER", "OVER", 
		"OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", 
		"PASSING", "PATH", "PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", 
		"PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", "PLAN", "PLS_INTEGER", 
		"POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
		"PRIMARY", "PRIOR", "PROCEDURE", "QUERY", "RAISE", "RANGE", "RAW", "READ", 
		"READS", "REAL", "RECORD", "RECYCLE", "REF", "REFERENCE", "REFERENCES", 
		"REFERENCING", "REJECT", "RELIES_ON", "RELY", "RENAME", "REPLACE", "RESPECT", 
		"RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", "RETURN", "RETURNING", 
		"REUSE", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", 
		"ROWS", "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", 
		"SCN", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
		"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
		"SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", 
		"SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", "SQLDATA", 
		"SQLERROR", "STANDALONE", "START", "STARTUP", "STATEMENT", "STATEMENT_ID", 
		"STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITION", 
		"SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", "SYSTEM", "TABLE", "TABLESPACE", 
		"THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
		"TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
		"TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", 
		"TRIGGER", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", 
		"UNIQUE", "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
		"UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
		"VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "VIEW", "WAIT", 
		"WARNING", "WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", 
		"WITHIN", "WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", 
		"XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
		"XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
		"YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
		"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
		"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "RANK", "AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", 
		"MIN", "NTILE", "RATIO_TO_REPORT", "ROW_NUMBER", "SUM", "VARIANCE", "REGR_", 
		"STDDEV", "VAR_", "COVAR_", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", 
		"HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", 
		"SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", 
		"SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
		"PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", 
		"SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", 
		"SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT", 
		"SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", 
		"SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
		"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", 
		"SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
		"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
		"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
		"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
		"ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(841); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(840);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(843); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CELL_FLASH_CACHE) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CHUNK) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMN) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEDUPLICATE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRABLE - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FILESYSTEM_LIKE_LOGGING - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLASH_CACHE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FOREIGN - 128)) | (1L << (FREELIST - 128)) | (1L << (FREELISTS - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPS - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HEAP - 128)) | (1L << (HIDE - 128)) | (1L << (HIGH - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDEXES - 128)) | (1L << (INDICATOR - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INT - 192)) | (1L << (INTEGER - 192)) | (1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEEP_DUPLICATES - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LENGTH - 192)) | (1L << (LEVEL - 192)) | (1L << (LEVELS - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOB - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGGING - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (LOW - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXEXTENTS - 192)) | (1L << (MAXTRANS - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEDIUM - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINEXTENTS - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (MLSLABEL - 256)) | (1L << (MODE - 256)) | (1L << (MODEL - 256)) | (1L << (MODIFY - 256)) | (1L << (MONTH - 256)) | (1L << (MULTISET - 256)) | (1L << (NAME - 256)) | (1L << (NAN - 256)) | (1L << (NATURAL - 256)) | (1L << (NATURALN - 256)) | (1L << (NAV - 256)) | (1L << (NCHAR - 256)) | (1L << (NCHAR_CS - 256)) | (1L << (NCLOB - 256)) | (1L << (NESTED - 256)) | (1L << (NEW - 256)) | (1L << (NEXT - 256)) | (1L << (NO - 256)) | (1L << (NOAUDIT - 256)) | (1L << (NOCACHE - 256)) | (1L << (NOCOMPRESS - 256)) | (1L << (NOCOPY - 256)) | (1L << (NOCYCLE - 256)) | (1L << (NOENTITYESCAPING - 256)) | (1L << (NOLOGGING - 256)) | (1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NORELY - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOVALIDATE - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (OLTP - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (ORGANIZATION - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PASSING - 320)) | (1L << (PATH - 320)) | (1L << (PCTFREE - 320)) | (1L << (PCTINCREASE - 320)) | (1L << (PCTTHRESHOLD - 320)) | (1L << (PCTUSED - 320)) | (1L << (PERCENT_ROWTYPE - 320)) | (1L << (PERCENT_TYPE - 320)) | (1L << (PIPELINED - 320)) | (1L << (PIVOT - 320)) | (1L << (PLAN - 320)) | (1L << (PLS_INTEGER - 320)) | (1L << (POSITIVE - 320)) | (1L << (POSITIVEN - 320)) | (1L << (PRAGMA - 320)) | (1L << (PRECEDING - 320)) | (1L << (PRECISION - 320)) | (1L << (PRESENT - 320)) | (1L << (PRIMARY - 320)) | (1L << (PRIOR - 320)) | (1L << (PROCEDURE - 320)) | (1L << (QUERY - 320)) | (1L << (RAISE - 320)) | (1L << (RANGE - 320)) | (1L << (RAW - 320)) | (1L << (READ - 320)) | (1L << (READS - 320)) | (1L << (REAL - 320)) | (1L << (RECORD - 320)) | (1L << (RECYCLE - 320)) | (1L << (REF - 320)) | (1L << (REFERENCE - 320)) | (1L << (REFERENCES - 320)) | (1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RELY - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SECUREFILE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SEED - 384)) | (1L << (SEGMENT - 384)) | (1L << (SELECT - 384)) | (1L << (SELF - 384)) | (1L << (SEQUENCE - 384)) | (1L << (SEQUENTIAL - 384)) | (1L << (SERIALIZABLE - 384)) | (1L << (SERIALLY_REUSABLE - 384)) | (1L << (SERVERERROR - 384)) | (1L << (SESSIONTIMEZONE - 384)) | (1L << (SET - 384)) | (1L << (SETS - 384)) | (1L << (SETTINGS - 384)) | (1L << (SHARE - 384)) | (1L << (SHOW - 384)) | (1L << (SHUTDOWN - 384)) | (1L << (SIBLINGS - 384)) | (1L << (SIGNTYPE - 384)) | (1L << (SIMPLE_INTEGER - 384)) | (1L << (SINGLE - 384)) | (1L << (SIZE - 384)) | (1L << (SKIP_ - 384)) | (1L << (SMALLINT - 384)) | (1L << (SNAPSHOT - 384)) | (1L << (SOME - 384)) | (1L << (SPECIFICATION - 384)) | (1L << (SQLDATA - 384)) | (1L << (SQLERROR - 384)) | (1L << (STANDALONE - 384)) | (1L << (START - 384)) | (1L << (STARTUP - 384)) | (1L << (STATEMENT - 384)) | (1L << (STATEMENT_ID - 384)) | (1L << (STATIC - 384)) | (1L << (STATISTICS - 384)) | (1L << (STORAGE - 384)) | (1L << (STORE - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (SYSTEM - 384)) | (1L << (TABLE - 384)) | (1L << (TABLESPACE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (TRIM - 448)) | (1L << (TRUE - 448)) | (1L << (TRUNCATE - 448)) | (1L << (TYPE - 448)) | (1L << (UNBOUNDED - 448)) | (1L << (UNDER - 448)) | (1L << (UNION - 448)) | (1L << (UNIQUE - 448)) | (1L << (UNLIMITED - 448)) | (1L << (UNPIVOT - 448)) | (1L << (UNTIL - 448)) | (1L << (UPDATE - 448)) | (1L << (UPDATED - 448)) | (1L << (UPSERT - 448)) | (1L << (UROWID - 448)) | (1L << (USE - 448)) | (1L << (USING - 448)) | (1L << (VALIDATE - 448)) | (1L << (VALUE - 448)) | (1L << (VALUES - 448)) | (1L << (VARCHAR - 448)) | (1L << (VARCHAR2 - 448)) | (1L << (VARIABLE - 448)) | (1L << (VARRAY - 448)) | (1L << (VARYING - 448)) | (1L << (VERSION - 448)) | (1L << (VERSIONS - 448)) | (1L << (VIEW - 448)) | (1L << (WAIT - 448)) | (1L << (WARNING - 448)) | (1L << (WELLFORMED - 448)) | (1L << (WHEN - 448)) | (1L << (WHENEVER - 448)) | (1L << (WHERE - 448)) | (1L << (WHILE - 448)) | (1L << (WITH - 448)) | (1L << (WITHIN - 448)) | (1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CUME_DIST - 512)) | (1L << (DENSE_RANK - 512)) | (1L << (LISTAGG - 512)) | (1L << (PERCENT_RANK - 512)) | (1L << (PERCENTILE_CONT - 512)) | (1L << (PERCENTILE_DISC - 512)) | (1L << (RANK - 512)) | (1L << (AVG - 512)) | (1L << (CORR - 512)) | (1L << (LAG - 512)) | (1L << (LEAD - 512)) | (1L << (MAX - 512)) | (1L << (MEDIAN - 512)) | (1L << (MIN - 512)) | (1L << (NTILE - 512)) | (1L << (RATIO_TO_REPORT - 512)) | (1L << (ROW_NUMBER - 512)) | (1L << (SUM - 512)) | (1L << (VARIANCE - 512)) | (1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (BIT_STRING_LIT - 512)) | (1L << (HEX_STRING_LIT - 512)) | (1L << (DOUBLE_PERIOD - 512)) | (1L << (PERIOD - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (PERCENT - 512)) | (1L << (AMPERSAND - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (RIGHT_PAREN - 512)) | (1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (PROMPT - 576)) | (1L << (SQL92_RESERVED_ALL - 576)) | (1L << (SQL92_RESERVED_ALTER - 576)) | (1L << (SQL92_RESERVED_AND - 576)) | (1L << (SQL92_RESERVED_ANY - 576)) | (1L << (SQL92_RESERVED_AS - 576)) | (1L << (SQL92_RESERVED_ASC - 576)) | (1L << (SQL92_RESERVED_BEGIN - 576)) | (1L << (SQL92_RESERVED_BETWEEN - 576)) | (1L << (SQL92_RESERVED_BY - 576)) | (1L << (SQL92_RESERVED_CASE - 576)) | (1L << (SQL92_RESERVED_CHECK - 576)) | (1L << (PLSQL_RESERVED_CLUSTERS - 576)) | (1L << (PLSQL_RESERVED_COLAUTH - 576)) | (1L << (PLSQL_RESERVED_COMPRESS - 576)) | (1L << (SQL92_RESERVED_CONNECT - 576)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 576)) | (1L << (PLSQL_RESERVED_CRASH - 576)) | (1L << (SQL92_RESERVED_CREATE - 576)) | (1L << (SQL92_RESERVED_CURRENT - 576)) | (1L << (SQL92_RESERVED_CURSOR - 576)) | (1L << (SQL92_RESERVED_DATE - 576)) | (1L << (SQL92_RESERVED_DECLARE - 576)) | (1L << (SQL92_RESERVED_DEFAULT - 576)) | (1L << (SQL92_RESERVED_DELETE - 576)) | (1L << (SQL92_RESERVED_DESC - 576)) | (1L << (SQL92_RESERVED_DISTINCT - 576)) | (1L << (SQL92_RESERVED_DROP - 576)) | (1L << (SQL92_RESERVED_ELSE - 576)) | (1L << (SQL92_RESERVED_END - 576)) | (1L << (SQL92_RESERVED_EXCEPTION - 576)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 576)) | (1L << (SQL92_RESERVED_EXISTS - 576)) | (1L << (SQL92_RESERVED_FALSE - 576)) | (1L << (SQL92_RESERVED_FETCH - 576)) | (1L << (SQL92_RESERVED_FOR - 576)) | (1L << (SQL92_RESERVED_FROM - 576)) | (1L << (SQL92_RESERVED_GOTO - 576)) | (1L << (SQL92_RESERVED_GRANT - 576)) | (1L << (SQL92_RESERVED_GROUP - 576)) | (1L << (SQL92_RESERVED_HAVING - 576)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SQL92_RESERVED_PRIOR - 640)) | (1L << (SQL92_RESERVED_PROCEDURE - 640)) | (1L << (SQL92_RESERVED_PUBLIC - 640)) | (1L << (PLSQL_RESERVED_RESOURCE - 640)) | (1L << (SQL92_RESERVED_REVOKE - 640)) | (1L << (SQL92_RESERVED_SELECT - 640)) | (1L << (PLSQL_RESERVED_SHARE - 640)) | (1L << (SQL92_RESERVED_SIZE - 640)) | (1L << (PLSQL_RESERVED_START - 640)) | (1L << (PLSQL_RESERVED_TABAUTH - 640)) | (1L << (SQL92_RESERVED_TABLE - 640)) | (1L << (SQL92_RESERVED_THE - 640)) | (1L << (SQL92_RESERVED_THEN - 640)) | (1L << (SQL92_RESERVED_TO - 640)) | (1L << (SQL92_RESERVED_TRUE - 640)) | (1L << (SQL92_RESERVED_UNION - 640)) | (1L << (SQL92_RESERVED_UNIQUE - 640)) | (1L << (SQL92_RESERVED_UPDATE - 640)) | (1L << (SQL92_RESERVED_VALUES - 640)) | (1L << (SQL92_RESERVED_VIEW - 640)) | (1L << (PLSQL_RESERVED_VIEWS - 640)) | (1L << (SQL92_RESERVED_WHEN - 640)) | (1L << (SQL92_RESERVED_WHERE - 640)) | (1L << (SQL92_RESERVED_WITH - 640)) | (1L << (PLSQL_NON_RESERVED_USING - 640)) | (1L << (PLSQL_NON_RESERVED_MODEL - 640)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 640)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 640)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 640)) | (1L << (REGULAR_ID - 640)) | (1L << (ZV - 640)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (CREATE - 64)) | (1L << (DELETE - 64)) | (1L << (DROP - 64)))) != 0) || ((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (EXPLAIN - 146)) | (1L << (FUNCTION - 146)) | (1L << (INSERT - 146)))) != 0) || _la==LOCK || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(845);
				unit_statement();
				}
				}
				setState(850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(851);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (CREATE - 64)) | (1L << (DELETE - 64)) | (1L << (DROP - 64)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (EXIT - 145)) | (1L << (EXPLAIN - 145)) | (1L << (FUNCTION - 145)) | (1L << (INSERT - 145)))) != 0) || _la==LOCK || _la==MERGE || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (PROCEDURE - 340)) | (1L << (SELECT - 340)) | (1L << (SET - 340)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (UPDATE - 459)) | (1L << (WHENEVER - 459)) | (1L << (WITH - 459)))) != 0) || ((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (LEFT_PAREN - 546)) | (1L << (SOLIDUS - 546)) | (1L << (PROMPT - 546)))) != 0)) {
				{
				setState(855);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case COMMENT:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(853);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
					{
					setState(854);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(860);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(862);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(863);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(864);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(865);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(866);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(867);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(868);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(869);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(870);
				create_procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(871);
				create_package();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(872);
				create_index();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(873);
				create_table();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(874);
				create_view();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(875);
				create_sequence();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(876);
				create_trigger();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(877);
				create_type();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(878);
				drop_function();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(879);
				drop_package();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(880);
				drop_procedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(881);
				drop_sequence();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(882);
				drop_trigger();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(883);
				drop_type();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(884);
				data_manipulation_language_statements();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(885);
				comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Relational_propertiesContext> relational_properties() {
			return getRuleContexts(Relational_propertiesContext.class);
		}
		public Relational_propertiesContext relational_properties(int i) {
			return getRuleContext(Relational_propertiesContext.class,i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public List<Lob_storage_clauseContext> lob_storage_clause() {
			return getRuleContexts(Lob_storage_clauseContext.class);
		}
		public Lob_storage_clauseContext lob_storage_clause(int i) {
			return getRuleContext(Lob_storage_clauseContext.class,i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888);
			match(CREATE);
			setState(889);
			match(TABLE);
			setState(893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(890);
				schema_name();
				setState(891);
				match(PERIOD);
				}
				break;
			}
			setState(895);
			tableview_name();
			setState(896);
			match(LEFT_PAREN);
			setState(897);
			relational_properties();
			setState(902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(898);
				match(COMMA);
				setState(899);
				relational_properties();
				}
				}
				setState(904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(905);
			match(RIGHT_PAREN);
			setState(907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LOGGING - 236)) | (1L << (MAXTRANS - 236)) | (1L << (NOCOMPRESS - 236)) | (1L << (NOLOGGING - 236)))) != 0) || ((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (ORGANIZATION - 309)) | (1L << (PCTFREE - 309)) | (1L << (PCTUSED - 309)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SEGMENT - 385)) | (1L << (STORAGE - 385)) | (1L << (TABLESPACE - 385)))) != 0)) {
				{
				setState(906);
				physical_properties();
				}
			}

			setState(912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOB) {
				{
				{
				setState(909);
				lob_storage_clause();
				}
				}
				setState(914);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(915);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_propertiesContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Relational_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelational_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_propertiesContext relational_properties() throws RecognitionException {
		Relational_propertiesContext _localctx = new Relational_propertiesContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_relational_properties);
		try {
			setState(919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(917);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(918);
				out_of_line_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(921);
			column_name();
			setState(922);
			type_spec();
			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(923);
				default_value_part();
				}
			}

			setState(929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHECK || _la==CONSTRAINT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (NOT - 287)) | (1L << (NULL - 287)) | (1L << (PRIMARY - 287)))) != 0) || _la==REFERENCES || _la==UNIQUE) {
				{
				{
				setState(926);
				inline_constraint();
				}
				}
				setState(931);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(plsqlParser.ORGANIZATION, 0); }
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public TerminalNode HEAP() { return getToken(plsqlParser.HEAP, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Index_org_table_clauseContext index_org_table_clause() {
			return getRuleContext(Index_org_table_clauseContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPhysical_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_physical_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEGMENT) {
				{
				setState(932);
				deferred_segment_creation();
				}
			}

			setState(955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
			case FILESYSTEM_LIKE_LOGGING:
			case INITRANS:
			case LOGGING:
			case MAXTRANS:
			case NOCOMPRESS:
			case NOLOGGING:
			case PCTFREE:
			case PCTUSED:
			case STORAGE:
			case TABLESPACE:
				{
				setState(935);
				segment_attributes_clause();
				setState(937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					setState(936);
					table_compression();
					}
				}

				}
				break;
			case ORGANIZATION:
				{
				setState(939);
				match(ORGANIZATION);
				setState(953);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HEAP:
					{
					setState(940);
					match(HEAP);
					setState(942);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						setState(941);
						segment_attributes_clause();
						}
						break;
					}
					setState(945);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(944);
						table_compression();
						}
					}

					}
					break;
				case INDEX:
					{
					setState(947);
					match(INDEX);
					setState(949);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LOGGING - 236)) | (1L << (MAXTRANS - 236)) | (1L << (NOCOMPRESS - 236)) | (1L << (NOLOGGING - 236)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
						{
						setState(948);
						segment_attributes_clause();
						}
					}

					setState(951);
					index_org_table_clause();
					}
					break;
				case EXTERNAL:
					{
					setState(952);
					match(EXTERNAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(plsqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeferred_segment_creation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeferred_segment_creation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDeferred_segment_creation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(957);
			match(SEGMENT);
			setState(958);
			match(CREATION);
			setState(959);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSegment_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSegment_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSegment_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_segment_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(964); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(964);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMPRESS:
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case MAXTRANS:
					case NOCOMPRESS:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(961);
						physical_attributes_clause();
						}
						break;
					case TABLESPACE:
						{
						setState(962);
						match(TABLESPACE);
						setState(963);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(966); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_org_table_clauseContext extends ParserRuleContext {
		public TerminalNode PCTTHRESHOLD() { return getToken(plsqlParser.PCTTHRESHOLD, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Index_org_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_org_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_org_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_org_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_org_table_clauseContext index_org_table_clause() throws RecognitionException {
		Index_org_table_clauseContext _localctx = new Index_org_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_index_org_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PCTTHRESHOLD) {
				{
				setState(968);
				match(PCTTHRESHOLD);
				setState(969);
				match(UNSIGNED_INTEGER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public List<TerminalNode> PCTFREE() { return getTokens(plsqlParser.PCTFREE); }
		public TerminalNode PCTFREE(int i) {
			return getToken(plsqlParser.PCTFREE, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PCTUSED() { return getTokens(plsqlParser.PCTUSED); }
		public TerminalNode PCTUSED(int i) {
			return getToken(plsqlParser.PCTUSED, i);
		}
		public List<TerminalNode> INITRANS() { return getTokens(plsqlParser.INITRANS); }
		public TerminalNode INITRANS(int i) {
			return getToken(plsqlParser.INITRANS, i);
		}
		public List<TerminalNode> MAXTRANS() { return getTokens(plsqlParser.MAXTRANS); }
		public TerminalNode MAXTRANS(int i) {
			return getToken(plsqlParser.MAXTRANS, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPhysical_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPhysical_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPhysical_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_physical_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(983); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(983);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PCTFREE:
						{
						setState(972);
						match(PCTFREE);
						setState(973);
						match(UNSIGNED_INTEGER);
						}
						break;
					case PCTUSED:
						{
						setState(974);
						match(PCTUSED);
						setState(975);
						match(UNSIGNED_INTEGER);
						}
						break;
					case INITRANS:
						{
						setState(976);
						match(INITRANS);
						setState(977);
						match(UNSIGNED_INTEGER);
						}
						break;
					case MAXTRANS:
						{
						setState(978);
						match(MAXTRANS);
						setState(979);
						match(UNSIGNED_INTEGER);
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(980);
						table_compression();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(981);
						logging_clause();
						}
						break;
					case STORAGE:
						{
						setState(982);
						storage_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(985); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(plsqlParser.STORAGE, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(plsqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(plsqlParser.INITIAL, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(plsqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(plsqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(plsqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(plsqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> MAXEXTENTS() { return getTokens(plsqlParser.MAXEXTENTS); }
		public TerminalNode MAXEXTENTS(int i) {
			return getToken(plsqlParser.MAXEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(plsqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(plsqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(plsqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(plsqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(plsqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(plsqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(plsqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(plsqlParser.GROUPS, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(plsqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(plsqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(plsqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(plsqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> CELL_FLASH_CACHE() { return getTokens(plsqlParser.CELL_FLASH_CACHE); }
		public TerminalNode CELL_FLASH_CACHE(int i) {
			return getToken(plsqlParser.CELL_FLASH_CACHE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(plsqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(plsqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(plsqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(plsqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(plsqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(plsqlParser.RECYCLE, i);
		}
		public List<TerminalNode> NONE() { return getTokens(plsqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(plsqlParser.NONE, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStorage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStorage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStorage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(987);
			match(STORAGE);
			setState(988);
			match(LEFT_PAREN);
			setState(1010); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1010);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(989);
					match(INITIAL);
					setState(990);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NEXT:
					{
					setState(991);
					match(NEXT);
					setState(992);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MINEXTENTS:
					{
					setState(993);
					match(MINEXTENTS);
					setState(994);
					match(UNSIGNED_INTEGER);
					}
					break;
				case MAXEXTENTS:
					{
					setState(995);
					match(MAXEXTENTS);
					setState(996);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(997);
					match(PCTINCREASE);
					setState(998);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(999);
					match(FREELISTS);
					setState(1000);
					match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(1001);
					match(FREELIST);
					setState(1002);
					match(GROUPS);
					setState(1003);
					match(UNSIGNED_INTEGER);
					}
					break;
				case BUFFER_POOL:
					{
					setState(1004);
					match(BUFFER_POOL);
					setState(1005);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(1006);
					match(FLASH_CACHE);
					setState(1007);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case CELL_FLASH_CACHE:
					{
					setState(1008);
					match(CELL_FLASH_CACHE);
					setState(1009);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1012); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || _la==CELL_FLASH_CACHE || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (FLASH_CACHE - 156)) | (1L << (FREELIST - 156)) | (1L << (FREELISTS - 156)) | (1L << (INITIAL - 156)))) != 0) || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (MAXEXTENTS - 245)) | (1L << (MINEXTENTS - 245)) | (1L << (NEXT - 245)))) != 0) || _la==PCTINCREASE );
			setState(1014);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode BASIC() { return getToken(plsqlParser.BASIC, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode OLTP() { return getToken(plsqlParser.OLTP, 0); }
		public TerminalNode QUERY() { return getToken(plsqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(plsqlParser.ARCHIVE, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_compression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_compression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_compression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_table_compression);
		int _la;
		try {
			setState(1029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1016);
				match(COMPRESS);
				setState(1026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BASIC:
					{
					setState(1017);
					match(BASIC);
					}
					break;
				case FOR:
					{
					setState(1018);
					match(FOR);
					setState(1024);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OLTP:
						{
						setState(1019);
						match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						setState(1020);
						_la = _input.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1022);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							setState(1021);
							_la = _input.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case CASCADE:
				case CHECK:
				case COMPRESS:
				case COMPUTE:
				case CONSTRAINT:
				case DEFERRABLE:
				case DISABLE:
				case ENABLE:
				case EXCEPTIONS:
				case FILESYSTEM_LIKE_LOGGING:
				case FOREIGN:
				case INITIALY:
				case INITRANS:
				case LOB:
				case LOGGING:
				case MAXTRANS:
				case NOCOMPRESS:
				case NOLOGGING:
				case NORELY:
				case NOT:
				case NOVALIDATE:
				case NULL:
				case PCTFREE:
				case PCTTHRESHOLD:
				case PCTUSED:
				case PRIMARY:
				case REFERENCES:
				case RELY:
				case STORAGE:
				case TABLESPACE:
				case UNIQUE:
				case USING:
				case VALIDATE:
				case RIGHT_PAREN:
				case COMMA:
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1028);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(plsqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(plsqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(plsqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLogging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1031);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(plsqlParser.LOB, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STORE() { return getToken(plsqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<Lob_storage_parametersContext> lob_storage_parameters() {
			return getRuleContexts(Lob_storage_parametersContext.class);
		}
		public Lob_storage_parametersContext lob_storage_parameters(int i) {
			return getRuleContext(Lob_storage_parametersContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(plsqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(plsqlParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(plsqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(plsqlParser.BASICFILE, i);
		}
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_storage_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_lob_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1033);
			match(LOB);
			setState(1034);
			match(LEFT_PAREN);
			setState(1035);
			id();
			setState(1040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1036);
				match(COMMA);
				setState(1037);
				id();
				}
				}
				setState(1042);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1043);
			match(RIGHT_PAREN);
			setState(1044);
			match(STORE);
			setState(1045);
			match(AS);
			setState(1051); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1051);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					setState(1046);
					_la = _input.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LEFT_PAREN:
					{
					setState(1047);
					match(LEFT_PAREN);
					setState(1048);
					lob_storage_parameters();
					setState(1049);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1053); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BASICFILE || _la==SECUREFILE || _la==LEFT_PAREN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Lob_parametersContext> lob_parameters() {
			return getRuleContexts(Lob_parametersContext.class);
		}
		public Lob_parametersContext lob_parameters(int i) {
			return getRuleContext(Lob_parametersContext.class,i);
		}
		public List<Storage_clauseContext> storage_clause() {
			return getRuleContexts(Storage_clauseContext.class);
		}
		public Storage_clauseContext storage_clause(int i) {
			return getRuleContext(Storage_clauseContext.class,i);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_storage_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_storage_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_storage_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_lob_storage_parameters);
		int _la;
		try {
			setState(1066);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1061); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1061);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case TABLESPACE:
						{
						setState(1055);
						match(TABLESPACE);
						setState(1056);
						id();
						}
						break;
					case CACHE:
					case CHUNK:
					case COMPRESS:
					case DEDUPLICATE:
					case DISABLE:
					case ENABLE:
					case KEEP_DUPLICATES:
					case NOCACHE:
					case NOCOMPRESS:
						{
						setState(1057);
						lob_parameters();
						setState(1059);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==STORAGE) {
							{
							setState(1058);
							storage_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1063); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CHUNK || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (COMPRESS - 70)) | (1L << (DEDUPLICATE - 70)) | (1L << (DISABLE - 70)) | (1L << (ENABLE - 70)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (KEEP_DUPLICATES - 215)) | (1L << (NOCACHE - 215)) | (1L << (NOCOMPRESS - 215)))) != 0) || _la==TABLESPACE );
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1065);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_parametersContext extends ParserRuleContext {
		public List<TerminalNode> STORAGE() { return getTokens(plsqlParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(plsqlParser.STORAGE, i);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> CHUNK() { return getTokens(plsqlParser.CHUNK); }
		public TerminalNode CHUNK(int i) {
			return getToken(plsqlParser.CHUNK, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<Lob_deduplicate_clauseContext> lob_deduplicate_clause() {
			return getRuleContexts(Lob_deduplicate_clauseContext.class);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause(int i) {
			return getRuleContext(Lob_deduplicate_clauseContext.class,i);
		}
		public List<Lob_compression_clauseContext> lob_compression_clause() {
			return getRuleContexts(Lob_compression_clauseContext.class);
		}
		public Lob_compression_clauseContext lob_compression_clause(int i) {
			return getRuleContext(Lob_compression_clauseContext.class,i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> CACHE() { return getTokens(plsqlParser.CACHE); }
		public TerminalNode CACHE(int i) {
			return getToken(plsqlParser.CACHE, i);
		}
		public List<TerminalNode> NOCACHE() { return getTokens(plsqlParser.NOCACHE); }
		public TerminalNode NOCACHE(int i) {
			return getToken(plsqlParser.NOCACHE, i);
		}
		public List<TerminalNode> READS() { return getTokens(plsqlParser.READS); }
		public TerminalNode READS(int i) {
			return getToken(plsqlParser.READS, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lob_parameters);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1085); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1085);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DISABLE:
					case ENABLE:
						{
						setState(1068);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1069);
						match(STORAGE);
						setState(1070);
						match(IN);
						setState(1071);
						match(ROW);
						}
						break;
					case CHUNK:
						{
						setState(1072);
						match(CHUNK);
						setState(1073);
						match(UNSIGNED_INTEGER);
						}
						break;
					case DEDUPLICATE:
					case KEEP_DUPLICATES:
						{
						setState(1074);
						lob_deduplicate_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(1075);
						lob_compression_clause();
						}
						break;
					case CACHE:
					case NOCACHE:
						{
						setState(1080);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
						case 1:
							{
							setState(1076);
							match(CACHE);
							}
							break;
						case 2:
							{
							setState(1077);
							match(NOCACHE);
							}
							break;
						case 3:
							{
							setState(1078);
							match(CACHE);
							setState(1079);
							match(READS);
							}
							break;
						}
						setState(1083);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
							{
							setState(1082);
							logging_clause();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1087); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(plsqlParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(plsqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_deduplicate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_deduplicate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_deduplicate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1089);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_compression_clauseContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(plsqlParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(plsqlParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(plsqlParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(plsqlParser.LOW, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(plsqlParser.NOCOMPRESS, 0); }
		public Lob_compression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLob_compression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLob_compression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLob_compression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lob_compression_clauseContext lob_compression_clause() throws RecognitionException {
		Lob_compression_clauseContext _localctx = new Lob_compression_clauseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_lob_compression_clause);
		int _la;
		try {
			setState(1096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1091);
				match(COMPRESS);
				setState(1093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(1092);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1095);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Column_clausesContext column_clauses() {
			return getRuleContext(Column_clausesContext.class,0);
		}
		public Constraint_clausesContext constraint_clauses() {
			return getRuleContext(Constraint_clausesContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098);
			match(ALTER);
			setState(1099);
			match(TABLE);
			setState(1103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(1100);
				schema_name();
				setState(1101);
				match(PERIOD);
				}
				break;
			}
			setState(1105);
			tableview_name();
			setState(1108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1106);
				column_clauses();
				}
				break;
			case 2:
				{
				setState(1107);
				constraint_clauses();
				}
				break;
			}
			setState(1110);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_clausesContext extends ParserRuleContext {
		public List<Modify_column_clausesContext> modify_column_clauses() {
			return getRuleContexts(Modify_column_clausesContext.class);
		}
		public Modify_column_clausesContext modify_column_clauses(int i) {
			return getRuleContext(Modify_column_clausesContext.class,i);
		}
		public Column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_clausesContext column_clauses() throws RecognitionException {
		Column_clausesContext _localctx = new Column_clausesContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1113); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1112);
				modify_column_clauses();
				}
				}
				setState(1115); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MODIFY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_column_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public List<Modify_col_propertiesContext> modify_col_properties() {
			return getRuleContexts(Modify_col_propertiesContext.class);
		}
		public Modify_col_propertiesContext modify_col_properties(int i) {
			return getRuleContext(Modify_col_propertiesContext.class,i);
		}
		public Modify_col_substitutableContext modify_col_substitutable() {
			return getRuleContext(Modify_col_substitutableContext.class,0);
		}
		public Modify_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_column_clausesContext modify_column_clauses() throws RecognitionException {
		Modify_column_clausesContext _localctx = new Modify_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_modify_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1117);
			match(MODIFY);
			setState(1130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(1118);
				match(LEFT_PAREN);
				setState(1119);
				modify_col_properties();
				setState(1124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1120);
					match(COMMA);
					setState(1121);
					modify_col_properties();
					}
					}
					setState(1126);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1127);
				match(RIGHT_PAREN);
				}
				break;
			case COLUMN:
				{
				setState(1129);
				modify_col_substitutable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public Modify_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_col_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_propertiesContext modify_col_properties() throws RecognitionException {
		Modify_col_propertiesContext _localctx = new Modify_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_modify_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1132);
			column_name();
			setState(1134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(1133);
				type_spec();
				}
				break;
			}
			setState(1138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1136);
				match(DEFAULT);
				setState(1137);
				expression();
				}
			}

			setState(1143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHECK || _la==CONSTRAINT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (NOT - 287)) | (1L << (NULL - 287)) | (1L << (PRIMARY - 287)))) != 0) || _la==REFERENCES || _la==UNIQUE) {
				{
				{
				setState(1140);
				inline_constraint();
				}
				}
				setState(1145);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOB) {
				{
				setState(1146);
				lob_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_col_substitutableContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(plsqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Modify_col_substitutableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_col_substitutable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModify_col_substitutable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModify_col_substitutable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModify_col_substitutable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_col_substitutableContext modify_col_substitutable() throws RecognitionException {
		Modify_col_substitutableContext _localctx = new Modify_col_substitutableContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_modify_col_substitutable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			match(COLUMN);
			setState(1150);
			column_name();
			setState(1152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1151);
				match(NOT);
				}
			}

			setState(1154);
			match(SUBSTITUTABLE);
			setState(1155);
			match(AT);
			setState(1156);
			match(ALL);
			setState(1157);
			match(LEVELS);
			setState(1159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1158);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInline_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInline_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1161);
				match(CONSTRAINT);
				setState(1162);
				constraint_name();
				}
			}

			setState(1178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(1166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1165);
					match(NOT);
					}
				}

				setState(1168);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(1169);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(1170);
				match(PRIMARY);
				setState(1171);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(1172);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(1173);
				match(CHECK);
				setState(1174);
				match(LEFT_PAREN);
				setState(1175);
				condition();
				setState(1176);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1180);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_clausesContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Constraint_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_clausesContext constraint_clauses() throws RecognitionException {
		Constraint_clausesContext _localctx = new Constraint_clausesContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_constraint_clauses);
		int _la;
		try {
			setState(1218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1183);
				match(ADD);
				setState(1185); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1184);
					out_of_line_constraint();
					}
					}
					setState(1187); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE );
				}
				break;
			case MODIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1189);
				match(MODIFY);
				setState(1206);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(1190);
					match(CONSTRAINT);
					setState(1191);
					constraint_name();
					}
					break;
				case PRIMARY:
					{
					setState(1192);
					match(PRIMARY);
					setState(1193);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1194);
					match(UNIQUE);
					setState(1195);
					match(LEFT_PAREN);
					setState(1196);
					column_name();
					setState(1201);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1197);
						match(COMMA);
						setState(1198);
						column_name();
						}
						}
						setState(1203);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1204);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1208);
				constraint_state();
				setState(1210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE) {
					{
					setState(1209);
					match(CASCADE);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(1212);
				match(RENAME);
				setState(1213);
				match(CONSTRAINT);
				setState(1214);
				constraint_name();
				setState(1215);
				match(TO);
				setState(1216);
				constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(plsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(plsqlParser.KEY, 0); }
		public TerminalNode FOREIGN() { return getToken(plsqlParser.FOREIGN, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOut_of_line_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOut_of_line_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_out_of_line_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1220);
				match(CONSTRAINT);
				setState(1221);
				constraint_name();
				}
			}

			setState(1268);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(1224);
				match(UNIQUE);
				setState(1225);
				match(LEFT_PAREN);
				setState(1226);
				column_name();
				setState(1231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1227);
					match(COMMA);
					setState(1228);
					column_name();
					}
					}
					setState(1233);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1234);
				match(RIGHT_PAREN);
				}
				break;
			case PRIMARY:
				{
				setState(1236);
				match(PRIMARY);
				setState(1237);
				match(KEY);
				setState(1238);
				match(LEFT_PAREN);
				setState(1239);
				column_name();
				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1240);
					match(COMMA);
					setState(1241);
					column_name();
					}
					}
					setState(1246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1247);
				match(RIGHT_PAREN);
				}
				break;
			case FOREIGN:
				{
				setState(1249);
				match(FOREIGN);
				setState(1250);
				match(KEY);
				setState(1251);
				match(LEFT_PAREN);
				setState(1252);
				column_name();
				setState(1257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1253);
					match(COMMA);
					setState(1254);
					column_name();
					}
					}
					setState(1259);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1260);
				match(RIGHT_PAREN);
				setState(1261);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(1263);
				match(CHECK);
				setState(1264);
				match(LEFT_PAREN);
				setState(1265);
				condition();
				setState(1266);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (DEFERRABLE - 111)) | (1L << (DISABLE - 111)) | (1L << (ENABLE - 111)) | (1L << (EXCEPTIONS - 111)))) != 0) || _la==INITIALY || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (NORELY - 285)) | (1L << (NOT - 285)) | (1L << (NOVALIDATE - 285)))) != 0) || _la==RELY || _la==USING || _la==VALIDATE) {
				{
				setState(1270);
				constraint_state();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(plsqlParser.REFERENCES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferences_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferences_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_references_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1273);
			match(REFERENCES);
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1274);
				schema_name();
				setState(1275);
				match(PERIOD);
				}
				break;
			}
			setState(1279);
			id();
			setState(1291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1280);
				match(LEFT_PAREN);
				setState(1281);
				column_name();
				setState(1286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1282);
					match(COMMA);
					setState(1283);
					column_name();
					}
					}
					setState(1288);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1289);
				match(RIGHT_PAREN);
				}
			}

			setState(1300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1293);
				match(ON);
				setState(1294);
				match(DELETE);
				setState(1298);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASCADE:
					{
					setState(1295);
					match(CASCADE);
					}
					break;
				case SET:
					{
					setState(1296);
					match(SET);
					setState(1297);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(plsqlParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(plsqlParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALY() { return getTokens(plsqlParser.INITIALY); }
		public TerminalNode INITIALY(int i) {
			return getToken(plsqlParser.INITIALY, i);
		}
		public List<TerminalNode> RELY() { return getTokens(plsqlParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(plsqlParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(plsqlParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(plsqlParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(plsqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(plsqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(plsqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(plsqlParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(plsqlParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(plsqlParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(plsqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(plsqlParser.NOVALIDATE, i);
		}
		public List<Exceptions_clauseContext> exceptions_clause() {
			return getRuleContexts(Exceptions_clauseContext.class);
		}
		public Exceptions_clauseContext exceptions_clause(int i) {
			return getRuleContext(Exceptions_clauseContext.class,i);
		}
		public List<Using_index_clauseContext> using_index_clause() {
			return getRuleContexts(Using_index_clauseContext.class);
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return getRuleContext(Using_index_clauseContext.class,i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(plsqlParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(plsqlParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(plsqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(plsqlParser.DEFERRED, i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1316); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1316);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(1303);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1302);
							match(NOT);
							}
						}

						setState(1305);
						match(DEFERRABLE);
						}
						break;
					case INITIALY:
						{
						setState(1306);
						match(INITIALY);
						setState(1307);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case RELY:
						{
						setState(1308);
						match(RELY);
						}
						break;
					case NORELY:
						{
						setState(1309);
						match(NORELY);
						}
						break;
					case ENABLE:
						{
						setState(1310);
						match(ENABLE);
						}
						break;
					case DISABLE:
						{
						setState(1311);
						match(DISABLE);
						}
						break;
					case VALIDATE:
						{
						setState(1312);
						match(VALIDATE);
						}
						break;
					case NOVALIDATE:
						{
						setState(1313);
						match(NOVALIDATE);
						}
						break;
					case EXCEPTIONS:
						{
						setState(1314);
						exceptions_clause();
						}
						break;
					case USING:
						{
						setState(1315);
						using_index_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1318); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_index_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_index_clauseContext using_index_clause() throws RecognitionException {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_using_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1320);
			match(USING);
			setState(1321);
			match(INDEX);
			setState(1322);
			index_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_propertiesContext extends ParserRuleContext {
		public List<Index_attributesContext> index_attributes() {
			return getRuleContexts(Index_attributesContext.class);
		}
		public Index_attributesContext index_attributes(int i) {
			return getRuleContext(Index_attributesContext.class,i);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_propertiesContext index_properties() throws RecognitionException {
		Index_propertiesContext _localctx = new Index_propertiesContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_index_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1325); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1324);
				index_attributes();
				}
				}
				setState(1327); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMPRESS || _la==COMPUTE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LOGGING - 236)) | (1L << (MAXTRANS - 236)) | (1L << (NOCOMPRESS - 236)) | (1L << (NOLOGGING - 236)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_attributesContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> TABLESPACE() { return getTokens(plsqlParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(plsqlParser.TABLESPACE, i);
		}
		public List<Compute_statistics_clauseContext> compute_statistics_clause() {
			return getRuleContexts(Compute_statistics_clauseContext.class);
		}
		public Compute_statistics_clauseContext compute_statistics_clause(int i) {
			return getRuleContext(Compute_statistics_clauseContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(plsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(plsqlParser.DEFAULT, i);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_attributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_attributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_attributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_attributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_attributesContext index_attributes() throws RecognitionException {
		Index_attributesContext _localctx = new Index_attributesContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_index_attributes);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1337); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1337);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
					case 1:
						{
						setState(1329);
						physical_attributes_clause();
						}
						break;
					case 2:
						{
						setState(1330);
						logging_clause();
						}
						break;
					case 3:
						{
						setState(1331);
						match(TABLESPACE);
						setState(1334);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case A_LETTER:
						case ADD:
						case AFTER:
						case AGENT:
						case AGGREGATE:
						case ANALYZE:
						case ARRAY:
						case ASSOCIATE:
						case AT:
						case ATTRIBUTE:
						case AUDIT:
						case AUTHID:
						case AUTO:
						case AUTOMATIC:
						case AUTONOMOUS_TRANSACTION:
						case BATCH:
						case BEFORE:
						case BFILE:
						case BINARY_DOUBLE:
						case BINARY_FLOAT:
						case BINARY_INTEGER:
						case BLOB:
						case BLOCK:
						case BODY:
						case BOOLEAN:
						case BOTH:
						case BULK:
						case BYTE:
						case C_LETTER:
						case CALL:
						case CANONICAL:
						case CASCADE:
						case CAST:
						case CHAR:
						case CHAR_CS:
						case CHARACTER:
						case CHR:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COLLECT:
						case COLUMNS:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPATIBILITY:
						case COMPILE:
						case COMPOUND:
						case CONSTANT:
						case CONSTRAINT:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTENT:
						case CONTEXT:
						case CONTINUE:
						case CONVERT:
						case CORRUPT_XID:
						case CORRUPT_XID_ALL:
						case COST:
						case COUNT:
						case CROSS:
						case CUBE:
						case CURRENT_USER:
						case CURSOR:
						case CUSTOMDATUM:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DB_ROLE_CHANGE:
						case DBTIMEZONE:
						case DDL:
						case DEBUG:
						case DEC:
						case DECIMAL:
						case DECOMPOSE:
						case DECREMENT:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DETERMINISTIC:
						case DIMENSION:
						case DISABLE:
						case DISASSOCIATE:
						case DOCUMENT:
						case DOUBLE:
						case DSINTERVAL_UNCONSTRAINED:
						case EACH:
						case ELEMENT:
						case EMPTY:
						case ENABLE:
						case ENCODING:
						case ENTITYESCAPING:
						case ERRORS:
						case ESCAPE:
						case EVALNAME:
						case EXCEPTION_INIT:
						case EXCEPTIONS:
						case EXCLUDE:
						case EXECUTE:
						case EXIT:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FAILURE:
						case FINAL:
						case FIRST:
						case FIRST_VALUE:
						case FLOAT:
						case FOLLOWING:
						case FOLLOWS:
						case FORALL:
						case FORCE:
						case FULL:
						case FUNCTION:
						case GROUPING:
						case HASH:
						case HIDE:
						case HOUR:
						case IGNORE:
						case IMMEDIATE:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDENT:
						case INDEXED:
						case INDICATOR:
						case INDICES:
						case INFINITE:
						case INLINE:
						case INNER:
						case INOUT:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERVAL:
						case INVALIDATE:
						case ISOLATION:
						case ITERATE:
						case JAVA:
						case JOIN:
						case KEEP:
						case LANGUAGE:
						case LAST:
						case LAST_VALUE:
						case LEADING:
						case LEFT:
						case LENGTH:
						case LEVEL:
						case LIBRARY:
						case LIKE2:
						case LIKE4:
						case LIKEC:
						case LIMIT:
						case LOCAL:
						case LOCKED:
						case LOG:
						case LOGOFF:
						case LOGON:
						case LONG:
						case LOOP:
						case MAIN:
						case MAP:
						case MATCHED:
						case MAXVALUE:
						case MEASURES:
						case MEMBER:
						case MERGE:
						case MINUTE:
						case MINVALUE:
						case MLSLABEL:
						case MODEL:
						case MODIFY:
						case MONTH:
						case MULTISET:
						case NAME:
						case NAN:
						case NATURAL:
						case NATURALN:
						case NAV:
						case NCHAR:
						case NCHAR_CS:
						case NCLOB:
						case NESTED:
						case NEW:
						case NO:
						case NOAUDIT:
						case NOCOPY:
						case NOCYCLE:
						case NOENTITYESCAPING:
						case NONE:
						case NOSCHEMACHECK:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case NVARCHAR2:
						case OBJECT:
						case OFF:
						case OID:
						case OLD:
						case ONLY:
						case OPEN:
						case ORADATA:
						case ORDINALITY:
						case OSERROR:
						case OUT:
						case OUTER:
						case OVER:
						case OVERRIDING:
						case PACKAGE:
						case PARALLEL_ENABLE:
						case PARAMETERS:
						case PARENT:
						case PARTITION:
						case PASSING:
						case PATH:
						case PIPELINED:
						case PLAN:
						case PLS_INTEGER:
						case POSITIVE:
						case POSITIVEN:
						case PRAGMA:
						case PRECEDING:
						case PRECISION:
						case PRESENT:
						case RAISE:
						case RANGE:
						case RAW:
						case READ:
						case REAL:
						case RECORD:
						case REF:
						case REFERENCE:
						case REFERENCING:
						case REJECT:
						case RELIES_ON:
						case RENAME:
						case REPLACE:
						case RESPECT:
						case RESTRICT_REFERENCES:
						case RESULT:
						case RESULT_CACHE:
						case RETURN:
						case RETURNING:
						case REUSE:
						case REVERSE:
						case RIGHT:
						case ROLLBACK:
						case ROLLUP:
						case ROW:
						case ROWID:
						case ROWS:
						case RULES:
						case SAMPLE:
						case SAVE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMACHECK:
						case SCN:
						case SECOND:
						case SEED:
						case SEGMENT:
						case SELF:
						case SEQUENTIAL:
						case SERIALIZABLE:
						case SERIALLY_REUSABLE:
						case SERVERERROR:
						case SESSIONTIMEZONE:
						case SET:
						case SETS:
						case SETTINGS:
						case SHOW:
						case SHUTDOWN:
						case SIBLINGS:
						case SIGNTYPE:
						case SIMPLE_INTEGER:
						case SINGLE:
						case SKIP_:
						case SMALLINT:
						case SNAPSHOT:
						case SOME:
						case SPECIFICATION:
						case SQLDATA:
						case SQLERROR:
						case STANDALONE:
						case STARTUP:
						case STATEMENT:
						case STATEMENT_ID:
						case STATIC:
						case STATISTICS:
						case STRING:
						case SUBMULTISET:
						case SUBPARTITION:
						case SUBSTITUTABLE:
						case SUBTYPE:
						case SUCCESS:
						case SUSPEND:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMP_LTZ_UNCONSTRAINED:
						case TIMESTAMP_TZ_UNCONSTRAINED:
						case TIMESTAMP_UNCONSTRAINED:
						case TIMEZONE_ABBR:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TIMEZONE_REGION:
						case TRAILING:
						case TRANSACTION:
						case TRANSLATE:
						case TREAT:
						case TRIGGER:
						case TRIM:
						case TRUNCATE:
						case TYPE:
						case UNBOUNDED:
						case UNDER:
						case UNLIMITED:
						case UNTIL:
						case UPDATED:
						case UPSERT:
						case UROWID:
						case USE:
						case VALIDATE:
						case VALUE:
						case VARCHAR:
						case VARCHAR2:
						case VARIABLE:
						case VARRAY:
						case VARYING:
						case VERSION:
						case VERSIONS:
						case WAIT:
						case WARNING:
						case WELLFORMED:
						case WHENEVER:
						case WHILE:
						case WITHIN:
						case WORK:
						case WRITE:
						case XML:
						case XMLAGG:
						case XMLATTRIBUTES:
						case XMLCAST:
						case XMLCOLATTVAL:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLQUERY:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case YEAR:
						case YES:
						case YMINTERVAL_UNCONSTRAINED:
						case ZONE:
						case PREDICTION:
						case PREDICTION_BOUNDS:
						case PREDICTION_COST:
						case PREDICTION_DETAILS:
						case PREDICTION_PROBABILITY:
						case PREDICTION_SET:
						case CUME_DIST:
						case DENSE_RANK:
						case LISTAGG:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case RANK:
						case AVG:
						case CORR:
						case LAG:
						case LEAD:
						case MAX:
						case MEDIAN:
						case MIN:
						case NTILE:
						case RATIO_TO_REPORT:
						case ROW_NUMBER:
						case SUM:
						case VARIANCE:
						case REGR_:
						case STDDEV:
						case VAR_:
						case COVAR_:
						case DELIMITED_ID:
						case INTRODUCER:
						case REGULAR_ID:
							{
							setState(1332);
							id();
							}
							break;
						case DEFAULT:
							{
							setState(1333);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						setState(1336);
						compute_statistics_clause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1339); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compute_statistics_clauseContext extends ParserRuleContext {
		public TerminalNode COMPUTE() { return getToken(plsqlParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode SYSTEM() { return getToken(plsqlParser.SYSTEM, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Compute_statistics_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compute_statistics_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompute_statistics_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompute_statistics_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompute_statistics_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compute_statistics_clauseContext compute_statistics_clause() throws RecognitionException {
		Compute_statistics_clauseContext _localctx = new Compute_statistics_clauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_compute_statistics_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(COMPUTE);
			setState(1343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SYSTEM) {
				{
				setState(1342);
				match(SYSTEM);
				}
			}

			setState(1345);
			match(STATISTICS);
			setState(1347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1346);
				for_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(plsqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(plsqlParser.FOR, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(plsqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(plsqlParser.TABLE, i);
		}
		public List<TerminalNode> ALL() { return getTokens(plsqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(plsqlParser.ALL, i);
		}
		public List<TerminalNode> COLUMNS() { return getTokens(plsqlParser.COLUMNS); }
		public TerminalNode COLUMNS(int i) {
			return getToken(plsqlParser.COLUMNS, i);
		}
		public List<TerminalNode> INDEXES() { return getTokens(plsqlParser.INDEXES); }
		public TerminalNode INDEXES(int i) {
			return getToken(plsqlParser.INDEXES, i);
		}
		public List<TerminalNode> INDEXED() { return getTokens(plsqlParser.INDEXED); }
		public TerminalNode INDEXED(int i) {
			return getToken(plsqlParser.INDEXED, i);
		}
		public List<TerminalNode> SIZE() { return getTokens(plsqlParser.SIZE); }
		public TerminalNode SIZE(int i) {
			return getToken(plsqlParser.SIZE, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(plsqlParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(plsqlParser.LOCAL, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<Attribute_nameContext> attribute_name() {
			return getRuleContexts(Attribute_nameContext.class);
		}
		public Attribute_nameContext attribute_name(int i) {
			return getRuleContext(Attribute_nameContext.class,i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_for_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1384); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1349);
				match(FOR);
				setState(1382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					setState(1350);
					match(TABLE);
					}
					break;
				case 2:
					{
					setState(1351);
					match(ALL);
					setState(1353);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INDEXED) {
						{
						setState(1352);
						match(INDEXED);
						}
					}

					setState(1355);
					match(COLUMNS);
					setState(1358);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SIZE) {
						{
						setState(1356);
						match(SIZE);
						setState(1357);
						match(UNSIGNED_INTEGER);
						}
					}

					}
					break;
				case 3:
					{
					setState(1360);
					match(COLUMNS);
					setState(1363);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SIZE) {
						{
						setState(1361);
						match(SIZE);
						setState(1362);
						match(UNSIGNED_INTEGER);
						}
					}

					setState(1373); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1367);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
							case 1:
								{
								setState(1365);
								column_name();
								}
								break;
							case 2:
								{
								setState(1366);
								attribute_name();
								}
								break;
							}
							setState(1371);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==SIZE) {
								{
								setState(1369);
								match(SIZE);
								setState(1370);
								match(UNSIGNED_INTEGER);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1375); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 4:
					{
					setState(1377);
					match(ALL);
					setState(1379);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(1378);
						match(LOCAL);
						}
					}

					setState(1381);
					match(INDEXES);
					}
					break;
				}
				}
				}
				setState(1386); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exceptions_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptions_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExceptions_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExceptions_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExceptions_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exceptions_clauseContext exceptions_clause() throws RecognitionException {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_exceptions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1388);
			match(EXCEPTIONS);
			setState(1389);
			match(INTO);
			setState(1393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1390);
				schema_name();
				setState(1391);
				match(PERIOD);
				}
				break;
			}
			setState(1395);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(plsqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397);
			match(CREATE);
			setState(1400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1398);
				match(OR);
				setState(1399);
				match(REPLACE);
				}
			}

			setState(1406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==NO) {
				{
				setState(1403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1402);
					match(NO);
					}
				}

				setState(1405);
				match(FORCE);
				}
			}

			setState(1408);
			match(VIEW);
			setState(1412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				setState(1409);
				schema_name();
				setState(1410);
				match(PERIOD);
				}
				break;
			}
			setState(1414);
			tableview_name();
			setState(1415);
			match(LEFT_PAREN);
			setState(1416);
			id_expression();
			setState(1421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1417);
				match(COMMA);
				setState(1418);
				id_expression();
				}
				}
				setState(1423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1424);
			match(RIGHT_PAREN);
			setState(1425);
			match(AS);
			setState(1426);
			subquery();
			setState(1428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1427);
				subquery_restriction_clause();
				}
			}

			setState(1430);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Table_index_clauseContext table_index_clause() {
			return getRuleContext(Table_index_clauseContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1432);
			match(CREATE);
			setState(1434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1433);
				match(UNIQUE);
				}
			}

			setState(1436);
			match(INDEX);
			setState(1440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1437);
				schema_name();
				setState(1438);
				match(PERIOD);
				}
				break;
			}
			setState(1442);
			id_expression();
			setState(1443);
			match(ON);
			setState(1444);
			table_index_clause();
			setState(1445);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_index_clauseContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<Index_exprContext> index_expr() {
			return getRuleContexts(Index_exprContext.class);
		}
		public Index_exprContext index_expr(int i) {
			return getRuleContext(Index_exprContext.class,i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public Table_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_index_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_index_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_index_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_index_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_index_clauseContext table_index_clause() throws RecognitionException {
		Table_index_clauseContext _localctx = new Table_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_table_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1447);
				schema_name();
				setState(1448);
				match(PERIOD);
				}
				break;
			}
			setState(1452);
			tableview_name();
			setState(1453);
			match(LEFT_PAREN);
			setState(1454);
			index_expr();
			setState(1459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1455);
				match(COMMA);
				setState(1456);
				index_expr();
				}
				}
				setState(1461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1462);
			match(RIGHT_PAREN);
			setState(1464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==COMPUTE || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LOGGING - 236)) | (1L << (MAXTRANS - 236)) | (1L << (NOCOMPRESS - 236)) | (1L << (NOLOGGING - 236)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(1463);
				index_properties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_exprContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Index_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_exprContext index_expr() throws RecognitionException {
		Index_exprContext _localctx = new Index_exprContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_index_expr);
		try {
			setState(1468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470);
			match(DROP);
			setState(1471);
			match(FUNCTION);
			setState(1472);
			function_name();
			setState(1473);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1475);
			match(ALTER);
			setState(1476);
			match(FUNCTION);
			setState(1477);
			function_name();
			setState(1478);
			match(COMPILE);
			setState(1480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1479);
				match(DEBUG);
				}
				break;
			}
			setState(1485);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1482);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1487);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			}
			setState(1490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1488);
				match(REUSE);
				setState(1489);
				match(SETTINGS);
				}
			}

			setState(1492);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1494);
				match(CREATE);
				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1495);
					match(OR);
					setState(1496);
					match(REPLACE);
					}
				}

				}
			}

			setState(1501);
			match(FUNCTION);
			setState(1502);
			function_name();
			setState(1514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1503);
				match(LEFT_PAREN);
				setState(1504);
				parameter();
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1505);
					match(COMMA);
					setState(1506);
					parameter();
					}
					}
					setState(1511);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1512);
				match(RIGHT_PAREN);
				}
			}

			setState(1516);
			match(RETURN);
			setState(1517);
			type_spec();
			setState(1524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1522);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1518);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1519);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1520);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1521);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1526);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				{
				setState(1528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1527);
					match(PIPELINED);
					}
				}

				setState(1530);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1532);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1531);
						match(DECLARE);
						}
					}

					setState(1537);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
						{
						{
						setState(1534);
						declare_spec();
						}
						}
						setState(1539);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1540);
					body();
					}
					break;
				case 2:
					{
					setState(1541);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1544);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1545);
				match(USING);
				setState(1546);
				implementation_type_name();
				}
				break;
			}
			setState(1549);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1551);
			match(PARALLEL_ENABLE);
			setState(1553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1552);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			match(LEFT_PAREN);
			setState(1556);
			match(PARTITION);
			setState(1557);
			expression();
			setState(1558);
			match(BY);
			setState(1572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(1559);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(1560);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1561);
				match(LEFT_PAREN);
				setState(1562);
				column_name();
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1563);
					match(COMMA);
					setState(1564);
					column_name();
					}
					}
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1570);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(1574);
				streaming_clause();
				}
			}

			setState(1577);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1579);
			match(RESULT_CACHE);
			setState(1581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(1580);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			match(RELIES_ON);
			setState(1584);
			match(LEFT_PAREN);
			setState(1585);
			tableview_name();
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1586);
				match(COMMA);
				setState(1587);
				tableview_name();
				}
				}
				setState(1592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1593);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1596);
			expression();
			setState(1597);
			match(BY);
			setState(1598);
			match(LEFT_PAREN);
			setState(1599);
			column_name();
			setState(1604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1600);
				match(COMMA);
				setState(1601);
				column_name();
				}
				}
				setState(1606);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1607);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(DROP);
			setState(1610);
			match(PACKAGE);
			setState(1612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1611);
				match(BODY);
				}
				break;
			}
			setState(1614);
			package_name();
			setState(1615);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1617);
			match(ALTER);
			setState(1618);
			match(PACKAGE);
			setState(1619);
			package_name();
			setState(1620);
			match(COMPILE);
			setState(1622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(1621);
				match(DEBUG);
				}
				break;
			}
			setState(1625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1624);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1630);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1627);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			setState(1635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1633);
				match(REUSE);
				setState(1634);
				match(SETTINGS);
				}
			}

			setState(1637);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(CREATE);
			setState(1642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1640);
				match(OR);
				setState(1641);
				match(REPLACE);
				}
			}

			setState(1644);
			match(PACKAGE);
			setState(1647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1645);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1646);
				package_body();
				}
				break;
			}
			setState(1649);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1651);
			match(BODY);
			setState(1652);
			package_name();
			setState(1653);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1654);
				package_obj_body();
				}
				}
				setState(1659);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1660);
				match(BEGIN);
				setState(1661);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1662);
				match(END);
				setState(1664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					setState(1663);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			package_name();
			setState(1670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1669);
				invoker_rights_clause();
				}
			}

			setState(1672);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1673);
				package_obj_spec();
				}
				}
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1679);
			match(END);
			setState(1681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1680);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_package_obj_spec);
		try {
			setState(1691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1683);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1684);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1685);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1686);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1687);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1688);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1689);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1690);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1693);
			match(PROCEDURE);
			setState(1694);
			procedure_name();
			setState(1706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1695);
				match(LEFT_PAREN);
				setState(1696);
				parameter();
				setState(1701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1697);
					match(COMMA);
					setState(1698);
					parameter();
					}
					}
					setState(1703);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1704);
				match(RIGHT_PAREN);
				}
			}

			setState(1708);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			match(FUNCTION);
			setState(1711);
			function_name();
			setState(1723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1712);
				match(LEFT_PAREN);
				setState(1713);
				parameter();
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1714);
					match(COMMA);
					setState(1715);
					parameter();
					}
					}
					setState(1720);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1721);
				match(RIGHT_PAREN);
				}
			}

			setState(1725);
			match(RETURN);
			setState(1726);
			type_spec();
			setState(1727);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_package_obj_body);
		try {
			setState(1739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1729);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1730);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1731);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1732);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1733);
				record_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1734);
				table_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1735);
				create_procedure_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1736);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1737);
				procedure_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1738);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1741);
			match(DROP);
			setState(1742);
			match(PROCEDURE);
			setState(1743);
			procedure_name();
			setState(1744);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1746);
			match(ALTER);
			setState(1747);
			match(PROCEDURE);
			setState(1748);
			procedure_name();
			setState(1749);
			match(COMPILE);
			setState(1751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(1750);
				match(DEBUG);
				}
				break;
			}
			setState(1756);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1753);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1758);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,146,_ctx);
			}
			setState(1761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1759);
				match(REUSE);
				setState(1760);
				match(SETTINGS);
				}
			}

			setState(1763);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1765);
				match(CREATE);
				setState(1768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1766);
					match(OR);
					setState(1767);
					match(REPLACE);
					}
				}

				}
			}

			setState(1772);
			match(PROCEDURE);
			setState(1773);
			procedure_name();
			setState(1785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1774);
				match(LEFT_PAREN);
				setState(1775);
				parameter();
				setState(1780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1776);
					match(COMMA);
					setState(1777);
					parameter();
					}
					}
					setState(1782);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1783);
				match(RIGHT_PAREN);
				}
			}

			setState(1788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1787);
				invoker_rights_clause();
				}
			}

			setState(1790);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(1792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1791);
					match(DECLARE);
					}
				}

				setState(1797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1794);
					declare_spec();
					}
					}
					setState(1799);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1800);
				body();
				}
				break;
			case 2:
				{
				setState(1801);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1802);
				match(EXTERNAL);
				}
				break;
			}
			setState(1805);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1807);
			match(DROP);
			setState(1808);
			match(TRIGGER);
			setState(1809);
			trigger_name();
			setState(1810);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1812);
			match(ALTER);
			setState(1813);
			match(TRIGGER);
			setState(1814);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1815);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1816);
				match(RENAME);
				setState(1817);
				match(TO);
				setState(1818);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1819);
				match(COMPILE);
				setState(1821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(1820);
					match(DEBUG);
					}
					break;
				}
				setState(1826);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,157,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1823);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1828);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,157,_ctx);
				}
				setState(1831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1829);
					match(REUSE);
					setState(1830);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1835);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(plsqlParser.SEMICOLON, 0); }
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1837);
			match(CREATE);
			setState(1840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1838);
				match(OR);
				setState(1839);
				match(REPLACE);
				}
			}

			setState(1842);
			match(TRIGGER);
			setState(1843);
			trigger_name();
			setState(1847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1844);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1845);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1846);
				non_dml_trigger();
				}
				break;
			}
			setState(1850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(1849);
				trigger_follows_clause();
				}
				break;
			}
			setState(1853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1852);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1855);
				trigger_when_clause();
				}
			}

			setState(1858);
			trigger_body();
			setState(1859);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1861);
			match(FOLLOWS);
			setState(1862);
			trigger_name();
			setState(1867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1863);
				match(COMMA);
				setState(1864);
				trigger_name();
				}
				}
				setState(1869);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			match(WHEN);
			setState(1871);
			match(LEFT_PAREN);
			setState(1872);
			condition();
			setState(1873);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1875);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1876);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1877);
				match(INSTEAD);
				setState(1878);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1881);
			dml_event_clause();
			setState(1883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(1882);
				referencing_clause();
				}
				break;
			}
			setState(1886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1885);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1888);
			match(FOR);
			setState(1889);
			match(EACH);
			setState(1890);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			match(FOR);
			setState(1893);
			dml_event_clause();
			setState(1895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1894);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1898);
			non_dml_event();
			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1899);
				match(OR);
				setState(1900);
				non_dml_event();
				}
				}
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1906);
			match(ON);
			setState(1914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1907);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
				case 1:
					{
					setState(1908);
					schema_name();
					setState(1909);
					match(PERIOD);
					}
					break;
				}
				setState(1913);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_trigger_body);
		try {
			setState(1921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1916);
				match(COMPOUND);
				setState(1917);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1918);
				match(CALL);
				setState(1919);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1920);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923);
			routine_name();
			setState(1925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1924);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1927);
			match(COMPOUND);
			setState(1928);
			match(TRIGGER);
			setState(1932);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1929);
					declare_spec();
					}
					} 
				}
				setState(1934);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,175,_ctx);
			}
			setState(1936); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1935);
				timing_point_section();
				}
				}
				setState(1938); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1940);
			match(END);
			setState(1941);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_timing_point_section);
		try {
			setState(1979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1943);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1944);
				match(STATEMENT);
				setState(1945);
				match(IS);
				setState(1946);
				trigger_block();
				setState(1947);
				match(BEFORE);
				setState(1948);
				match(STATEMENT);
				setState(1949);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1951);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1952);
				match(EACH);
				setState(1953);
				match(ROW);
				setState(1954);
				match(IS);
				setState(1955);
				trigger_block();
				setState(1956);
				match(BEFORE);
				setState(1957);
				match(EACH);
				setState(1958);
				match(ROW);
				setState(1959);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1961);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1962);
				match(STATEMENT);
				setState(1963);
				match(IS);
				setState(1964);
				trigger_block();
				setState(1965);
				match(AFTER);
				setState(1966);
				match(STATEMENT);
				setState(1967);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1969);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1970);
				match(EACH);
				setState(1971);
				match(ROW);
				setState(1972);
				match(IS);
				setState(1973);
				trigger_block();
				setState(1974);
				match(AFTER);
				setState(1975);
				match(EACH);
				setState(1976);
				match(ROW);
				setState(1977);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_non_dml_event);
		try {
			setState(2007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1981);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1982);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1983);
				match(ASSOCIATE);
				setState(1984);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1985);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1986);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1987);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1988);
				match(DISASSOCIATE);
				setState(1989);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1990);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1991);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1992);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1993);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1994);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1995);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1996);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1997);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1998);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1999);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(2000);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(2001);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(2002);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(2003);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(2004);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(2005);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(2006);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2009);
			dml_event_element();
			setState(2014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2010);
				match(OR);
				setState(2011);
				dml_event_element();
				}
				}
				setState(2016);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2017);
			match(ON);
			setState(2019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2018);
				dml_event_nested_clause();
				}
				break;
			}
			setState(2021);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(2024);
				match(OF);
				setState(2025);
				column_name();
				setState(2030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2026);
					match(COMMA);
					setState(2027);
					column_name();
					}
					}
					setState(2032);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(NESTED);
			setState(2036);
			match(TABLE);
			setState(2037);
			tableview_name();
			setState(2038);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2040);
			match(REFERENCING);
			setState(2042); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2041);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2044); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2046);
			_la = _input.LA(1);
			if ( !(((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (NEW - 271)) | (1L << (OLD - 271)) | (1L << (PARENT - 271)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2047);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2049);
			match(DROP);
			setState(2050);
			match(TYPE);
			setState(2052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(2051);
				match(BODY);
				}
				break;
			}
			setState(2054);
			type_name();
			setState(2056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(2055);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2058);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(ALTER);
			setState(2061);
			match(TYPE);
			setState(2062);
			type_name();
			setState(2068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(2063);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(2064);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(2065);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(2066);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(2067);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(2070);
				dependent_handling_clause();
				}
			}

			setState(2073);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(COMPILE);
			setState(2077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2076);
				match(DEBUG);
				}
				break;
			}
			setState(2080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				setState(2079);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2085);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2082);
					compiler_parameters_clause();
					}
					} 
				}
				setState(2087);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			setState(2090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(2088);
				match(REUSE);
				setState(2089);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2092);
			match(REPLACE);
			setState(2094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(2093);
				invoker_rights_clause();
				}
			}

			setState(2096);
			match(AS);
			setState(2097);
			match(OBJECT);
			setState(2098);
			match(LEFT_PAREN);
			setState(2099);
			object_member_spec();
			setState(2104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2100);
				match(COMMA);
				setState(2101);
				object_member_spec();
				}
				}
				setState(2106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2107);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			alter_method_element();
			setState(2114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2110);
				match(COMMA);
				setState(2111);
				alter_method_element();
				}
				}
				setState(2116);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2117);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(2118);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(2119);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2122);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2123);
			match(ATTRIBUTE);
			setState(2136);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2124);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2125);
				match(LEFT_PAREN);
				setState(2126);
				attribute_definition();
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2127);
					match(COMMA);
					setState(2128);
					attribute_definition();
					}
					}
					setState(2133);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2134);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2138);
			attribute_name();
			setState(2140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2139);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			match(MODIFY);
			setState(2148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(2143);
				match(LIMIT);
				setState(2144);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(2145);
				match(ELEMENT);
				setState(2146);
				match(TYPE);
				setState(2147);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(2166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2150);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2151);
				match(CASCADE);
				setState(2161);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(2152);
					match(CONVERT);
					setState(2153);
					match(TO);
					setState(2154);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(2156);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(2155);
						match(NOT);
						}
					}

					setState(2158);
					match(INCLUDING);
					setState(2159);
					match(TABLE);
					setState(2160);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(2164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(2163);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(2168);
				match(FORCE);
				}
			}

			setState(2171);
			match(EXCEPTIONS);
			setState(2172);
			match(INTO);
			setState(2173);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			match(CREATE);
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2176);
				match(OR);
				setState(2177);
				match(REPLACE);
				}
			}

			setState(2180);
			match(TYPE);
			setState(2183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2181);
				type_definition();
				}
				break;
			case 2:
				{
				setState(2182);
				type_body();
				}
				break;
			}
			setState(2185);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			type_name();
			setState(2190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(2188);
				match(OID);
				setState(2189);
				match(CHAR_STRING);
				}
			}

			setState(2193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(2192);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(2195);
				invoker_rights_clause();
				}
			}

			setState(2200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2198);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(2199);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(2202);
				sqlj_object_type();
				}
			}

			setState(2216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2205);
				match(LEFT_PAREN);
				setState(2206);
				object_member_spec();
				setState(2211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2207);
					match(COMMA);
					setState(2208);
					object_member_spec();
					}
					}
					setState(2213);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2214);
				match(RIGHT_PAREN);
				}
			}

			setState(2221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(2218);
				modifier_clause();
				}
				}
				setState(2223);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(2225);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2226);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(2227);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2230);
			match(UNDER);
			setState(2231);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(TABLE);
			setState(2234);
			match(OF);
			setState(2235);
			type_spec();
			setState(2238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2236);
				match(NOT);
				setState(2237);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2240);
			match(EXTERNAL);
			setState(2241);
			match(NAME);
			setState(2242);
			expression();
			setState(2243);
			match(LANGUAGE);
			setState(2244);
			match(JAVA);
			setState(2245);
			match(USING);
			setState(2246);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2248);
			match(BODY);
			setState(2249);
			type_name();
			setState(2250);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2251);
			type_body_elements();
			setState(2256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2252);
				match(COMMA);
				setState(2253);
				type_body_elements();
				}
				}
				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2259);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_type_body_elements);
		try {
			setState(2263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2261);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2262);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2266);
			match(MEMBER);
			setState(2267);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2269);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2273);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2270);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(2271);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(2272);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			match(PROCEDURE);
			setState(2276);
			procedure_name();
			setState(2277);
			match(LEFT_PAREN);
			setState(2278);
			type_elements_parameter();
			setState(2283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2279);
				match(COMMA);
				setState(2280);
				type_elements_parameter();
				}
				}
				setState(2285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2286);
			match(RIGHT_PAREN);
			setState(2287);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				setState(2288);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2289);
					match(DECLARE);
					}
				}

				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2292);
					declare_spec();
					}
					}
					setState(2297);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2298);
				body();
				setState(2299);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			match(FUNCTION);
			setState(2304);
			function_name();
			setState(2316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2305);
				match(LEFT_PAREN);
				setState(2306);
				type_elements_parameter();
				setState(2311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2307);
					match(COMMA);
					setState(2308);
					type_elements_parameter();
					}
					}
					setState(2313);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2314);
				match(RIGHT_PAREN);
				}
			}

			setState(2318);
			match(RETURN);
			setState(2319);
			type_spec();
			setState(2320);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2321);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2322);
					match(DECLARE);
					}
				}

				setState(2328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2325);
					declare_spec();
					}
					}
					setState(2330);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2331);
				body();
				setState(2332);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2336);
				match(FINAL);
				}
			}

			setState(2340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2339);
				match(INSTANTIABLE);
				}
			}

			setState(2342);
			match(CONSTRUCTOR);
			setState(2343);
			match(FUNCTION);
			setState(2344);
			type_spec();
			setState(2362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2345);
				match(LEFT_PAREN);
				{
				setState(2346);
				match(SELF);
				setState(2347);
				match(IN);
				setState(2348);
				match(OUT);
				setState(2349);
				type_spec();
				setState(2350);
				match(COMMA);
				}
				setState(2352);
				type_elements_parameter();
				setState(2357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2353);
					match(COMMA);
					setState(2354);
					type_elements_parameter();
					}
					}
					setState(2359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2360);
				match(RIGHT_PAREN);
				}
			}

			setState(2364);
			match(RETURN);
			setState(2365);
			match(SELF);
			setState(2366);
			match(AS);
			setState(2367);
			match(RESULT);
			setState(2368);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2369);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2370);
					match(DECLARE);
					}
				}

				setState(2376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(2373);
					declare_spec();
					}
					}
					setState(2378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2379);
				body();
				setState(2380);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2384);
				match(NOT);
				}
			}

			setState(2387);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_object_member_spec);
		int _la;
		try {
			setState(2395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2389);
				id();
				setState(2390);
				type_spec();
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2391);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2394);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(EXTERNAL);
			setState(2398);
			match(NAME);
			setState(2399);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2401);
				modifier_clause();
				}
				break;
			}
			setState(2405); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2404);
				element_spec_options();
				}
				}
				setState(2407); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(2411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2409);
				match(COMMA);
				setState(2410);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_element_spec_options);
		try {
			setState(2416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2413);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2414);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2415);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2419);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(2420);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2423);
			match(PROCEDURE);
			setState(2424);
			procedure_name();
			setState(2425);
			match(LEFT_PAREN);
			setState(2426);
			type_elements_parameter();
			setState(2431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2427);
				match(COMMA);
				setState(2428);
				type_elements_parameter();
				}
				}
				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2434);
			match(RIGHT_PAREN);
			setState(2437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2435);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2436);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2439);
			match(FUNCTION);
			setState(2440);
			function_name();
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2441);
				match(LEFT_PAREN);
				setState(2442);
				type_elements_parameter();
				setState(2447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2443);
					match(COMMA);
					setState(2444);
					type_elements_parameter();
					}
					}
					setState(2449);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2450);
				match(RIGHT_PAREN);
				}
			}

			setState(2454);
			match(RETURN);
			setState(2459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(2455);
				type_spec();
				}
				break;
			case 2:
				{
				setState(2456);
				match(SELF);
				setState(2457);
				match(AS);
				setState(2458);
				match(RESULT);
				}
				break;
			}
			setState(2469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2461);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2462);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2463);
				match(EXTERNAL);
				setState(2465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2464);
					match(VARIABLE);
					}
				}

				setState(2467);
				match(NAME);
				setState(2468);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2471);
				match(FINAL);
				}
			}

			setState(2475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2474);
				match(INSTANTIABLE);
				}
			}

			setState(2477);
			match(CONSTRUCTOR);
			setState(2478);
			match(FUNCTION);
			setState(2479);
			type_spec();
			setState(2497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2480);
				match(LEFT_PAREN);
				{
				setState(2481);
				match(SELF);
				setState(2482);
				match(IN);
				setState(2483);
				match(OUT);
				setState(2484);
				type_spec();
				setState(2485);
				match(COMMA);
				}
				setState(2487);
				type_elements_parameter();
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2488);
					match(COMMA);
					setState(2489);
					type_elements_parameter();
					}
					}
					setState(2494);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2495);
				match(RIGHT_PAREN);
				}
			}

			setState(2499);
			match(RETURN);
			setState(2500);
			match(SELF);
			setState(2501);
			match(AS);
			setState(2502);
			match(RESULT);
			setState(2505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2503);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2504);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2507);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2508);
			match(MEMBER);
			setState(2509);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			match(PRAGMA);
			setState(2512);
			match(RESTRICT_REFERENCES);
			setState(2513);
			match(LEFT_PAREN);
			setState(2514);
			pragma_elements();
			setState(2519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2515);
				match(COMMA);
				setState(2516);
				pragma_elements();
				}
				}
				setState(2521);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2522);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_pragma_elements);
		try {
			setState(2526);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2524);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2525);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2528);
			parameter_name();
			setState(2529);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531);
			match(DROP);
			setState(2532);
			match(SEQUENCE);
			setState(2533);
			sequence_name();
			setState(2534);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2536);
			match(ALTER);
			setState(2537);
			match(SEQUENCE);
			setState(2538);
			sequence_name();
			setState(2540); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2539);
				sequence_spec();
				}
				}
				setState(2542); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (MINVALUE - 255)) | (1L << (NOCACHE - 255)) | (1L << (NOCYCLE - 255)) | (1L << (NOMAXVALUE - 255)) | (1L << (NOMINVALUE - 255)) | (1L << (NOORDER - 255)) | (1L << (ORDER - 255)))) != 0) );
			setState(2544);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			match(CREATE);
			setState(2547);
			match(SEQUENCE);
			setState(2548);
			sequence_name();
			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || _la==MAXVALUE || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (MINVALUE - 255)) | (1L << (NOCACHE - 255)) | (1L << (NOCYCLE - 255)) | (1L << (NOMAXVALUE - 255)) | (1L << (NOMINVALUE - 255)) | (1L << (NOORDER - 255)) | (1L << (ORDER - 255)))) != 0) || _la==START) {
				{
				setState(2551);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2549);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2550);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2556);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_sequence_spec);
		try {
			setState(2574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2558);
				match(INCREMENT);
				setState(2559);
				match(BY);
				setState(2560);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2561);
				match(MAXVALUE);
				setState(2562);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2563);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2564);
				match(MINVALUE);
				setState(2565);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2566);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2567);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2568);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2569);
				match(CACHE);
				setState(2570);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2571);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2572);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2573);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			match(START);
			setState(2577);
			match(WITH);
			setState(2578);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580);
			match(AUTHID);
			setState(2581);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			id();
			setState(2584);
			match(EQUALS_OP);
			setState(2585);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2587);
			match(LANGUAGE);
			setState(2590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2588);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2589);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(JAVA);
			setState(2593);
			match(NAME);
			setState(2594);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			match(C_LETTER);
			setState(2599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2597);
				match(NAME);
				setState(2598);
				match(CHAR_STRING);
				}
			}

			setState(2601);
			match(LIBRARY);
			setState(2602);
			id();
			setState(2604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2603);
				c_agent_in_clause();
				}
			}

			setState(2608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2606);
				match(WITH);
				setState(2607);
				match(CONTEXT);
				}
			}

			setState(2611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2610);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			match(AGENT);
			setState(2614);
			match(IN);
			setState(2615);
			match(LEFT_PAREN);
			setState(2616);
			expression();
			setState(2621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2617);
				match(COMMA);
				setState(2618);
				expression();
				}
				}
				setState(2623);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2624);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2626);
			match(PARAMETERS);
			setState(2627);
			match(LEFT_PAREN);
			setState(2639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2628);
				expression();
				setState(2633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2629);
					match(COMMA);
					setState(2630);
					expression();
					}
					}
					setState(2635);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2636);
				match(PERIOD);
				setState(2637);
				match(PERIOD);
				setState(2638);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2641);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			parameter_name();
			setState(2647);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2644);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(2649);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
			}
			setState(2651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2650);
				type_spec();
				}
			}

			setState(2654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2653);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2657);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_declare_spec);
		try {
			setState(2668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2659);
				pragma_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2660);
				variable_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2661);
				subtype_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2662);
				cursor_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2663);
				exception_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2664);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2665);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2666);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2667);
				create_function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			variable_name();
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2671);
				match(CONSTANT);
				}
				break;
			}
			setState(2674);
			type_spec();
			setState(2677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2675);
				match(NOT);
				setState(2676);
				match(NULL);
				}
			}

			setState(2680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2679);
				default_value_part();
				}
			}

			setState(2682);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(SUBTYPE);
			setState(2685);
			type_name();
			setState(2686);
			match(IS);
			setState(2687);
			type_spec();
			setState(2693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2688);
				match(RANGE);
				setState(2689);
				expression();
				setState(2690);
				match(T__0);
				setState(2691);
				expression();
				}
			}

			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2695);
				match(NOT);
				setState(2696);
				match(NULL);
				}
			}

			setState(2699);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			match(CURSOR);
			setState(2702);
			cursor_name();
			setState(2714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2703);
				match(LEFT_PAREN);
				setState(2704);
				parameter_spec();
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2705);
					match(COMMA);
					setState(2706);
					parameter_spec();
					}
					}
					setState(2711);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2712);
				match(RIGHT_PAREN);
				}
			}

			setState(2718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2716);
				match(RETURN);
				setState(2717);
				type_spec();
				}
			}

			setState(2722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2720);
				match(IS);
				setState(2721);
				select_statement();
				}
			}

			setState(2724);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			parameter_name();
			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (IN - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2727);
					match(IN);
					}
				}

				setState(2730);
				type_spec();
				}
			}

			setState(2734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2733);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			exception_name();
			setState(2737);
			match(EXCEPTION);
			setState(2738);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2740);
			match(PRAGMA);
			setState(2771);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2741);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2742);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2743);
				match(EXCEPTION_INIT);
				setState(2744);
				match(LEFT_PAREN);
				setState(2745);
				exception_name();
				setState(2746);
				match(COMMA);
				setState(2747);
				numeric_negative();
				setState(2748);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2750);
				match(INLINE);
				setState(2751);
				match(LEFT_PAREN);
				setState(2752);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2753);
				match(COMMA);
				setState(2754);
				expression();
				setState(2755);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2757);
				match(RESTRICT_REFERENCES);
				setState(2758);
				match(LEFT_PAREN);
				setState(2761);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2759);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2760);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2765); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2763);
					match(COMMA);
					setState(2764);
					id();
					}
					}
					setState(2767); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2769);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2773);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_record_declaration);
		try {
			setState(2777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2775);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2776);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			match(TYPE);
			setState(2780);
			type_name();
			setState(2781);
			match(IS);
			setState(2800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2782);
				match(RECORD);
				setState(2783);
				match(LEFT_PAREN);
				setState(2784);
				field_spec();
				setState(2789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2785);
					match(COMMA);
					setState(2786);
					field_spec();
					}
					}
					setState(2791);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2792);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2794);
				match(REF);
				setState(2795);
				match(CURSOR);
				setState(2798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2796);
					match(RETURN);
					setState(2797);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2802);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			column_name();
			setState(2806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2805);
				type_spec();
				}
			}

			setState(2810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2808);
				match(NOT);
				setState(2809);
				match(NULL);
				}
			}

			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2812);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2815);
			record_name();
			setState(2816);
			type_name();
			setState(2817);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2818);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2820);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2821);
				table_var_dec();
				}
				break;
			}
			setState(2824);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2826);
			match(TYPE);
			setState(2827);
			type_name();
			setState(2828);
			match(IS);
			setState(2840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2829);
				match(TABLE);
				setState(2830);
				match(OF);
				setState(2831);
				type_spec();
				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2832);
					table_indexed_by_part();
					}
				}

				setState(2837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2835);
					match(NOT);
					setState(2836);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2839);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2842);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2843);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2846);
			match(BY);
			setState(2847);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2852);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2849);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2850);
				match(VARYING);
				setState(2851);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2854);
			match(LEFT_PAREN);
			setState(2855);
			expression();
			setState(2856);
			match(RIGHT_PAREN);
			setState(2857);
			match(OF);
			setState(2858);
			type_spec();
			setState(2861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2859);
				match(NOT);
				setState(2860);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			table_var_name();
			setState(2864);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2870); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2870);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROCEDURE:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2866);
					statement();
					setState(2867);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2869);
					label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2872); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FETCH - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FOR - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GOTO - 130)) | (1L << (GRANT - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IF - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSERT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCK - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULL - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELECT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATE - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITH - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (LEFT_PAREN - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (LESS_THAN_OP - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2875);
			match(LESS_THAN_OP);
			setState(2876);
			label_name();
			setState(2877);
			match(GREATER_THAN_OP);
			setState(2878);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_statement);
		try {
			setState(2903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2880);
				match(CREATE);
				setState(2881);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2882);
				match(ALTER);
				setState(2883);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2884);
				match(GRANT);
				setState(2885);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2886);
				match(TRUNCATE);
				setState(2887);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2888);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2889);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2890);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2891);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2892);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2893);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2894);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2895);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2896);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2897);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2898);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2899);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2900);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2901);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2902);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2905);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2906);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2909);
			match(ASSIGN_OP);
			setState(2910);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2912);
			match(CONTINUE);
			setState(2914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2913);
				label_name();
				}
			}

			setState(2918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2916);
				match(WHEN);
				setState(2917);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2920);
			match(EXIT);
			setState(2922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2921);
				label_name();
				}
			}

			setState(2926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2924);
				match(WHEN);
				setState(2925);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			match(GOTO);
			setState(2929);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2931);
			match(IF);
			setState(2932);
			condition();
			setState(2933);
			match(THEN);
			setState(2934);
			seq_of_statements();
			setState(2938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2935);
				elsif_part();
				}
				}
				setState(2940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2941);
				else_part();
				}
			}

			setState(2944);
			match(END);
			setState(2945);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			match(ELSIF);
			setState(2948);
			condition();
			setState(2949);
			match(THEN);
			setState(2950);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2952);
			match(ELSE);
			setState(2953);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2955);
				label_name();
				}
				break;
			}
			setState(2962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2958);
				match(WHILE);
				setState(2959);
				condition();
				}
				break;
			case FOR:
				{
				setState(2960);
				match(FOR);
				setState(2961);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2964);
			match(LOOP);
			setState(2965);
			seq_of_statements();
			setState(2966);
			match(END);
			setState(2967);
			match(LOOP);
			setState(2969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2968);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2971);
				index_name();
				setState(2972);
				match(IN);
				setState(2974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2973);
					match(REVERSE);
					}
					break;
				}
				setState(2976);
				lower_bound();
				setState(2977);
				match(T__0);
				setState(2978);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2980);
				record_name();
				setState(2981);
				match(IN);
				setState(2990);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2982);
					cursor_name();
					setState(2984);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2983);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2986);
					match(LEFT_PAREN);
					setState(2987);
					select_statement();
					setState(2988);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994);
			match(FORALL);
			setState(2995);
			index_name();
			setState(2996);
			match(IN);
			setState(2997);
			bounds_clause();
			setState(2998);
			sql_statement();
			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2999);
				match(SAVE);
				setState(3000);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_bounds_clause);
		int _la;
		try {
			setState(3016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3003);
				lower_bound();
				setState(3004);
				match(T__0);
				setState(3005);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3007);
				match(INDICES);
				setState(3008);
				match(OF);
				setState(3009);
				collection_name();
				setState(3011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(3010);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3013);
				match(VALUES);
				setState(3014);
				match(OF);
				setState(3015);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			match(BETWEEN);
			setState(3019);
			lower_bound();
			setState(3020);
			match(AND);
			setState(3021);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3027);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3029);
			match(RAISE);
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3030);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3033);
			match(RETURN);
			setState(3035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NOT - 261)) | (1L << (NULL - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PRIOR - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUE - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (UNSIGNED_INTEGER - 520)) | (1L << (APPROXIMATE_NUM_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (LEFT_PAREN - 520)) | (1L << (PLUS_SIGN - 520)) | (1L << (MINUS_SIGN - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3034);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(3037);
				match(CALL);
				}
				break;
			}
			setState(3040);
			routine_name();
			setState(3042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3041);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(BEGIN);
			setState(3045);
			seq_of_statements();
			setState(3047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(3046);
				exception_clause();
				}
			}

			setState(3049);
			match(END);
			setState(3051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(3050);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3053);
			match(EXCEPTION);
			setState(3055); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3054);
				exception_handler();
				}
				}
				setState(3057); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3059);
			match(WHEN);
			setState(3060);
			exception_name();
			setState(3065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3061);
				match(OR);
				setState(3062);
				exception_name();
				}
				}
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3068);
			match(THEN);
			setState(3069);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(3071);
					match(DECLARE);
					}
				}

				setState(3075); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3074);
					declare_spec();
					}
					}
					setState(3077); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID );
				}
			}

			setState(3081);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(3083);
				match(DECLARE);
				}
			}

			setState(3087); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3086);
				declare_spec();
				}
				}
				setState(3089); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PROCEDURE - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID );
			setState(3091);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_sql_statement);
		try {
			setState(3097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3093);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3094);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3095);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3096);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099);
			match(EXECUTE);
			setState(3100);
			match(IMMEDIATE);
			setState(3101);
			expression();
			setState(3111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(3102);
				into_clause();
				setState(3104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3103);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(3106);
				using_clause();
				setState(3108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3107);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(3110);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3113);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3114);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_data_manipulation_language_statements);
		try {
			setState(3123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3116);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3117);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3118);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3119);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3120);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3121);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(3122);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_cursor_manipulation_statements);
		try {
			setState(3129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3125);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3126);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3127);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3128);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3131);
			match(CLOSE);
			setState(3132);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			match(OPEN);
			setState(3135);
			cursor_name();
			setState(3137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3136);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139);
			match(FETCH);
			setState(3140);
			cursor_name();
			setState(3161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3141);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(3142);
				variable_name();
				setState(3147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3143);
					match(COMMA);
					setState(3144);
					variable_name();
					}
					}
					setState(3149);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(3150);
				match(BULK);
				setState(3151);
				match(COLLECT);
				setState(3152);
				match(INTO);
				setState(3153);
				variable_name();
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3154);
					match(COMMA);
					setState(3155);
					variable_name();
					}
					}
					setState(3160);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3163);
			match(OPEN);
			setState(3164);
			variable_name();
			setState(3165);
			match(FOR);
			setState(3168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3166);
				select_statement();
				}
				break;
			case 2:
				{
				setState(3167);
				expression();
				}
				break;
			}
			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3170);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_transaction_control_statements);
		try {
			setState(3178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3173);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3174);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3175);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3176);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3177);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			match(SET);
			setState(3181);
			match(TRANSACTION);
			setState(3195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3182);
				match(READ);
				setState(3183);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(3184);
				match(ISOLATION);
				setState(3185);
				match(LEVEL);
				setState(3189);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(3186);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(3187);
					match(READ);
					setState(3188);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(3191);
				match(USE);
				setState(3192);
				match(ROLLBACK);
				setState(3193);
				match(SEGMENT);
				setState(3194);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(3197);
				match(NAME);
				setState(3198);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			match(SET);
			setState(3202);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(3203);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3204);
				constraint_name();
				setState(3209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3205);
					match(COMMA);
					setState(3206);
					constraint_name();
					}
					}
					setState(3211);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3214);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3216);
			match(COMMIT);
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3217);
				match(WORK);
				}
			}

			setState(3233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(3220);
				match(COMMENT);
				setState(3221);
				expression();
				}
				break;
			case FORCE:
				{
				setState(3222);
				match(FORCE);
				setState(3231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(3223);
					match(CORRUPT_XID);
					setState(3224);
					expression();
					}
					break;
				case 2:
					{
					setState(3225);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(3226);
					expression();
					setState(3229);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3227);
						match(COMMA);
						setState(3228);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(3236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(3235);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			match(WRITE);
			setState(3240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3239);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(3242);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3245);
			match(ROLLBACK);
			setState(3247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3246);
				match(WORK);
				}
			}

			setState(3256);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3249);
				match(TO);
				setState(3251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3250);
					match(SAVEPOINT);
					}
					break;
				}
				setState(3253);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(3254);
				match(FORCE);
				setState(3255);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			match(SAVEPOINT);
			setState(3259);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3261);
			match(EXPLAIN);
			setState(3262);
			match(PLAN);
			setState(3267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3263);
				match(SET);
				setState(3264);
				match(STATEMENT_ID);
				setState(3265);
				match(EQUALS_OP);
				setState(3266);
				quoted_string();
				}
			}

			setState(3271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3269);
				match(INTO);
				setState(3270);
				tableview_name();
				}
			}

			setState(3273);
			match(FOR);
			setState(3279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3274);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(3275);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(3276);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(3277);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(3278);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3281);
				subquery_factoring_clause();
				}
			}

			setState(3284);
			subquery();
			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(3287);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3285);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(3286);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3291);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			match(WITH);
			setState(3293);
			factoring_element();
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3294);
				match(COMMA);
				setState(3295);
				factoring_element();
				}
				}
				setState(3300);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3301);
			query_name();
			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3302);
				match(LEFT_PAREN);
				setState(3303);
				column_name();
				setState(3308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3304);
					match(COMMA);
					setState(3305);
					column_name();
					}
					}
					setState(3310);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3311);
				match(RIGHT_PAREN);
				}
			}

			setState(3315);
			match(AS);
			setState(3316);
			match(LEFT_PAREN);
			setState(3317);
			subquery();
			setState(3319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3318);
				order_by_clause();
				}
			}

			setState(3321);
			match(RIGHT_PAREN);
			setState(3323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(3322);
				search_clause();
				}
			}

			setState(3326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(3325);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3328);
			match(SEARCH);
			setState(3329);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3330);
			match(FIRST);
			setState(3331);
			match(BY);
			setState(3332);
			column_name();
			setState(3334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(3333);
				match(ASC);
				}
			}

			setState(3337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(3336);
				match(DESC);
				}
			}

			setState(3341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3339);
				match(NULLS);
				setState(3340);
				match(FIRST);
				}
				break;
			}
			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3343);
				match(NULLS);
				setState(3344);
				match(LAST);
				}
			}

			setState(3365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3347);
				match(COMMA);
				setState(3348);
				column_name();
				setState(3350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(3349);
					match(ASC);
					}
				}

				setState(3353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(3352);
					match(DESC);
					}
				}

				setState(3357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(3355);
					match(NULLS);
					setState(3356);
					match(FIRST);
					}
					break;
				}
				setState(3361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3359);
					match(NULLS);
					setState(3360);
					match(LAST);
					}
				}

				}
				}
				setState(3367);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3368);
			match(SET);
			setState(3369);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3371);
			match(CYCLE);
			setState(3372);
			column_name();
			setState(3377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3373);
				match(COMMA);
				setState(3374);
				column_name();
				}
				}
				setState(3379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3380);
			match(SET);
			setState(3381);
			column_name();
			setState(3382);
			match(TO);
			setState(3383);
			expression();
			setState(3384);
			match(DEFAULT);
			setState(3385);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387);
			subquery_basic_elements();
			setState(3391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3388);
				subquery_operation_part();
				}
				}
				setState(3393);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3394);
				match(UNION);
				setState(3396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3395);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(3398);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(3399);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3402);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_subquery_basic_elements);
		try {
			setState(3409);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3404);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3405);
				match(LEFT_PAREN);
				setState(3406);
				subquery();
				setState(3407);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3411);
			match(SELECT);
			setState(3413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3412);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(3415);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3416);
				selected_element();
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3417);
					match(COMMA);
					setState(3418);
					selected_element();
					}
					}
					setState(3423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(3426);
				into_clause();
				}
			}

			setState(3429);
			from_clause();
			setState(3431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3430);
				where_clause();
				}
				break;
			}
			setState(3434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				setState(3433);
				hierarchical_query_clause();
				}
				break;
			}
			setState(3437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3436);
				group_by_clause();
				}
				break;
			}
			setState(3440);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3439);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			select_list_elements();
			setState(3444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				setState(3443);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3446);
			match(FROM);
			setState(3447);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_select_list_elements);
		try {
			setState(3454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3449);
				tableview_name();
				setState(3450);
				match(PERIOD);
				setState(3451);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3453);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3456);
			table_ref();
			setState(3461);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3457);
					match(COMMA);
					setState(3458);
					table_ref();
					}
					} 
				}
				setState(3463);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3464);
			table_ref_aux();
			setState(3468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3465);
					join_clause();
					}
					} 
				}
				setState(3470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
			}
			setState(3473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3471);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3472);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3475);
				dml_table_expression_clause();
				setState(3478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(3476);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3477);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3480);
				match(LEFT_PAREN);
				setState(3481);
				table_ref();
				setState(3485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3482);
					subquery_operation_part();
					}
					}
					setState(3487);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3488);
				match(RIGHT_PAREN);
				setState(3491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(3489);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3490);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3493);
				match(ONLY);
				setState(3494);
				match(LEFT_PAREN);
				setState(3495);
				dml_table_expression_clause();
				setState(3496);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3503);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3500);
					flashback_query_clause();
					}
					} 
				}
				setState(3505);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,407,_ctx);
			}
			setState(3507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3506);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3509);
				query_partition_clause();
				}
			}

			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3512);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3515);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3516);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(3519);
			match(JOIN);
			setState(3520);
			table_ref_aux();
			setState(3522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3521);
				query_partition_clause();
				}
				break;
			}
			setState(3528);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3526);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3524);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3525);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3530);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,414,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			match(ON);
			setState(3532);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			match(USING);
			setState(3535);
			match(LEFT_PAREN);
			setState(3536);
			column_name();
			setState(3541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3537);
				match(COMMA);
				setState(3538);
				column_name();
				}
				}
				setState(3543);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3544);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3546);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3547);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3550);
			match(PARTITION);
			setState(3551);
			match(BY);
			setState(3565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3552);
				match(LEFT_PAREN);
				setState(3553);
				subquery();
				setState(3554);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3556);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3557);
				expression();
				setState(3562);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,417,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3558);
						match(COMMA);
						setState(3559);
						expression();
						}
						} 
					}
					setState(3564);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,417,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3567);
				match(VERSIONS);
				setState(3568);
				match(BETWEEN);
				setState(3569);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3570);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3571);
				match(AS);
				setState(3572);
				match(OF);
				setState(3573);
				_la = _input.LA(1);
				if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (SCN - 380)) | (1L << (SNAPSHOT - 380)) | (1L << (TIMESTAMP - 380)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3574);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577);
			match(PIVOT);
			setState(3579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3578);
				match(XML);
				}
			}

			setState(3581);
			match(LEFT_PAREN);
			setState(3582);
			pivot_element();
			setState(3587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3583);
				match(COMMA);
				setState(3584);
				pivot_element();
				}
				}
				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3590);
			pivot_for_clause();
			setState(3591);
			pivot_in_clause();
			setState(3592);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			aggregate_function_name();
			setState(3595);
			match(LEFT_PAREN);
			setState(3596);
			expression();
			setState(3597);
			match(RIGHT_PAREN);
			setState(3599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3598);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			match(FOR);
			setState(3614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3602);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3603);
				match(LEFT_PAREN);
				setState(3604);
				column_name();
				setState(3609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3605);
					match(COMMA);
					setState(3606);
					column_name();
					}
					}
					setState(3611);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3612);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			match(IN);
			setState(3617);
			match(LEFT_PAREN);
			setState(3635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3618);
				subquery();
				}
				break;
			case 2:
				{
				setState(3619);
				match(ANY);
				setState(3624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3620);
					match(COMMA);
					setState(3621);
					match(ANY);
					}
					}
					setState(3626);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3627);
				pivot_in_clause_element();
				setState(3632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3628);
					match(COMMA);
					setState(3629);
					pivot_in_clause_element();
					}
					}
					setState(3634);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3637);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639);
			pivot_in_clause_elements();
			setState(3641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3640);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_pivot_in_clause_elements);
		try {
			setState(3645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			match(UNPIVOT);
			setState(3650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3648);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3649);
				match(NULLS);
				}
			}

			setState(3652);
			match(LEFT_PAREN);
			setState(3665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3653);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3654);
				match(LEFT_PAREN);
				setState(3655);
				column_name();
				setState(3660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3656);
					match(COMMA);
					setState(3657);
					column_name();
					}
					}
					setState(3662);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3663);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3667);
			pivot_for_clause();
			setState(3668);
			unpivot_in_clause();
			setState(3669);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3671);
			match(IN);
			setState(3672);
			match(LEFT_PAREN);
			setState(3673);
			unpivot_in_elements();
			setState(3678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3674);
				match(COMMA);
				setState(3675);
				unpivot_in_elements();
				}
				}
				setState(3680);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3681);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3683);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3684);
				match(LEFT_PAREN);
				setState(3685);
				column_name();
				setState(3690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3686);
					match(COMMA);
					setState(3687);
					column_name();
					}
					}
					setState(3692);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3693);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3697);
				match(AS);
				setState(3710);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3698);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3699);
					match(LEFT_PAREN);
					setState(3700);
					constant();
					setState(3705);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3701);
						match(COMMA);
						setState(3702);
						constant();
						}
						}
						setState(3707);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3708);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_hierarchical_query_clause);
		try {
			setState(3731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3714);
				match(CONNECT);
				setState(3715);
				match(BY);
				setState(3717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3716);
					match(NOCYCLE);
					}
					break;
				}
				setState(3719);
				condition();
				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(3720);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3723);
				start_part();
				setState(3724);
				match(CONNECT);
				setState(3725);
				match(BY);
				setState(3727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3726);
					match(NOCYCLE);
					}
					break;
				}
				setState(3729);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			match(START);
			setState(3734);
			match(WITH);
			setState(3735);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_group_by_clause);
		try {
			int _alt;
			setState(3763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3737);
				match(GROUP);
				setState(3738);
				match(BY);
				setState(3739);
				group_by_elements();
				setState(3744);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3740);
						match(COMMA);
						setState(3741);
						group_by_elements();
						}
						} 
					}
					setState(3746);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,443,_ctx);
				}
				setState(3748);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
				case 1:
					{
					setState(3747);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3750);
				having_clause();
				setState(3761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3751);
					match(GROUP);
					setState(3752);
					match(BY);
					setState(3753);
					group_by_elements();
					setState(3758);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,445,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3754);
							match(COMMA);
							setState(3755);
							group_by_elements();
							}
							} 
						}
						setState(3760);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,445,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_group_by_elements);
		try {
			setState(3768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3765);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3766);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3767);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3771);
			match(LEFT_PAREN);
			setState(3772);
			grouping_sets_elements();
			setState(3777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3773);
				match(COMMA);
				setState(3774);
				grouping_sets_elements();
				}
				}
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3780);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			match(GROUPING);
			setState(3783);
			match(SETS);
			setState(3784);
			match(LEFT_PAREN);
			setState(3785);
			grouping_sets_elements();
			setState(3790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3786);
				match(COMMA);
				setState(3787);
				grouping_sets_elements();
				}
				}
				setState(3792);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3793);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_grouping_sets_elements);
		try {
			setState(3798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3795);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3796);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3797);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(HAVING);
			setState(3801);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3803);
			match(MODEL);
			setState(3807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3804);
				cell_reference_options();
				}
				}
				setState(3809);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3810);
				return_rows_clause();
				}
			}

			setState(3816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3813);
				reference_model();
				}
				}
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3819);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_cell_reference_options);
		int _la;
		try {
			setState(3829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3821);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3822);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3823);
				match(UNIQUE);
				setState(3827);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3824);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3825);
					match(SINGLE);
					setState(3826);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3831);
			match(RETURN);
			setState(3832);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3833);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3835);
			match(REFERENCE);
			setState(3836);
			reference_model_name();
			setState(3837);
			match(ON);
			setState(3838);
			match(LEFT_PAREN);
			setState(3839);
			subquery();
			setState(3840);
			match(RIGHT_PAREN);
			setState(3841);
			model_column_clauses();
			setState(3845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3842);
				cell_reference_options();
				}
				}
				setState(3847);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3848);
				match(MAIN);
				setState(3849);
				main_model_name();
				}
			}

			setState(3852);
			model_column_clauses();
			setState(3856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3853);
				cell_reference_options();
				}
				}
				setState(3858);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3859);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3861);
				model_column_partition_part();
				}
			}

			setState(3864);
			match(DIMENSION);
			setState(3865);
			match(BY);
			setState(3866);
			model_column_list();
			setState(3867);
			match(MEASURES);
			setState(3868);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			match(PARTITION);
			setState(3871);
			match(BY);
			setState(3872);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3874);
			match(LEFT_PAREN);
			setState(3875);
			model_column();
			setState(3880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3876);
				match(COMMA);
				setState(3877);
				model_column();
				}
				}
				setState(3882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3883);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			expression();
			setState(3887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3886);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3889);
				model_rules_part();
				}
			}

			setState(3892);
			match(LEFT_PAREN);
			setState(3893);
			model_rules_element();
			setState(3898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3894);
				match(COMMA);
				setState(3895);
				model_rules_element();
				}
				}
				setState(3900);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3901);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3903);
			match(RULES);
			setState(3909);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3904);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3905);
				match(UPSERT);
				setState(3907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3906);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3911);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3912);
				match(ORDER);
				}
			}

			setState(3916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3915);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3918);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3919);
				match(UPSERT);
				setState(3921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3920);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3925);
			cell_assignment();
			setState(3927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3926);
				order_by_clause();
				}
			}

			setState(3929);
			match(EQUALS_OP);
			setState(3930);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3932);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3934);
			match(ITERATE);
			setState(3935);
			match(LEFT_PAREN);
			setState(3936);
			expression();
			setState(3937);
			match(RIGHT_PAREN);
			setState(3939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3938);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3941);
			match(UNTIL);
			setState(3942);
			match(LEFT_PAREN);
			setState(3943);
			condition();
			setState(3944);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3946);
			match(ORDER);
			setState(3948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3947);
				match(SIBLINGS);
				}
			}

			setState(3950);
			match(BY);
			setState(3951);
			order_by_elements();
			setState(3956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3952);
				match(COMMA);
				setState(3953);
				order_by_elements();
				}
				}
				setState(3958);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			expression();
			setState(3961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3960);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3963);
				match(NULLS);
				setState(3964);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(FOR);
			setState(3968);
			match(UPDATE);
			setState(3970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3969);
				for_update_of_part();
				}
			}

			setState(3973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3972);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3975);
			match(OF);
			setState(3976);
			column_name();
			setState(3981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3977);
				match(COMMA);
				setState(3978);
				column_name();
				}
				}
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_for_update_options);
		try {
			setState(3989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3984);
				match(SKIP_);
				setState(3985);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3986);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3987);
				match(WAIT);
				setState(3988);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			match(UPDATE);
			setState(3992);
			general_table_ref();
			setState(3993);
			update_set_clause();
			setState(3995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3994);
				where_clause();
				}
			}

			setState(3998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3997);
				static_returning_clause();
				}
			}

			setState(4001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4000);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003);
			match(SET);
			setState(4019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4004);
				column_based_update_set_clause();
				setState(4009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4005);
					match(COMMA);
					setState(4006);
					column_based_update_set_clause();
					}
					}
					setState(4011);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4012);
				match(VALUE);
				setState(4013);
				match(LEFT_PAREN);
				setState(4014);
				id();
				setState(4015);
				match(RIGHT_PAREN);
				setState(4016);
				match(EQUALS_OP);
				setState(4017);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(4038);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4021);
				column_name();
				setState(4022);
				match(EQUALS_OP);
				setState(4023);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				match(LEFT_PAREN);
				setState(4026);
				column_name();
				setState(4031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4027);
					match(COMMA);
					setState(4028);
					column_name();
					}
					}
					setState(4033);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4034);
				match(RIGHT_PAREN);
				setState(4035);
				match(EQUALS_OP);
				setState(4036);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			match(DELETE);
			setState(4042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4041);
				match(FROM);
				}
			}

			setState(4044);
			general_table_ref();
			setState(4046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4045);
				where_clause();
				}
			}

			setState(4049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(4048);
				static_returning_clause();
				}
			}

			setState(4052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4051);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			match(INSERT);
			setState(4057);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(4055);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(4056);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			insert_into_clause();
			setState(4065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(4060);
				values_clause();
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(4061);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4064);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4067);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4070);
				match(ALL);
				setState(4072); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4071);
					multi_table_element();
					}
					}
					setState(4074); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(4076);
				conditional_insert_clause();
				}
				break;
			}
			setState(4079);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			insert_into_clause();
			setState(4083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(4082);
				values_clause();
				}
			}

			setState(4086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4085);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(4088);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4092); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4091);
				conditional_insert_when_part();
				}
				}
				setState(4094); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4096);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			match(WHEN);
			setState(4100);
			condition();
			setState(4101);
			match(THEN);
			setState(4103); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4102);
				multi_table_element();
				}
				}
				setState(4105); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			match(ELSE);
			setState(4109); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4108);
				multi_table_element();
				}
				}
				setState(4111); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			match(INTO);
			setState(4114);
			general_table_ref();
			setState(4126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4115);
				match(LEFT_PAREN);
				setState(4116);
				column_name();
				setState(4121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4117);
					match(COMMA);
					setState(4118);
					column_name();
					}
					}
					setState(4123);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4124);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			match(VALUES);
			setState(4129);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4131);
			match(MERGE);
			setState(4132);
			match(INTO);
			setState(4133);
			tableview_name();
			setState(4135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4134);
				table_alias();
				}
			}

			setState(4137);
			match(USING);
			setState(4138);
			selected_tableview();
			setState(4139);
			match(ON);
			setState(4140);
			match(LEFT_PAREN);
			setState(4141);
			condition();
			setState(4142);
			match(RIGHT_PAREN);
			setState(4151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4143);
				merge_update_clause();
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4144);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(4147);
				merge_insert_clause();
				setState(4149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4148);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(4154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(4153);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4156);
			match(WHEN);
			setState(4157);
			match(MATCHED);
			setState(4158);
			match(THEN);
			setState(4159);
			match(UPDATE);
			setState(4160);
			match(SET);
			setState(4161);
			merge_element();
			setState(4166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4162);
				match(COMMA);
				setState(4163);
				merge_element();
				}
				}
				setState(4168);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4169);
				where_clause();
				}
			}

			setState(4173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4172);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			column_name();
			setState(4176);
			match(EQUALS_OP);
			setState(4177);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			match(DELETE);
			setState(4180);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(WHEN);
			setState(4183);
			match(NOT);
			setState(4184);
			match(MATCHED);
			setState(4185);
			match(THEN);
			setState(4186);
			match(INSERT);
			setState(4198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4187);
				match(LEFT_PAREN);
				setState(4188);
				column_name();
				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4189);
					match(COMMA);
					setState(4190);
					column_name();
					}
					}
					setState(4195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4196);
				match(RIGHT_PAREN);
				}
			}

			setState(4200);
			match(VALUES);
			setState(4201);
			expression_list();
			setState(4203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4202);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4205);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4206);
				match(LEFT_PAREN);
				setState(4207);
				select_statement();
				setState(4208);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4212);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4215);
			match(LOCK);
			setState(4216);
			match(TABLE);
			setState(4217);
			lock_table_element();
			setState(4222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4218);
				match(COMMA);
				setState(4219);
				lock_table_element();
				}
				}
				setState(4224);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4225);
			match(IN);
			setState(4226);
			lock_mode();
			setState(4227);
			match(MODE);
			setState(4229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(4228);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_wait_nowait_part);
		try {
			setState(4234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4231);
				match(WAIT);
				setState(4232);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4233);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4236);
			tableview_name();
			setState(4238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(4237);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_lock_mode);
		int _la;
		try {
			setState(4252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4240);
				match(ROW);
				setState(4241);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4242);
				match(ROW);
				setState(4243);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4244);
				match(SHARE);
				setState(4246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(4245);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4248);
				match(SHARE);
				setState(4249);
				match(ROW);
				setState(4250);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4251);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4254);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(4255);
				match(ONLY);
				setState(4256);
				match(LEFT_PAREN);
				setState(4257);
				dml_table_expression_clause();
				setState(4258);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4262);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4266);
			expression();
			setState(4271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4267);
				match(COMMA);
				setState(4268);
				expression();
				}
				}
				setState(4273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4274);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4276);
			match(LOG);
			setState(4277);
			match(ERRORS);
			setState(4279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(4278);
				error_logging_into_part();
				}
				break;
			}
			setState(4282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4281);
				expression_wrapper();
				}
				break;
			}
			setState(4285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(4284);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4287);
			match(INTO);
			setState(4288);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			match(REJECT);
			setState(4291);
			match(LIMIT);
			setState(4294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4292);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(4293);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(4308);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4296);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4297);
				match(LEFT_PAREN);
				setState(4298);
				select_statement();
				setState(4300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4299);
					subquery_restriction_clause();
					}
				}

				setState(4302);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4304);
				tableview_name();
				setState(4306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(4305);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4310);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				setState(4311);
				match(LEFT_PAREN);
				setState(4312);
				subquery();
				setState(4313);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4315);
				match(LEFT_PAREN);
				setState(4316);
				expression();
				setState(4317);
				match(RIGHT_PAREN);
				setState(4321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(4318);
					match(LEFT_PAREN);
					setState(4319);
					match(PLUS_SIGN);
					setState(4320);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4325);
			match(WITH);
			setState(4334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(4326);
				match(READ);
				setState(4327);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(4328);
				match(CHECK);
				setState(4329);
				match(OPTION);
				setState(4332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(4330);
					match(CONSTRAINT);
					setState(4331);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4336);
			match(SAMPLE);
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(4337);
				match(BLOCK);
				}
			}

			setState(4340);
			match(LEFT_PAREN);
			setState(4341);
			expression();
			setState(4344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4342);
				match(COMMA);
				setState(4343);
				expression();
				}
			}

			setState(4346);
			match(RIGHT_PAREN);
			setState(4348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				{
				setState(4347);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4350);
			match(SEED);
			setState(4351);
			match(LEFT_PAREN);
			setState(4352);
			expression();
			setState(4353);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			match(CURSOR);
			setState(4356);
			match(LEFT_PAREN);
			setState(4357);
			subquery();
			setState(4358);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4360);
			match(LEFT_PAREN);
			setState(4362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NOT - 261)) | (1L << (NULL - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PRIOR - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUE - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (UNSIGNED_INTEGER - 520)) | (1L << (APPROXIMATE_NUM_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (LEFT_PAREN - 520)) | (1L << (PLUS_SIGN - 520)) | (1L << (MINUS_SIGN - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4361);
				expression();
				}
			}

			setState(4368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4364);
				match(COMMA);
				setState(4365);
				expression();
				}
				}
				setState(4370);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4371);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4373);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCondition_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4375);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_expression);
		try {
			int _alt;
			setState(4386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4377);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4378);
				logical_and_expression();
				setState(4383);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4379);
						match(OR);
						setState(4380);
						logical_and_expression();
						}
						} 
					}
					setState(4385);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4388);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(plsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(plsqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4390);
			negated_expression();
			setState(4395);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,547,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4391);
					match(AND);
					setState(4392);
					negated_expression();
					}
					} 
				}
				setState(4397);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,547,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_negated_expression);
		try {
			setState(4401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4398);
				match(NOT);
				setState(4399);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4400);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<Is_conditionContext> is_condition() {
			return getRuleContexts(Is_conditionContext.class);
		}
		public Is_conditionContext is_condition(int i) {
			return getRuleContext(Is_conditionContext.class,i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_equality_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4403);
			multiset_expression();
			setState(4407);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4404);
					is_condition();
					}
					} 
				}
				setState(4409);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_conditionContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Is_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIs_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIs_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIs_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_conditionContext is_condition() throws RecognitionException {
		Is_conditionContext _localctx = new Is_conditionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_is_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			match(IS);
			setState(4412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4411);
				match(NOT);
				}
			}

			setState(4439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				{
				setState(4414);
				match(NULL);
				}
				break;
			case NAN:
				{
				setState(4415);
				match(NAN);
				}
				break;
			case PRESENT:
				{
				setState(4416);
				match(PRESENT);
				}
				break;
			case INFINITE:
				{
				setState(4417);
				match(INFINITE);
				}
				break;
			case A_LETTER:
				{
				setState(4418);
				match(A_LETTER);
				setState(4419);
				match(SET);
				}
				break;
			case EMPTY:
				{
				setState(4420);
				match(EMPTY);
				}
				break;
			case OF:
				{
				setState(4421);
				match(OF);
				setState(4423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(4422);
					match(TYPE);
					}
				}

				setState(4425);
				match(LEFT_PAREN);
				setState(4427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
				case 1:
					{
					setState(4426);
					match(ONLY);
					}
					break;
				}
				setState(4429);
				type_spec();
				setState(4434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4430);
					match(COMMA);
					setState(4431);
					type_spec();
					}
					}
					setState(4436);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4437);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4441);
			relational_expression();
			setState(4448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4442);
				multiset_type();
				setState(4444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4443);
					match(OF);
					}
				}

				setState(4446);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4450);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Comparison_operatorContext> comparison_operator() {
			return getRuleContexts(Comparison_operatorContext.class);
		}
		public Comparison_operatorContext comparison_operator(int i) {
			return getRuleContext(Comparison_operatorContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			compound_expression();
			setState(4458);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4453);
					comparison_operator();
					setState(4454);
					compound_expression();
					}
					} 
				}
				setState(4460);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_comparison_operator);
		try {
			setState(4467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4461);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4462);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4463);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4464);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4465);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4466);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			concatenation();
			setState(4484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				{
				setState(4471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4470);
					match(NOT);
					}
				}

				setState(4482);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4473);
					match(IN);
					setState(4474);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4475);
					match(BETWEEN);
					setState(4476);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(4477);
					like_type();
					setState(4478);
					concatenation();
					setState(4480);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
					case 1:
						{
						setState(4479);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4486);
			_la = _input.LA(1);
			if ( !(((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (LIKE - 226)) | (1L << (LIKE2 - 226)) | (1L << (LIKE4 - 226)) | (1L << (LIKEC - 226)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			match(ESCAPE);
			setState(4489);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_in_elements);
		int _la;
		try {
			setState(4509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4491);
				match(LEFT_PAREN);
				setState(4492);
				subquery();
				setState(4493);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4495);
				match(LEFT_PAREN);
				setState(4496);
				concatenation_wrapper();
				setState(4501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4497);
					match(COMMA);
					setState(4498);
					concatenation_wrapper();
					}
					}
					setState(4503);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4504);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4506);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4507);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4508);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4511);
			concatenation();
			setState(4512);
			match(AND);
			setState(4513);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4515);
			additive_expression();
			setState(4521);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4516);
					concatenation_op();
					setState(4517);
					additive_expression();
					}
					} 
				}
				setState(4523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public List<Additive_opContext> additive_op() {
			return getRuleContexts(Additive_opContext.class);
		}
		public Additive_opContext additive_op(int i) {
			return getRuleContext(Additive_opContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_additive_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4526);
			multiply_expression();
			setState(4532);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,566,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4527);
					additive_op();
					setState(4528);
					multiply_expression();
					}
					} 
				}
				setState(4534);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,566,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_opContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(plsqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public Additive_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAdditive_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_opContext additive_op() throws RecognitionException {
		Additive_opContext _localctx = new Additive_opContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_additive_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4535);
			_la = _input.LA(1);
			if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<Multiply_opContext> multiply_op() {
			return getRuleContexts(Multiply_opContext.class);
		}
		public Multiply_opContext multiply_op(int i) {
			return getRuleContext(Multiply_opContext.class,i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_multiply_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4537);
			datetime_expression();
			setState(4543);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4538);
					multiply_op();
					setState(4539);
					datetime_expression();
					}
					} 
				}
				setState(4545);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_opContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(plsqlParser.SOLIDUS, 0); }
		public Multiply_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMultiply_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_opContext multiply_op() throws RecognitionException {
		Multiply_opContext _localctx = new Multiply_opContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_multiply_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4546);
			_la = _input.LA(1);
			if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			model_expression();
			setState(4557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(4549);
				match(AT);
				setState(4554);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4550);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4551);
					match(TIME);
					setState(4552);
					match(ZONE);
					setState(4553);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4556);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_interval_expression);
		int _la;
		try {
			setState(4583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4559);
				match(DAY);
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4560);
					match(LEFT_PAREN);
					setState(4561);
					concatenation_wrapper();
					setState(4562);
					match(RIGHT_PAREN);
					}
				}

				setState(4566);
				match(TO);
				setState(4567);
				match(SECOND);
				setState(4572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4568);
					match(LEFT_PAREN);
					setState(4569);
					concatenation_wrapper();
					setState(4570);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4574);
				match(YEAR);
				setState(4579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4575);
					match(LEFT_PAREN);
					setState(4576);
					concatenation_wrapper();
					setState(4577);
					match(RIGHT_PAREN);
					}
				}

				setState(4581);
				match(TO);
				setState(4582);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4585);
			unary_expression();
			setState(4590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				setState(4586);
				match(LEFT_BRACKET);
				setState(4587);
				model_expression_element();
				setState(4588);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_model_expression_element);
		int _la;
		try {
			setState(4615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(4592);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4593);
					condition_wrapper();
					}
					break;
				}
				setState(4603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4596);
					match(COMMA);
					setState(4599);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
					case 1:
						{
						setState(4597);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4598);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4605);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4606);
				single_column_for_loop();
				setState(4611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4607);
					match(COMMA);
					setState(4608);
					single_column_for_loop();
					}
					}
					setState(4613);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4614);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4617);
			match(FOR);
			setState(4618);
			column_name();
			setState(4631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4619);
				match(IN);
				setState(4620);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4621);
					for_like_part();
					}
				}

				setState(4624);
				match(FROM);
				setState(4625);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4626);
				match(TO);
				setState(4627);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4628);
				for_increment_decrement_type();
				setState(4629);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4633);
			match(LIKE);
			setState(4634);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4638);
			match(FOR);
			setState(4639);
			match(LEFT_PAREN);
			setState(4640);
			column_name();
			setState(4645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4641);
				match(COMMA);
				setState(4642);
				column_name();
				}
				}
				setState(4647);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4648);
			match(RIGHT_PAREN);
			setState(4649);
			match(IN);
			setState(4650);
			match(LEFT_PAREN);
			setState(4663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				{
				setState(4651);
				subquery();
				}
				break;
			case 2:
				{
				setState(4652);
				match(LEFT_PAREN);
				setState(4653);
				expression_list();
				setState(4658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4654);
					match(COMMA);
					setState(4655);
					expression_list();
					}
					}
					setState(4660);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4661);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4665);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_unary_expression);
		try {
			setState(4685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4667);
				match(MINUS_SIGN);
				setState(4668);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4669);
				match(PLUS_SIGN);
				setState(4670);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4671);
				match(PRIOR);
				setState(4672);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4673);
				match(CONNECT_BY_ROOT);
				setState(4674);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4675);
				match(NEW);
				setState(4676);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4677);
				match(DISTINCT);
				setState(4678);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4679);
				match(ALL);
				setState(4680);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4681);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4682);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4683);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4684);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_case_statement);
		try {
			setState(4689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4687);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4688);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4691);
				label_name();
				}
			}

			setState(4694);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4695);
			atom();
			setState(4697); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4696);
				simple_case_when_part();
				}
				}
				setState(4699); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4701);
				case_else_part();
				}
			}

			setState(4704);
			match(END);
			setState(4706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4705);
				match(CASE);
				}
			}

			setState(4709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				setState(4708);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4711);
			match(WHEN);
			setState(4712);
			expression_wrapper();
			setState(4713);
			match(THEN);
			setState(4716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(4714);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4715);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (DELIMITED_ID - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4718);
				label_name();
				}
			}

			setState(4721);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4723); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4722);
				searched_case_when_part();
				}
				}
				setState(4725); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4727);
				case_else_part();
				}
			}

			setState(4730);
			match(END);
			setState(4732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4731);
				match(CASE);
				}
			}

			setState(4735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				{
				setState(4734);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4737);
			match(WHEN);
			setState(4738);
			condition_wrapper();
			setState(4739);
			match(THEN);
			setState(4742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(4740);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4741);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4744);
			match(ELSE);
			setState(4747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				{
				setState(4745);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4746);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_atom);
		try {
			int _alt;
			setState(4769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4749);
				table_element();
				setState(4750);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4752);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4753);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4754);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4755);
				match(LEFT_PAREN);
				setState(4767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					setState(4756);
					subquery();
					setState(4757);
					match(RIGHT_PAREN);
					setState(4761);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,600,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4758);
							subquery_operation_part();
							}
							} 
						}
						setState(4763);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,600,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4764);
					expression_or_vector();
					setState(4765);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4771);
			expression();
			setState(4773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4772);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4775);
			match(COMMA);
			setState(4776);
			expression();
			setState(4781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4777);
				match(COMMA);
				setState(4778);
				expression();
				}
				}
				setState(4783);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4784);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4785);
				match(LEFT_PAREN);
				setState(4786);
				subquery();
				setState(4787);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4789);
				match(LEFT_PAREN);
				setState(4790);
				expression_wrapper();
				setState(4791);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(5106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4795);
				over_clause_keyword();
				setState(4796);
				function_argument_analytic();
				setState(4798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4797);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4800);
				regular_id();
				setState(4801);
				function_argument_modeling();
				setState(4803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(4802);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4805);
				match(COUNT);
				setState(4806);
				match(LEFT_PAREN);
				setState(4812);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4807);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
					case 1:
						{
						setState(4808);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4811);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4814);
				match(RIGHT_PAREN);
				setState(4816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(4815);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4818);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4819);
				match(LEFT_PAREN);
				setState(4826);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(4820);
					match(MULTISET);
					setState(4821);
					match(LEFT_PAREN);
					setState(4822);
					subquery();
					setState(4823);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4825);
					concatenation_wrapper();
					}
					break;
				}
				setState(4828);
				match(AS);
				setState(4829);
				type_spec();
				setState(4830);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4832);
				match(CHR);
				setState(4833);
				match(LEFT_PAREN);
				setState(4834);
				concatenation_wrapper();
				setState(4835);
				match(USING);
				setState(4836);
				match(NCHAR_CS);
				setState(4837);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4839);
				match(COLLECT);
				setState(4840);
				match(LEFT_PAREN);
				setState(4842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(4841);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4844);
				concatenation_wrapper();
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4845);
					collect_order_by_part();
					}
				}

				setState(4848);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4850);
				within_or_over_clause_keyword();
				setState(4851);
				function_argument();
				setState(4853); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4852);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4855); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4857);
				match(DECOMPOSE);
				setState(4858);
				match(LEFT_PAREN);
				setState(4859);
				concatenation_wrapper();
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4860);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4863);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4865);
				match(EXTRACT);
				setState(4866);
				match(LEFT_PAREN);
				setState(4867);
				regular_id();
				setState(4868);
				match(FROM);
				setState(4869);
				concatenation_wrapper();
				setState(4870);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4872);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4873);
				function_argument_analytic();
				setState(4875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4874);
					respect_or_ignore_nulls();
					}
				}

				setState(4877);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4879);
				standard_prediction_function_keyword();
				setState(4880);
				match(LEFT_PAREN);
				setState(4881);
				expression_wrapper();
				setState(4886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4882);
					match(COMMA);
					setState(4883);
					expression_wrapper();
					}
					}
					setState(4888);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4889);
					cost_matrix_clause();
					}
				}

				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4892);
					using_clause();
					}
				}

				setState(4895);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4897);
				match(TRANSLATE);
				setState(4898);
				match(LEFT_PAREN);
				setState(4899);
				expression_wrapper();
				setState(4902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4900);
					match(USING);
					setState(4901);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4904);
					match(COMMA);
					setState(4905);
					expression_wrapper();
					}
					}
					setState(4910);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4911);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4913);
				match(TREAT);
				setState(4914);
				match(LEFT_PAREN);
				setState(4915);
				expression_wrapper();
				setState(4916);
				match(AS);
				setState(4918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(4917);
					match(REF);
					}
					break;
				}
				setState(4920);
				type_spec();
				setState(4921);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4923);
				match(TRIM);
				setState(4924);
				match(LEFT_PAREN);
				setState(4932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					setState(4926);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4925);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4929);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4928);
						quoted_string();
						}
					}

					setState(4931);
					match(FROM);
					}
					break;
				}
				setState(4934);
				concatenation_wrapper();
				setState(4935);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4937);
				match(XMLAGG);
				setState(4938);
				match(LEFT_PAREN);
				setState(4939);
				expression_wrapper();
				setState(4941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4940);
					order_by_clause();
					}
				}

				setState(4943);
				match(RIGHT_PAREN);
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4944);
					match(PERIOD);
					setState(4945);
					general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4948);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4949);
				match(LEFT_PAREN);
				setState(4950);
				xml_multiuse_expression_element();
				setState(4955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4951);
					match(COMMA);
					setState(4952);
					xml_multiuse_expression_element();
					}
					}
					setState(4957);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4958);
				match(RIGHT_PAREN);
				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4959);
					match(PERIOD);
					setState(4960);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4963);
				match(XMLELEMENT);
				setState(4964);
				match(LEFT_PAREN);
				setState(4966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(4965);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(4968);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4971);
				expression_wrapper();
				setState(4974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
				case 1:
					{
					setState(4972);
					match(COMMA);
					setState(4973);
					xml_attributes_clause();
					}
					break;
				}
				setState(4983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4976);
					match(COMMA);
					setState(4977);
					expression_wrapper();
					setState(4979);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
						{
						setState(4978);
						column_alias();
						}
					}

					}
					}
					setState(4985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4986);
				match(RIGHT_PAREN);
				setState(4989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4987);
					match(PERIOD);
					setState(4988);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4991);
				match(XMLEXISTS);
				setState(4992);
				match(LEFT_PAREN);
				setState(4993);
				expression_wrapper();
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4994);
					xml_passing_clause();
					}
				}

				setState(4997);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4999);
				match(XMLPARSE);
				setState(5000);
				match(LEFT_PAREN);
				setState(5001);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5002);
				concatenation_wrapper();
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(5003);
					match(WELLFORMED);
					}
				}

				setState(5006);
				match(RIGHT_PAREN);
				setState(5009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5007);
					match(PERIOD);
					setState(5008);
					general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5011);
				match(XMLPI);
				setState(5012);
				match(LEFT_PAREN);
				setState(5017);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(5013);
					match(NAME);
					setState(5014);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(5015);
					match(EVALNAME);
					setState(5016);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5019);
					match(COMMA);
					setState(5020);
					concatenation_wrapper();
					}
				}

				setState(5023);
				match(RIGHT_PAREN);
				setState(5026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5024);
					match(PERIOD);
					setState(5025);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5028);
				match(XMLQUERY);
				setState(5029);
				match(LEFT_PAREN);
				setState(5030);
				concatenation_wrapper();
				setState(5032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5031);
					xml_passing_clause();
					}
				}

				setState(5034);
				match(RETURNING);
				setState(5035);
				match(CONTENT);
				setState(5039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(5036);
					match(NULL);
					setState(5037);
					match(ON);
					setState(5038);
					match(EMPTY);
					}
				}

				setState(5041);
				match(RIGHT_PAREN);
				setState(5044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5042);
					match(PERIOD);
					setState(5043);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5046);
				match(XMLROOT);
				setState(5047);
				match(LEFT_PAREN);
				setState(5048);
				concatenation_wrapper();
				setState(5049);
				xmlroot_param_version_part();
				setState(5052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5050);
					match(COMMA);
					setState(5051);
					xmlroot_param_standalone_part();
					}
				}

				setState(5054);
				match(RIGHT_PAREN);
				setState(5057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5055);
					match(PERIOD);
					setState(5056);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5059);
				match(XMLSERIALIZE);
				setState(5060);
				match(LEFT_PAREN);
				setState(5061);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5062);
				concatenation_wrapper();
				setState(5065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5063);
					match(AS);
					setState(5064);
					type_spec();
					}
				}

				setState(5068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(5067);
					xmlserialize_param_enconding_part();
					}
				}

				setState(5071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(5070);
					xmlserialize_param_version_part();
					}
				}

				setState(5074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(5073);
					xmlserialize_param_ident_part();
					}
				}

				setState(5078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(5076);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5077);
					match(DEFAULTS);
					}
				}

				setState(5080);
				match(RIGHT_PAREN);
				setState(5083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5081);
					match(PERIOD);
					setState(5082);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5085);
				match(XMLTABLE);
				setState(5086);
				match(LEFT_PAREN);
				setState(5088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					setState(5087);
					xml_namespaces_clause();
					}
					break;
				}
				setState(5090);
				concatenation_wrapper();
				setState(5092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(5091);
					xml_passing_clause();
					}
				}

				setState(5099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(5094);
					match(COLUMNS);
					setState(5095);
					xml_table_column();
					{
					setState(5096);
					match(COMMA);
					setState(5097);
					xml_table_column();
					}
					}
				}

				setState(5101);
				match(RIGHT_PAREN);
				setState(5104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5102);
					match(PERIOD);
					setState(5103);
					general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5108);
			_la = _input.LA(1);
			if ( !(((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (AVG - 519)) | (1L << (CORR - 519)) | (1L << (LAG - 519)) | (1L << (LEAD - 519)) | (1L << (MAX - 519)) | (1L << (MEDIAN - 519)) | (1L << (MIN - 519)) | (1L << (NTILE - 519)) | (1L << (RATIO_TO_REPORT - 519)) | (1L << (ROW_NUMBER - 519)) | (1L << (SUM - 519)) | (1L << (VARIANCE - 519)) | (1L << (REGR_ - 519)) | (1L << (STDDEV - 519)) | (1L << (VAR_ - 519)) | (1L << (COVAR_ - 519)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			_la = _input.LA(1);
			if ( !(((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (CUME_DIST - 512)) | (1L << (DENSE_RANK - 512)) | (1L << (LISTAGG - 512)) | (1L << (PERCENT_RANK - 512)) | (1L << (PERCENTILE_CONT - 512)) | (1L << (PERCENTILE_DISC - 512)) | (1L << (RANK - 512)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5112);
			_la = _input.LA(1);
			if ( !(((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PREDICTION - 506)) | (1L << (PREDICTION_BOUNDS - 506)) | (1L << (PREDICTION_COST - 506)) | (1L << (PREDICTION_DETAILS - 506)) | (1L << (PREDICTION_PROBABILITY - 506)) | (1L << (PREDICTION_SET - 506)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			match(OVER);
			setState(5115);
			match(LEFT_PAREN);
			setState(5117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5116);
				query_partition_clause();
				}
			}

			setState(5123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5119);
				order_by_clause();
				setState(5121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(5120);
					windowing_clause();
					}
				}

				}
			}

			setState(5125);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			windowing_type();
			setState(5134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(5128);
				match(BETWEEN);
				setState(5129);
				windowing_elements();
				setState(5130);
				match(AND);
				setState(5131);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5133);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5136);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_windowing_elements);
		int _la;
		try {
			setState(5145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5138);
				match(UNBOUNDED);
				setState(5139);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5140);
				match(CURRENT);
				setState(5141);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5142);
				concatenation_wrapper();
				setState(5143);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5147);
			match(USING);
			setState(5157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5148);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5149);
				using_element();
				setState(5154);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5150);
						match(COMMA);
						setState(5151);
						using_element();
						}
						} 
					}
					setState(5156);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5159);
				match(IN);
				setState(5161);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5160);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5163);
				match(OUT);
				}
				break;
			}
			setState(5166);
			select_list_elements();
			setState(5168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5167);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(ORDER);
			setState(5171);
			match(BY);
			setState(5172);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_within_or_over_part);
		try {
			setState(5181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5174);
				match(WITHIN);
				setState(5175);
				match(GROUP);
				setState(5176);
				match(LEFT_PAREN);
				setState(5177);
				order_by_clause();
				setState(5178);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5180);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183);
			match(COST);
			setState(5201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5184);
				match(MODEL);
				setState(5186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5185);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5188);
				match(LEFT_PAREN);
				setState(5189);
				cost_class_name();
				setState(5194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5190);
					match(COMMA);
					setState(5191);
					cost_class_name();
					}
					}
					setState(5196);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5197);
				match(RIGHT_PAREN);
				setState(5198);
				match(VALUES);
				setState(5199);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(PASSING);
			setState(5206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5204);
				match(BY);
				setState(5205);
				match(VALUE);
				}
			}

			setState(5208);
			expression_wrapper();
			setState(5210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5209);
				column_alias();
				}
			}

			{
			setState(5212);
			match(COMMA);
			setState(5213);
			expression_wrapper();
			setState(5215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5214);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5217);
			match(XMLATTRIBUTES);
			setState(5218);
			match(LEFT_PAREN);
			setState(5220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5219);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				{
				setState(5222);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5225);
			xml_multiuse_expression_element();
			setState(5230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5226);
				match(COMMA);
				setState(5227);
				xml_multiuse_expression_element();
				}
				}
				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5233);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5235);
			match(XMLNAMESPACES);
			setState(5236);
			match(LEFT_PAREN);
			setState(5240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5237);
				concatenation_wrapper();
				setState(5238);
				column_alias();
				}
				break;
			}
			setState(5248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5242);
				match(COMMA);
				setState(5243);
				concatenation_wrapper();
				setState(5244);
				column_alias();
				}
				}
				setState(5250);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5251);
				xml_general_default_part();
				}
			}

			setState(5254);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5256);
			xml_column_name();
			setState(5267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5257);
				match(FOR);
				setState(5258);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5259);
				type_spec();
				setState(5262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5260);
					match(PATH);
					setState(5261);
					concatenation_wrapper();
					}
				}

				setState(5265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5264);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5269);
			match(DEFAULT);
			setState(5270);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			expression();
			setState(5279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5273);
				match(AS);
				setState(5277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5274);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5275);
					match(EVALNAME);
					setState(5276);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5281);
			match(VERSION);
			setState(5285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5282);
				match(NO);
				setState(5283);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5284);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			match(STANDALONE);
			setState(5293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5288);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5289);
				match(NO);
				setState(5291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5290);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5295);
			match(ENCODING);
			setState(5296);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			match(VERSION);
			setState(5299);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5301);
				match(NO);
				setState(5302);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5303);
				match(INDENT);
				setState(5307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5304);
					match(SIZE);
					setState(5305);
					match(EQUALS_OP);
					setState(5306);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(plsqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(plsqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(plsqlParser.PERIOD, i);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			match(COMMENT);
			setState(5312);
			match(ON);
			setState(5330);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
				{
				setState(5313);
				match(COLUMN);
				setState(5317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(5314);
					schema_name();
					setState(5315);
					match(PERIOD);
					}
					break;
				}
				setState(5319);
				tableview_name();
				setState(5320);
				match(PERIOD);
				setState(5321);
				column_name();
				}
				break;
			case TABLE:
				{
				setState(5323);
				match(TABLE);
				setState(5327);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5324);
					schema_name();
					setState(5325);
					match(PERIOD);
					}
					break;
				}
				setState(5329);
				tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5332);
			match(IS);
			setState(5333);
			quoted_string();
			setState(5334);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(5336);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(5337);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(5338);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(5339);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(5340);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(5343);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5346);
			match(WHENEVER);
			setState(5347);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5353);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5348);
				match(EXIT);
				setState(5349);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5350);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5351);
				match(CONTINUE);
				setState(5352);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			match(SET);
			setState(5356);
			regular_id();
			setState(5362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5357);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5358);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5359);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5360);
				numeric();
				}
				break;
			case 5:
				{
				setState(5361);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5364);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(plsqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5368);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5369);
				match(FOR);
				}
			}

			setState(5372);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_column_alias);
		int _la;
		try {
			setState(5382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5374);
					match(AS);
					}
				}

				setState(5379);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5377);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5378);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5381);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5384);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5385);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5390);
			match(WHERE);
			setState(5393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5391);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5392);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			match(CURRENT);
			setState(5396);
			match(OF);
			setState(5397);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_into_clause);
		int _la;
		try {
			setState(5419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5399);
				match(INTO);
				setState(5400);
				variable_name();
				setState(5405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5401);
					match(COMMA);
					setState(5402);
					variable_name();
					}
					}
					setState(5407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5408);
				match(BULK);
				setState(5409);
				match(COLLECT);
				setState(5410);
				match(INTO);
				setState(5411);
				variable_name();
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5412);
					match(COMMA);
					setState(5413);
					variable_name();
					}
					}
					setState(5418);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_xml_column_name);
		try {
			setState(5423);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5421);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5422);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5425);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5427);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5429);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5437);
			id();
			setState(5442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5438);
				match(PERIOD);
				setState(5439);
				id_expression();
				}
				}
				setState(5444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5445);
				match(AT_SIGN);
				setState(5446);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5449);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			id();
			setState(5454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5452);
				match(PERIOD);
				setState(5453);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5462);
			id();
			setState(5467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5463);
				match(PERIOD);
				setState(5464);
				id_expression();
				}
				}
				setState(5469);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			id();
			setState(5477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5473);
				match(PERIOD);
				setState(5474);
				id_expression();
				}
				}
				setState(5479);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5480);
				match(AT_SIGN);
				setState(5481);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5484);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5486);
			id_expression();
			setState(5491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5487);
				match(PERIOD);
				setState(5488);
				id_expression();
				}
				}
				setState(5493);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_sequence_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5494);
				schema_name();
				setState(5495);
				match(PERIOD);
				}
				break;
			}
			setState(5499);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5501);
			id();
			setState(5506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5502);
				match(PERIOD);
				setState(5503);
				id_expression();
				}
				}
				setState(5508);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				{
				setState(5509);
				schema_name();
				setState(5510);
				match(PERIOD);
				}
				break;
			}
			setState(5514);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				{
				setState(5516);
				schema_name();
				setState(5517);
				match(PERIOD);
				}
				break;
			}
			setState(5521);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(plsqlParser.PERIOD, 0); }
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_trigger_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				setState(5523);
				schema_name();
				setState(5524);
				match(PERIOD);
				}
				break;
			}
			setState(5528);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_variable_name);
		int _la;
		try {
			setState(5540);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5530);
					match(INTRODUCER);
					setState(5531);
					char_set_name();
					}
				}

				setState(5534);
				id_expression();
				setState(5537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5535);
					match(PERIOD);
					setState(5536);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5539);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5542);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_cursor_name);
		try {
			setState(5546);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5544);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5545);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_record_name);
		try {
			setState(5550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5549);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5552);
			id();
			setState(5555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5553);
				match(PERIOD);
				setState(5554);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5557);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5559);
			id();
			setState(5564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5560);
				match(PERIOD);
				setState(5561);
				id_expression();
				}
				}
				setState(5566);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5567);
			id();
			setState(5570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				setState(5568);
				match(PERIOD);
				setState(5569);
				id_expression();
				}
				break;
			}
			setState(5575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
			case 1:
				{
				setState(5572);
				match(AT_SIGN);
				setState(5573);
				link_name();
				}
				break;
			case 2:
				{
				setState(5574);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577);
			id_expression();
			setState(5582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5578);
				match(PERIOD);
				setState(5579);
				id_expression();
				}
				}
				setState(5584);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5585);
			match(KEEP);
			setState(5586);
			match(LEFT_PAREN);
			setState(5587);
			match(DENSE_RANK);
			setState(5588);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5589);
			order_by_clause();
			setState(5590);
			match(RIGHT_PAREN);
			setState(5592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				{
				setState(5591);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5594);
			match(LEFT_PAREN);
			setState(5596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NOT - 261)) | (1L << (NULL - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PRIOR - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUE - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (UNSIGNED_INTEGER - 520)) | (1L << (APPROXIMATE_NUM_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (LEFT_PAREN - 520)) | (1L << (PLUS_SIGN - 520)) | (1L << (MINUS_SIGN - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5595);
				argument();
				}
			}

			setState(5602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5598);
				match(COMMA);
				setState(5599);
				argument();
				}
				}
				setState(5604);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5605);
			match(RIGHT_PAREN);
			setState(5607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				{
				setState(5606);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5609);
			match(LEFT_PAREN);
			setState(5614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXISTS - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FALSE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NOT - 261)) | (1L << (NULL - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (PRIOR - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUE - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (UNSIGNED_INTEGER - 520)) | (1L << (APPROXIMATE_NUM_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (LEFT_PAREN - 520)) | (1L << (PLUS_SIGN - 520)) | (1L << (MINUS_SIGN - 520)) | (1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5610);
				argument();
				setState(5612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5611);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5616);
				match(COMMA);
				setState(5617);
				argument();
				setState(5619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5618);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5626);
			match(RIGHT_PAREN);
			setState(5628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				{
				setState(5627);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5630);
			match(LEFT_PAREN);
			setState(5631);
			column_name();
			setState(5644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5632);
				match(COMMA);
				setState(5635);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5633);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5634);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5637);
					match(COMMA);
					setState(5640);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5638);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5639);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5646);
			match(USING);
			setState(5666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5647);
				tableview_name();
				setState(5648);
				match(PERIOD);
				setState(5649);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5651);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5652);
				expression();
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					setState(5653);
					column_alias();
					}
				}

				setState(5663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5656);
					match(COMMA);
					setState(5657);
					expression();
					setState(5659);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)) | (1L << (NATIONAL_CHAR_STRING_LIT - 520)) | (1L << (CHAR_STRING - 520)) | (1L << (DELIMITED_ID - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
						{
						setState(5658);
						column_alias();
						}
					}

					}
					}
					setState(5665);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5668);
			match(RIGHT_PAREN);
			setState(5670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				{
				setState(5669);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5672);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5673);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5675);
				id();
				setState(5676);
				match(EQUALS_OP);
				setState(5677);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5681);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_type_spec);
		int _la;
		try {
			setState(5691);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5683);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5684);
					match(REF);
					}
					break;
				}
				setState(5687);
				type_name();
				setState(5689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5688);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_datatype);
		int _la;
		try {
			setState(5721);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5693);
				native_datatype_element();
				setState(5695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5694);
					precision_part();
					}
					break;
				}
				setState(5703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5697);
					match(WITH);
					setState(5699);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5698);
						match(LOCAL);
						}
					}

					setState(5701);
					match(TIME);
					setState(5702);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5705);
				match(INTERVAL);
				setState(5706);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5707);
					match(LEFT_PAREN);
					setState(5708);
					expression_wrapper();
					setState(5709);
					match(RIGHT_PAREN);
					}
				}

				setState(5713);
				match(TO);
				setState(5714);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5715);
					match(LEFT_PAREN);
					setState(5716);
					expression_wrapper();
					setState(5717);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(plsqlParser.ASTERISK, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5723);
			match(LEFT_PAREN);
			setState(5726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(5724);
				numeric();
				}
				break;
			case ASTERISK:
				{
				setState(5725);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5728);
				match(COMMA);
				setState(5729);
				numeric();
				}
			}

			setState(5733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5732);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5735);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_native_datatype_element);
		int _la;
		try {
			setState(5797);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5737);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5738);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5739);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5740);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5741);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5742);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5743);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5744);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5745);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5746);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5747);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5748);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5749);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5750);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5751);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5752);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5753);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5754);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5755);
				match(DOUBLE);
				setState(5757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5756);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5759);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5760);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5761);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5762);
				match(LONG);
				setState(5764);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5763);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5766);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5767);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5768);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5769);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5770);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5771);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5772);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5773);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5774);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5775);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5776);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5777);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5778);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5779);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5780);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5781);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5782);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5783);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5784);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5785);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5786);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5787);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5788);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5789);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5790);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5791);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5792);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5793);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5794);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5795);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5796);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_bind_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5799);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5800);
				match(COLON);
				setState(5801);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				setState(5805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5804);
					match(INDICATOR);
					}
				}

				setState(5810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5807);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5808);
					match(COLON);
					setState(5809);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5814);
				match(PERIOD);
				setState(5815);
				general_element_part();
				}
				}
				setState(5820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5821);
			general_element_part();
			setState(5826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5822);
				match(PERIOD);
				setState(5823);
				general_element_part();
				}
				}
				setState(5828);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<Function_argumentContext> function_argument() {
			return getRuleContexts(Function_argumentContext.class);
		}
		public Function_argumentContext function_argument(int i) {
			return getRuleContext(Function_argumentContext.class,i);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5829);
				match(INTRODUCER);
				setState(5830);
				char_set_name();
				}
			}

			setState(5833);
			id_expression();
			setState(5838);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,771,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5834);
					match(PERIOD);
					setState(5835);
					id_expression();
					}
					} 
				}
				setState(5840);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,771,_ctx);
			}
			setState(5844);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,772,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5841);
					function_argument();
					}
					} 
				}
				setState(5846);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,772,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5847);
				match(INTRODUCER);
				setState(5848);
				char_set_name();
				}
			}

			setState(5851);
			id_expression();
			setState(5856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5852);
				match(PERIOD);
				setState(5853);
				id_expression();
				}
				}
				setState(5858);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_constant);
		int _la;
		try {
			setState(5921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5859);
				match(TIMESTAMP);
				setState(5862);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5860);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5861);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5868);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5864);
					match(AT);
					setState(5865);
					match(TIME);
					setState(5866);
					match(ZONE);
					setState(5867);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5870);
				match(INTERVAL);
				setState(5874);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5871);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5872);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5873);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5876);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(5877);
					match(LEFT_PAREN);
					setState(5880);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5878);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5879);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5887);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5882);
						match(COMMA);
						setState(5885);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5883);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5884);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5889);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(5892);
					match(TO);
					setState(5905);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5893);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5894);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5895);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5896);
						match(SECOND);
						setState(5903);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
						case 1:
							{
							setState(5897);
							match(LEFT_PAREN);
							setState(5900);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5898);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5899);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5902);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5909);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5910);
				match(DATE);
				setState(5911);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5912);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5913);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5914);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5915);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5916);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5917);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5918);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5919);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5920);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5923);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5925);
			match(MINUS_SIGN);
			setState(5926);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5928);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5930);
				match(INTRODUCER);
				setState(5931);
				char_set_name();
				}
			}

			setState(5934);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_id_expression);
		try {
			setState(5938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5936);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5937);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_not_equal_op);
		try {
			setState(5947);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5940);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5941);
				match(LESS_THAN_OP);
				setState(5942);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5943);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5944);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5945);
				match(CARRET_OPERATOR_PART);
				setState(5946);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_greater_than_or_equals_op);
		try {
			setState(5952);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5949);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5950);
				match(GREATER_THAN_OP);
				setState(5951);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_less_than_or_equals_op);
		try {
			setState(5957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5954);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5955);
				match(LESS_THAN_OP);
				setState(5956);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_concatenation_op);
		try {
			setState(5962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5959);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5960);
				match(VERTICAL_BAR);
				setState(5961);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5964);
			match(LEFT_PAREN);
			setState(5965);
			match(PLUS_SIGN);
			setState(5966);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(plsqlParser.LENGTH, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof plsqlVisitor ) return ((plsqlVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5968);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EMPTY - 130)) | (1L << (ENABLE - 130)) | (1L << (ENCODING - 130)) | (1L << (ENTITYESCAPING - 130)) | (1L << (ERRORS - 130)) | (1L << (ESCAPE - 130)) | (1L << (EVALNAME - 130)) | (1L << (EXCEPTION_INIT - 130)) | (1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (INLINE - 197)) | (1L << (INNER - 197)) | (1L << (INOUT - 197)) | (1L << (INSTANTIABLE - 197)) | (1L << (INSTEAD - 197)) | (1L << (INT - 197)) | (1L << (INTEGER - 197)) | (1L << (INTERVAL - 197)) | (1L << (INVALIDATE - 197)) | (1L << (ISOLATION - 197)) | (1L << (ITERATE - 197)) | (1L << (JAVA - 197)) | (1L << (JOIN - 197)) | (1L << (KEEP - 197)) | (1L << (LANGUAGE - 197)) | (1L << (LAST - 197)) | (1L << (LAST_VALUE - 197)) | (1L << (LEADING - 197)) | (1L << (LEFT - 197)) | (1L << (LENGTH - 197)) | (1L << (LEVEL - 197)) | (1L << (LIBRARY - 197)) | (1L << (LIKE2 - 197)) | (1L << (LIKE4 - 197)) | (1L << (LIKEC - 197)) | (1L << (LIMIT - 197)) | (1L << (LOCAL - 197)) | (1L << (LOCKED - 197)) | (1L << (LOG - 197)) | (1L << (LOGOFF - 197)) | (1L << (LOGON - 197)) | (1L << (LONG - 197)) | (1L << (LOOP - 197)) | (1L << (MAIN - 197)) | (1L << (MAP - 197)) | (1L << (MATCHED - 197)) | (1L << (MAXVALUE - 197)) | (1L << (MEASURES - 197)) | (1L << (MEMBER - 197)) | (1L << (MERGE - 197)) | (1L << (MINUTE - 197)) | (1L << (MINVALUE - 197)) | (1L << (MLSLABEL - 197)) | (1L << (MODEL - 197)) | (1L << (MODIFY - 197)) | (1L << (MONTH - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (MULTISET - 261)) | (1L << (NAME - 261)) | (1L << (NAN - 261)) | (1L << (NATURAL - 261)) | (1L << (NATURALN - 261)) | (1L << (NAV - 261)) | (1L << (NCHAR - 261)) | (1L << (NCHAR_CS - 261)) | (1L << (NCLOB - 261)) | (1L << (NESTED - 261)) | (1L << (NEW - 261)) | (1L << (NO - 261)) | (1L << (NOAUDIT - 261)) | (1L << (NOCOPY - 261)) | (1L << (NOCYCLE - 261)) | (1L << (NOENTITYESCAPING - 261)) | (1L << (NONE - 261)) | (1L << (NOSCHEMACHECK - 261)) | (1L << (NULLS - 261)) | (1L << (NUMBER - 261)) | (1L << (NUMERIC - 261)) | (1L << (NVARCHAR2 - 261)) | (1L << (OBJECT - 261)) | (1L << (OFF - 261)) | (1L << (OID - 261)) | (1L << (OLD - 261)) | (1L << (ONLY - 261)) | (1L << (OPEN - 261)) | (1L << (ORADATA - 261)) | (1L << (ORDINALITY - 261)) | (1L << (OSERROR - 261)) | (1L << (OUT - 261)) | (1L << (OUTER - 261)) | (1L << (OVER - 261)) | (1L << (OVERRIDING - 261)) | (1L << (PACKAGE - 261)) | (1L << (PARALLEL_ENABLE - 261)) | (1L << (PARAMETERS - 261)) | (1L << (PARENT - 261)) | (1L << (PARTITION - 261)) | (1L << (PASSING - 261)) | (1L << (PATH - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (PIPELINED - 328)) | (1L << (PLAN - 328)) | (1L << (PLS_INTEGER - 328)) | (1L << (POSITIVE - 328)) | (1L << (POSITIVEN - 328)) | (1L << (PRAGMA - 328)) | (1L << (PRECEDING - 328)) | (1L << (PRECISION - 328)) | (1L << (PRESENT - 328)) | (1L << (RAISE - 328)) | (1L << (RANGE - 328)) | (1L << (RAW - 328)) | (1L << (READ - 328)) | (1L << (REAL - 328)) | (1L << (RECORD - 328)) | (1L << (REF - 328)) | (1L << (REFERENCE - 328)) | (1L << (REFERENCING - 328)) | (1L << (REJECT - 328)) | (1L << (RELIES_ON - 328)) | (1L << (RENAME - 328)) | (1L << (REPLACE - 328)) | (1L << (RESPECT - 328)) | (1L << (RESTRICT_REFERENCES - 328)) | (1L << (RESULT - 328)) | (1L << (RESULT_CACHE - 328)) | (1L << (RETURN - 328)) | (1L << (RETURNING - 328)) | (1L << (REUSE - 328)) | (1L << (REVERSE - 328)) | (1L << (RIGHT - 328)) | (1L << (ROLLBACK - 328)) | (1L << (ROLLUP - 328)) | (1L << (ROW - 328)) | (1L << (ROWID - 328)) | (1L << (ROWS - 328)) | (1L << (RULES - 328)) | (1L << (SAMPLE - 328)) | (1L << (SAVE - 328)) | (1L << (SAVEPOINT - 328)) | (1L << (SCHEMA - 328)) | (1L << (SCHEMACHECK - 328)) | (1L << (SCN - 328)) | (1L << (SECOND - 328)) | (1L << (SEED - 328)) | (1L << (SEGMENT - 328)) | (1L << (SELF - 328)) | (1L << (SEQUENTIAL - 328)) | (1L << (SERIALIZABLE - 328)) | (1L << (SERIALLY_REUSABLE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (SERVERERROR - 392)) | (1L << (SESSIONTIMEZONE - 392)) | (1L << (SET - 392)) | (1L << (SETS - 392)) | (1L << (SETTINGS - 392)) | (1L << (SHOW - 392)) | (1L << (SHUTDOWN - 392)) | (1L << (SIBLINGS - 392)) | (1L << (SIGNTYPE - 392)) | (1L << (SIMPLE_INTEGER - 392)) | (1L << (SINGLE - 392)) | (1L << (SKIP_ - 392)) | (1L << (SMALLINT - 392)) | (1L << (SNAPSHOT - 392)) | (1L << (SOME - 392)) | (1L << (SPECIFICATION - 392)) | (1L << (SQLDATA - 392)) | (1L << (SQLERROR - 392)) | (1L << (STANDALONE - 392)) | (1L << (STARTUP - 392)) | (1L << (STATEMENT - 392)) | (1L << (STATEMENT_ID - 392)) | (1L << (STATIC - 392)) | (1L << (STATISTICS - 392)) | (1L << (STRING - 392)) | (1L << (SUBMULTISET - 392)) | (1L << (SUBPARTITION - 392)) | (1L << (SUBSTITUTABLE - 392)) | (1L << (SUBTYPE - 392)) | (1L << (SUCCESS - 392)) | (1L << (SUSPEND - 392)) | (1L << (TIME - 392)) | (1L << (TIMESTAMP - 392)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 392)) | (1L << (TIMESTAMP_UNCONSTRAINED - 392)) | (1L << (TIMEZONE_ABBR - 392)) | (1L << (TIMEZONE_HOUR - 392)) | (1L << (TIMEZONE_MINUTE - 392)) | (1L << (TIMEZONE_REGION - 392)) | (1L << (TRAILING - 392)) | (1L << (TRANSACTION - 392)) | (1L << (TRANSLATE - 392)) | (1L << (TREAT - 392)) | (1L << (TRIGGER - 392)) | (1L << (TRIM - 392)) | (1L << (TRUNCATE - 392)) | (1L << (TYPE - 392)) | (1L << (UNBOUNDED - 392)) | (1L << (UNDER - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (UNLIMITED - 456)) | (1L << (UNTIL - 456)) | (1L << (UPDATED - 456)) | (1L << (UPSERT - 456)) | (1L << (UROWID - 456)) | (1L << (USE - 456)) | (1L << (VALIDATE - 456)) | (1L << (VALUE - 456)) | (1L << (VARCHAR - 456)) | (1L << (VARCHAR2 - 456)) | (1L << (VARIABLE - 456)) | (1L << (VARRAY - 456)) | (1L << (VARYING - 456)) | (1L << (VERSION - 456)) | (1L << (VERSIONS - 456)) | (1L << (WAIT - 456)) | (1L << (WARNING - 456)) | (1L << (WELLFORMED - 456)) | (1L << (WHENEVER - 456)) | (1L << (WHILE - 456)) | (1L << (WITHIN - 456)) | (1L << (WORK - 456)) | (1L << (WRITE - 456)) | (1L << (XML - 456)) | (1L << (XMLAGG - 456)) | (1L << (XMLATTRIBUTES - 456)) | (1L << (XMLCAST - 456)) | (1L << (XMLCOLATTVAL - 456)) | (1L << (XMLELEMENT - 456)) | (1L << (XMLEXISTS - 456)) | (1L << (XMLFOREST - 456)) | (1L << (XMLNAMESPACES - 456)) | (1L << (XMLPARSE - 456)) | (1L << (XMLPI - 456)) | (1L << (XMLQUERY - 456)) | (1L << (XMLROOT - 456)) | (1L << (XMLSERIALIZE - 456)) | (1L << (XMLTABLE - 456)) | (1L << (YEAR - 456)) | (1L << (YES - 456)) | (1L << (YMINTERVAL_UNCONSTRAINED - 456)) | (1L << (ZONE - 456)) | (1L << (PREDICTION - 456)) | (1L << (PREDICTION_BOUNDS - 456)) | (1L << (PREDICTION_COST - 456)) | (1L << (PREDICTION_DETAILS - 456)) | (1L << (PREDICTION_PROBABILITY - 456)) | (1L << (PREDICTION_SET - 456)) | (1L << (CUME_DIST - 456)) | (1L << (DENSE_RANK - 456)) | (1L << (LISTAGG - 456)) | (1L << (PERCENT_RANK - 456)) | (1L << (PERCENTILE_CONT - 456)) | (1L << (PERCENTILE_DISC - 456)) | (1L << (RANK - 456)) | (1L << (AVG - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (CORR - 520)) | (1L << (LAG - 520)) | (1L << (LEAD - 520)) | (1L << (MAX - 520)) | (1L << (MEDIAN - 520)) | (1L << (MIN - 520)) | (1L << (NTILE - 520)) | (1L << (RATIO_TO_REPORT - 520)) | (1L << (ROW_NUMBER - 520)) | (1L << (SUM - 520)) | (1L << (VARIANCE - 520)) | (1L << (REGR_ - 520)) | (1L << (STDDEV - 520)) | (1L << (VAR_ - 520)) | (1L << (COVAR_ - 520)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02a0\u1755\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\3\2\6\2\u034c\n\2\r\2\16\2\u034d\3\3\7\3\u0351\n\3\f\3\16\3\u0354"+
		"\13\3\3\3\3\3\3\4\3\4\7\4\u035a\n\4\f\4\16\4\u035d\13\4\3\4\3\4\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\5\5\u0379\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0380\n\6\3"+
		"\6\3\6\3\6\3\6\3\6\7\6\u0387\n\6\f\6\16\6\u038a\13\6\3\6\3\6\5\6\u038e"+
		"\n\6\3\6\7\6\u0391\n\6\f\6\16\6\u0394\13\6\3\6\3\6\3\7\3\7\5\7\u039a\n"+
		"\7\3\b\3\b\3\b\5\b\u039f\n\b\3\b\7\b\u03a2\n\b\f\b\16\b\u03a5\13\b\3\t"+
		"\5\t\u03a8\n\t\3\t\3\t\5\t\u03ac\n\t\3\t\3\t\3\t\5\t\u03b1\n\t\3\t\5\t"+
		"\u03b4\n\t\3\t\3\t\5\t\u03b8\n\t\3\t\3\t\5\t\u03bc\n\t\5\t\u03be\n\t\3"+
		"\n\3\n\3\n\3\n\3\13\3\13\3\13\6\13\u03c7\n\13\r\13\16\13\u03c8\3\f\3\f"+
		"\5\f\u03cd\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\6\r\u03da\n"+
		"\r\r\r\16\r\u03db\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\6\16\u03f5"+
		"\n\16\r\16\16\16\u03f6\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0401"+
		"\n\17\5\17\u0403\n\17\5\17\u0405\n\17\3\17\5\17\u0408\n\17\3\20\3\20\3"+
		"\21\3\21\3\21\3\21\3\21\7\21\u0411\n\21\f\21\16\21\u0414\13\21\3\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\21\3\21\6\21\u041e\n\21\r\21\16\21\u041f\3\22"+
		"\3\22\3\22\3\22\5\22\u0426\n\22\6\22\u0428\n\22\r\22\16\22\u0429\3\22"+
		"\5\22\u042d\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u043b\n\23\3\23\5\23\u043e\n\23\6\23\u0440\n\23\r\23\16\23"+
		"\u0441\3\24\3\24\3\25\3\25\5\25\u0448\n\25\3\25\5\25\u044b\n\25\3\26\3"+
		"\26\3\26\3\26\3\26\5\26\u0452\n\26\3\26\3\26\3\26\5\26\u0457\n\26\3\26"+
		"\3\26\3\27\6\27\u045c\n\27\r\27\16\27\u045d\3\30\3\30\3\30\3\30\3\30\7"+
		"\30\u0465\n\30\f\30\16\30\u0468\13\30\3\30\3\30\3\30\5\30\u046d\n\30\3"+
		"\31\3\31\5\31\u0471\n\31\3\31\3\31\5\31\u0475\n\31\3\31\7\31\u0478\n\31"+
		"\f\31\16\31\u047b\13\31\3\31\5\31\u047e\n\31\3\32\3\32\3\32\5\32\u0483"+
		"\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u048a\n\32\3\33\3\33\5\33\u048e\n"+
		"\33\3\33\5\33\u0491\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u049d\n\33\3\33\5\33\u04a0\n\33\3\34\3\34\6\34\u04a4\n\34\r"+
		"\34\16\34\u04a5\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\7\34"+
		"\u04b2\n\34\f\34\16\34\u04b5\13\34\3\34\3\34\5\34\u04b9\n\34\3\34\3\34"+
		"\5\34\u04bd\n\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u04c5\n\34\3\35\3"+
		"\35\5\35\u04c9\n\35\3\35\3\35\3\35\3\35\3\35\7\35\u04d0\n\35\f\35\16\35"+
		"\u04d3\13\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u04dd\n\35\f"+
		"\35\16\35\u04e0\13\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u04ea"+
		"\n\35\f\35\16\35\u04ed\13\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5"+
		"\35\u04f7\n\35\3\35\5\35\u04fa\n\35\3\36\3\36\3\36\3\36\5\36\u0500\n\36"+
		"\3\36\3\36\3\36\3\36\3\36\7\36\u0507\n\36\f\36\16\36\u050a\13\36\3\36"+
		"\3\36\5\36\u050e\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0515\n\36\5\36\u0517"+
		"\n\36\3\37\5\37\u051a\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\6\37\u0527\n\37\r\37\16\37\u0528\3 \3 \3 \3 \3!\6!\u0530\n"+
		"!\r!\16!\u0531\3\"\3\"\3\"\3\"\3\"\5\"\u0539\n\"\3\"\6\"\u053c\n\"\r\""+
		"\16\"\u053d\3#\3#\5#\u0542\n#\3#\3#\5#\u0546\n#\3$\3$\3$\3$\5$\u054c\n"+
		"$\3$\3$\3$\5$\u0551\n$\3$\3$\3$\5$\u0556\n$\3$\3$\5$\u055a\n$\3$\3$\5"+
		"$\u055e\n$\6$\u0560\n$\r$\16$\u0561\3$\3$\5$\u0566\n$\3$\5$\u0569\n$\6"+
		"$\u056b\n$\r$\16$\u056c\3%\3%\3%\3%\3%\5%\u0574\n%\3%\3%\3&\3&\3&\5&\u057b"+
		"\n&\3&\5&\u057e\n&\3&\5&\u0581\n&\3&\3&\3&\3&\5&\u0587\n&\3&\3&\3&\3&"+
		"\3&\7&\u058e\n&\f&\16&\u0591\13&\3&\3&\3&\3&\5&\u0597\n&\3&\3&\3\'\3\'"+
		"\5\'\u059d\n\'\3\'\3\'\3\'\3\'\5\'\u05a3\n\'\3\'\3\'\3\'\3\'\3\'\3(\3"+
		"(\3(\5(\u05ad\n(\3(\3(\3(\3(\3(\7(\u05b4\n(\f(\16(\u05b7\13(\3(\3(\5("+
		"\u05bb\n(\3)\3)\5)\u05bf\n)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\5+\u05cb\n+"+
		"\3+\7+\u05ce\n+\f+\16+\u05d1\13+\3+\3+\5+\u05d5\n+\3+\3+\3,\3,\3,\5,\u05dc"+
		"\n,\5,\u05de\n,\3,\3,\3,\3,\3,\3,\7,\u05e6\n,\f,\16,\u05e9\13,\3,\3,\5"+
		",\u05ed\n,\3,\3,\3,\3,\3,\3,\7,\u05f5\n,\f,\16,\u05f8\13,\3,\5,\u05fb"+
		"\n,\3,\3,\5,\u05ff\n,\3,\7,\u0602\n,\f,\16,\u0605\13,\3,\3,\5,\u0609\n"+
		",\3,\3,\3,\5,\u060e\n,\3,\3,\3-\3-\5-\u0614\n-\3.\3.\3.\3.\3.\3.\3.\3"+
		".\3.\3.\7.\u0620\n.\f.\16.\u0623\13.\3.\3.\5.\u0627\n.\3.\5.\u062a\n."+
		"\3.\3.\3/\3/\5/\u0630\n/\3\60\3\60\3\60\3\60\3\60\7\60\u0637\n\60\f\60"+
		"\16\60\u063a\13\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u0645"+
		"\n\61\f\61\16\61\u0648\13\61\3\61\3\61\3\62\3\62\3\62\5\62\u064f\n\62"+
		"\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\5\63\u0659\n\63\3\63\5\63\u065c"+
		"\n\63\3\63\7\63\u065f\n\63\f\63\16\63\u0662\13\63\3\63\3\63\5\63\u0666"+
		"\n\63\3\63\3\63\3\64\3\64\3\64\5\64\u066d\n\64\3\64\3\64\3\64\5\64\u0672"+
		"\n\64\3\64\3\64\3\65\3\65\3\65\3\65\7\65\u067a\n\65\f\65\16\65\u067d\13"+
		"\65\3\65\3\65\3\65\3\65\5\65\u0683\n\65\5\65\u0685\n\65\3\66\3\66\5\66"+
		"\u0689\n\66\3\66\3\66\7\66\u068d\n\66\f\66\16\66\u0690\13\66\3\66\3\66"+
		"\5\66\u0694\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u069e\n"+
		"\67\38\38\38\38\38\38\78\u06a6\n8\f8\168\u06a9\138\38\38\58\u06ad\n8\3"+
		"8\38\39\39\39\39\39\39\79\u06b7\n9\f9\169\u06ba\139\39\39\59\u06be\n9"+
		"\39\39\39\39\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u06ce\n:\3;\3;\3;\3;\3;"+
		"\3<\3<\3<\3<\3<\5<\u06da\n<\3<\7<\u06dd\n<\f<\16<\u06e0\13<\3<\3<\5<\u06e4"+
		"\n<\3<\3<\3=\3=\3=\5=\u06eb\n=\5=\u06ed\n=\3=\3=\3=\3=\3=\3=\7=\u06f5"+
		"\n=\f=\16=\u06f8\13=\3=\3=\5=\u06fc\n=\3=\5=\u06ff\n=\3=\3=\5=\u0703\n"+
		"=\3=\7=\u0706\n=\f=\16=\u0709\13=\3=\3=\3=\5=\u070e\n=\3=\3=\3>\3>\3>"+
		"\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0720\n?\3?\7?\u0723\n?\f?\16?\u0726"+
		"\13?\3?\3?\5?\u072a\n?\5?\u072c\n?\3?\3?\3@\3@\3@\5@\u0733\n@\3@\3@\3"+
		"@\3@\3@\5@\u073a\n@\3@\5@\u073d\n@\3@\5@\u0740\n@\3@\5@\u0743\n@\3@\3"+
		"@\3@\3A\3A\3A\3A\7A\u074c\nA\fA\16A\u074f\13A\3B\3B\3B\3B\3B\3C\3C\3C"+
		"\3C\5C\u075a\nC\3C\3C\5C\u075e\nC\3C\5C\u0761\nC\3D\3D\3D\3D\3E\3E\3E"+
		"\5E\u076a\nE\3F\3F\3F\3F\7F\u0770\nF\fF\16F\u0773\13F\3F\3F\3F\3F\3F\5"+
		"F\u077a\nF\3F\5F\u077d\nF\3G\3G\3G\3G\3G\5G\u0784\nG\3H\3H\5H\u0788\n"+
		"H\3I\3I\3I\7I\u078d\nI\fI\16I\u0790\13I\3I\6I\u0793\nI\rI\16I\u0794\3"+
		"I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3"+
		"J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u07be\nJ\3K\3K\3K\3"+
		"K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5"+
		"K\u07da\nK\3L\3L\3L\7L\u07df\nL\fL\16L\u07e2\13L\3L\3L\5L\u07e6\nL\3L"+
		"\3L\3M\3M\3M\3M\3M\7M\u07ef\nM\fM\16M\u07f2\13M\5M\u07f4\nM\3N\3N\3N\3"+
		"N\3N\3O\3O\6O\u07fd\nO\rO\16O\u07fe\3P\3P\3P\3Q\3Q\3Q\5Q\u0807\nQ\3Q\3"+
		"Q\5Q\u080b\nQ\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0817\nR\3R\5R\u081a\n"+
		"R\3R\3R\3S\3S\5S\u0820\nS\3S\5S\u0823\nS\3S\7S\u0826\nS\fS\16S\u0829\13"+
		"S\3S\3S\5S\u082d\nS\3T\3T\5T\u0831\nT\3T\3T\3T\3T\3T\3T\7T\u0839\nT\f"+
		"T\16T\u083c\13T\3T\3T\3U\3U\3U\7U\u0843\nU\fU\16U\u0846\13U\3V\3V\3V\5"+
		"V\u084b\nV\3W\3W\3W\3W\3W\3W\3W\7W\u0854\nW\fW\16W\u0857\13W\3W\3W\5W"+
		"\u085b\nW\3X\3X\5X\u085f\nX\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0867\nY\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\5Z\u086f\nZ\3Z\3Z\3Z\5Z\u0874\nZ\3Z\5Z\u0877\nZ\5Z\u0879\nZ\3["+
		"\5[\u087c\n[\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0885\n\\\3\\\3\\\3\\\5\\\u088a"+
		"\n\\\3\\\3\\\3]\3]\3]\5]\u0891\n]\3]\5]\u0894\n]\3^\5^\u0897\n^\3^\3^"+
		"\5^\u089b\n^\3^\5^\u089e\n^\3^\3^\3^\3^\7^\u08a4\n^\f^\16^\u08a7\13^\3"+
		"^\3^\5^\u08ab\n^\3^\7^\u08ae\n^\f^\16^\u08b1\13^\3_\3_\3_\3_\5_\u08b7"+
		"\n_\3`\3`\3`\3a\3a\3a\3a\3a\5a\u08c1\na\3b\3b\3b\3b\3b\3b\3b\3b\3c\3c"+
		"\3c\3c\3c\3c\7c\u08d1\nc\fc\16c\u08d4\13c\3c\3c\3d\3d\5d\u08da\nd\3e\3"+
		"e\3e\3e\3f\3f\3f\3f\5f\u08e4\nf\3g\3g\3g\3g\3g\3g\7g\u08ec\ng\fg\16g\u08ef"+
		"\13g\3g\3g\3g\3g\5g\u08f5\ng\3g\7g\u08f8\ng\fg\16g\u08fb\13g\3g\3g\3g"+
		"\5g\u0900\ng\3h\3h\3h\3h\3h\3h\7h\u0908\nh\fh\16h\u090b\13h\3h\3h\5h\u090f"+
		"\nh\3h\3h\3h\3h\3h\5h\u0916\nh\3h\7h\u0919\nh\fh\16h\u091c\13h\3h\3h\3"+
		"h\5h\u0921\nh\3i\5i\u0924\ni\3i\5i\u0927\ni\3i\3i\3i\3i\3i\3i\3i\3i\3"+
		"i\3i\3i\3i\3i\7i\u0936\ni\fi\16i\u0939\13i\3i\3i\5i\u093d\ni\3i\3i\3i"+
		"\3i\3i\3i\3i\5i\u0946\ni\3i\7i\u0949\ni\fi\16i\u094c\13i\3i\3i\3i\5i\u0951"+
		"\ni\3j\5j\u0954\nj\3j\3j\3k\3k\3k\5k\u095b\nk\3k\5k\u095e\nk\3l\3l\3l"+
		"\3l\3m\5m\u0965\nm\3m\6m\u0968\nm\rm\16m\u0969\3m\3m\5m\u096e\nm\3n\3"+
		"n\3n\5n\u0973\nn\3o\3o\3o\5o\u0978\no\3p\3p\3p\3p\3p\3p\7p\u0980\np\f"+
		"p\16p\u0983\13p\3p\3p\3p\5p\u0988\np\3q\3q\3q\3q\3q\3q\7q\u0990\nq\fq"+
		"\16q\u0993\13q\3q\3q\5q\u0997\nq\3q\3q\3q\3q\3q\5q\u099e\nq\3q\3q\3q\3"+
		"q\5q\u09a4\nq\3q\3q\5q\u09a8\nq\3r\5r\u09ab\nr\3r\5r\u09ae\nr\3r\3r\3"+
		"r\3r\3r\3r\3r\3r\3r\3r\3r\3r\3r\7r\u09bd\nr\fr\16r\u09c0\13r\3r\3r\5r"+
		"\u09c4\nr\3r\3r\3r\3r\3r\3r\5r\u09cc\nr\3s\3s\3s\3s\3t\3t\3t\3t\3t\3t"+
		"\7t\u09d8\nt\ft\16t\u09db\13t\3t\3t\3u\3u\5u\u09e1\nu\3v\3v\3v\3w\3w\3"+
		"w\3w\3w\3x\3x\3x\3x\6x\u09ef\nx\rx\16x\u09f0\3x\3x\3y\3y\3y\3y\3y\7y\u09fa"+
		"\ny\fy\16y\u09fd\13y\3y\3y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3"+
		"z\3z\5z\u0a11\nz\3{\3{\3{\3{\3|\3|\3|\3}\3}\3}\3}\3~\3~\3~\5~\u0a21\n"+
		"~\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\5\u0080\u0a2a\n\u0080"+
		"\3\u0080\3\u0080\3\u0080\5\u0080\u0a2f\n\u0080\3\u0080\3\u0080\5\u0080"+
		"\u0a33\n\u0080\3\u0080\5\u0080\u0a36\n\u0080\3\u0081\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\7\u0081\u0a3e\n\u0081\f\u0081\16\u0081\u0a41\13"+
		"\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082"+
		"\u0a4a\n\u0082\f\u0082\16\u0082\u0a4d\13\u0082\3\u0082\3\u0082\3\u0082"+
		"\5\u0082\u0a52\n\u0082\3\u0082\3\u0082\3\u0083\3\u0083\7\u0083\u0a58\n"+
		"\u0083\f\u0083\16\u0083\u0a5b\13\u0083\3\u0083\5\u0083\u0a5e\n\u0083\3"+
		"\u0083\5\u0083\u0a61\n\u0083\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3"+
		"\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0a6f\n"+
		"\u0085\3\u0086\3\u0086\5\u0086\u0a73\n\u0086\3\u0086\3\u0086\3\u0086\5"+
		"\u0086\u0a78\n\u0086\3\u0086\5\u0086\u0a7b\n\u0086\3\u0086\3\u0086\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0a88\n\u0087\3\u0087\3\u0087\5\u0087\u0a8c\n\u0087\3\u0087\3\u0087\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0a96\n\u0088\f"+
		"\u0088\16\u0088\u0a99\13\u0088\3\u0088\3\u0088\5\u0088\u0a9d\n\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0aa1\n\u0088\3\u0088\3\u0088\5\u0088\u0aa5\n\u0088"+
		"\3\u0088\3\u0088\3\u0089\3\u0089\5\u0089\u0aab\n\u0089\3\u0089\5\u0089"+
		"\u0aae\n\u0089\3\u0089\5\u0089\u0ab1\n\u0089\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0acc\n\u008b\3\u008b\3\u008b"+
		"\6\u008b\u0ad0\n\u008b\r\u008b\16\u008b\u0ad1\3\u008b\3\u008b\5\u008b"+
		"\u0ad6\n\u008b\3\u008b\3\u008b\3\u008c\3\u008c\5\u008c\u0adc\n\u008c\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d"+
		"\u0ae6\n\u008d\f\u008d\16\u008d\u0ae9\13\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\5\u008d\u0af1\n\u008d\5\u008d\u0af3\n\u008d\3"+
		"\u008d\3\u008d\3\u008e\3\u008e\5\u008e\u0af9\n\u008e\3\u008e\3\u008e\5"+
		"\u008e\u0afd\n\u008e\3\u008e\5\u008e\u0b00\n\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u0090\3\u0090\5\u0090\u0b09\n\u0090\3\u0090\3\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b14"+
		"\n\u0091\3\u0091\3\u0091\5\u0091\u0b18\n\u0091\3\u0091\5\u0091\u0b1b\n"+
		"\u0091\3\u0092\3\u0092\5\u0092\u0b1f\n\u0092\3\u0092\3\u0092\3\u0092\3"+
		"\u0093\3\u0093\3\u0093\5\u0093\u0b27\n\u0093\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0b30\n\u0093\3\u0094\3\u0094\3"+
		"\u0094\3\u0095\3\u0095\3\u0095\3\u0095\6\u0095\u0b39\n\u0095\r\u0095\16"+
		"\u0095\u0b3a\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0b5a\n\u0097\3\u0098\3\u0098"+
		"\5\u0098\u0b5e\n\u0098\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\5\u0099"+
		"\u0b65\n\u0099\3\u0099\3\u0099\5\u0099\u0b69\n\u0099\3\u009a\3\u009a\5"+
		"\u009a\u0b6d\n\u009a\3\u009a\3\u009a\5\u009a\u0b71\n\u009a\3\u009b\3\u009b"+
		"\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\7\u009c\u0b7b\n\u009c"+
		"\f\u009c\16\u009c\u0b7e\13\u009c\3\u009c\5\u009c\u0b81\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e"+
		"\3\u009e\3\u009f\5\u009f\u0b8f\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0b95\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f"+
		"\u0b9c\n\u009f\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0ba1\n\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0bab\n"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0bb1\n\u00a0\5\u00a0\u0bb3"+
		"\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0bbc\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\5\u00a2\u0bc6\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0bcb\n"+
		"\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a5"+
		"\3\u00a5\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u0bda\n\u00a7\3\u00a8"+
		"\3\u00a8\5\u00a8\u0bde\n\u00a8\3\u00a9\5\u00a9\u0be1\n\u00a9\3\u00a9\3"+
		"\u00a9\5\u00a9\u0be5\n\u00a9\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0bea\n\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0bee\n\u00aa\3\u00ab\3\u00ab\6\u00ab\u0bf2\n"+
		"\u00ab\r\u00ab\16\u00ab\u0bf3\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac"+
		"\u0bfa\n\u00ac\f\u00ac\16\u00ac\u0bfd\13\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ad\5\u00ad\u0c03\n\u00ad\3\u00ad\6\u00ad\u0c06\n\u00ad\r\u00ad\16"+
		"\u00ad\u0c07\5\u00ad\u0c0a\n\u00ad\3\u00ad\3\u00ad\3\u00ae\5\u00ae\u0c0f"+
		"\n\u00ae\3\u00ae\6\u00ae\u0c12\n\u00ae\r\u00ae\16\u00ae\u0c13\3\u00ae"+
		"\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0c1c\n\u00af\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0c23\n\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u0c27\n\u00b0\3\u00b0\5\u00b0\u0c2a\n\u00b0\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2"+
		"\u0c36\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c3c\n\u00b3\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0c44\n\u00b5\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u0c4c\n\u00b6\f"+
		"\u00b6\16\u00b6\u0c4f\13\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\7\u00b6\u0c57\n\u00b6\f\u00b6\16\u00b6\u0c5a\13\u00b6\5\u00b6"+
		"\u0c5c\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0c63\n"+
		"\u00b7\3\u00b7\5\u00b7\u0c66\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3"+
		"\u00b8\5\u00b8\u0c6d\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0c78\n\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\5\u00b9\u0c7e\n\u00b9\3\u00b9\3\u00b9\5\u00b9\u0c82\n\u00b9"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0c8a\n\u00ba"+
		"\f\u00ba\16\u00ba\u0c8d\13\u00ba\5\u00ba\u0c8f\n\u00ba\3\u00ba\3\u00ba"+
		"\3\u00bb\3\u00bb\5\u00bb\u0c95\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0ca0\n\u00bb\5\u00bb"+
		"\u0ca2\n\u00bb\5\u00bb\u0ca4\n\u00bb\3\u00bb\5\u00bb\u0ca7\n\u00bb\3\u00bc"+
		"\3\u00bc\5\u00bc\u0cab\n\u00bc\3\u00bc\5\u00bc\u0cae\n\u00bc\3\u00bd\3"+
		"\u00bd\5\u00bd\u0cb2\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u0cb6\n\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u0cbb\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0cc6\n\u00bf\3\u00bf"+
		"\3\u00bf\5\u00bf\u0cca\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\5\u00bf\u0cd2\n\u00bf\3\u00c0\5\u00c0\u0cd5\n\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\7\u00c0\u0cda\n\u00c0\f\u00c0\16\u00c0\u0cdd\13\u00c0\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0ce3\n\u00c1\f\u00c1\16\u00c1"+
		"\u0ce6\13\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0ced"+
		"\n\u00c2\f\u00c2\16\u00c2\u0cf0\13\u00c2\3\u00c2\3\u00c2\5\u00c2\u0cf4"+
		"\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0cfa\n\u00c2\3\u00c2"+
		"\3\u00c2\5\u00c2\u0cfe\n\u00c2\3\u00c2\5\u00c2\u0d01\n\u00c2\3\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d09\n\u00c3\3\u00c3\5"+
		"\u00c3\u0d0c\n\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d10\n\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u0d14\n\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d19\n\u00c3\3"+
		"\u00c3\5\u00c3\u0d1c\n\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d20\n\u00c3\3\u00c3"+
		"\3\u00c3\5\u00c3\u0d24\n\u00c3\7\u00c3\u0d26\n\u00c3\f\u00c3\16\u00c3"+
		"\u0d29\13\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\7\u00c4\u0d32\n\u00c4\f\u00c4\16\u00c4\u0d35\13\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\7\u00c5\u0d40"+
		"\n\u00c5\f\u00c5\16\u00c5\u0d43\13\u00c5\3\u00c6\3\u00c6\5\u00c6\u0d47"+
		"\n\u00c6\3\u00c6\3\u00c6\5\u00c6\u0d4b\n\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d54\n\u00c7\3\u00c8\3\u00c8"+
		"\5\u00c8\u0d58\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0d5e\n"+
		"\u00c8\f\u00c8\16\u00c8\u0d61\13\u00c8\5\u00c8\u0d63\n\u00c8\3\u00c8\5"+
		"\u00c8\u0d66\n\u00c8\3\u00c8\3\u00c8\5\u00c8\u0d6a\n\u00c8\3\u00c8\5\u00c8"+
		"\u0d6d\n\u00c8\3\u00c8\5\u00c8\u0d70\n\u00c8\3\u00c8\5\u00c8\u0d73\n\u00c8"+
		"\3\u00c9\3\u00c9\5\u00c9\u0d77\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0d81\n\u00cb\3\u00cc\3\u00cc"+
		"\3\u00cc\7\u00cc\u0d86\n\u00cc\f\u00cc\16\u00cc\u0d89\13\u00cc\3\u00cd"+
		"\3\u00cd\7\u00cd\u0d8d\n\u00cd\f\u00cd\16\u00cd\u0d90\13\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0d94\n\u00cd\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0d99\n"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0d9e\n\u00ce\f\u00ce\16\u00ce"+
		"\u0da1\13\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0da6\n\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0dad\n\u00ce\3\u00ce\7\u00ce"+
		"\u0db0\n\u00ce\f\u00ce\16\u00ce\u0db3\13\u00ce\3\u00ce\5\u00ce\u0db6\n"+
		"\u00ce\3\u00cf\5\u00cf\u0db9\n\u00cf\3\u00cf\5\u00cf\u0dbc\n\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0dc0\n\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0dc5\n"+
		"\u00cf\3\u00cf\3\u00cf\7\u00cf\u0dc9\n\u00cf\f\u00cf\16\u00cf\u0dcc\13"+
		"\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\7\u00d1\u0dd6\n\u00d1\f\u00d1\16\u00d1\u0dd9\13\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d2\3\u00d2\5\u00d2\u0ddf\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u0deb\n\u00d3"+
		"\f\u00d3\16\u00d3\u0dee\13\u00d3\5\u00d3\u0df0\n\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0dfa\n\u00d4"+
		"\3\u00d5\3\u00d5\5\u00d5\u0dfe\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\7\u00d5\u0e04\n\u00d5\f\u00d5\16\u00d5\u0e07\13\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0e12"+
		"\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u0e1a"+
		"\n\u00d7\f\u00d7\16\u00d7\u0e1d\13\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e21"+
		"\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0e29"+
		"\n\u00d8\f\u00d8\16\u00d8\u0e2c\13\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8"+
		"\u0e31\n\u00d8\f\u00d8\16\u00d8\u0e34\13\u00d8\5\u00d8\u0e36\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d9\3\u00d9\5\u00d9\u0e3c\n\u00d9\3\u00da\3\u00da\5"+
		"\u00da\u0e40\n\u00da\3\u00db\3\u00db\3\u00db\5\u00db\u0e45\n\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0e4d\n\u00db\f\u00db"+
		"\16\u00db\u0e50\13\u00db\3\u00db\3\u00db\5\u00db\u0e54\n\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc"+
		"\u0e5f\n\u00dc\f\u00dc\16\u00dc\u0e62\13\u00dc\3\u00dc\3\u00dc\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u0e6b\n\u00dd\f\u00dd\16\u00dd"+
		"\u0e6e\13\u00dd\3\u00dd\3\u00dd\5\u00dd\u0e72\n\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u0e7a\n\u00dd\f\u00dd\16\u00dd"+
		"\u0e7d\13\u00dd\3\u00dd\3\u00dd\5\u00dd\u0e81\n\u00dd\5\u00dd\u0e83\n"+
		"\u00dd\3\u00de\3\u00de\3\u00de\5\u00de\u0e88\n\u00de\3\u00de\3\u00de\5"+
		"\u00de\u0e8c\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0e92\n\u00de"+
		"\3\u00de\3\u00de\5\u00de\u0e96\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0ea1\n\u00e0\f\u00e0"+
		"\16\u00e0\u0ea4\13\u00e0\3\u00e0\5\u00e0\u0ea7\n\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0eaf\n\u00e0\f\u00e0\16\u00e0"+
		"\u0eb2\13\u00e0\5\u00e0\u0eb4\n\u00e0\5\u00e0\u0eb6\n\u00e0\3\u00e1\3"+
		"\u00e1\3\u00e1\5\u00e1\u0ebb\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\7\u00e2\u0ec2\n\u00e2\f\u00e2\16\u00e2\u0ec5\13\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0ecf\n"+
		"\u00e3\f\u00e3\16\u00e3\u0ed2\13\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u0ed9\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6"+
		"\7\u00e6\u0ee0\n\u00e6\f\u00e6\16\u00e6\u0ee3\13\u00e6\3\u00e6\5\u00e6"+
		"\u0ee6\n\u00e6\3\u00e6\7\u00e6\u0ee9\n\u00e6\f\u00e6\16\u00e6\u0eec\13"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\5\u00e7\u0ef6\n\u00e7\5\u00e7\u0ef8\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\7\u00e9\u0f06\n\u00e9\f\u00e9\16\u00e9\u0f09\13\u00e9\3\u00ea\3\u00ea"+
		"\5\u00ea\u0f0d\n\u00ea\3\u00ea\3\u00ea\7\u00ea\u0f11\n\u00ea\f\u00ea\16"+
		"\u00ea\u0f14\13\u00ea\3\u00ea\3\u00ea\3\u00eb\5\u00eb\u0f19\n\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0f29\n\u00ed\f\u00ed"+
		"\16\u00ed\u0f2c\13\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\5\u00ee\u0f32"+
		"\n\u00ee\3\u00ef\5\u00ef\u0f35\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\7\u00ef\u0f3b\n\u00ef\f\u00ef\16\u00ef\u0f3e\13\u00ef\3\u00ef\3\u00ef"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0f46\n\u00f0\5\u00f0\u0f48\n"+
		"\u00f0\3\u00f0\3\u00f0\5\u00f0\u0f4c\n\u00f0\3\u00f0\5\u00f0\u0f4f\n\u00f0"+
		"\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0f54\n\u00f1\5\u00f1\u0f56\n\u00f1\3"+
		"\u00f1\3\u00f1\5\u00f1\u0f5a\n\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3"+
		"\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0f66\n\u00f3\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\5\u00f5\u0f6f\n"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u0f75\n\u00f5\f\u00f5\16"+
		"\u00f5\u0f78\13\u00f5\3\u00f6\3\u00f6\5\u00f6\u0f7c\n\u00f6\3\u00f6\3"+
		"\u00f6\5\u00f6\u0f80\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0f85\n\u00f7"+
		"\3\u00f7\5\u00f7\u0f88\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8"+
		"\u0f8e\n\u00f8\f\u00f8\16\u00f8\u0f91\13\u00f8\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\5\u00f9\u0f98\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\5\u00fa\u0f9e\n\u00fa\3\u00fa\5\u00fa\u0fa1\n\u00fa\3\u00fa\5\u00fa\u0fa4"+
		"\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u0faa\n\u00fb\f\u00fb"+
		"\16\u00fb\u0fad\13\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\5\u00fb\u0fb6\n\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u0fc0\n\u00fc\f\u00fc\16\u00fc\u0fc3"+
		"\13\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0fc9\n\u00fc\3\u00fd"+
		"\3\u00fd\5\u00fd\u0fcd\n\u00fd\3\u00fd\3\u00fd\5\u00fd\u0fd1\n\u00fd\3"+
		"\u00fd\5\u00fd\u0fd4\n\u00fd\3\u00fd\5\u00fd\u0fd7\n\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\5\u00fe\u0fdc\n\u00fe\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0fe1\n"+
		"\u00ff\3\u00ff\5\u00ff\u0fe4\n\u00ff\3\u00ff\5\u00ff\u0fe7\n\u00ff\3\u0100"+
		"\3\u0100\6\u0100\u0feb\n\u0100\r\u0100\16\u0100\u0fec\3\u0100\5\u0100"+
		"\u0ff0\n\u0100\3\u0100\3\u0100\3\u0101\3\u0101\5\u0101\u0ff6\n\u0101\3"+
		"\u0101\5\u0101\u0ff9\n\u0101\3\u0102\5\u0102\u0ffc\n\u0102\3\u0102\6\u0102"+
		"\u0fff\n\u0102\r\u0102\16\u0102\u1000\3\u0102\5\u0102\u1004\n\u0102\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\6\u0103\u100a\n\u0103\r\u0103\16\u0103"+
		"\u100b\3\u0104\3\u0104\6\u0104\u1010\n\u0104\r\u0104\16\u0104\u1011\3"+
		"\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\7\u0105\u101a\n\u0105\f"+
		"\u0105\16\u0105\u101d\13\u0105\3\u0105\3\u0105\5\u0105\u1021\n\u0105\3"+
		"\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u102a\n"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\5\u0107\u1034\n\u0107\3\u0107\3\u0107\5\u0107\u1038\n\u0107\5\u0107\u103a"+
		"\n\u0107\3\u0107\5\u0107\u103d\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108\u1047\n\u0108\f\u0108\16\u0108"+
		"\u104a\13\u0108\3\u0108\5\u0108\u104d\n\u0108\3\u0108\5\u0108\u1050\n"+
		"\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\7\u010b"+
		"\u1062\n\u010b\f\u010b\16\u010b\u1065\13\u010b\3\u010b\3\u010b\5\u010b"+
		"\u1069\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u106e\n\u010b\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1075\n\u010c\3\u010c\5\u010c\u1078"+
		"\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u107f\n\u010d"+
		"\f\u010d\16\u010d\u1082\13\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d"+
		"\u1088\n\u010d\3\u010e\3\u010e\3\u010e\5\u010e\u108d\n\u010e\3\u010f\3"+
		"\u010f\5\u010f\u1091\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3"+
		"\u0110\5\u0110\u1099\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u109f"+
		"\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u10a7"+
		"\n\u0111\3\u0111\5\u0111\u10aa\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112"+
		"\7\u0112\u10b0\n\u0112\f\u0112\16\u0112\u10b3\13\u0112\3\u0112\3\u0112"+
		"\3\u0113\3\u0113\3\u0113\5\u0113\u10ba\n\u0113\3\u0113\5\u0113\u10bd\n"+
		"\u0113\3\u0113\5\u0113\u10c0\n\u0113\3\u0114\3\u0114\3\u0114\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\5\u0115\u10c9\n\u0115\3\u0116\3\u0116\3\u0116\3"+
		"\u0116\5\u0116\u10cf\n\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u10d5"+
		"\n\u0116\5\u0116\u10d7\n\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u10e4\n\u0117"+
		"\5\u0117\u10e6\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0118\5\u0118\u10ef\n\u0118\5\u0118\u10f1\n\u0118\3\u0119\3\u0119\5"+
		"\u0119\u10f5\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u10fb\n\u0119"+
		"\3\u0119\3\u0119\5\u0119\u10ff\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\5\u011c"+
		"\u110d\n\u011c\3\u011c\3\u011c\7\u011c\u1111\n\u011c\f\u011c\16\u011c"+
		"\u1114\13\u011c\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e\3\u011e\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\7\u011f\u1120\n\u011f\f\u011f\16\u011f\u1123"+
		"\13\u011f\5\u011f\u1125\n\u011f\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121"+
		"\7\u0121\u112c\n\u0121\f\u0121\16\u0121\u112f\13\u0121\3\u0122\3\u0122"+
		"\3\u0122\5\u0122\u1134\n\u0122\3\u0123\3\u0123\7\u0123\u1138\n\u0123\f"+
		"\u0123\16\u0123\u113b\13\u0123\3\u0124\3\u0124\5\u0124\u113f\n\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u114a\n\u0124\3\u0124\3\u0124\5\u0124\u114e\n\u0124\3\u0124\3"+
		"\u0124\3\u0124\7\u0124\u1153\n\u0124\f\u0124\16\u0124\u1156\13\u0124\3"+
		"\u0124\3\u0124\5\u0124\u115a\n\u0124\3\u0125\3\u0125\3\u0125\5\u0125\u115f"+
		"\n\u0125\3\u0125\3\u0125\5\u0125\u1163\n\u0125\3\u0126\3\u0126\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\7\u0127\u116b\n\u0127\f\u0127\16\u0127\u116e"+
		"\13\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1176"+
		"\n\u0128\3\u0129\3\u0129\5\u0129\u117a\n\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1183\n\u0129\5\u0129\u1185\n"+
		"\u0129\5\u0129\u1187\n\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c"+
		"\u1196\n\u012c\f\u012c\16\u012c\u1199\13\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\5\u012c\u11a0\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u11aa\n\u012e\f\u012e\16\u012e"+
		"\u11ad\13\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0130\7\u0130"+
		"\u11b5\n\u0130\f\u0130\16\u0130\u11b8\13\u0130\3\u0131\3\u0131\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\7\u0132\u11c0\n\u0132\f\u0132\16\u0132\u11c3"+
		"\13\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\5\u0134\u11cd\n\u0134\3\u0134\5\u0134\u11d0\n\u0134\3\u0135\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\5\u0135\u11d7\n\u0135\3\u0135\3\u0135\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\5\u0135\u11df\n\u0135\3\u0135\3\u0135\3\u0135\3"+
		"\u0135\3\u0135\5\u0135\u11e6\n\u0135\3\u0135\3\u0135\5\u0135\u11ea\n\u0135"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u11f1\n\u0136\3\u0137"+
		"\3\u0137\5\u0137\u11f5\n\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u11fa\n"+
		"\u0137\7\u0137\u11fc\n\u0137\f\u0137\16\u0137\u11ff\13\u0137\3\u0137\3"+
		"\u0137\3\u0137\7\u0137\u1204\n\u0137\f\u0137\16\u0137\u1207\13\u0137\3"+
		"\u0137\5\u0137\u120a\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5"+
		"\u0138\u1211\n\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3"+
		"\u0138\5\u0138\u121a\n\u0138\3\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3"+
		"\u013b\3\u013b\3\u013b\3\u013b\3\u013b\7\u013b\u1226\n\u013b\f\u013b\16"+
		"\u013b\u1229\13\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\7\u013b\u1233\n\u013b\f\u013b\16\u013b\u1236\13\u013b"+
		"\3\u013b\3\u013b\5\u013b\u123a\n\u013b\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1250"+
		"\n\u013c\3\u013d\3\u013d\5\u013d\u1254\n\u013d\3\u013e\5\u013e\u1257\n"+
		"\u013e\3\u013e\3\u013e\3\u013e\6\u013e\u125c\n\u013e\r\u013e\16\u013e"+
		"\u125d\3\u013e\5\u013e\u1261\n\u013e\3\u013e\3\u013e\5\u013e\u1265\n\u013e"+
		"\3\u013e\5\u013e\u1268\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\5\u013f\u126f\n\u013f\3\u0140\5\u0140\u1272\n\u0140\3\u0140\3\u0140\6"+
		"\u0140\u1276\n\u0140\r\u0140\16\u0140\u1277\3\u0140\5\u0140\u127b\n\u0140"+
		"\3\u0140\3\u0140\5\u0140\u127f\n\u0140\3\u0140\5\u0140\u1282\n\u0140\3"+
		"\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1289\n\u0141\3\u0142\3"+
		"\u0142\3\u0142\5\u0142\u128e\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\7\u0143\u129a\n\u0143\f"+
		"\u0143\16\u0143\u129d\13\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u12a2\n"+
		"\u0143\5\u0143\u12a4\n\u0143\3\u0144\3\u0144\5\u0144\u12a8\n\u0144\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\7\u0145\u12ae\n\u0145\f\u0145\16\u0145\u12b1"+
		"\13\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\5\u0146\u12bc\n\u0146\3\u0147\3\u0147\3\u0147\5\u0147\u12c1\n"+
		"\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u12c6\n\u0147\3\u0147\3\u0147\3"+
		"\u0147\3\u0147\5\u0147\u12cc\n\u0147\3\u0147\5\u0147\u12cf\n\u0147\3\u0147"+
		"\3\u0147\5\u0147\u12d3\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\5\u0147\u12dd\n\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\5\u0147\u12ed\n\u0147\3\u0147\3\u0147\5\u0147\u12f1\n"+
		"\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\6\u0147\u12f8\n\u0147\r"+
		"\u0147\16\u0147\u12f9\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1300\n"+
		"\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u130e\n\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7\u0147\u1317\n\u0147\f\u0147"+
		"\16\u0147\u131a\13\u0147\3\u0147\5\u0147\u131d\n\u0147\3\u0147\5\u0147"+
		"\u1320\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\5\u0147\u1329\n\u0147\3\u0147\3\u0147\7\u0147\u132d\n\u0147\f\u0147\16"+
		"\u0147\u1330\13\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u1339\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u1341\n\u0147\3\u0147\5\u0147\u1344\n\u0147\3\u0147\5"+
		"\u0147\u1347\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3"+
		"\u0147\5\u0147\u1350\n\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1355\n\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7\u0147\u135c\n\u0147\f\u0147"+
		"\16\u0147\u135f\13\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1364\n\u0147"+
		"\3\u0147\3\u0147\3\u0147\5\u0147\u1369\n\u0147\3\u0147\5\u0147\u136c\n"+
		"\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1371\n\u0147\3\u0147\3\u0147\3"+
		"\u0147\5\u0147\u1376\n\u0147\7\u0147\u1378\n\u0147\f\u0147\16\u0147\u137b"+
		"\13\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1380\n\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\5\u0147\u1386\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\5\u0147\u138f\n\u0147\3\u0147\3\u0147\3\u0147"+
		"\5\u0147\u1394\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\5\u0147\u139c\n\u0147\3\u0147\3\u0147\5\u0147\u13a0\n\u0147\3\u0147\3"+
		"\u0147\3\u0147\5\u0147\u13a5\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5"+
		"\u0147\u13ab\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13b2"+
		"\n\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13b7\n\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13bf\n\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u13c4\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u13cc\n\u0147\3\u0147\5\u0147\u13cf\n\u0147\3\u0147\5"+
		"\u0147\u13d2\n\u0147\3\u0147\5\u0147\u13d5\n\u0147\3\u0147\3\u0147\5\u0147"+
		"\u13d9\n\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13de\n\u0147\3\u0147\3"+
		"\u0147\3\u0147\5\u0147\u13e3\n\u0147\3\u0147\3\u0147\5\u0147\u13e7\n\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u13ee\n\u0147\3\u0147"+
		"\3\u0147\3\u0147\5\u0147\u13f3\n\u0147\5\u0147\u13f5\n\u0147\3\u0148\3"+
		"\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\5\u014b"+
		"\u1400\n\u014b\3\u014b\3\u014b\5\u014b\u1404\n\u014b\5\u014b\u1406\n\u014b"+
		"\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u1411\n\u014c\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\5\u014e\u141c\n\u014e\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\7\u014f\u1423\n\u014f\f\u014f\16\u014f\u1426\13\u014f"+
		"\5\u014f\u1428\n\u014f\3\u0150\3\u0150\5\u0150\u142c\n\u0150\3\u0150\5"+
		"\u0150\u142f\n\u0150\3\u0150\3\u0150\5\u0150\u1433\n\u0150\3\u0151\3\u0151"+
		"\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152\3\u0152"+
		"\5\u0152\u1440\n\u0152\3\u0153\3\u0153\3\u0153\5\u0153\u1445\n\u0153\3"+
		"\u0153\3\u0153\3\u0153\3\u0153\7\u0153\u144b\n\u0153\f\u0153\16\u0153"+
		"\u144e\13\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1454\n\u0153"+
		"\3\u0154\3\u0154\3\u0154\5\u0154\u1459\n\u0154\3\u0154\3\u0154\5\u0154"+
		"\u145d\n\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1462\n\u0154\3\u0155\3"+
		"\u0155\3\u0155\5\u0155\u1467\n\u0155\3\u0155\5\u0155\u146a\n\u0155\3\u0155"+
		"\3\u0155\3\u0155\7\u0155\u146f\n\u0155\f\u0155\16\u0155\u1472\13\u0155"+
		"\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u147b"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156\u1481\n\u0156\f\u0156"+
		"\16\u0156\u1484\13\u0156\3\u0156\5\u0156\u1487\n\u0156\3\u0156\3\u0156"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1491\n\u0157"+
		"\3\u0157\5\u0157\u1494\n\u0157\5\u0157\u1496\n\u0157\3\u0158\3\u0158\3"+
		"\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u14a0\n\u0159\5"+
		"\u0159\u14a2\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u14a8\n\u015a"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u14ae\n\u015b\5\u015b\u14b0\n"+
		"\u015b\3\u015c\3\u015c\3\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u14be\n\u015e\5\u015e\u14c0\n"+
		"\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u14c8\n"+
		"\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\5\u015f\u14d2\n\u015f\3\u015f\5\u015f\u14d5\n\u015f\3\u015f\3\u015f\3"+
		"\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u14e0\n"+
		"\u0160\3\u0160\5\u0160\u14e3\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3"+
		"\u0161\3\u0161\3\u0161\5\u0161\u14ec\n\u0161\3\u0162\3\u0162\3\u0162\3"+
		"\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u14f5\n\u0162\3\u0163\3\u0163\3"+
		"\u0164\3\u0164\3\u0165\3\u0165\5\u0165\u14fd\n\u0165\3\u0165\3\u0165\3"+
		"\u0166\5\u0166\u1502\n\u0166\3\u0166\3\u0166\5\u0166\u1506\n\u0166\3\u0166"+
		"\5\u0166\u1509\n\u0166\3\u0167\3\u0167\5\u0167\u150d\n\u0167\3\u0168\3"+
		"\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u1514\n\u0169\3\u016a\3\u016a\3"+
		"\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016b\7\u016b\u151e\n\u016b\f"+
		"\u016b\16\u016b\u1521\13\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\7\u016b\u1529\n\u016b\f\u016b\16\u016b\u152c\13\u016b\5\u016b"+
		"\u152e\n\u016b\3\u016c\3\u016c\5\u016c\u1532\n\u016c\3\u016d\3\u016d\3"+
		"\u016e\3\u016e\3\u016f\3\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\3\u0173\3\u0173\3\u0173\7\u0173\u1543\n\u0173\f\u0173\16\u0173"+
		"\u1546\13\u0173\3\u0173\3\u0173\5\u0173\u154a\n\u0173\3\u0174\3\u0174"+
		"\3\u0175\3\u0175\3\u0175\5\u0175\u1551\n\u0175\3\u0176\3\u0176\3\u0177"+
		"\3\u0177\3\u0178\3\u0178\3\u0179\3\u0179\3\u0179\7\u0179\u155c\n\u0179"+
		"\f\u0179\16\u0179\u155f\13\u0179\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b"+
		"\7\u017b\u1566\n\u017b\f\u017b\16\u017b\u1569\13\u017b\3\u017b\3\u017b"+
		"\5\u017b\u156d\n\u017b\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d\7\u017d"+
		"\u1574\n\u017d\f\u017d\16\u017d\u1577\13\u017d\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u157c\n\u017e\3\u017e\3\u017e\3\u017f\3\u017f\3\u017f\7\u017f"+
		"\u1583\n\u017f\f\u017f\16\u017f\u1586\13\u017f\3\u0180\3\u0180\3\u0180"+
		"\5\u0180\u158b\n\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\5\u0181"+
		"\u1592\n\u0181\3\u0181\3\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u1599\n"+
		"\u0182\3\u0182\3\u0182\3\u0183\3\u0183\5\u0183\u159f\n\u0183\3\u0183\3"+
		"\u0183\3\u0183\5\u0183\u15a4\n\u0183\3\u0183\5\u0183\u15a7\n\u0183\3\u0184"+
		"\3\u0184\3\u0185\3\u0185\5\u0185\u15ad\n\u0185\3\u0186\3\u0186\5\u0186"+
		"\u15b1\n\u0186\3\u0187\3\u0187\3\u0187\5\u0187\u15b6\n\u0187\3\u0188\3"+
		"\u0188\3\u0189\3\u0189\3\u0189\7\u0189\u15bd\n\u0189\f\u0189\16\u0189"+
		"\u15c0\13\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u15c5\n\u018a\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u15ca\n\u018a\3\u018b\3\u018b\3\u018b\7\u018b"+
		"\u15cf\n\u018b\f\u018b\16\u018b\u15d2\13\u018b\3\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u15db\n\u018c\3\u018d\3\u018d"+
		"\5\u018d\u15df\n\u018d\3\u018d\3\u018d\7\u018d\u15e3\n\u018d\f\u018d\16"+
		"\u018d\u15e6\13\u018d\3\u018d\3\u018d\5\u018d\u15ea\n\u018d\3\u018e\3"+
		"\u018e\3\u018e\5\u018e\u15ef\n\u018e\5\u018e\u15f1\n\u018e\3\u018e\3\u018e"+
		"\3\u018e\5\u018e\u15f6\n\u018e\7\u018e\u15f8\n\u018e\f\u018e\16\u018e"+
		"\u15fb\13\u018e\3\u018e\3\u018e\5\u018e\u15ff\n\u018e\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\5\u018f\u1606\n\u018f\3\u018f\3\u018f\3\u018f"+
		"\5\u018f\u160b\n\u018f\5\u018f\u160d\n\u018f\5\u018f\u160f\n\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u1619"+
		"\n\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u161e\n\u018f\7\u018f\u1620\n"+
		"\u018f\f\u018f\16\u018f\u1623\13\u018f\5\u018f\u1625\n\u018f\3\u018f\3"+
		"\u018f\5\u018f\u1629\n\u018f\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191\3"+
		"\u0191\3\u0191\5\u0191\u1632\n\u0191\3\u0191\3\u0191\3\u0192\3\u0192\5"+
		"\u0192\u1638\n\u0192\3\u0192\3\u0192\5\u0192\u163c\n\u0192\5\u0192\u163e"+
		"\n\u0192\3\u0193\3\u0193\5\u0193\u1642\n\u0193\3\u0193\3\u0193\5\u0193"+
		"\u1646\n\u0193\3\u0193\3\u0193\5\u0193\u164a\n\u0193\3\u0193\3\u0193\3"+
		"\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u1652\n\u0193\3\u0193\3\u0193\3"+
		"\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u165a\n\u0193\5\u0193\u165c\n\u0193"+
		"\3\u0194\3\u0194\3\u0194\5\u0194\u1661\n\u0194\3\u0194\3\u0194\5\u0194"+
		"\u1665\n\u0194\3\u0194\5\u0194\u1668\n\u0194\3\u0194\3\u0194\3\u0195\3"+
		"\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\5\u0195\u1680\n\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\5\u0195\u1687\n\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u16a8"+
		"\n\u0195\3\u0196\3\u0196\3\u0196\5\u0196\u16ad\n\u0196\3\u0196\5\u0196"+
		"\u16b0\n\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u16b5\n\u0196\5\u0196\u16b7"+
		"\n\u0196\3\u0196\3\u0196\7\u0196\u16bb\n\u0196\f\u0196\16\u0196\u16be"+
		"\13\u0196\3\u0197\3\u0197\3\u0197\7\u0197\u16c3\n\u0197\f\u0197\16\u0197"+
		"\u16c6\13\u0197\3\u0198\3\u0198\5\u0198\u16ca\n\u0198\3\u0198\3\u0198"+
		"\3\u0198\7\u0198\u16cf\n\u0198\f\u0198\16\u0198\u16d2\13\u0198\3\u0198"+
		"\7\u0198\u16d5\n\u0198\f\u0198\16\u0198\u16d8\13\u0198\3\u0199\3\u0199"+
		"\5\u0199\u16dc\n\u0199\3\u0199\3\u0199\3\u0199\7\u0199\u16e1\n\u0199\f"+
		"\u0199\16\u0199\u16e4\13\u0199\3\u019a\3\u019a\3\u019a\5\u019a\u16e9\n"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u16ef\n\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\5\u019a\u16f5\n\u019a\3\u019a\3\u019a\3\u019a\3"+
		"\u019a\5\u019a\u16fb\n\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u1700\n\u019a"+
		"\5\u019a\u1702\n\u019a\3\u019a\5\u019a\u1705\n\u019a\3\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u170f\n\u019a\3"+
		"\u019a\5\u019a\u1712\n\u019a\5\u019a\u1714\n\u019a\5\u019a\u1716\n\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\5\u019a\u1724\n\u019a\3\u019b\3\u019b\3\u019c"+
		"\3\u019c\3\u019c\3\u019d\3\u019d\3\u019e\3\u019e\5\u019e\u172f\n\u019e"+
		"\3\u019e\3\u019e\3\u019f\3\u019f\5\u019f\u1735\n\u019f\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u173e\n\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a1\5\u01a1\u1743\n\u01a1\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u1748\n\u01a2\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u174d\n\u01a3\3\u01a4\3"+
		"\u01a4\3\u01a4\3\u01a4\3\u01a5\3\u01a5\3\u01a5\2\2\u01a6\2\4\6\b\n\f\16"+
		"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd"+
		"fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092"+
		"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa"+
		"\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2"+
		"\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da"+
		"\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2"+
		"\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a"+
		"\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122"+
		"\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a"+
		"\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152"+
		"\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a"+
		"\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182"+
		"\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a"+
		"\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2"+
		"\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca"+
		"\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2"+
		"\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa"+
		"\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212"+
		"\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a"+
		"\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242"+
		"\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a"+
		"\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272"+
		"\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a"+
		"\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2"+
		"\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba"+
		"\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2"+
		"\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea"+
		"\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302"+
		"\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a"+
		"\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332"+
		"\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\2["+
		"\3\2\u0230\u0230\4\2rr\u00b8\u00b8\4\2\u01ca\u01ca\u021e\u021e\5\2oo\u00d8"+
		"\u00d8\u015f\u015f\5\2oo\u00d8\u00d8\u011d\u011d\4\2\16\16\u0157\u0157"+
		"\4\2\u00b4\u00b4\u00f3\u00f3\5\2\u009a\u009a\u00ee\u00ee\u011a\u011a\4"+
		"\2\33\33\u0181\u0181\4\2yy\u0085\u0085\4\2nn\u00d9\u00d9\5\2\u00b4\u00b4"+
		"\u00f3\u00f3\u00fb\u00fb\4\2\20\20\u00d3\u00d3\4\2\b\b\u014a\u014a\4\2"+
		"\u00b0\u00b0\u0159\u0159\4\2>>\u0135\u0135\5\2&&\u013d\u013d\u019b\u019b"+
		"\4\2\6\6\35\35\5\2tt\u00ca\u00ca\u01cd\u01cd\5\2\u0111\u0111\u012d\u012d"+
		"\u0140\u0140\4\2\u00a4\u00a4\u01d3\u01d3\4\2&&\u019b\u019b\4\2\5\5~~\5"+
		"\2\5\5~~\u0105\u0105\5\2__\u0134\u0134\u019c\u019c\4\2\u00f5\u00f5\u0135"+
		"\u0135\4\2\u00fc\u00fc\u01a3\u01a3\5\2\u009b\u009b\u00cb\u00cb\u013c\u013c"+
		"\4\2]]ss\6\2\u00b9\u00b9\u00c9\u00c9\u0117\u0117\u0139\u0139\4\2oo\u022d"+
		"\u022d\3\2\u0148\u0149\3\3\u0230\u0230\3\2\u016d\u016e\4\2\u0130\u0130"+
		"\u01e8\u01e8\3\2MN\4\2\u0123\u0123\u01de\u01de\4\2\34\34\u00b8\u00b8\4"+
		"\2))uu\5\2\t\t{{\u01c9\u01c9\4\2ZZ\u010a\u010a\5\2\u00a9\u00a9\u00df\u00df"+
		"\u0172\u0172\4\2\u017e\u017e\u01b4\u01b4\5\2\u017e\u017e\u0199\u0199\u01b4"+
		"\u01b4\4\2\u008f\u008f\u00ba\u00ba\4\2[[\u0174\u0174\4\2\u00b7\u00b7\u00d8"+
		"\u00d8\4\2\t\t\u01ce\u01ce\4\2\30\30\u0187\u0187\4\2\21\21vv\4\2\u009c"+
		"\u009c\u00dc\u00dc\4\2\t\t\u009c\u009c\4\2\u01af\u01af\u01b1\u01b1\4\2"+
		"\u00fc\u00fc\u01a8\u01a8\3\2\u00e4\u00e7\3\2\u0228\u0229\4\2\u0227\u0227"+
		"\u022b\u022b\4\2mm\u00bc\u00bc\6\2\t\t\r\r\u0092\u0092\u019a\u019a\4\2"+
		"\64\64\u01ec\u01ec\4\2{{\u01c9\u01c9\4\2\61\61EE\4\2\u009d\u009d\u00dd"+
		"\u00dd\4\2\67\67\u010e\u010e\5\2((\u00de\u00de\u01bd\u01bd\4\2\u01ed\u01ed"+
		"\u01f0\u01f0\4\2\u0088\u0088\u0119\u0119\4\2\u008b\u008b\u0108\u0108\4"+
		"\2PP||\4\2\u00b3\u00b3\u0190\u0190\3\2\u0209\u0218\3\2\u0202\u0208\3\2"+
		"\u01fc\u0201\4\2\u0159\u0159\u0177\u0177\4\2\u00a0\u00a0\u0151\u0151\4"+
		"\2\u0120\u0120\u017d\u017d\4\2\u0138\u0138\u019d\u019d\5\2\u0097\u0097"+
		"\u01ac\u01ac\u01df\u01df\4\2CC\u0173\u0173\5\2CC\u011d\u011d\u0173\u0173"+
		"\4\2\u0141\u0141\u01a9\u01a9\4\2\u00b7\u00b7\u0169\u0169\4\2dd\u01f8\u01f8"+
		"\4\2\u0106\u0106\u0180\u0180\4\2--\66\66\6\2dd\u00b5\u00b5\u0100\u0100"+
		"\u0180\u0180\3\2\u021e\u021f\4\2\u0219\u0219\u0220\u0220a\2\4\b\13\13"+
		"\17\17\22\31\34\35 (++-.\60\62\64\64\668::<?AGLWZ[]bdjlmpprswz|}\177\u0081"+
		"\u0084\u0086\u0088\u008b\u008d\u008f\u0091\u0091\u0093\u0097\u009b\u009d"+
		"\u009f\u00a1\u00a3\u00a4\u00a9\u00aa\u00af\u00b0\u00b3\u00b3\u00b5\u00b5"+
		"\u00b7\u00b8\u00ba\u00bd\u00bf\u00bf\u00c1\u00c3\u00c7\u00c9\u00cb\u00ce"+
		"\u00d0\u00d0\u00d2\u00d2\u00d4\u00d8\u00db\u00e1\u00e3\u00e3\u00e5\u00e8"+
		"\u00ea\u00ea\u00ec\u00ed\u00ef\u00f2\u00f4\u00f6\u00f9\u00fa\u00fc\u00fd"+
		"\u0100\u0102\u0104\u0111\u0113\u0114\u0117\u0119\u011d\u011d\u0120\u0120"+
		"\u0125\u0129\u012b\u012d\u0130\u0131\u0134\u0134\u0136\u0136\u0138\u0143"+
		"\u014a\u014a\u014c\u0153\u0158\u015b\u015d\u015e\u0160\u0161\u0163\u0165"+
		"\u0167\u0170\u0172\u017e\u0180\u0180\u0182\u0183\u0185\u0185\u0187\u018e"+
		"\u0190\u0195\u0197\u019e\u01a0\u01a4\u01a7\u01ad\u01b3\u01bb\u01bd\u01c2"+
		"\u01c4\u01c7\u01ca\u01ca\u01cc\u01cc\u01ce\u01d1\u01d3\u01d4\u01d6\u01dc"+
		"\u01de\u01e0\u01e2\u01e2\u01e4\u01e4\u01e6\u0218\u029f\u029f\2\u1a09\2"+
		"\u034b\3\2\2\2\4\u0352\3\2\2\2\6\u035b\3\2\2\2\b\u0378\3\2\2\2\n\u037a"+
		"\3\2\2\2\f\u0399\3\2\2\2\16\u039b\3\2\2\2\20\u03a7\3\2\2\2\22\u03bf\3"+
		"\2\2\2\24\u03c6\3\2\2\2\26\u03cc\3\2\2\2\30\u03d9\3\2\2\2\32\u03dd\3\2"+
		"\2\2\34\u0407\3\2\2\2\36\u0409\3\2\2\2 \u040b\3\2\2\2\"\u042c\3\2\2\2"+
		"$\u043f\3\2\2\2&\u0443\3\2\2\2(\u044a\3\2\2\2*\u044c\3\2\2\2,\u045b\3"+
		"\2\2\2.\u045f\3\2\2\2\60\u046e\3\2\2\2\62\u047f\3\2\2\2\64\u048d\3\2\2"+
		"\2\66\u04c4\3\2\2\28\u04c8\3\2\2\2:\u04fb\3\2\2\2<\u0526\3\2\2\2>\u052a"+
		"\3\2\2\2@\u052f\3\2\2\2B\u053b\3\2\2\2D\u053f\3\2\2\2F\u056a\3\2\2\2H"+
		"\u056e\3\2\2\2J\u0577\3\2\2\2L\u059a\3\2\2\2N\u05ac\3\2\2\2P\u05be\3\2"+
		"\2\2R\u05c0\3\2\2\2T\u05c5\3\2\2\2V\u05dd\3\2\2\2X\u0611\3\2\2\2Z\u0615"+
		"\3\2\2\2\\\u062d\3\2\2\2^\u0631\3\2\2\2`\u063d\3\2\2\2b\u064b\3\2\2\2"+
		"d\u0653\3\2\2\2f\u0669\3\2\2\2h\u0675\3\2\2\2j\u0686\3\2\2\2l\u069d\3"+
		"\2\2\2n\u069f\3\2\2\2p\u06b0\3\2\2\2r\u06cd\3\2\2\2t\u06cf\3\2\2\2v\u06d4"+
		"\3\2\2\2x\u06ec\3\2\2\2z\u0711\3\2\2\2|\u0716\3\2\2\2~\u072f\3\2\2\2\u0080"+
		"\u0747\3\2\2\2\u0082\u0750\3\2\2\2\u0084\u0759\3\2\2\2\u0086\u0762\3\2"+
		"\2\2\u0088\u0766\3\2\2\2\u008a\u076b\3\2\2\2\u008c\u0783\3\2\2\2\u008e"+
		"\u0785\3\2\2\2\u0090\u0789\3\2\2\2\u0092\u07bd\3\2\2\2\u0094\u07d9\3\2"+
		"\2\2\u0096\u07db\3\2\2\2\u0098\u07e9\3\2\2\2\u009a\u07f5\3\2\2\2\u009c"+
		"\u07fa\3\2\2\2\u009e\u0800\3\2\2\2\u00a0\u0803\3\2\2\2\u00a2\u080e\3\2"+
		"\2\2\u00a4\u081d\3\2\2\2\u00a6\u082e\3\2\2\2\u00a8\u083f\3\2\2\2\u00aa"+
		"\u0847\3\2\2\2\u00ac\u084c\3\2\2\2\u00ae\u085c\3\2\2\2\u00b0\u0860\3\2"+
		"\2\2\u00b2\u0878\3\2\2\2\u00b4\u087b\3\2\2\2\u00b6\u0881\3\2\2\2\u00b8"+
		"\u088d\3\2\2\2\u00ba\u0896\3\2\2\2\u00bc\u08b2\3\2\2\2\u00be\u08b8\3\2"+
		"\2\2\u00c0\u08bb\3\2\2\2\u00c2\u08c2\3\2\2\2\u00c4\u08ca\3\2\2\2\u00c6"+
		"\u08d9\3\2\2\2\u00c8\u08db\3\2\2\2\u00ca\u08df\3\2\2\2\u00cc\u08e5\3\2"+
		"\2\2\u00ce\u0901\3\2\2\2\u00d0\u0923\3\2\2\2\u00d2\u0953\3\2\2\2\u00d4"+
		"\u095d\3\2\2\2\u00d6\u095f\3\2\2\2\u00d8\u0964\3\2\2\2\u00da\u0972\3\2"+
		"\2\2\u00dc\u0974\3\2\2\2\u00de\u0979\3\2\2\2\u00e0\u0989\3\2\2\2\u00e2"+
		"\u09aa\3\2\2\2\u00e4\u09cd\3\2\2\2\u00e6\u09d1\3\2\2\2\u00e8\u09e0\3\2"+
		"\2\2\u00ea\u09e2\3\2\2\2\u00ec\u09e5\3\2\2\2\u00ee\u09ea\3\2\2\2\u00f0"+
		"\u09f4\3\2\2\2\u00f2\u0a10\3\2\2\2\u00f4\u0a12\3\2\2\2\u00f6\u0a16\3\2"+
		"\2\2\u00f8\u0a19\3\2\2\2\u00fa\u0a1d\3\2\2\2\u00fc\u0a22\3\2\2\2\u00fe"+
		"\u0a26\3\2\2\2\u0100\u0a37\3\2\2\2\u0102\u0a44\3\2\2\2\u0104\u0a55\3\2"+
		"\2\2\u0106\u0a62\3\2\2\2\u0108\u0a6e\3\2\2\2\u010a\u0a70\3\2\2\2\u010c"+
		"\u0a7e\3\2\2\2\u010e\u0a8f\3\2\2\2\u0110\u0aa8\3\2\2\2\u0112\u0ab2\3\2"+
		"\2\2\u0114\u0ab6\3\2\2\2\u0116\u0adb\3\2\2\2\u0118\u0add\3\2\2\2\u011a"+
		"\u0af6\3\2\2\2\u011c\u0b01\3\2\2\2\u011e\u0b08\3\2\2\2\u0120\u0b0c\3\2"+
		"\2\2\u0122\u0b1e\3\2\2\2\u0124\u0b26\3\2\2\2\u0126\u0b31\3\2\2\2\u0128"+
		"\u0b38\3\2\2\2\u012a\u0b3c\3\2\2\2\u012c\u0b59\3\2\2\2\u012e\u0b5d\3\2"+
		"\2\2\u0130\u0b62\3\2\2\2\u0132\u0b6a\3\2\2\2\u0134\u0b72\3\2\2\2\u0136"+
		"\u0b75\3\2\2\2\u0138\u0b85\3\2\2\2\u013a\u0b8a\3\2\2\2\u013c\u0b8e\3\2"+
		"\2\2\u013e\u0bb2\3\2\2\2\u0140\u0bb4\3\2\2\2\u0142\u0bca\3\2\2\2\u0144"+
		"\u0bcc\3\2\2\2\u0146\u0bd1\3\2\2\2\u0148\u0bd3\3\2\2\2\u014a\u0bd5\3\2"+
		"\2\2\u014c\u0bd7\3\2\2\2\u014e\u0bdb\3\2\2\2\u0150\u0be0\3\2\2\2\u0152"+
		"\u0be6\3\2\2\2\u0154\u0bef\3\2\2\2\u0156\u0bf5\3\2\2\2\u0158\u0c09\3\2"+
		"\2\2\u015a\u0c0e\3\2\2\2\u015c\u0c1b\3\2\2\2\u015e\u0c1d\3\2\2\2\u0160"+
		"\u0c2b\3\2\2\2\u0162\u0c35\3\2\2\2\u0164\u0c3b\3\2\2\2\u0166\u0c3d\3\2"+
		"\2\2\u0168\u0c40\3\2\2\2\u016a\u0c45\3\2\2\2\u016c\u0c5d\3\2\2\2\u016e"+
		"\u0c6c\3\2\2\2\u0170\u0c6e\3\2\2\2\u0172\u0c83\3\2\2\2\u0174\u0c92\3\2"+
		"\2\2\u0176\u0ca8\3\2\2\2\u0178\u0caf\3\2\2\2\u017a\u0cbc\3\2\2\2\u017c"+
		"\u0cbf\3\2\2\2\u017e\u0cd4\3\2\2\2\u0180\u0cde\3\2\2\2\u0182\u0ce7\3\2"+
		"\2\2\u0184\u0d02\3\2\2\2\u0186\u0d2d\3\2\2\2\u0188\u0d3d\3\2\2\2\u018a"+
		"\u0d4a\3\2\2\2\u018c\u0d53\3\2\2\2\u018e\u0d55\3\2\2\2\u0190\u0d74\3\2"+
		"\2\2\u0192\u0d78\3\2\2\2\u0194\u0d80\3\2\2\2\u0196\u0d82\3\2\2\2\u0198"+
		"\u0d8a\3\2\2\2\u019a\u0dac\3\2\2\2\u019c\u0db8\3\2\2\2\u019e\u0dcd\3\2"+
		"\2\2\u01a0\u0dd0\3\2\2\2\u01a2\u0ddc\3\2\2\2\u01a4\u0de0\3\2\2\2\u01a6"+
		"\u0df9\3\2\2\2\u01a8\u0dfb\3\2\2\2\u01aa\u0e0c\3\2\2\2\u01ac\u0e13\3\2"+
		"\2\2\u01ae\u0e22\3\2\2\2\u01b0\u0e39\3\2\2\2\u01b2\u0e3f\3\2\2\2\u01b4"+
		"\u0e41\3\2\2\2\u01b6\u0e59\3\2\2\2\u01b8\u0e71\3\2\2\2\u01ba\u0e95\3\2"+
		"\2\2\u01bc\u0e97\3\2\2\2\u01be\u0eb5\3\2\2\2\u01c0\u0eba\3\2\2\2\u01c2"+
		"\u0ebc\3\2\2\2\u01c4\u0ec8\3\2\2\2\u01c6\u0ed8\3\2\2\2\u01c8\u0eda\3\2"+
		"\2\2\u01ca\u0edd\3\2\2\2\u01cc\u0ef7\3\2\2\2\u01ce\u0ef9\3\2\2\2\u01d0"+
		"\u0efd\3\2\2\2\u01d2\u0f0c\3\2\2\2\u01d4\u0f18\3\2\2\2\u01d6\u0f20\3\2"+
		"\2\2\u01d8\u0f24\3\2\2\2\u01da\u0f2f\3\2\2\2\u01dc\u0f34\3\2\2\2\u01de"+
		"\u0f41\3\2\2\2\u01e0\u0f55\3\2\2\2\u01e2\u0f5e\3\2\2\2\u01e4\u0f60\3\2"+
		"\2\2\u01e6\u0f67\3\2\2\2\u01e8\u0f6c\3\2\2\2\u01ea\u0f79\3\2\2\2\u01ec"+
		"\u0f81\3\2\2\2\u01ee\u0f89\3\2\2\2\u01f0\u0f97\3\2\2\2\u01f2\u0f99\3\2"+
		"\2\2\u01f4\u0fa5\3\2\2\2\u01f6\u0fc8\3\2\2\2\u01f8\u0fca\3\2\2\2\u01fa"+
		"\u0fd8\3\2\2\2\u01fc\u0fdd\3\2\2\2\u01fe\u0fef\3\2\2\2\u0200\u0ff3\3\2"+
		"\2\2\u0202\u0ffb\3\2\2\2\u0204\u1005\3\2\2\2\u0206\u100d\3\2\2\2\u0208"+
		"\u1013\3\2\2\2\u020a\u1022\3\2\2\2\u020c\u1025\3\2\2\2\u020e\u103e\3\2"+
		"\2\2\u0210\u1051\3\2\2\2\u0212\u1055\3\2\2\2\u0214\u1058\3\2\2\2\u0216"+
		"\u1074\3\2\2\2\u0218\u1079\3\2\2\2\u021a\u108c\3\2\2\2\u021c\u108e\3\2"+
		"\2\2\u021e\u109e\3\2\2\2\u0220\u10a6\3\2\2\2\u0222\u10ab\3\2\2\2\u0224"+
		"\u10b6\3\2\2\2\u0226\u10c1\3\2\2\2\u0228\u10c4\3\2\2\2\u022a\u10d6\3\2"+
		"\2\2\u022c\u10d8\3\2\2\2\u022e\u10e7\3\2\2\2\u0230\u10f2\3\2\2\2\u0232"+
		"\u1100\3\2\2\2\u0234\u1105\3\2\2\2\u0236\u110a\3\2\2\2\u0238\u1117\3\2"+
		"\2\2\u023a\u1119\3\2\2\2\u023c\u1124\3\2\2\2\u023e\u1126\3\2\2\2\u0240"+
		"\u1128\3\2\2\2\u0242\u1133\3\2\2\2\u0244\u1135\3\2\2\2\u0246\u113c\3\2"+
		"\2\2\u0248\u115b\3\2\2\2\u024a\u1164\3\2\2\2\u024c\u1166\3\2\2\2\u024e"+
		"\u1175\3\2\2\2\u0250\u1177\3\2\2\2\u0252\u1188\3\2\2\2\u0254\u118a\3\2"+
		"\2\2\u0256\u119f\3\2\2\2\u0258\u11a1\3\2\2\2\u025a\u11a5\3\2\2\2\u025c"+
		"\u11ae\3\2\2\2\u025e\u11b0\3\2\2\2\u0260\u11b9\3\2\2\2\u0262\u11bb\3\2"+
		"\2\2\u0264\u11c4\3\2\2\2\u0266\u11c6\3\2\2\2\u0268\u11e9\3\2\2\2\u026a"+
		"\u11eb\3\2\2\2\u026c\u1209\3\2\2\2\u026e\u120b\3\2\2\2\u0270\u121b\3\2"+
		"\2\2\u0272\u121e\3\2\2\2\u0274\u1220\3\2\2\2\u0276\u124f\3\2\2\2\u0278"+
		"\u1253\3\2\2\2\u027a\u1256\3\2\2\2\u027c\u1269\3\2\2\2\u027e\u1271\3\2"+
		"\2\2\u0280\u1283\3\2\2\2\u0282\u128a\3\2\2\2\u0284\u12a3\3\2\2\2\u0286"+
		"\u12a5\3\2\2\2\u0288\u12a9\3\2\2\2\u028a\u12b2\3\2\2\2\u028c\u13f4\3\2"+
		"\2\2\u028e\u13f6\3\2\2\2\u0290\u13f8\3\2\2\2\u0292\u13fa\3\2\2\2\u0294"+
		"\u13fc\3\2\2\2\u0296\u1409\3\2\2\2\u0298\u1412\3\2\2\2\u029a\u141b\3\2"+
		"\2\2\u029c\u141d\3\2\2\2\u029e\u142e\3\2\2\2\u02a0\u1434\3\2\2\2\u02a2"+
		"\u143f\3\2\2\2\u02a4\u1441\3\2\2\2\u02a6\u1455\3\2\2\2\u02a8\u1463\3\2"+
		"\2\2\u02aa\u1475\3\2\2\2\u02ac\u148a\3\2\2\2\u02ae\u1497\3\2\2\2\u02b0"+
		"\u149a\3\2\2\2\u02b2\u14a3\3\2\2\2\u02b4\u14a9\3\2\2\2\u02b6\u14b1\3\2"+
		"\2\2\u02b8\u14b4\3\2\2\2\u02ba\u14bf\3\2\2\2\u02bc\u14c1\3\2\2\2\u02be"+
		"\u14df\3\2\2\2\u02c0\u14e4\3\2\2\2\u02c2\u14ed\3\2\2\2\u02c4\u14f6\3\2"+
		"\2\2\u02c6\u14f8\3\2\2\2\u02c8\u14fa\3\2\2\2\u02ca\u1508\3\2\2\2\u02cc"+
		"\u150c\3\2\2\2\u02ce\u150e\3\2\2\2\u02d0\u1510\3\2\2\2\u02d2\u1515\3\2"+
		"\2\2\u02d4\u152d\3\2\2\2\u02d6\u1531\3\2\2\2\u02d8\u1533\3\2\2\2\u02da"+
		"\u1535\3\2\2\2\u02dc\u1537\3\2\2\2\u02de\u1539\3\2\2\2\u02e0\u153b\3\2"+
		"\2\2\u02e2\u153d\3\2\2\2\u02e4\u153f\3\2\2\2\u02e6\u154b\3\2\2\2\u02e8"+
		"\u154d\3\2\2\2\u02ea\u1552\3\2\2\2\u02ec\u1554\3\2\2\2\u02ee\u1556\3\2"+
		"\2\2\u02f0\u1558\3\2\2\2\u02f2\u1560\3\2\2\2\u02f4\u1562\3\2\2\2\u02f6"+
		"\u156e\3\2\2\2\u02f8\u1570\3\2\2\2\u02fa\u157b\3\2\2\2\u02fc\u157f\3\2"+
		"\2\2\u02fe\u158a\3\2\2\2\u0300\u1591\3\2\2\2\u0302\u1598\3\2\2\2\u0304"+
		"\u15a6\3\2\2\2\u0306\u15a8\3\2\2\2\u0308\u15ac\3\2\2\2\u030a\u15b0\3\2"+
		"\2\2\u030c\u15b2\3\2\2\2\u030e\u15b7\3\2\2\2\u0310\u15b9\3\2\2\2\u0312"+
		"\u15c1\3\2\2\2\u0314\u15cb\3\2\2\2\u0316\u15d3\3\2\2\2\u0318\u15dc\3\2"+
		"\2\2\u031a\u15eb\3\2\2\2\u031c\u1600\3\2\2\2\u031e\u162a\3\2\2\2\u0320"+
		"\u1631\3\2\2\2\u0322\u163d\3\2\2\2\u0324\u165b\3\2\2\2\u0326\u165d\3\2"+
		"\2\2\u0328\u16a7\3\2\2\2\u032a\u16ac\3\2\2\2\u032c\u16bf\3\2\2\2\u032e"+
		"\u16c9\3\2\2\2\u0330\u16db\3\2\2\2\u0332\u1723\3\2\2\2\u0334\u1725\3\2"+
		"\2\2\u0336\u1727\3\2\2\2\u0338\u172a\3\2\2\2\u033a\u172e\3\2\2\2\u033c"+
		"\u1734\3\2\2\2\u033e\u173d\3\2\2\2\u0340\u1742\3\2\2\2\u0342\u1747\3\2"+
		"\2\2\u0344\u174c\3\2\2\2\u0346\u174e\3\2\2\2\u0348\u1752\3\2\2\2\u034a"+
		"\u034c\n\2\2\2\u034b\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034b\3\2"+
		"\2\2\u034d\u034e\3\2\2\2\u034e\3\3\2\2\2\u034f\u0351\5\b\5\2\u0350\u034f"+
		"\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353"+
		"\u0355\3\2\2\2\u0354\u0352\3\2\2\2\u0355\u0356\7\2\2\3\u0356\5\3\2\2\2"+
		"\u0357\u035a\5\b\5\2\u0358\u035a\5\u02be\u0160\2\u0359\u0357\3\2\2\2\u0359"+
		"\u0358\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2"+
		"\2\2\u035c\u035e\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u035f\7\2\2\3\u035f"+
		"\7\3\2\2\2\u0360\u0379\5T+\2\u0361\u0379\5d\63\2\u0362\u0379\5v<\2\u0363"+
		"\u0379\5\u00eex\2\u0364\u0379\5|?\2\u0365\u0379\5\u00a2R\2\u0366\u0379"+
		"\5*\26\2\u0367\u0379\5V,\2\u0368\u0379\5x=\2\u0369\u0379\5f\64\2\u036a"+
		"\u0379\5L\'\2\u036b\u0379\5\n\6\2\u036c\u0379\5J&\2\u036d\u0379\5\u00f0"+
		"y\2\u036e\u0379\5~@\2\u036f\u0379\5\u00b6\\\2\u0370\u0379\5R*\2\u0371"+
		"\u0379\5b\62\2\u0372\u0379\5t;\2\u0373\u0379\5\u00ecw\2\u0374\u0379\5"+
		"z>\2\u0375\u0379\5\u00a0Q\2\u0376\u0379\5\u0162\u00b2\2\u0377\u0379\5"+
		"\u02bc\u015f\2\u0378\u0360\3\2\2\2\u0378\u0361\3\2\2\2\u0378\u0362\3\2"+
		"\2\2\u0378\u0363\3\2\2\2\u0378\u0364\3\2\2\2\u0378\u0365\3\2\2\2\u0378"+
		"\u0366\3\2\2\2\u0378\u0367\3\2\2\2\u0378\u0368\3\2\2\2\u0378\u0369\3\2"+
		"\2\2\u0378\u036a\3\2\2\2\u0378\u036b\3\2\2\2\u0378\u036c\3\2\2\2\u0378"+
		"\u036d\3\2\2\2\u0378\u036e\3\2\2\2\u0378\u036f\3\2\2\2\u0378\u0370\3\2"+
		"\2\2\u0378\u0371\3\2\2\2\u0378\u0372\3\2\2\2\u0378\u0373\3\2\2\2\u0378"+
		"\u0374\3\2\2\2\u0378\u0375\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0377\3\2"+
		"\2\2\u0379\t\3\2\2\2\u037a\u037b\7X\2\2\u037b\u037f\7\u01af\2\2\u037c"+
		"\u037d\5\u02e2\u0172\2\u037d\u037e\7\u021d\2\2\u037e\u0380\3\2\2\2\u037f"+
		"\u037c\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0382\5\u0312"+
		"\u018a\2\u0382\u0383\7\u0224\2\2\u0383\u0388\5\f\7\2\u0384\u0385\7\u022a"+
		"\2\2\u0385\u0387\5\f\7\2\u0386\u0384\3\2\2\2\u0387\u038a\3\2\2\2\u0388"+
		"\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038b\3\2\2\2\u038a\u0388\3\2"+
		"\2\2\u038b\u038d\7\u0225\2\2\u038c\u038e\5\20\t\2\u038d\u038c\3\2\2\2"+
		"\u038d\u038e\3\2\2\2\u038e\u0392\3\2\2\2\u038f\u0391\5 \21\2\u0390\u038f"+
		"\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393"+
		"\u0395\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u0396\7\u0230\2\2\u0396\13\3"+
		"\2\2\2\u0397\u039a\5\16\b\2\u0398\u039a\58\35\2\u0399\u0397\3\2\2\2\u0399"+
		"\u0398\3\2\2\2\u039a\r\3\2\2\2\u039b\u039c\5\u0310\u0189\2\u039c\u039e"+
		"\5\u0322\u0192\2\u039d\u039f\5\u0106\u0084\2\u039e\u039d\3\2\2\2\u039e"+
		"\u039f\3\2\2\2\u039f\u03a3\3\2\2\2\u03a0\u03a2\5\64\33\2\u03a1\u03a0\3"+
		"\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4"+
		"\17\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a8\5\22\n\2\u03a7\u03a6\3\2\2"+
		"\2\u03a7\u03a8\3\2\2\2\u03a8\u03bd\3\2\2\2\u03a9\u03ab\5\24\13\2\u03aa"+
		"\u03ac\5\34\17\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03be\3"+
		"\2\2\2\u03ad\u03bb\7\u0137\2\2\u03ae\u03b0\7\u00b2\2\2\u03af\u03b1\5\24"+
		"\13\2\u03b0\u03af\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2"+
		"\u03b4\5\34\17\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03bc\3"+
		"\2\2\2\u03b5\u03b7\7\u00be\2\2\u03b6\u03b8\5\24\13\2\u03b7\u03b6\3\2\2"+
		"\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bc\5\26\f\2\u03ba"+
		"\u03bc\7\u0095\2\2\u03bb\u03ae\3\2\2\2\u03bb\u03b5\3\2\2\2\u03bb\u03ba"+
		"\3\2\2\2\u03bc\u03be\3\2\2\2\u03bd\u03a9\3\2\2\2\u03bd\u03ad\3\2\2\2\u03be"+
		"\21\3\2\2\2\u03bf\u03c0\7\u0183\2\2\u03c0\u03c1\7Y\2\2\u03c1\u03c2\t\3"+
		"\2\2\u03c2\23\3\2\2\2\u03c3\u03c7\5\30\r\2\u03c4\u03c5\7\u01b0\2\2\u03c5"+
		"\u03c7\5\u033a\u019e\2\u03c6\u03c3\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03c8"+
		"\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\25\3\2\2\2\u03ca"+
		"\u03cb\7\u0146\2\2\u03cb\u03cd\7\u021e\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd"+
		"\3\2\2\2\u03cd\27\3\2\2\2\u03ce\u03cf\7\u0144\2\2\u03cf\u03da\7\u021e"+
		"\2\2\u03d0\u03d1\7\u0147\2\2\u03d1\u03da\7\u021e\2\2\u03d2\u03d3\7\u00c6"+
		"\2\2\u03d3\u03da\7\u021e\2\2\u03d4\u03d5\7\u00f8\2\2\u03d5\u03da\7\u021e"+
		"\2\2\u03d6\u03da\5\34\17\2\u03d7\u03da\5\36\20\2\u03d8\u03da\5\32\16\2"+
		"\u03d9\u03ce\3\2\2\2\u03d9\u03d0\3\2\2\2\u03d9\u03d2\3\2\2\2\u03d9\u03d4"+
		"\3\2\2\2\u03d9\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2\u03da"+
		"\u03db\3\2\2\2\u03db\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\31\3\2\2"+
		"\2\u03dd\u03de\7\u01a5\2\2\u03de\u03f4\7\u0224\2\2\u03df\u03e0\7\u00c4"+
		"\2\2\u03e0\u03f5\7\u021e\2\2\u03e1\u03e2\7\u0112\2\2\u03e2\u03f5\7\u021e"+
		"\2\2\u03e3\u03e4\7\u00fe\2\2\u03e4\u03f5\7\u021e\2\2\u03e5\u03e6\7\u00f7"+
		"\2\2\u03e6\u03f5\t\4\2\2\u03e7\u03e8\7\u0145\2\2\u03e8\u03f5\7\u021e\2"+
		"\2\u03e9\u03ea\7\u00a7\2\2\u03ea\u03f5\7\u021e\2\2\u03eb\u03ec\7\u00a6"+
		"\2\2\u03ec\u03ed\7\u00ae\2\2\u03ed\u03f5\7\u021e\2\2\u03ee\u03ef\7*\2"+
		"\2\u03ef\u03f5\t\5\2\2\u03f0\u03f1\7\u009e\2\2\u03f1\u03f5\t\6\2\2\u03f2"+
		"\u03f3\7\65\2\2\u03f3\u03f5\7o\2\2\u03f4\u03df\3\2\2\2\u03f4\u03e1\3\2"+
		"\2\2\u03f4\u03e3\3\2\2\2\u03f4\u03e5\3\2\2\2\u03f4\u03e7\3\2\2\2\u03f4"+
		"\u03e9\3\2\2\2\u03f4\u03eb\3\2\2\2\u03f4\u03ee\3\2\2\2\u03f4\u03f0\3\2"+
		"\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6"+
		"\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\7\u0225\2\2\u03f9\33\3"+
		"\2\2\2\u03fa\u0404\7H\2\2\u03fb\u0405\7\32\2\2\u03fc\u0402\7\u00a2\2\2"+
		"\u03fd\u0403\7\u012e\2\2\u03fe\u0400\t\7\2\2\u03ff\u0401\t\b\2\2\u0400"+
		"\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u03fd\3\2"+
		"\2\2\u0402\u03fe\3\2\2\2\u0403\u0405\3\2\2\2\u0404\u03fb\3\2\2\2\u0404"+
		"\u03fc\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0408\7\u0116"+
		"\2\2\u0407\u03fa\3\2\2\2\u0407\u0406\3\2\2\2\u0408\35\3\2\2\2\u0409\u040a"+
		"\t\t\2\2\u040a\37\3\2\2\2\u040b\u040c\7\u00e9\2\2\u040c\u040d\7\u0224"+
		"\2\2\u040d\u0412\5\u033a\u019e\2\u040e\u040f\7\u022a\2\2\u040f\u0411\5"+
		"\u033a\u019e\2\u0410\u040e\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2"+
		"\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414\u0412\3\2\2\2\u0415"+
		"\u0416\7\u0225\2\2\u0416\u0417\7\u01a6\2\2\u0417\u041d\7\20\2\2\u0418"+
		"\u041e\t\n\2\2\u0419\u041a\7\u0224\2\2\u041a\u041b\5\"\22\2\u041b\u041c"+
		"\7\u0225\2\2\u041c\u041e\3\2\2\2\u041d\u0418\3\2\2\2\u041d\u0419\3\2\2"+
		"\2\u041e\u041f\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420!"+
		"\3\2\2\2\u0421\u0422\7\u01b0\2\2\u0422\u0428\5\u033a\u019e\2\u0423\u0425"+
		"\5$\23\2\u0424\u0426\5\32\16\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2"+
		"\u0426\u0428\3\2\2\2\u0427\u0421\3\2\2\2\u0427\u0423\3\2\2\2\u0428\u0429"+
		"\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042d\3\2\2\2\u042b"+
		"\u042d\5\32\16\2\u042c\u0427\3\2\2\2\u042c\u042b\3\2\2\2\u042d#\3\2\2"+
		"\2\u042e\u042f\t\13\2\2\u042f\u0430\7\u01a5\2\2\u0430\u0431\7\u00b9\2"+
		"\2\u0431\u0440\7\u0175\2\2\u0432\u0433\7;\2\2\u0433\u0440\7\u021e\2\2"+
		"\u0434\u0440\5&\24\2\u0435\u0440\5(\25\2\u0436\u043b\7/\2\2\u0437\u043b"+
		"\7\u0115\2\2\u0438\u0439\7/\2\2\u0439\u043b\7\u015c\2\2\u043a\u0436\3"+
		"\2\2\2\u043a\u0437\3\2\2\2\u043a\u0438\3\2\2\2\u043b\u043d\3\2\2\2\u043c"+
		"\u043e\5\36\20\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3"+
		"\2\2\2\u043f\u042e\3\2\2\2\u043f\u0432\3\2\2\2\u043f\u0434\3\2\2\2\u043f"+
		"\u0435\3\2\2\2\u043f\u043a\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u043f\3\2"+
		"\2\2\u0441\u0442\3\2\2\2\u0442%\3\2\2\2\u0443\u0444\t\f\2\2\u0444\'\3"+
		"\2\2\2\u0445\u0447\7H\2\2\u0446\u0448\t\r\2\2\u0447\u0446\3\2\2\2\u0447"+
		"\u0448\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u044b\7\u0116\2\2\u044a\u0445"+
		"\3\2\2\2\u044a\u0449\3\2\2\2\u044b)\3\2\2\2\u044c\u044d\7\n\2\2\u044d"+
		"\u0451\7\u01af\2\2\u044e\u044f\5\u02e2\u0172\2\u044f\u0450\7\u021d\2\2"+
		"\u0450\u0452\3\2\2\2\u0451\u044e\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0453"+
		"\3\2\2\2\u0453\u0456\5\u0312\u018a\2\u0454\u0457\5,\27\2\u0455\u0457\5"+
		"\66\34\2\u0456\u0454\3\2\2\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2\2\2\u0457"+
		"\u0458\3\2\2\2\u0458\u0459\7\u0230\2\2\u0459+\3\2\2\2\u045a\u045c\5.\30"+
		"\2\u045b\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e"+
		"\3\2\2\2\u045e-\3\2\2\2\u045f\u046c\7\u0105\2\2\u0460\u0461\7\u0224\2"+
		"\2\u0461\u0466\5\60\31\2\u0462\u0463\7\u022a\2\2\u0463\u0465\5\60\31\2"+
		"\u0464\u0462\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464\3\2\2\2\u0466\u0467"+
		"\3\2\2\2\u0467\u0469\3\2\2\2\u0468\u0466\3\2\2\2\u0469\u046a\7\u0225\2"+
		"\2\u046a\u046d\3\2\2\2\u046b\u046d\5\62\32\2\u046c\u0460\3\2\2\2\u046c"+
		"\u046b\3\2\2\2\u046d/\3\2\2\2\u046e\u0470\5\u0310\u0189\2\u046f\u0471"+
		"\5\u0322\u0192\2\u0470\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0474\3"+
		"\2\2\2\u0472\u0473\7o\2\2\u0473\u0475\5\u023c\u011f\2\u0474\u0472\3\2"+
		"\2\2\u0474\u0475\3\2\2\2\u0475\u0479\3\2\2\2\u0476\u0478\5\64\33\2\u0477"+
		"\u0476\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2"+
		"\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u047e\5 \21\2\u047d"+
		"\u047c\3\2\2\2\u047d\u047e\3\2\2\2\u047e\61\3\2\2\2\u047f\u0480\7@\2\2"+
		"\u0480\u0482\5\u0310\u0189\2\u0481\u0483\7\u0121\2\2\u0482\u0481\3\2\2"+
		"\2\u0482\u0483\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0485\7\u01aa\2\2\u0485"+
		"\u0486\7\23\2\2\u0486\u0487\7\t\2\2\u0487\u0489\7\u00e2\2\2\u0488\u048a"+
		"\7\u00a4\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a\63\3\2\2\2"+
		"\u048b\u048c\7M\2\2\u048c\u048e\5\u02f4\u017b\2\u048d\u048b\3\2\2\2\u048d"+
		"\u048e\3\2\2\2\u048e\u049c\3\2\2\2\u048f\u0491\7\u0121\2\2\u0490\u048f"+
		"\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u049d\7\u0124\2"+
		"\2\u0493\u049d\7\u01c9\2\2\u0494\u0495\7\u0154\2\2\u0495\u049d\7\u00da"+
		"\2\2\u0496\u049d\5:\36\2\u0497\u0498\79\2\2\u0498\u0499\7\u0224\2\2\u0499"+
		"\u049a\5\u0238\u011d\2\u049a\u049b\7\u0225\2\2\u049b\u049d\3\2\2\2\u049c"+
		"\u0490\3\2\2\2\u049c\u0493\3\2\2\2\u049c\u0494\3\2\2\2\u049c\u0496\3\2"+
		"\2\2\u049c\u0497\3\2\2\2\u049d\u049f\3\2\2\2\u049e\u04a0\5<\37\2\u049f"+
		"\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\65\3\2\2\2\u04a1\u04a3\7\5\2"+
		"\2\u04a2\u04a4\58\35\2\u04a3\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a3"+
		"\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04c5\3\2\2\2\u04a7\u04b8\7\u0105\2"+
		"\2\u04a8\u04a9\7M\2\2\u04a9\u04b9\5\u02f4\u017b\2\u04aa\u04ab\7\u0154"+
		"\2\2\u04ab\u04b9\7\u00da\2\2\u04ac\u04ad\7\u01c9\2\2\u04ad\u04ae\7\u0224"+
		"\2\2\u04ae\u04b3\5\u0310\u0189\2\u04af\u04b0\7\u022a\2\2\u04b0\u04b2\5"+
		"\u0310\u0189\2\u04b1\u04af\3\2\2\2\u04b2\u04b5\3\2\2\2\u04b3\u04b1\3\2"+
		"\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b6\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b6"+
		"\u04b7\7\u0225\2\2\u04b7\u04b9\3\2\2\2\u04b8\u04a8\3\2\2\2\u04b8\u04aa"+
		"\3\2\2\2\u04b8\u04ac\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bc\5<\37\2\u04bb"+
		"\u04bd\7\62\2\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04c5\3"+
		"\2\2\2\u04be\u04bf\7\u0167\2\2\u04bf\u04c0\7M\2\2\u04c0\u04c1\5\u02f4"+
		"\u017b\2\u04c1\u04c2\7\u01bc\2\2\u04c2\u04c3\5\u02f4\u017b\2\u04c3\u04c5"+
		"\3\2\2\2\u04c4\u04a1\3\2\2\2\u04c4\u04a7\3\2\2\2\u04c4\u04be\3\2\2\2\u04c5"+
		"\67\3\2\2\2\u04c6\u04c7\7M\2\2\u04c7\u04c9\5\u02f4\u017b\2\u04c8\u04c6"+
		"\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04f6\3\2\2\2\u04ca\u04cb\7\u01c9\2"+
		"\2\u04cb\u04cc\7\u0224\2\2\u04cc\u04d1\5\u0310\u0189\2\u04cd\u04ce\7\u022a"+
		"\2\2\u04ce\u04d0\5\u0310\u0189\2\u04cf\u04cd\3\2\2\2\u04d0\u04d3\3\2\2"+
		"\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d1"+
		"\3\2\2\2\u04d4\u04d5\7\u0225\2\2\u04d5\u04f7\3\2\2\2\u04d6\u04d7\7\u0154"+
		"\2\2\u04d7\u04d8\7\u00da\2\2\u04d8\u04d9\7\u0224\2\2\u04d9\u04de\5\u0310"+
		"\u0189\2\u04da\u04db\7\u022a\2\2\u04db\u04dd\5\u0310\u0189\2\u04dc\u04da"+
		"\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de\u04dc\3\2\2\2\u04de\u04df\3\2\2\2\u04df"+
		"\u04e1\3\2\2\2\u04e0\u04de\3\2\2\2\u04e1\u04e2\7\u0225\2\2\u04e2\u04f7"+
		"\3\2\2\2\u04e3\u04e4\7\u00a5\2\2\u04e4\u04e5\7\u00da\2\2\u04e5\u04e6\7"+
		"\u0224\2\2\u04e6\u04eb\5\u0310\u0189\2\u04e7\u04e8\7\u022a\2\2\u04e8\u04ea"+
		"\5\u0310\u0189\2\u04e9\u04e7\3\2\2\2\u04ea\u04ed\3\2\2\2\u04eb\u04e9\3"+
		"\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ee\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ee"+
		"\u04ef\7\u0225\2\2\u04ef\u04f0\5:\36\2\u04f0\u04f7\3\2\2\2\u04f1\u04f2"+
		"\79\2\2\u04f2\u04f3\7\u0224\2\2\u04f3\u04f4\5\u0238\u011d\2\u04f4\u04f5"+
		"\7\u0225\2\2\u04f5\u04f7\3\2\2\2\u04f6\u04ca\3\2\2\2\u04f6\u04d6\3\2\2"+
		"\2\u04f6\u04e3\3\2\2\2\u04f6\u04f1\3\2\2\2\u04f7\u04f9\3\2\2\2\u04f8\u04fa"+
		"\5<\37\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa9\3\2\2\2\u04fb"+
		"\u04ff\7\u0162\2\2\u04fc\u04fd\5\u02e2\u0172\2\u04fd\u04fe\7\u021d\2\2"+
		"\u04fe\u0500\3\2\2\2\u04ff\u04fc\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501"+
		"\3\2\2\2\u0501\u050d\5\u033a\u019e\2\u0502\u0503\7\u0224\2\2\u0503\u0508"+
		"\5\u0310\u0189\2\u0504\u0505\7\u022a\2\2\u0505\u0507\5\u0310\u0189\2\u0506"+
		"\u0504\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2"+
		"\2\2\u0509\u050b\3\2\2\2\u050a\u0508\3\2\2\2\u050b\u050c\7\u0225\2\2\u050c"+
		"\u050e\3\2\2\2\u050d\u0502\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0516\3\2"+
		"\2\2\u050f\u0510\7\u012f\2\2\u0510\u0514\7t\2\2\u0511\u0515\7\62\2\2\u0512"+
		"\u0513\7\u018c\2\2\u0513\u0515\7\u0124\2\2\u0514\u0511\3\2\2\2\u0514\u0512"+
		"\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u050f\3\2\2\2\u0516\u0517\3\2\2\2\u0517"+
		";\3\2\2\2\u0518\u051a\7\u0121\2\2\u0519\u0518\3\2\2\2\u0519\u051a\3\2"+
		"\2\2\u051a\u051b\3\2\2\2\u051b\u0527\7q\2\2\u051c\u051d\7\u00c5\2\2\u051d"+
		"\u0527\t\3\2\2\u051e\u0527\7\u0166\2\2\u051f\u0527\7\u011f\2\2\u0520\u0527"+
		"\7\u0085\2\2\u0521\u0527\7y\2\2\u0522\u0527\7\u01d3\2\2\u0523\u0527\7"+
		"\u0122\2\2\u0524\u0527\5H%\2\u0525\u0527\5> \2\u0526\u0519\3\2\2\2\u0526"+
		"\u051c\3\2\2\2\u0526\u051e\3\2\2\2\u0526\u051f\3\2\2\2\u0526\u0520\3\2"+
		"\2\2\u0526\u0521\3\2\2\2\u0526\u0522\3\2\2\2\u0526\u0523\3\2\2\2\u0526"+
		"\u0524\3\2\2\2\u0526\u0525\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0526\3\2"+
		"\2\2\u0528\u0529\3\2\2\2\u0529=\3\2\2\2\u052a\u052b\7\u01d2\2\2\u052b"+
		"\u052c\7\u00be\2\2\u052c\u052d\5@!\2\u052d?\3\2\2\2\u052e\u0530\5B\"\2"+
		"\u052f\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u052f\3\2\2\2\u0531\u0532"+
		"\3\2\2\2\u0532A\3\2\2\2\u0533\u053c\5\30\r\2\u0534\u053c\5\36\20\2\u0535"+
		"\u0538\7\u01b0\2\2\u0536\u0539\5\u033a\u019e\2\u0537\u0539\7o\2\2\u0538"+
		"\u0536\3\2\2\2\u0538\u0537\3\2\2\2\u0539\u053c\3\2\2\2\u053a\u053c\5D"+
		"#\2\u053b\u0533\3\2\2\2\u053b\u0534\3\2\2\2\u053b\u0535\3\2\2\2\u053b"+
		"\u053a\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2"+
		"\2\2\u053eC\3\2\2\2\u053f\u0541\7I\2\2\u0540\u0542\7\u01ae\2\2\u0541\u0540"+
		"\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0545\7\u01a4\2"+
		"\2\u0544\u0546\5F$\2\u0545\u0544\3\2\2\2\u0545\u0546\3\2\2\2\u0546E\3"+
		"\2\2\2\u0547\u0568\7\u00a2\2\2\u0548\u0569\7\u01af\2\2\u0549\u054b\7\t"+
		"\2\2\u054a\u054c\7\u00bf\2\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c"+
		"\u054d\3\2\2\2\u054d\u0550\7A\2\2\u054e\u054f\7\u0196\2\2\u054f\u0551"+
		"\7\u021e\2\2\u0550\u054e\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0569\3\2\2"+
		"\2\u0552\u0555\7A\2\2\u0553\u0554\7\u0196\2\2\u0554\u0556\7\u021e\2\2"+
		"\u0555\u0553\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u055f\3\2\2\2\u0557\u055a"+
		"\5\u0310\u0189\2\u0558\u055a\5\u02da\u016e\2\u0559\u0557\3\2\2\2\u0559"+
		"\u0558\3\2\2\2\u055a\u055d\3\2\2\2\u055b\u055c\7\u0196\2\2\u055c\u055e"+
		"\7\u021e\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560\3\2\2"+
		"\2\u055f\u0559\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u055f\3\2\2\2\u0561\u0562"+
		"\3\2\2\2\u0562\u0569\3\2\2\2\u0563\u0565\7\t\2\2\u0564\u0566\7\u00ea\2"+
		"\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0569"+
		"\7\u00c0\2\2\u0568\u0548\3\2\2\2\u0568\u0549\3\2\2\2\u0568\u0552\3\2\2"+
		"\2\u0568\u0563\3\2\2\2\u0569\u056b\3\2\2\2\u056a\u0547\3\2\2\2\u056b\u056c"+
		"\3\2\2\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056dG\3\2\2\2\u056e"+
		"\u056f\7\u008e\2\2\u056f\u0573\7\u00d1\2\2\u0570\u0571\5\u02e2\u0172\2"+
		"\u0571\u0572\7\u021d\2\2\u0572\u0574\3\2\2\2\u0573\u0570\3\2\2\2\u0573"+
		"\u0574\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\5\u0312\u018a\2\u0576I"+
		"\3\2\2\2\u0577\u057a\7X\2\2\u0578\u0579\7\u0133\2\2\u0579\u057b\7\u0168"+
		"\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0580\3\2\2\2\u057c"+
		"\u057e\7\u0113\2\2\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f"+
		"\3\2\2\2\u057f\u0581\7\u00a4\2\2\u0580\u057d\3\2\2\2\u0580\u0581\3\2\2"+
		"\2\u0581\u0582\3\2\2\2\u0582\u0586\7\u01dd\2\2\u0583\u0584\5\u02e2\u0172"+
		"\2\u0584\u0585\7\u021d\2\2\u0585\u0587\3\2\2\2\u0586\u0583\3\2\2\2\u0586"+
		"\u0587\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\5\u0312\u018a\2\u0589\u058a"+
		"\7\u0224\2\2\u058a\u058f\5\u033c\u019f\2\u058b\u058c\7\u022a\2\2\u058c"+
		"\u058e\5\u033c\u019f\2\u058d\u058b\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d"+
		"\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0592\3\2\2\2\u0591\u058f\3\2\2\2\u0592"+
		"\u0593\7\u0225\2\2\u0593\u0594\7\20\2\2\u0594\u0596\5\u0188\u00c5\2\u0595"+
		"\u0597\5\u022e\u0118\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0598"+
		"\3\2\2\2\u0598\u0599\7\u0230\2\2\u0599K\3\2\2\2\u059a\u059c\7X\2\2\u059b"+
		"\u059d\7\u01c9\2\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e"+
		"\3\2\2\2\u059e\u05a2\7\u00be\2\2\u059f\u05a0\5\u02e2\u0172\2\u05a0\u05a1"+
		"\7\u021d\2\2\u05a1\u05a3\3\2\2\2\u05a2\u059f\3\2\2\2\u05a2\u05a3\3\2\2"+
		"\2\u05a3\u05a4\3\2\2\2\u05a4\u05a5\5\u033c\u019f\2\u05a5\u05a6\7\u012f"+
		"\2\2\u05a6\u05a7\5N(\2\u05a7\u05a8\7\u0230\2\2\u05a8M\3\2\2\2\u05a9\u05aa"+
		"\5\u02e2\u0172\2\u05aa\u05ab\7\u021d\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05a9"+
		"\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af\5\u0312\u018a"+
		"\2\u05af\u05b0\7\u0224\2\2\u05b0\u05b5\5P)\2\u05b1\u05b2\7\u022a\2\2\u05b2"+
		"\u05b4\5P)\2\u05b3\u05b1\3\2\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b3\3\2\2"+
		"\2\u05b5\u05b6\3\2\2\2\u05b6\u05b8\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8\u05ba"+
		"\7\u0225\2\2\u05b9\u05bb\5@!\2\u05ba\u05b9\3\2\2\2\u05ba\u05bb\3\2\2\2"+
		"\u05bbO\3\2\2\2\u05bc\u05bf\5\u033c\u019f\2\u05bd\u05bf\5\u0276\u013c"+
		"\2\u05be\u05bc\3\2\2\2\u05be\u05bd\3\2\2\2\u05bfQ\3\2\2\2\u05c0\u05c1"+
		"\7~\2\2\u05c1\u05c2\7\u00aa\2\2\u05c2\u05c3\5\u02fe\u0180\2\u05c3\u05c4"+
		"\7\u0230\2\2\u05c4S\3\2\2\2\u05c5\u05c6\7\n\2\2\u05c6\u05c7\7\u00aa\2"+
		"\2\u05c7\u05c8\5\u02fe\u0180\2\u05c8\u05ca\7F\2\2\u05c9\u05cb\7h\2\2\u05ca"+
		"\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cf\3\2\2\2\u05cc\u05ce\5\u00f8"+
		"}\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf\u05cd\3\2\2\2\u05cf"+
		"\u05d0\3\2\2\2\u05d0\u05d4\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2\u05d3\7\u016f"+
		"\2\2\u05d3\u05d5\7\u018e\2\2\u05d4\u05d2\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5"+
		"\u05d6\3\2\2\2\u05d6\u05d7\7\u0230\2\2\u05d7U\3\2\2\2\u05d8\u05db\7X\2"+
		"\2\u05d9\u05da\7\u0133\2\2\u05da\u05dc\7\u0168\2\2\u05db\u05d9\3\2\2\2"+
		"\u05db\u05dc\3\2\2\2\u05dc\u05de\3\2\2\2\u05dd\u05d8\3\2\2\2\u05dd\u05de"+
		"\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\7\u00aa\2\2\u05e0\u05ec\5\u02fe"+
		"\u0180\2\u05e1\u05e2\7\u0224\2\2\u05e2\u05e7\5\u0104\u0083\2\u05e3\u05e4"+
		"\7\u022a\2\2\u05e4\u05e6\5\u0104\u0083\2\u05e5\u05e3\3\2\2\2\u05e6\u05e9"+
		"\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05ea\3\2\2\2\u05e9"+
		"\u05e7\3\2\2\2\u05ea\u05eb\7\u0225\2\2\u05eb\u05ed\3\2\2\2\u05ec\u05e1"+
		"\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ef\7\u016d\2"+
		"\2\u05ef\u05f6\5\u0322\u0192\2\u05f0\u05f5\5\u00f6|\2\u05f1\u05f5\5X-"+
		"\2\u05f2\u05f5\5\\/\2\u05f3\u05f5\7w\2\2\u05f4\u05f0\3\2\2\2\u05f4\u05f1"+
		"\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f3\3\2\2\2\u05f5\u05f8\3\2\2\2\u05f6"+
		"\u05f4\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u060d\3\2\2\2\u05f8\u05f6\3\2"+
		"\2\2\u05f9\u05fb\7\u014a\2\2\u05fa\u05f9\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb"+
		"\u05fc\3\2\2\2\u05fc\u0608\t\16\2\2\u05fd\u05ff\7k\2\2\u05fe\u05fd\3\2"+
		"\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0603\3\2\2\2\u0600\u0602\5\u0108\u0085"+
		"\2\u0601\u0600\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604"+
		"\u0606\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0609\5\u0152\u00aa\2\u0607\u0609"+
		"\5\u00fa~\2\u0608\u05fe\3\2\2\2\u0608\u0607\3\2\2\2\u0609\u060e\3\2\2"+
		"\2\u060a\u060b\t\17\2\2\u060b\u060c\7\u01d2\2\2\u060c\u060e\5\u02e8\u0175"+
		"\2\u060d\u05fa\3\2\2\2\u060d\u060a\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0610"+
		"\7\u0230\2\2\u0610W\3\2\2\2\u0611\u0613\7\u013e\2\2\u0612\u0614\5Z.\2"+
		"\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614Y\3\2\2\2\u0615\u0616\7"+
		"\u0224\2\2\u0616\u0617\7\u0141\2\2\u0617\u0618\5\u023c\u011f\2\u0618\u0626"+
		"\7,\2\2\u0619\u0627\7\r\2\2\u061a\u061b\t\20\2\2\u061b\u061c\7\u0224\2"+
		"\2\u061c\u0621\5\u0310\u0189\2\u061d\u061e\7\u022a\2\2\u061e\u0620\5\u0310"+
		"\u0189\2\u061f\u061d\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2\u0621"+
		"\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623\u0621\3\2\2\2\u0624\u0625\7\u0225"+
		"\2\2\u0625\u0627\3\2\2\2\u0626\u0619\3\2\2\2\u0626\u061a\3\2\2\2\u0627"+
		"\u0629\3\2\2\2\u0628\u062a\5`\61\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2"+
		"\2\2\u062a\u062b\3\2\2\2\u062b\u062c\7\u0225\2\2\u062c[\3\2\2\2\u062d"+
		"\u062f\7\u016c\2\2\u062e\u0630\5^\60\2\u062f\u062e\3\2\2\2\u062f\u0630"+
		"\3\2\2\2\u0630]\3\2\2\2\u0631\u0632\7\u0165\2\2\u0632\u0633\7\u0224\2"+
		"\2\u0633\u0638\5\u0312\u018a\2\u0634\u0635\7\u022a\2\2\u0635\u0637\5\u0312"+
		"\u018a\2\u0636\u0634\3\2\2\2\u0637\u063a\3\2\2\2\u0638\u0636\3\2\2\2\u0638"+
		"\u0639\3\2\2\2\u0639\u063b\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u063c\7\u0225"+
		"\2\2\u063c_\3\2\2\2\u063d\u063e\t\21\2\2\u063e\u063f\5\u023c\u011f\2\u063f"+
		"\u0640\7,\2\2\u0640\u0641\7\u0224\2\2\u0641\u0646\5\u0310\u0189\2\u0642"+
		"\u0643\7\u022a\2\2\u0643\u0645\5\u0310\u0189\2\u0644\u0642\3\2\2\2\u0645"+
		"\u0648\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649\3\2"+
		"\2\2\u0648\u0646\3\2\2\2\u0649\u064a\7\u0225\2\2\u064aa\3\2\2\2\u064b"+
		"\u064c\7~\2\2\u064c\u064e\7\u013d\2\2\u064d\u064f\7&\2\2\u064e\u064d\3"+
		"\2\2\2\u064e\u064f\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0651\5\u02e6\u0174"+
		"\2\u0651\u0652\7\u0230\2\2\u0652c\3\2\2\2\u0653\u0654\7\n\2\2\u0654\u0655"+
		"\7\u013d\2\2\u0655\u0656\5\u02e6\u0174\2\u0656\u0658\7F\2\2\u0657\u0659"+
		"\7h\2\2\u0658\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a"+
		"\u065c\t\22\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u0660\3"+
		"\2\2\2\u065d\u065f\5\u00f8}\2\u065e\u065d\3\2\2\2\u065f\u0662\3\2\2\2"+
		"\u0660\u065e\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0665\3\2\2\2\u0662\u0660"+
		"\3\2\2\2\u0663\u0664\7\u016f\2\2\u0664\u0666\7\u018e\2\2\u0665\u0663\3"+
		"\2\2\2\u0665\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0668\7\u0230\2\2"+
		"\u0668e\3\2\2\2\u0669\u066c\7X\2\2\u066a\u066b\7\u0133\2\2\u066b\u066d"+
		"\7\u0168\2\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066e\3\2\2"+
		"\2\u066e\u0671\7\u013d\2\2\u066f\u0672\5j\66\2\u0670\u0672\5h\65\2\u0671"+
		"\u066f\3\2\2\2\u0671\u0670\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0673\3\2"+
		"\2\2\u0673\u0674\7\u0230\2\2\u0674g\3\2\2\2\u0675\u0676\7&\2\2\u0676\u0677"+
		"\5\u02e6\u0174\2\u0677\u067b\t\16\2\2\u0678\u067a\5r:\2\u0679\u0678\3"+
		"\2\2\2\u067a\u067d\3\2\2\2\u067b\u0679\3\2\2\2\u067b\u067c\3\2\2\2\u067c"+
		"\u0684\3\2\2\2\u067d\u067b\3\2\2\2\u067e\u067f\7\36\2\2\u067f\u0685\5"+
		"\u0128\u0095\2\u0680\u0682\7\u0087\2\2\u0681\u0683\5\u02e6\u0174\2\u0682"+
		"\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0685\3\2\2\2\u0684\u067e\3\2"+
		"\2\2\u0684\u0680\3\2\2\2\u0685i\3\2\2\2\u0686\u0688\5\u02e6\u0174\2\u0687"+
		"\u0689\5\u00f6|\2\u0688\u0687\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a"+
		"\3\2\2\2\u068a\u068e\t\16\2\2\u068b\u068d\5l\67\2\u068c\u068b\3\2\2\2"+
		"\u068d\u0690\3\2\2\2\u068e\u068c\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0691"+
		"\3\2\2\2\u0690\u068e\3\2\2\2\u0691\u0693\7\u0087\2\2\u0692\u0694\5\u02e6"+
		"\u0174\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694k\3\2\2\2\u0695"+
		"\u069e\5\u010a\u0086\2\u0696\u069e\5\u010c\u0087\2\u0697\u069e\5\u010e"+
		"\u0088\2\u0698\u069e\5\u0112\u008a\2\u0699\u069e\5\u0116\u008c\2\u069a"+
		"\u069e\5\u011e\u0090\2\u069b\u069e\5n8\2\u069c\u069e\5p9\2\u069d\u0695"+
		"\3\2\2\2\u069d\u0696\3\2\2\2\u069d\u0697\3\2\2\2\u069d\u0698\3\2\2\2\u069d"+
		"\u0699\3\2\2\2\u069d\u069a\3\2\2\2\u069d\u069b\3\2\2\2\u069d\u069c\3\2"+
		"\2\2\u069em\3\2\2\2\u069f\u06a0\7\u0156\2\2\u06a0\u06ac\5\u0300\u0181"+
		"\2\u06a1\u06a2\7\u0224\2\2\u06a2\u06a7\5\u0104\u0083\2\u06a3\u06a4\7\u022a"+
		"\2\2\u06a4\u06a6\5\u0104\u0083\2\u06a5\u06a3\3\2\2\2\u06a6\u06a9\3\2\2"+
		"\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06aa\3\2\2\2\u06a9\u06a7"+
		"\3\2\2\2\u06aa\u06ab\7\u0225\2\2\u06ab\u06ad\3\2\2\2\u06ac\u06a1\3\2\2"+
		"\2\u06ac\u06ad\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\7\u0230\2\2\u06af"+
		"o\3\2\2\2\u06b0\u06b1\7\u00aa\2\2\u06b1\u06bd\5\u02fe\u0180\2\u06b2\u06b3"+
		"\7\u0224\2\2\u06b3\u06b8\5\u0104\u0083\2\u06b4\u06b5\7\u022a\2\2\u06b5"+
		"\u06b7\5\u0104\u0083\2\u06b6\u06b4\3\2\2\2\u06b7\u06ba\3\2\2\2\u06b8\u06b6"+
		"\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06b8\3\2\2\2\u06bb"+
		"\u06bc\7\u0225\2\2\u06bc\u06be\3\2\2\2\u06bd\u06b2\3\2\2\2\u06bd\u06be"+
		"\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0\7\u016d\2\2\u06c0\u06c1\5\u0322"+
		"\u0192\2\u06c1\u06c2\7\u0230\2\2\u06c2q\3\2\2\2\u06c3\u06ce\5\u010a\u0086"+
		"\2\u06c4\u06ce\5\u010c\u0087\2\u06c5\u06ce\5\u010e\u0088\2\u06c6\u06ce"+
		"\5\u0112\u008a\2\u06c7\u06ce\5\u0116\u008c\2\u06c8\u06ce\5\u011e\u0090"+
		"\2\u06c9\u06ce\5x=\2\u06ca\u06ce\5V,\2\u06cb\u06ce\5n8\2\u06cc\u06ce\5"+
		"p9\2\u06cd\u06c3\3\2\2\2\u06cd\u06c4\3\2\2\2\u06cd\u06c5\3\2\2\2\u06cd"+
		"\u06c6\3\2\2\2\u06cd\u06c7\3\2\2\2\u06cd\u06c8\3\2\2\2\u06cd\u06c9\3\2"+
		"\2\2\u06cd\u06ca\3\2\2\2\u06cd\u06cb\3\2\2\2\u06cd\u06cc\3\2\2\2\u06ce"+
		"s\3\2\2\2\u06cf\u06d0\7~\2\2\u06d0\u06d1\7\u0156\2\2\u06d1\u06d2\5\u0300"+
		"\u0181\2\u06d2\u06d3\7\u0230\2\2\u06d3u\3\2\2\2\u06d4\u06d5\7\n\2\2\u06d5"+
		"\u06d6\7\u0156\2\2\u06d6\u06d7\5\u0300\u0181\2\u06d7\u06d9\7F\2\2\u06d8"+
		"\u06da\7h\2\2\u06d9\u06d8\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06de\3\2"+
		"\2\2\u06db\u06dd\5\u00f8}\2\u06dc\u06db\3\2\2\2\u06dd\u06e0\3\2\2\2\u06de"+
		"\u06dc\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e3\3\2\2\2\u06e0\u06de\3\2"+
		"\2\2\u06e1\u06e2\7\u016f\2\2\u06e2\u06e4\7\u018e\2\2\u06e3\u06e1\3\2\2"+
		"\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e6\7\u0230\2\2\u06e6"+
		"w\3\2\2\2\u06e7\u06ea\7X\2\2\u06e8\u06e9\7\u0133\2\2\u06e9\u06eb\7\u0168"+
		"\2\2\u06ea\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ed\3\2\2\2\u06ec"+
		"\u06e7\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\7\u0156"+
		"\2\2\u06ef\u06fb\5\u0300\u0181\2\u06f0\u06f1\7\u0224\2\2\u06f1\u06f6\5"+
		"\u0104\u0083\2\u06f2\u06f3\7\u022a\2\2\u06f3\u06f5\5\u0104\u0083\2\u06f4"+
		"\u06f2\3\2\2\2\u06f5\u06f8\3\2\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2"+
		"\2\2\u06f7\u06f9\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f9\u06fa\7\u0225\2\2\u06fa"+
		"\u06fc\3\2\2\2\u06fb\u06f0\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fe\3\2"+
		"\2\2\u06fd\u06ff\5\u00f6|\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff"+
		"\u0700\3\2\2\2\u0700\u070d\t\16\2\2\u0701\u0703\7k\2\2\u0702\u0701\3\2"+
		"\2\2\u0702\u0703\3\2\2\2\u0703\u0707\3\2\2\2\u0704\u0706\5\u0108\u0085"+
		"\2\u0705\u0704\3\2\2\2\u0706\u0709\3\2\2\2\u0707\u0705\3\2\2\2\u0707\u0708"+
		"\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0707\3\2\2\2\u070a\u070e\5\u0152\u00aa"+
		"\2\u070b\u070e\5\u00fa~\2\u070c\u070e\7\u0095\2\2\u070d\u0702\3\2\2\2"+
		"\u070d\u070b\3\2\2\2\u070d\u070c\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710"+
		"\7\u0230\2\2\u0710y\3\2\2\2\u0711\u0712\7~\2\2\u0712\u0713\7\u01c1\2\2"+
		"\u0713\u0714\5\u0302\u0182\2\u0714\u0715\7\u0230\2\2\u0715{\3\2\2\2\u0716"+
		"\u0717\7\n\2\2\u0717\u0718\7\u01c1\2\2\u0718\u072b\5\u0302\u0182\2\u0719"+
		"\u072c\t\13\2\2\u071a\u071b\7\u0167\2\2\u071b\u071c\7\u01bc\2\2\u071c"+
		"\u072c\5\u0302\u0182\2\u071d\u071f\7F\2\2\u071e\u0720\7h\2\2\u071f\u071e"+
		"\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0724\3\2\2\2\u0721\u0723\5\u00f8}"+
		"\2\u0722\u0721\3\2\2\2\u0723\u0726\3\2\2\2\u0724\u0722\3\2\2\2\u0724\u0725"+
		"\3\2\2\2\u0725\u0729\3\2\2\2\u0726\u0724\3\2\2\2\u0727\u0728\7\u016f\2"+
		"\2\u0728\u072a\7\u018e\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2\2\2\u072a"+
		"\u072c\3\2\2\2\u072b\u0719\3\2\2\2\u072b\u071a\3\2\2\2\u072b\u071d\3\2"+
		"\2\2\u072c\u072d\3\2\2\2\u072d\u072e\7\u0230\2\2\u072e}\3\2\2\2\u072f"+
		"\u0732\7X\2\2\u0730\u0731\7\u0133\2\2\u0731\u0733\7\u0168\2\2\u0732\u0730"+
		"\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\7\u01c1\2"+
		"\2\u0735\u0739\5\u0302\u0182\2\u0736\u073a\5\u0084C\2\u0737\u073a\5\u0088"+
		"E\2\u0738\u073a\5\u008aF\2\u0739\u0736\3\2\2\2\u0739\u0737\3\2\2\2\u0739"+
		"\u0738\3\2\2\2\u073a\u073c\3\2\2\2\u073b\u073d\5\u0080A\2\u073c\u073b"+
		"\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073f\3\2\2\2\u073e\u0740\t\13\2\2"+
		"\u073f\u073e\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0742\3\2\2\2\u0741\u0743"+
		"\5\u0082B\2\u0742\u0741\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744\3\2\2"+
		"\2\u0744\u0745\5\u008cG\2\u0745\u0746\7\u0230\2\2\u0746\177\3\2\2\2\u0747"+
		"\u0748\7\u00a1\2\2\u0748\u074d\5\u0302\u0182\2\u0749\u074a\7\u022a\2\2"+
		"\u074a\u074c\5\u0302\u0182\2\u074b\u0749\3\2\2\2\u074c\u074f\3\2\2\2\u074d"+
		"\u074b\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u0081\3\2\2\2\u074f\u074d\3\2"+
		"\2\2\u0750\u0751\7\u01e1\2\2\u0751\u0752\7\u0224\2\2\u0752\u0753\5\u0238"+
		"\u011d\2\u0753\u0754\7\u0225\2\2\u0754\u0083\3\2\2\2\u0755\u075a\7\35"+
		"\2\2\u0756\u075a\7\6\2\2\u0757\u0758\7\u00cc\2\2\u0758\u075a\7\u012a\2"+
		"\2\u0759\u0755\3\2\2\2\u0759\u0756\3\2\2\2\u0759\u0757\3\2\2\2\u075a\u075b"+
		"\3\2\2\2\u075b\u075d\5\u0096L\2\u075c\u075e\5\u009cO\2\u075d\u075c\3\2"+
		"\2\2\u075d\u075e\3\2\2\2\u075e\u0760\3\2\2\2\u075f\u0761\5\u0086D\2\u0760"+
		"\u075f\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0085\3\2\2\2\u0762\u0763\7\u00a2"+
		"\2\2\u0763\u0764\7\u0080\2\2\u0764\u0765\7\u0175\2\2\u0765\u0087\3\2\2"+
		"\2\u0766\u0767\7\u00a2\2\2\u0767\u0769\5\u0096L\2\u0768\u076a\5\u009c"+
		"O\2\u0769\u0768\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u0089\3\2\2\2\u076b"+
		"\u076c\t\23\2\2\u076c\u0771\5\u0094K\2\u076d\u076e\7\u0133\2\2\u076e\u0770"+
		"\5\u0094K\2\u076f\u076d\3\2\2\2\u0770\u0773\3\2\2\2\u0771\u076f\3\2\2"+
		"\2\u0771\u0772\3\2\2\2\u0772\u0774\3\2\2\2\u0773\u0771\3\2\2\2\u0774\u077c"+
		"\7\u012f\2\2\u0775\u077d\7b\2\2\u0776\u0777\5\u02e2\u0172\2\u0777\u0778"+
		"\7\u021d\2\2\u0778\u077a\3\2\2\2\u0779\u0776\3\2\2\2\u0779\u077a\3\2\2"+
		"\2\u077a\u077b\3\2\2\2\u077b\u077d\7\u017c\2\2\u077c\u0775\3\2\2\2\u077c"+
		"\u0779\3\2\2\2\u077d\u008b\3\2\2\2\u077e\u077f\7G\2\2\u077f\u0784\7\u01c1"+
		"\2\2\u0780\u0781\7\60\2\2\u0781\u0784\5\u033a\u019e\2\u0782\u0784\5\u0158"+
		"\u00ad\2\u0783\u077e\3\2\2\2\u0783\u0780\3\2\2\2\u0783\u0782\3\2\2\2\u0784"+
		"\u008d\3\2\2\2\u0785\u0787\5\u02e4\u0173\2\u0786\u0788\5\u0318\u018d\2"+
		"\u0787\u0786\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u008f\3\2\2\2\u0789\u078a"+
		"\7G\2\2\u078a\u078e\7\u01c1\2\2\u078b\u078d\5\u0108\u0085\2\u078c\u078b"+
		"\3\2\2\2\u078d\u0790\3\2\2\2\u078e\u078c\3\2\2\2\u078e\u078f\3\2\2\2\u078f"+
		"\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0791\u0793\5\u0092J\2\u0792\u0791"+
		"\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0792\3\2\2\2\u0794\u0795\3\2\2\2\u0795"+
		"\u0796\3\2\2\2\u0796\u0797\7\u0087\2\2\u0797\u0798\5\u0302\u0182\2\u0798"+
		"\u0091\3\2\2\2\u0799\u079a\7\35\2\2\u079a\u079b\7\u01a1\2\2\u079b\u079c"+
		"\7\u00d3\2\2\u079c\u079d\5\u0158\u00ad\2\u079d\u079e\7\35\2\2\u079e\u079f"+
		"\7\u01a1\2\2\u079f\u07a0\7\u0230\2\2\u07a0\u07be\3\2\2\2\u07a1\u07a2\7"+
		"\35\2\2\u07a2\u07a3\7\u0080\2\2\u07a3\u07a4\7\u0175\2\2\u07a4\u07a5\7"+
		"\u00d3\2\2\u07a5\u07a6\5\u0158\u00ad\2\u07a6\u07a7\7\35\2\2\u07a7\u07a8"+
		"\7\u0080\2\2\u07a8\u07a9\7\u0175\2\2\u07a9\u07aa\7\u0230\2\2\u07aa\u07be"+
		"\3\2\2\2\u07ab\u07ac\7\6\2\2\u07ac\u07ad\7\u01a1\2\2\u07ad\u07ae\7\u00d3"+
		"\2\2\u07ae\u07af\5\u0158\u00ad\2\u07af\u07b0\7\6\2\2\u07b0\u07b1\7\u01a1"+
		"\2\2\u07b1\u07b2\7\u0230\2\2\u07b2\u07be\3\2\2\2\u07b3\u07b4\7\6\2\2\u07b4"+
		"\u07b5\7\u0080\2\2\u07b5\u07b6\7\u0175\2\2\u07b6\u07b7\7\u00d3\2\2\u07b7"+
		"\u07b8\5\u0158\u00ad\2\u07b8\u07b9\7\6\2\2\u07b9\u07ba\7\u0080\2\2\u07ba"+
		"\u07bb\7\u0175\2\2\u07bb\u07bc\7\u0230\2\2\u07bc\u07be\3\2\2\2\u07bd\u0799"+
		"\3\2\2\2\u07bd\u07a1\3\2\2\2\u07bd\u07ab\3\2\2\2\u07bd\u07b3\3\2\2\2\u07be"+
		"\u0093\3\2\2\2\u07bf\u07da\7\n\2\2\u07c0\u07da\7\13\2\2\u07c1\u07c2\7"+
		"\22\2\2\u07c2\u07da\7\u01a4\2\2\u07c3\u07da\7\25\2\2\u07c4\u07da\7B\2"+
		"\2\u07c5\u07da\7X\2\2\u07c6\u07c7\7z\2\2\u07c7\u07da\7\u01a4\2\2\u07c8"+
		"\u07da\7~\2\2\u07c9\u07da\7\u00ac\2\2\u07ca\u07da\7\u0114\2\2\u07cb\u07da"+
		"\7\u0167\2\2\u07cc\u07da\7\u0171\2\2\u07cd\u07da\7\u01c4\2\2\u07ce\u07da"+
		"\7g\2\2\u07cf\u07da\7\u01a0\2\2\u07d0\u07da\7\u0191\2\2\u07d1\u07da\7"+
		"e\2\2\u07d2\u07da\7\u00f0\2\2\u07d3\u07da\7\u00ef\2\2\u07d4\u07da\7\u018a"+
		"\2\2\u07d5\u07da\7\u01ad\2\2\u07d6\u07da\7b\2\2\u07d7\u07da\7\u017c\2"+
		"\2\u07d8\u07da\7\u00a1\2\2\u07d9\u07bf\3\2\2\2\u07d9\u07c0\3\2\2\2\u07d9"+
		"\u07c1\3\2\2\2\u07d9\u07c3\3\2\2\2\u07d9\u07c4\3\2\2\2\u07d9\u07c5\3\2"+
		"\2\2\u07d9\u07c6\3\2\2\2\u07d9\u07c8\3\2\2\2\u07d9\u07c9\3\2\2\2\u07d9"+
		"\u07ca\3\2\2\2\u07d9\u07cb\3\2\2\2\u07d9\u07cc\3\2\2\2\u07d9\u07cd\3\2"+
		"\2\2\u07d9\u07ce\3\2\2\2\u07d9\u07cf\3\2\2\2\u07d9\u07d0\3\2\2\2\u07d9"+
		"\u07d1\3\2\2\2\u07d9\u07d2\3\2\2\2\u07d9\u07d3\3\2\2\2\u07d9\u07d4\3\2"+
		"\2\2\u07d9\u07d5\3\2\2\2\u07d9\u07d6\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9"+
		"\u07d8\3\2\2\2\u07da\u0095\3\2\2\2\u07db\u07e0\5\u0098M\2\u07dc\u07dd"+
		"\7\u0133\2\2\u07dd\u07df\5\u0098M\2\u07de\u07dc\3\2\2\2\u07df\u07e2\3"+
		"\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e3\3\2\2\2\u07e2"+
		"\u07e0\3\2\2\2\u07e3\u07e5\7\u012f\2\2\u07e4\u07e6\5\u009aN\2\u07e5\u07e4"+
		"\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07e8\5\u0312\u018a"+
		"\2\u07e8\u0097\3\2\2\2\u07e9\u07f3\t\24\2\2\u07ea\u07eb\7\u012a\2\2\u07eb"+
		"\u07f0\5\u0310\u0189\2\u07ec\u07ed\7\u022a\2\2\u07ed\u07ef\5\u0310\u0189"+
		"\2\u07ee\u07ec\3\2\2\2\u07ef\u07f2\3\2\2\2\u07f0\u07ee\3\2\2\2\u07f0\u07f1"+
		"\3\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f3\u07ea\3\2\2\2\u07f3"+
		"\u07f4\3\2\2\2\u07f4\u0099\3\2\2\2\u07f5\u07f6\7\u0110\2\2\u07f6\u07f7"+
		"\7\u01af\2\2\u07f7\u07f8\5\u0312\u018a\2\u07f8\u07f9\7\u012a\2\2\u07f9"+
		"\u009b\3\2\2\2\u07fa\u07fc\7\u0163\2\2\u07fb\u07fd\5\u009eP\2\u07fc\u07fb"+
		"\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff"+
		"\u009d\3\2\2\2\u0800\u0801\t\25\2\2\u0801\u0802\5\u02ca\u0166\2\u0802"+
		"\u009f\3\2\2\2\u0803\u0804\7~\2\2\u0804\u0806\7\u01c5\2\2\u0805\u0807"+
		"\7&\2\2\u0806\u0805\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0808\3\2\2\2\u0808"+
		"\u080a\5\u02f8\u017d\2\u0809\u080b\t\26\2\2\u080a\u0809\3\2\2\2\u080a"+
		"\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\7\u0230\2\2\u080d\u00a1"+
		"\3\2\2\2\u080e\u080f\7\n\2\2\u080f\u0810\7\u01c5\2\2\u0810\u0816\5\u02f8"+
		"\u017d\2\u0811\u0817\5\u00a4S\2\u0812\u0817\5\u00a6T\2\u0813\u0817\5\u00a8"+
		"U\2\u0814\u0817\5\u00b0Y\2\u0815\u0817\5\u00d2j\2\u0816\u0811\3\2\2\2"+
		"\u0816\u0812\3\2\2\2\u0816\u0813\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0815"+
		"\3\2\2\2\u0817\u0819\3\2\2\2\u0818\u081a\5\u00b2Z\2\u0819\u0818\3\2\2"+
		"\2\u0819\u081a\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c\7\u0230\2\2\u081c"+
		"\u00a3\3\2\2\2\u081d\u081f\7F\2\2\u081e\u0820\7h\2\2\u081f\u081e\3\2\2"+
		"\2\u081f\u0820\3\2\2\2\u0820\u0822\3\2\2\2\u0821\u0823\t\27\2\2\u0822"+
		"\u0821\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0827\3\2\2\2\u0824\u0826\5\u00f8"+
		"}\2\u0825\u0824\3\2\2\2\u0826\u0829\3\2\2\2\u0827\u0825\3\2\2\2\u0827"+
		"\u0828\3\2\2\2\u0828\u082c\3\2\2\2\u0829\u0827\3\2\2\2\u082a\u082b\7\u016f"+
		"\2\2\u082b\u082d\7\u018e\2\2\u082c\u082a\3\2\2\2\u082c\u082d\3\2\2\2\u082d"+
		"\u00a5\3\2\2\2\u082e\u0830\7\u0168\2\2\u082f\u0831\5\u00f6|\2\u0830\u082f"+
		"\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\7\20\2\2"+
		"\u0833\u0834\7\u0129\2\2\u0834\u0835\7\u0224\2\2\u0835\u083a\5\u00d4k"+
		"\2\u0836\u0837\7\u022a\2\2\u0837\u0839\5\u00d4k\2\u0838\u0836\3\2\2\2"+
		"\u0839\u083c\3\2\2\2\u083a\u0838\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d"+
		"\3\2\2\2\u083c\u083a\3\2\2\2\u083d\u083e\7\u0225\2\2\u083e\u00a7\3\2\2"+
		"\2\u083f\u0844\5\u00aaV\2\u0840\u0841\7\u022a\2\2\u0841\u0843\5\u00aa"+
		"V\2\u0842\u0840\3\2\2\2\u0843\u0846\3\2\2\2\u0844\u0842\3\2\2\2\u0844"+
		"\u0845\3\2\2\2\u0845\u00a9\3\2\2\2\u0846\u0844\3\2\2\2\u0847\u084a\t\30"+
		"\2\2\u0848\u084b\5\u00e4s\2\u0849\u084b\5\u00dco\2\u084a\u0848\3\2\2\2"+
		"\u084a\u0849\3\2\2\2\u084b\u00ab\3\2\2\2\u084c\u084d\t\31\2\2\u084d\u085a"+
		"\7\24\2\2\u084e\u085b\5\u00aeX\2\u084f\u0850\7\u0224\2\2\u0850\u0855\5"+
		"\u00aeX\2\u0851\u0852\7\u022a\2\2\u0852\u0854\5\u00aeX\2\u0853\u0851\3"+
		"\2\2\2\u0854\u0857\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3\2\2\2\u0856"+
		"\u0858\3\2\2\2\u0857\u0855\3\2\2\2\u0858\u0859\7\u0225\2\2\u0859\u085b"+
		"\3\2\2\2\u085a\u084e\3\2\2\2\u085a\u084f\3\2\2\2\u085b\u00ad\3\2\2\2\u085c"+
		"\u085e\5\u02da\u016e\2\u085d\u085f\5\u0322\u0192\2\u085e\u085d\3\2\2\2"+
		"\u085e\u085f\3\2\2\2\u085f\u00af\3\2\2\2\u0860\u0866\7\u0105\2\2\u0861"+
		"\u0862\7\u00e8\2\2\u0862\u0867\5\u023c\u011f\2\u0863\u0864\7\u0081\2\2"+
		"\u0864\u0865\7\u01c5\2\2\u0865\u0867\5\u0322\u0192\2\u0866\u0861\3\2\2"+
		"\2\u0866\u0863\3\2\2\2\u0867\u00b1\3\2\2\2\u0868\u0879\7\u00d2\2\2\u0869"+
		"\u0873\7\62\2\2\u086a\u086b\7S\2\2\u086b\u086c\7\u01bc\2\2\u086c\u0874"+
		"\7\u01aa\2\2\u086d\u086f\7\u0121\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3"+
		"\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871\7\u00bb\2\2\u0871\u0872\7\u01af"+
		"\2\2\u0872\u0874\7a\2\2\u0873\u086a\3\2\2\2\u0873\u086e\3\2\2\2\u0873"+
		"\u0874\3\2\2\2\u0874\u0876\3\2\2\2\u0875\u0877\5\u00b4[\2\u0876\u0875"+
		"\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0879\3\2\2\2\u0878\u0868\3\2\2\2\u0878"+
		"\u0869\3\2\2\2\u0879\u00b3\3\2\2\2\u087a\u087c\7\u00a4\2\2\u087b\u087a"+
		"\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\3\2\2\2\u087d\u087e\7\u008e\2"+
		"\2\u087e\u087f\7\u00d1\2\2\u087f\u0880\5\u0312\u018a\2\u0880\u00b5\3\2"+
		"\2\2\u0881\u0884\7X\2\2\u0882\u0883\7\u0133\2\2\u0883\u0885\7\u0168\2"+
		"\2\u0884\u0882\3\2\2\2\u0884\u0885\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0889"+
		"\7\u01c5\2\2\u0887\u088a\5\u00b8]\2\u0888\u088a\5\u00c4c\2\u0889\u0887"+
		"\3\2\2\2\u0889\u0888\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u088c\7\u0230\2"+
		"\2\u088c\u00b7\3\2\2\2\u088d\u0890\5\u02f8\u017d\2\u088e\u088f\7\u012c"+
		"\2\2\u088f\u0891\7\u0220\2\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2\2\2\u0891"+
		"\u0893\3\2\2\2\u0892\u0894\5\u00ba^\2\u0893\u0892\3\2\2\2\u0893\u0894"+
		"\3\2\2\2\u0894\u00b9\3\2\2\2\u0895\u0897\5\u00f6|\2\u0896\u0895\3\2\2"+
		"\2\u0896\u0897\3\2\2\2\u0897\u089a\3\2\2\2\u0898\u089b\5\u00bc_\2\u0899"+
		"\u089b\5\u00be`\2\u089a\u0898\3\2\2\2\u089a\u0899\3\2\2\2\u089b\u089d"+
		"\3\2\2\2\u089c\u089e\5\u00c2b\2\u089d\u089c\3\2\2\2\u089d\u089e\3\2\2"+
		"\2\u089e\u08aa\3\2\2\2\u089f\u08a0\7\u0224\2\2\u08a0\u08a5\5\u00d4k\2"+
		"\u08a1\u08a2\7\u022a\2\2\u08a2\u08a4\5\u00d4k\2\u08a3\u08a1\3\2\2\2\u08a4"+
		"\u08a7\3\2\2\2\u08a5\u08a3\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u08a8\3\2"+
		"\2\2\u08a7\u08a5\3\2\2\2\u08a8\u08a9\7\u0225\2\2\u08a9\u08ab\3\2\2\2\u08aa"+
		"\u089f\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08af\3\2\2\2\u08ac\u08ae\5\u00d2"+
		"j\2\u08ad\u08ac\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af\u08ad\3\2\2\2\u08af"+
		"\u08b0\3\2\2\2\u08b0\u00bb\3\2\2\2\u08b1\u08af\3\2\2\2\u08b2\u08b6\t\16"+
		"\2\2\u08b3\u08b7\7\u0129\2\2\u08b4\u08b7\5\u0124\u0093\2\u08b5\u08b7\5"+
		"\u00c0a\2\u08b6\u08b3\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b6\u08b5\3\2\2\2"+
		"\u08b7\u00bd\3\2\2\2\u08b8\u08b9\7\u01c7\2\2\u08b9\u08ba\5\u0322\u0192"+
		"\2\u08ba\u00bf\3\2\2\2\u08bb\u08bc\7\u01af\2\2\u08bc\u08bd\7\u012a\2\2"+
		"\u08bd\u08c0\5\u0322\u0192\2\u08be\u08bf\7\u0121\2\2\u08bf\u08c1\7\u0124"+
		"\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u00c1\3\2\2\2\u08c2"+
		"\u08c3\7\u0095\2\2\u08c3\u08c4\7\u0108\2\2\u08c4\u08c5\5\u023c\u011f\2"+
		"\u08c5\u08c6\7\u00db\2\2\u08c6\u08c7\7\u00d6\2\2\u08c7\u08c8\7\u01d2\2"+
		"\2\u08c8\u08c9\t\32\2\2\u08c9\u00c3\3\2\2\2\u08ca\u08cb\7&\2\2\u08cb\u08cc"+
		"\5\u02f8\u017d\2\u08cc\u08cd\t\16\2\2\u08cd\u08d2\5\u00c6d\2\u08ce\u08cf"+
		"\7\u022a\2\2\u08cf\u08d1\5\u00c6d\2\u08d0\u08ce\3\2\2\2\u08d1\u08d4\3"+
		"\2\2\2\u08d2\u08d0\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d5\3\2\2\2\u08d4"+
		"\u08d2\3\2\2\2\u08d5\u08d6\7\u0087\2\2\u08d6\u00c5\3\2\2\2\u08d7\u08da"+
		"\5\u00c8e\2\u08d8\u08da\5\u00caf\2\u08d9\u08d7\3\2\2\2\u08d9\u08d8\3\2"+
		"\2\2\u08da\u00c7\3\2\2\2\u08db\u08dc\t\33\2\2\u08dc\u08dd\7\u00fc\2\2"+
		"\u08dd\u08de\5\u00ceh\2\u08de\u00c9\3\2\2\2\u08df\u08e3\t\34\2\2\u08e0"+
		"\u08e4\5\u00ccg\2\u08e1\u08e4\5\u00ceh\2\u08e2\u08e4\5\u00d0i\2\u08e3"+
		"\u08e0\3\2\2\2\u08e3\u08e1\3\2\2\2\u08e3\u08e2\3\2\2\2\u08e4\u00cb\3\2"+
		"\2\2\u08e5\u08e6\7\u0156\2\2\u08e6\u08e7\5\u0300\u0181\2\u08e7\u08e8\7"+
		"\u0224\2\2\u08e8\u08ed\5\u00eav\2\u08e9\u08ea\7\u022a\2\2\u08ea\u08ec"+
		"\5\u00eav\2\u08eb\u08e9\3\2\2\2\u08ec\u08ef\3\2\2\2\u08ed\u08eb\3\2\2"+
		"\2\u08ed\u08ee\3\2\2\2\u08ee\u08f0\3\2\2\2\u08ef\u08ed\3\2\2\2\u08f0\u08f1"+
		"\7\u0225\2\2\u08f1\u08ff\t\16\2\2\u08f2\u0900\5\u00fa~\2\u08f3\u08f5\7"+
		"k\2\2\u08f4\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f9\3\2\2\2\u08f6"+
		"\u08f8\5\u0108\u0085\2\u08f7\u08f6\3\2\2\2\u08f8\u08fb\3\2\2\2\u08f9\u08f7"+
		"\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fc"+
		"\u08fd\5\u0152\u00aa\2\u08fd\u08fe\7\u0230\2\2\u08fe\u0900\3\2\2\2\u08ff"+
		"\u08f2\3\2\2\2\u08ff\u08f4\3\2\2\2\u0900\u00cd\3\2\2\2\u0901\u0902\7\u00aa"+
		"\2\2\u0902\u090e\5\u02fe\u0180\2\u0903\u0904\7\u0224\2\2\u0904\u0909\5"+
		"\u00eav\2\u0905\u0906\7\u022a\2\2\u0906\u0908\5\u00eav\2\u0907\u0905\3"+
		"\2\2\2\u0908\u090b\3\2\2\2\u0909\u0907\3\2\2\2\u0909\u090a\3\2\2\2\u090a"+
		"\u090c\3\2\2\2\u090b\u0909\3\2\2\2\u090c\u090d\7\u0225\2\2\u090d\u090f"+
		"\3\2\2\2\u090e\u0903\3\2\2\2\u090e\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910"+
		"\u0911\7\u016d\2\2\u0911\u0912\5\u0322\u0192\2\u0912\u0920\t\16\2\2\u0913"+
		"\u0921\5\u00fa~\2\u0914\u0916\7k\2\2\u0915\u0914\3\2\2\2\u0915\u0916\3"+
		"\2\2\2\u0916\u091a\3\2\2\2\u0917\u0919\5\u0108\u0085\2\u0918\u0917\3\2"+
		"\2\2\u0919\u091c\3\2\2\2\u091a\u0918\3\2\2\2\u091a\u091b\3\2\2\2\u091b"+
		"\u091d\3\2\2\2\u091c\u091a\3\2\2\2\u091d\u091e\5\u0152\u00aa\2\u091e\u091f"+
		"\7\u0230\2\2\u091f\u0921\3\2\2\2\u0920\u0913\3\2\2\2\u0920\u0915\3\2\2"+
		"\2\u0921\u00cf\3\2\2\2\u0922\u0924\7\u009b\2\2\u0923\u0922\3\2\2\2\u0923"+
		"\u0924\3\2\2\2\u0924\u0926\3\2\2\2\u0925\u0927\7\u00cb\2\2\u0926\u0925"+
		"\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u0929\7O\2\2\u0929"+
		"\u092a\7\u00aa\2\2\u092a\u093c\5\u0322\u0192\2\u092b\u092c\7\u0224\2\2"+
		"\u092c\u092d\7\u0185\2\2\u092d\u092e\7\u00b9\2\2\u092e\u092f\7\u0139\2"+
		"\2\u092f\u0930\5\u0322\u0192\2\u0930\u0931\7\u022a\2\2\u0931\u0932\3\2"+
		"\2\2\u0932\u0937\5\u00eav\2\u0933\u0934\7\u022a\2\2\u0934\u0936\5\u00ea"+
		"v\2\u0935\u0933\3\2\2\2\u0936\u0939\3\2\2\2\u0937\u0935\3\2\2\2\u0937"+
		"\u0938\3\2\2\2\u0938\u093a\3\2\2\2\u0939\u0937\3\2\2\2\u093a\u093b\7\u0225"+
		"\2\2\u093b\u093d\3\2\2\2\u093c\u092b\3\2\2\2\u093c\u093d\3\2\2\2\u093d"+
		"\u093e\3\2\2\2\u093e\u093f\7\u016d\2\2\u093f\u0940\7\u0185\2\2\u0940\u0941"+
		"\7\20\2\2\u0941\u0942\7\u016b\2\2\u0942\u0950\t\16\2\2\u0943\u0951\5\u00fa"+
		"~\2\u0944\u0946\7k\2\2\u0945\u0944\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u094a"+
		"\3\2\2\2\u0947\u0949\5\u0108\u0085\2\u0948\u0947\3\2\2\2\u0949\u094c\3"+
		"\2\2\2\u094a\u0948\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094d\3\2\2\2\u094c"+
		"\u094a\3\2\2\2\u094d\u094e\5\u0152\u00aa\2\u094e\u094f\7\u0230\2\2\u094f"+
		"\u0951\3\2\2\2\u0950\u0943\3\2\2\2\u0950\u0945\3\2\2\2\u0951\u00d1\3\2"+
		"\2\2\u0952\u0954\7\u0121\2\2\u0953\u0952\3\2\2\2\u0953\u0954\3\2\2\2\u0954"+
		"\u0955\3\2\2\2\u0955\u0956\t\35\2\2\u0956\u00d3\3\2\2\2\u0957\u0958\5"+
		"\u033a\u019e\2\u0958\u095a\5\u0322\u0192\2\u0959\u095b\5\u00d6l\2\u095a"+
		"\u0959\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095e\3\2\2\2\u095c\u095e\5\u00d8"+
		"m\2\u095d\u0957\3\2\2\2\u095d\u095c\3\2\2\2\u095e\u00d5\3\2\2\2\u095f"+
		"\u0960\7\u0095\2\2\u0960\u0961\7\u0108\2\2\u0961\u0962\5\u023c\u011f\2"+
		"\u0962\u00d7\3\2\2\2\u0963\u0965\5\u00d2j\2\u0964\u0963\3\2\2\2\u0964"+
		"\u0965\3\2\2\2\u0965\u0967\3\2\2\2\u0966\u0968\5\u00dan\2\u0967\u0966"+
		"\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u0967\3\2\2\2\u0969\u096a\3\2\2\2\u096a"+
		"\u096d\3\2\2\2\u096b\u096c\7\u022a\2\2\u096c\u096e\5\u00e6t\2\u096d\u096b"+
		"\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u00d9\3\2\2\2\u096f\u0973\5\u00dco"+
		"\2\u0970\u0973\5\u00e2r\2\u0971\u0973\5\u00e4s\2\u0972\u096f\3\2\2\2\u0972"+
		"\u0970\3\2\2\2\u0972\u0971\3\2\2\2\u0973\u00db\3\2\2\2\u0974\u0977\t\34"+
		"\2\2\u0975\u0978\5\u00dep\2\u0976\u0978\5\u00e0q\2\u0977\u0975\3\2\2\2"+
		"\u0977\u0976\3\2\2\2\u0978\u00dd\3\2\2\2\u0979\u097a\7\u0156\2\2\u097a"+
		"\u097b\5\u0300\u0181\2\u097b\u097c\7\u0224\2\2\u097c\u0981\5\u00eav\2"+
		"\u097d\u097e\7\u022a\2\2\u097e\u0980\5\u00eav\2\u097f\u097d\3\2\2\2\u0980"+
		"\u0983\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0984\3\2"+
		"\2\2\u0983\u0981\3\2\2\2\u0984\u0987\7\u0225\2\2\u0985\u0986\t\16\2\2"+
		"\u0986\u0988\5\u00fa~\2\u0987\u0985\3\2\2\2\u0987\u0988\3\2\2\2\u0988"+
		"\u00df\3\2\2\2\u0989\u098a\7\u00aa\2\2\u098a\u0996\5\u02fe\u0180\2\u098b"+
		"\u098c\7\u0224\2\2\u098c\u0991\5\u00eav\2\u098d\u098e\7\u022a\2\2\u098e"+
		"\u0990\5\u00eav\2\u098f\u098d\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u098f"+
		"\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994\3\2\2\2\u0993\u0991\3\2\2\2\u0994"+
		"\u0995\7\u0225\2\2\u0995\u0997\3\2\2\2\u0996\u098b\3\2\2\2\u0996\u0997"+
		"\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u099d\7\u016d\2\2\u0999\u099e\5\u0322"+
		"\u0192\2\u099a\u099b\7\u0185\2\2\u099b\u099c\7\20\2\2\u099c\u099e\7\u016b"+
		"\2\2\u099d\u0999\3\2\2\2\u099d\u099a\3\2\2\2\u099e\u09a7\3\2\2\2\u099f"+
		"\u09a0\t\16\2\2\u09a0\u09a8\5\u00fa~\2\u09a1\u09a3\7\u0095\2\2\u09a2\u09a4"+
		"\7\u01d8\2\2\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\3\2\2"+
		"\2\u09a5\u09a6\7\u0108\2\2\u09a6\u09a8\5\u023c\u011f\2\u09a7\u099f\3\2"+
		"\2\2\u09a7\u09a1\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u00e1\3\2\2\2\u09a9"+
		"\u09ab\7\u009b\2\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ad"+
		"\3\2\2\2\u09ac\u09ae\7\u00cb\2\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2"+
		"\2\u09ae\u09af\3\2\2\2\u09af\u09b0\7O\2\2\u09b0\u09b1\7\u00aa\2\2\u09b1"+
		"\u09c3\5\u0322\u0192\2\u09b2\u09b3\7\u0224\2\2\u09b3\u09b4\7\u0185\2\2"+
		"\u09b4\u09b5\7\u00b9\2\2\u09b5\u09b6\7\u0139\2\2\u09b6\u09b7\5\u0322\u0192"+
		"\2\u09b7\u09b8\7\u022a\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09be\5\u00eav\2"+
		"\u09ba\u09bb\7\u022a\2\2\u09bb\u09bd\5\u00eav\2\u09bc\u09ba\3\2\2\2\u09bd"+
		"\u09c0\3\2\2\2\u09be\u09bc\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c1\3\2"+
		"\2\2\u09c0\u09be\3\2\2\2\u09c1\u09c2\7\u0225\2\2\u09c2\u09c4\3\2\2\2\u09c3"+
		"\u09b2\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u09c6\7\u016d"+
		"\2\2\u09c6\u09c7\7\u0185\2\2\u09c7\u09c8\7\20\2\2\u09c8\u09cb\7\u016b"+
		"\2\2\u09c9\u09ca\t\16\2\2\u09ca\u09cc\5\u00fa~\2\u09cb\u09c9\3\2\2\2\u09cb"+
		"\u09cc\3\2\2\2\u09cc\u00e3\3\2\2\2\u09cd\u09ce\t\33\2\2\u09ce\u09cf\7"+
		"\u00fc\2\2\u09cf\u09d0\5\u00e0q\2\u09d0\u00e5\3\2\2\2\u09d1\u09d2\7\u0150"+
		"\2\2\u09d2\u09d3\7\u016a\2\2\u09d3\u09d4\7\u0224\2\2\u09d4\u09d9\5\u00e8"+
		"u\2\u09d5\u09d6\7\u022a\2\2\u09d6\u09d8\5\u00e8u\2\u09d7\u09d5\3\2\2\2"+
		"\u09d8\u09db\3\2\2\2\u09d9\u09d7\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09dc"+
		"\3\2\2\2\u09db\u09d9\3\2\2\2\u09dc\u09dd\7\u0225\2\2\u09dd\u00e7\3\2\2"+
		"\2\u09de\u09e1\5\u033a\u019e\2\u09df\u09e1\7o\2\2\u09e0\u09de\3\2\2\2"+
		"\u09e0\u09df\3\2\2\2\u09e1\u00e9\3\2\2\2\u09e2\u09e3\5\u02ea\u0176\2\u09e3"+
		"\u09e4\5\u0322\u0192\2\u09e4\u00eb\3\2\2\2\u09e5\u09e6\7~\2\2\u09e6\u09e7"+
		"\7\u0186\2\2\u09e7\u09e8\5\u02fa\u017e\2\u09e8\u09e9\7\u0230\2\2\u09e9"+
		"\u00ed\3\2\2\2\u09ea\u09eb\7\n\2\2\u09eb\u09ec\7\u0186\2\2\u09ec\u09ee"+
		"\5\u02fa\u017e\2\u09ed\u09ef\5\u00f2z\2\u09ee\u09ed\3\2\2\2\u09ef\u09f0"+
		"\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1\u09f2\3\2\2\2\u09f2"+
		"\u09f3\7\u0230\2\2\u09f3\u00ef\3\2\2\2\u09f4\u09f5\7X\2\2\u09f5\u09f6"+
		"\7\u0186\2\2\u09f6\u09fb\5\u02fa\u017e\2\u09f7\u09fa\5\u00f4{\2\u09f8"+
		"\u09fa\5\u00f2z\2\u09f9\u09f7\3\2\2\2\u09f9\u09f8\3\2\2\2\u09fa\u09fd"+
		"\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fe\3\2\2\2\u09fd"+
		"\u09fb\3\2\2\2\u09fe\u09ff\7\u0230\2\2\u09ff\u00f1\3\2\2\2\u0a00\u0a01"+
		"\7\u00bc\2\2\u0a01\u0a02\7,\2\2\u0a02\u0a11\7\u021e\2\2\u0a03\u0a04\7"+
		"\u00f9\2\2\u0a04\u0a11\7\u021e\2\2\u0a05\u0a11\7\u011b\2\2\u0a06\u0a07"+
		"\7\u0101\2\2\u0a07\u0a11\7\u021e\2\2\u0a08\u0a11\7\u011c\2\2\u0a09\u0a11"+
		"\7`\2\2\u0a0a\u0a11\7\u0118\2\2\u0a0b\u0a0c\7/\2\2\u0a0c\u0a11\7\u021e"+
		"\2\2\u0a0d\u0a11\7\u0115\2\2\u0a0e\u0a11\7\u0135\2\2\u0a0f\u0a11\7\u011e"+
		"\2\2\u0a10\u0a00\3\2\2\2\u0a10\u0a03\3\2\2\2\u0a10\u0a05\3\2\2\2\u0a10"+
		"\u0a06\3\2\2\2\u0a10\u0a08\3\2\2\2\u0a10\u0a09\3\2\2\2\u0a10\u0a0a\3\2"+
		"\2\2\u0a10\u0a0b\3\2\2\2\u0a10\u0a0d\3\2\2\2\u0a10\u0a0e\3\2\2\2\u0a10"+
		"\u0a0f\3\2\2\2\u0a11\u00f3\3\2\2\2\u0a12\u0a13\7\u019f\2\2\u0a13\u0a14"+
		"\7\u01e5\2\2\u0a14\u0a15\7\u021e\2\2\u0a15\u00f5\3\2\2\2\u0a16\u0a17\7"+
		"\26\2\2\u0a17\u0a18\t\36\2\2\u0a18\u00f7\3\2\2\2\u0a19\u0a1a\5\u033a\u019e"+
		"\2\u0a1a\u0a1b\7\u023b\2\2\u0a1b\u0a1c\5\u023c\u011f\2\u0a1c\u00f9\3\2"+
		"\2\2\u0a1d\u0a20\7\u00db\2\2\u0a1e\u0a21\5\u00fc\177\2\u0a1f\u0a21\5\u00fe"+
		"\u0080\2\u0a20\u0a1e\3\2\2\2\u0a20\u0a1f\3\2\2\2\u0a21\u00fb\3\2\2\2\u0a22"+
		"\u0a23\7\u00d6\2\2\u0a23\u0a24\7\u0108\2\2\u0a24\u0a25\7\u0220\2\2\u0a25"+
		"\u00fd\3\2\2\2\u0a26\u0a29\7.\2\2\u0a27\u0a28\7\u0108\2\2\u0a28\u0a2a"+
		"\7\u0220\2\2\u0a29\u0a27\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\3\2\2"+
		"\2\u0a2b\u0a2c\7\u00e3\2\2\u0a2c\u0a2e\5\u033a\u019e\2\u0a2d\u0a2f\5\u0100"+
		"\u0081\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a32\3\2\2\2\u0a30"+
		"\u0a31\7\u01e5\2\2\u0a31\u0a33\7Q\2\2\u0a32\u0a30\3\2\2\2\u0a32\u0a33"+
		"\3\2\2\2\u0a33\u0a35\3\2\2\2\u0a34\u0a36\5\u0102\u0082\2\u0a35\u0a34\3"+
		"\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u00ff\3\2\2\2\u0a37\u0a38\7\7\2\2\u0a38"+
		"\u0a39\7\u00b9\2\2\u0a39\u0a3a\7\u0224\2\2\u0a3a\u0a3f\5\u023c\u011f\2"+
		"\u0a3b\u0a3c\7\u022a\2\2\u0a3c\u0a3e\5\u023c\u011f\2\u0a3d\u0a3b\3\2\2"+
		"\2\u0a3e\u0a41\3\2\2\2\u0a3f\u0a3d\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a42"+
		"\3\2\2\2\u0a41\u0a3f\3\2\2\2\u0a42\u0a43\7\u0225\2\2\u0a43\u0101\3\2\2"+
		"\2\u0a44\u0a45\7\u013f\2\2\u0a45\u0a51\7\u0224\2\2\u0a46\u0a4b\5\u023c"+
		"\u011f\2\u0a47\u0a48\7\u022a\2\2\u0a48\u0a4a\5\u023c\u011f\2\u0a49\u0a47"+
		"\3\2\2\2\u0a4a\u0a4d\3\2\2\2\u0a4b\u0a49\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c"+
		"\u0a52\3\2\2\2\u0a4d\u0a4b\3\2\2\2\u0a4e\u0a4f\7\u021d\2\2\u0a4f\u0a50"+
		"\7\u021d\2\2\u0a50\u0a52\7\u021d\2\2\u0a51\u0a46\3\2\2\2\u0a51\u0a4e\3"+
		"\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54\7\u0225\2\2\u0a54\u0103\3\2\2\2"+
		"\u0a55\u0a59\5\u02ea\u0176\2\u0a56\u0a58\t\37\2\2\u0a57\u0a56\3\2\2\2"+
		"\u0a58\u0a5b\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5d"+
		"\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5c\u0a5e\5\u0322\u0192\2\u0a5d\u0a5c\3"+
		"\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0a60\3\2\2\2\u0a5f\u0a61\5\u0106\u0084"+
		"\2\u0a60\u0a5f\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0105\3\2\2\2\u0a62\u0a63"+
		"\t \2\2\u0a63\u0a64\5\u023c\u011f\2\u0a64\u0107\3\2\2\2\u0a65\u0a6f\5"+
		"\u0114\u008b\2\u0a66\u0a6f\5\u010a\u0086\2\u0a67\u0a6f\5\u010c\u0087\2"+
		"\u0a68\u0a6f\5\u010e\u0088\2\u0a69\u0a6f\5\u0112\u008a\2\u0a6a\u0a6f\5"+
		"\u0116\u008c\2\u0a6b\u0a6f\5\u011e\u0090\2\u0a6c\u0a6f\5x=\2\u0a6d\u0a6f"+
		"\5V,\2\u0a6e\u0a65\3\2\2\2\u0a6e\u0a66\3\2\2\2\u0a6e\u0a67\3\2\2\2\u0a6e"+
		"\u0a68\3\2\2\2\u0a6e\u0a69\3\2\2\2\u0a6e\u0a6a\3\2\2\2\u0a6e\u0a6b\3\2"+
		"\2\2\u0a6e\u0a6c\3\2\2\2\u0a6e\u0a6d\3\2\2\2\u0a6f\u0109\3\2\2\2\u0a70"+
		"\u0a72\5\u0304\u0183\2\u0a71\u0a73\7L\2\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73"+
		"\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a77\5\u0322\u0192\2\u0a75\u0a76\7"+
		"\u0121\2\2\u0a76\u0a78\7\u0124\2\2\u0a77\u0a75\3\2\2\2\u0a77\u0a78\3\2"+
		"\2\2\u0a78\u0a7a\3\2\2\2\u0a79\u0a7b\5\u0106\u0084\2\u0a7a\u0a79\3\2\2"+
		"\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7d\7\u0230\2\2\u0a7d"+
		"\u010b\3\2\2\2\u0a7e\u0a7f\7\u01ab\2\2\u0a7f\u0a80\5\u02f8\u017d\2\u0a80"+
		"\u0a81\7\u00d3\2\2\u0a81\u0a87\5\u0322\u0192\2\u0a82\u0a83\7\u0159\2\2"+
		"\u0a83\u0a84\5\u023c\u011f\2\u0a84\u0a85\7\3\2\2\u0a85\u0a86\5\u023c\u011f"+
		"\2\u0a86\u0a88\3\2\2\2\u0a87\u0a82\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a8b"+
		"\3\2\2\2\u0a89\u0a8a\7\u0121\2\2\u0a8a\u0a8c\7\u0124\2\2\u0a8b\u0a89\3"+
		"\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e\7\u0230\2\2"+
		"\u0a8e\u010d\3\2\2\2\u0a8f\u0a90\7^\2\2\u0a90\u0a9c\5\u0308\u0185\2\u0a91"+
		"\u0a92\7\u0224\2\2\u0a92\u0a97\5\u0110\u0089\2\u0a93\u0a94\7\u022a\2\2"+
		"\u0a94\u0a96\5\u0110\u0089\2\u0a95\u0a93\3\2\2\2\u0a96\u0a99\3\2\2\2\u0a97"+
		"\u0a95\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a9a\3\2\2\2\u0a99\u0a97\3\2"+
		"\2\2\u0a9a\u0a9b\7\u0225\2\2\u0a9b\u0a9d\3\2\2\2\u0a9c\u0a91\3\2\2\2\u0a9c"+
		"\u0a9d\3\2\2\2\u0a9d\u0aa0\3\2\2\2\u0a9e\u0a9f\7\u016d\2\2\u0a9f\u0aa1"+
		"\5\u0322\u0192\2\u0aa0\u0a9e\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa4\3"+
		"\2\2\2\u0aa2\u0aa3\7\u00d3\2\2\u0aa3\u0aa5\5\u017e\u00c0\2\u0aa4\u0aa2"+
		"\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa7\7\u0230\2"+
		"\2\u0aa7\u010f\3\2\2\2\u0aa8\u0aad\5\u02ea\u0176\2\u0aa9\u0aab\7\u00b9"+
		"\2\2\u0aaa\u0aa9\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\3\2\2\2\u0aac"+
		"\u0aae\5\u0322\u0192\2\u0aad\u0aaa\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0"+
		"\3\2\2\2\u0aaf\u0ab1\5\u0106\u0084\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1\3"+
		"\2\2\2\u0ab1\u0111\3\2\2\2\u0ab2\u0ab3\5\u02fc\u017f\2\u0ab3\u0ab4\7\u008c"+
		"\2\2\u0ab4\u0ab5\7\u0230\2\2\u0ab5\u0113\3\2\2\2\u0ab6\u0ad5\7\u0150\2"+
		"\2\u0ab7\u0ad6\7\u0189\2\2\u0ab8\u0ad6\7\31\2\2\u0ab9\u0aba\7\u008d\2"+
		"\2\u0aba\u0abb\7\u0224\2\2\u0abb\u0abc\5\u02fc\u017f\2\u0abc\u0abd\7\u022a"+
		"\2\2\u0abd\u0abe\5\u0336\u019c\2\u0abe\u0abf\7\u0225\2\2\u0abf\u0ad6\3"+
		"\2\2\2\u0ac0\u0ac1\7\u00c7\2\2\u0ac1\u0ac2\7\u0224\2\2\u0ac2\u0ac3\5\u033a"+
		"\u019e\2\u0ac3\u0ac4\7\u022a\2\2\u0ac4\u0ac5\5\u023c\u011f\2\u0ac5\u0ac6"+
		"\7\u0225\2\2\u0ac6\u0ad6\3\2\2\2\u0ac7\u0ac8\7\u016a\2\2\u0ac8\u0acb\7"+
		"\u0224\2\2\u0ac9\u0acc\5\u033a\u019e\2\u0aca\u0acc\7o\2\2\u0acb\u0ac9"+
		"\3\2\2\2\u0acb\u0aca\3\2\2\2\u0acc\u0acf\3\2\2\2\u0acd\u0ace\7\u022a\2"+
		"\2\u0ace\u0ad0\5\u033a\u019e\2\u0acf\u0acd\3\2\2\2\u0ad0\u0ad1\3\2\2\2"+
		"\u0ad1\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad4"+
		"\7\u0225\2\2\u0ad4\u0ad6\3\2\2\2\u0ad5\u0ab7\3\2\2\2\u0ad5\u0ab8\3\2\2"+
		"\2\u0ad5\u0ab9\3\2\2\2\u0ad5\u0ac0\3\2\2\2\u0ad5\u0ac7\3\2\2\2\u0ad6\u0ad7"+
		"\3\2\2\2\u0ad7\u0ad8\7\u0230\2\2\u0ad8\u0115\3\2\2\2\u0ad9\u0adc\5\u0118"+
		"\u008d\2\u0ada\u0adc\5\u011c\u008f\2\u0adb\u0ad9\3\2\2\2\u0adb\u0ada\3"+
		"\2\2\2\u0adc\u0117\3\2\2\2\u0add\u0ade\7\u01c5\2\2\u0ade\u0adf\5\u02f8"+
		"\u017d\2\u0adf\u0af2\7\u00d3\2\2\u0ae0\u0ae1\7\u015e\2\2\u0ae1\u0ae2\7"+
		"\u0224\2\2\u0ae2\u0ae7\5\u011a\u008e\2\u0ae3\u0ae4\7\u022a\2\2\u0ae4\u0ae6"+
		"\5\u011a\u008e\2\u0ae5\u0ae3\3\2\2\2\u0ae6\u0ae9\3\2\2\2\u0ae7\u0ae5\3"+
		"\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0aea\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0aea"+
		"\u0aeb\7\u0225\2\2\u0aeb\u0af3\3\2\2\2\u0aec\u0aed\7\u0160\2\2\u0aed\u0af0"+
		"\7^\2\2\u0aee\u0aef\7\u016d\2\2\u0aef\u0af1\5\u0322\u0192\2\u0af0\u0aee"+
		"\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af3\3\2\2\2\u0af2\u0ae0\3\2\2\2\u0af2"+
		"\u0aec\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\7\u0230\2\2\u0af5\u0119"+
		"\3\2\2\2\u0af6\u0af8\5\u0310\u0189\2\u0af7\u0af9\5\u0322\u0192\2\u0af8"+
		"\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afc\3\2\2\2\u0afa\u0afb\7\u0121"+
		"\2\2\u0afb\u0afd\7\u0124\2\2\u0afc\u0afa\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd"+
		"\u0aff\3\2\2\2\u0afe\u0b00\5\u0106\u0084\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00"+
		"\3\2\2\2\u0b00\u011b\3\2\2\2\u0b01\u0b02\5\u030a\u0186\2\u0b02\u0b03\5"+
		"\u02f8\u017d\2\u0b03\u0b04\t!\2\2\u0b04\u0b05\7\u0230\2\2\u0b05\u011d"+
		"\3\2\2\2\u0b06\u0b09\5\u0120\u0091\2\u0b07\u0b09\5\u0126\u0094\2\u0b08"+
		"\u0b06\3\2\2\2\u0b08\u0b07\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b0b\7\u0230"+
		"\2\2\u0b0b\u011f\3\2\2\2\u0b0c\u0b0d\7\u01c5\2\2\u0b0d\u0b0e\5\u02f8\u017d"+
		"\2\u0b0e\u0b1a\7\u00d3\2\2\u0b0f\u0b10\7\u01af\2\2\u0b10\u0b11\7\u012a"+
		"\2\2\u0b11\u0b13\5\u0322\u0192\2\u0b12\u0b14\5\u0122\u0092\2\u0b13\u0b12"+
		"\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b17\3\2\2\2\u0b15\u0b16\7\u0121\2"+
		"\2\u0b16\u0b18\7\u0124\2\2\u0b17\u0b15\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18"+
		"\u0b1b\3\2\2\2\u0b19\u0b1b\5\u0124\u0093\2\u0b1a\u0b0f\3\2\2\2\u0b1a\u0b19"+
		"\3\2\2\2\u0b1b\u0121\3\2\2\2\u0b1c\u0b1f\7\u00bf\2\2\u0b1d\u0b1f\7\u00be"+
		"\2\2\u0b1e\u0b1c\3\2\2\2\u0b1e\u0b1d\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20"+
		"\u0b21\7,\2\2\u0b21\u0b22\5\u0322\u0192\2\u0b22\u0123\3\2\2\2\u0b23\u0b27"+
		"\7\u01d9\2\2\u0b24\u0b25\7\u01da\2\2\u0b25\u0b27\7\17\2\2\u0b26\u0b23"+
		"\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b29\7\u0224\2"+
		"\2\u0b29\u0b2a\5\u023c\u011f\2\u0b2a\u0b2b\7\u0225\2\2\u0b2b\u0b2c\7\u012a"+
		"\2\2\u0b2c\u0b2f\5\u0322\u0192\2\u0b2d\u0b2e\7\u0121\2\2\u0b2e\u0b30\7"+
		"\u0124\2\2\u0b2f\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0125\3\2\2\2"+
		"\u0b31\u0b32\5\u02e0\u0171\2\u0b32\u0b33\5\u0322\u0192\2\u0b33\u0127\3"+
		"\2\2\2\u0b34\u0b35\5\u012c\u0097\2\u0b35\u0b36\t\"\2\2\u0b36\u0b39\3\2"+
		"\2\2\u0b37\u0b39\5\u012a\u0096\2\u0b38\u0b34\3\2\2\2\u0b38\u0b37\3\2\2"+
		"\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0129"+
		"\3\2\2\2\u0b3c\u0b3d\7\u0232\2\2\u0b3d\u0b3e\7\u0232\2\2\u0b3e\u0b3f\5"+
		"\u02f6\u017c\2\u0b3f\u0b40\7\u0238\2\2\u0b40\u0b41\7\u0238\2\2\u0b41\u012b"+
		"\3\2\2\2\u0b42\u0b43\7X\2\2\u0b43\u0b5a\5\2\2\2\u0b44\u0b45\7\n\2\2\u0b45"+
		"\u0b5a\5\2\2\2\u0b46\u0b47\7\u00ac\2\2\u0b47\u0b5a\5\2\2\2\u0b48\u0b49"+
		"\7\u01c4\2\2\u0b49\u0b5a\5\2\2\2\u0b4a\u0b5a\5\u0152\u00aa\2\u0b4b\u0b5a"+
		"\5\u015a\u00ae\2\u0b4c\u0b5a\5\u012e\u0098\2\u0b4d\u0b5a\5\u0130\u0099"+
		"\2\u0b4e\u0b5a\5\u0132\u009a\2\u0b4f\u0b5a\5\u0134\u009b\2\u0b50\u0b5a"+
		"\5\u0136\u009c\2\u0b51\u0b5a\5\u013c\u009f\2\u0b52\u0b5a\5\u0140\u00a1"+
		"\2\u0b53\u0b5a\5\u014a\u00a6\2\u0b54\u0b5a\5\u014c\u00a7\2\u0b55\u0b5a"+
		"\5\u014e\u00a8\2\u0b56\u0b5a\5\u0278\u013d\2\u0b57\u0b5a\5\u015c\u00af"+
		"\2\u0b58\u0b5a\5\u0150\u00a9\2\u0b59\u0b42\3\2\2\2\u0b59\u0b44\3\2\2\2"+
		"\u0b59\u0b46\3\2\2\2\u0b59\u0b48\3\2\2\2\u0b59\u0b4a\3\2\2\2\u0b59\u0b4b"+
		"\3\2\2\2\u0b59\u0b4c\3\2\2\2\u0b59\u0b4d\3\2\2\2\u0b59\u0b4e\3\2\2\2\u0b59"+
		"\u0b4f\3\2\2\2\u0b59\u0b50\3\2\2\2\u0b59\u0b51\3\2\2\2\u0b59\u0b52\3\2"+
		"\2\2\u0b59\u0b53\3\2\2\2\u0b59\u0b54\3\2\2\2\u0b59\u0b55\3\2\2\2\u0b59"+
		"\u0b56\3\2\2\2\u0b59\u0b57\3\2\2\2\u0b59\u0b58\3\2\2\2\u0b5a\u012d\3\2"+
		"\2\2\u0b5b\u0b5e\5\u032c\u0197\2\u0b5c\u0b5e\5\u032a\u0196\2\u0b5d\u0b5b"+
		"\3\2\2\2\u0b5d\u0b5c\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b60\7\u022d\2"+
		"\2\u0b60\u0b61\5\u023c\u011f\2\u0b61\u012f\3\2\2\2\u0b62\u0b64\7R\2\2"+
		"\u0b63\u0b65\5\u02f6\u017c\2\u0b64\u0b63\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65"+
		"\u0b68\3\2\2\2\u0b66\u0b67\7\u01e1\2\2\u0b67\u0b69\5\u0238\u011d\2\u0b68"+
		"\u0b66\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0131\3\2\2\2\u0b6a\u0b6c\7\u0093"+
		"\2\2\u0b6b\u0b6d\5\u02f6\u017c\2\u0b6c\u0b6b\3\2\2\2\u0b6c\u0b6d\3\2\2"+
		"\2\u0b6d\u0b70\3\2\2\2\u0b6e\u0b6f\7\u01e1\2\2\u0b6f\u0b71\5\u0238\u011d"+
		"\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0133\3\2\2\2\u0b72\u0b73"+
		"\7\u00ab\2\2\u0b73\u0b74\5\u02f6\u017c\2\u0b74\u0135\3\2\2\2\u0b75\u0b76"+
		"\7\u00b6\2\2\u0b76\u0b77\5\u0238\u011d\2\u0b77\u0b78\7\u01b2\2\2\u0b78"+
		"\u0b7c\5\u0128\u0095\2\u0b79\u0b7b\5\u0138\u009d\2\u0b7a\u0b79\3\2\2\2"+
		"\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b80"+
		"\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7f\u0b81\5\u013a\u009e\2\u0b80\u0b7f\3"+
		"\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b83\7\u0087\2\2"+
		"\u0b83\u0b84\7\u00b6\2\2\u0b84\u0137\3\2\2\2\u0b85\u0b86\7\u0083\2\2\u0b86"+
		"\u0b87\5\u0238\u011d\2\u0b87\u0b88\7\u01b2\2\2\u0b88\u0b89\5\u0128\u0095"+
		"\2\u0b89\u0139\3\2\2\2\u0b8a\u0b8b\7\u0082\2\2\u0b8b\u0b8c\5\u0128\u0095"+
		"\2\u0b8c\u013b\3\2\2\2\u0b8d\u0b8f\5\u02f6\u017c\2\u0b8e\u0b8d\3\2\2\2"+
		"\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b94\3\2\2\2\u0b90\u0b91\7\u01e4\2\2\u0b91"+
		"\u0b95\5\u0238\u011d\2\u0b92\u0b93\7\u00a2\2\2\u0b93\u0b95\5\u013e\u00a0"+
		"\2\u0b94\u0b90\3\2\2\2\u0b94\u0b92\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b96"+
		"\3\2\2\2\u0b96\u0b97\7\u00f2\2\2\u0b97\u0b98\5\u0128\u0095\2\u0b98\u0b99"+
		"\7\u0087\2\2\u0b99\u0b9b\7\u00f2\2\2\u0b9a\u0b9c\5\u02f6\u017c\2\u0b9b"+
		"\u0b9a\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u013d\3\2\2\2\u0b9d\u0b9e\5\u0306"+
		"\u0184\2\u0b9e\u0ba0\7\u00b9\2\2\u0b9f\u0ba1\7\u0170\2\2\u0ba0\u0b9f\3"+
		"\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2\u0ba3\5\u0146\u00a4"+
		"\2\u0ba3\u0ba4\7\3\2\2\u0ba4\u0ba5\5\u0148\u00a5\2\u0ba5\u0bb3\3\2\2\2"+
		"\u0ba6\u0ba7\5\u030a\u0186\2\u0ba7\u0bb0\7\u00b9\2\2\u0ba8\u0baa\5\u0308"+
		"\u0185\2\u0ba9\u0bab\5\u0236\u011c\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3"+
		"\2\2\2\u0bab\u0bb1\3\2\2\2\u0bac\u0bad\7\u0224\2\2\u0bad\u0bae\5\u017e"+
		"\u00c0\2\u0bae\u0baf\7\u0225\2\2\u0baf\u0bb1\3\2\2\2\u0bb0\u0ba8\3\2\2"+
		"\2\u0bb0\u0bac\3\2\2\2\u0bb1\u0bb3\3\2\2\2\u0bb2\u0b9d\3\2\2\2\u0bb2\u0ba6"+
		"\3\2\2\2\u0bb3\u013f\3\2\2\2\u0bb4\u0bb5\7\u00a3\2\2\u0bb5\u0bb6\5\u0306"+
		"\u0184\2\u0bb6\u0bb7\7\u00b9\2\2\u0bb7\u0bb8\5\u0142\u00a2\2\u0bb8\u0bbb"+
		"\5\u015c\u00af\2\u0bb9\u0bba\7\u017a\2\2\u0bba\u0bbc\7\u008e\2\2\u0bbb"+
		"\u0bb9\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0141\3\2\2\2\u0bbd\u0bbe\5\u0146"+
		"\u00a4\2\u0bbe\u0bbf\7\3\2\2\u0bbf\u0bc0\5\u0148\u00a5\2\u0bc0\u0bcb\3"+
		"\2\2\2\u0bc1\u0bc2\7\u00c2\2\2\u0bc2\u0bc3\7\u012a\2\2\u0bc3\u0bc5\5\u030c"+
		"\u0187\2\u0bc4\u0bc6\5\u0144\u00a3\2\u0bc5\u0bc4\3\2\2\2\u0bc5\u0bc6\3"+
		"\2\2\2\u0bc6\u0bcb\3\2\2\2\u0bc7\u0bc8\7\u01d5\2\2\u0bc8\u0bc9\7\u012a"+
		"\2\2\u0bc9\u0bcb\5\u0306\u0184\2\u0bca\u0bbd\3\2\2\2\u0bca\u0bc1\3\2\2"+
		"\2\u0bca\u0bc7\3\2\2\2\u0bcb\u0143\3\2\2\2\u0bcc\u0bcd\7\37\2\2\u0bcd"+
		"\u0bce\5\u0146\u00a4\2\u0bce\u0bcf\7\f\2\2\u0bcf\u0bd0\5\u0148\u00a5\2"+
		"\u0bd0\u0145\3\2\2\2\u0bd1\u0bd2\5\u025a\u012e\2\u0bd2\u0147\3\2\2\2\u0bd3"+
		"\u0bd4\5\u025a\u012e\2\u0bd4\u0149\3\2\2\2\u0bd5\u0bd6\7\u0124\2\2\u0bd6"+
		"\u014b\3\2\2\2\u0bd7\u0bd9\7\u0158\2\2\u0bd8\u0bda\5\u02fc\u017f\2\u0bd9"+
		"\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u014d\3\2\2\2\u0bdb\u0bdd\7\u016d"+
		"\2\2\u0bdc\u0bde\5\u0238\u011d\2\u0bdd\u0bdc\3\2\2\2\u0bdd\u0bde\3\2\2"+
		"\2\u0bde\u014f\3\2\2\2\u0bdf\u0be1\7\60\2\2\u0be0\u0bdf\3\2\2\2\u0be0"+
		"\u0be1\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be4\5\u02e4\u0173\2\u0be3\u0be5"+
		"\5\u0318\u018d\2\u0be4\u0be3\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0151\3"+
		"\2\2\2\u0be6\u0be7\7\36\2\2\u0be7\u0be9\5\u0128\u0095\2\u0be8\u0bea\5"+
		"\u0154\u00ab\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3\2"+
		"\2\2\u0beb\u0bed\7\u0087\2\2\u0bec\u0bee\5\u02f6\u017c\2\u0bed\u0bec\3"+
		"\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0153\3\2\2\2\u0bef\u0bf1\7\u008c\2\2"+
		"\u0bf0\u0bf2\5\u0156\u00ac\2\u0bf1\u0bf0\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3"+
		"\u0bf1\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0155\3\2\2\2\u0bf5\u0bf6\7\u01e1"+
		"\2\2\u0bf6\u0bfb\5\u02fc\u017f\2\u0bf7\u0bf8\7\u0133\2\2\u0bf8\u0bfa\5"+
		"\u02fc\u017f\2\u0bf9\u0bf7\3\2\2\2\u0bfa\u0bfd\3\2\2\2\u0bfb\u0bf9\3\2"+
		"\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0bfb\3\2\2\2\u0bfe"+
		"\u0bff\7\u01b2\2\2\u0bff\u0c00\5\u0128\u0095\2\u0c00\u0157\3\2\2\2\u0c01"+
		"\u0c03\7k\2\2\u0c02\u0c01\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u0c05\3\2"+
		"\2\2\u0c04\u0c06\5\u0108\u0085\2\u0c05\u0c04\3\2\2\2\u0c06\u0c07\3\2\2"+
		"\2\u0c07\u0c05\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0a\3\2\2\2\u0c09\u0c02"+
		"\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0c\5\u0152\u00aa"+
		"\2\u0c0c\u0159\3\2\2\2\u0c0d\u0c0f\7k\2\2\u0c0e\u0c0d\3\2\2\2\u0c0e\u0c0f"+
		"\3\2\2\2\u0c0f\u0c11\3\2\2\2\u0c10\u0c12\5\u0108\u0085\2\u0c11\u0c10\3"+
		"\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c11\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14"+
		"\u0c15\3\2\2\2\u0c15\u0c16\5\u0152\u00aa\2\u0c16\u015b\3\2\2\2\u0c17\u0c1c"+
		"\5\u015e\u00b0\2\u0c18\u0c1c\5\u0162\u00b2\2\u0c19\u0c1c\5\u0164\u00b3"+
		"\2\u0c1a\u0c1c\5\u016e\u00b8\2\u0c1b\u0c17\3\2\2\2\u0c1b\u0c18\3\2\2\2"+
		"\u0c1b\u0c19\3\2\2\2\u0c1b\u0c1a\3\2\2\2\u0c1c\u015d\3\2\2\2\u0c1d\u0c1e"+
		"\7\u0091\2\2\u0c1e\u0c1f\7\u00b8\2\2\u0c1f\u0c29\5\u023c\u011f\2\u0c20"+
		"\u0c22\5\u02d4\u016b\2\u0c21\u0c23\5\u029c\u014f\2\u0c22\u0c21\3\2\2\2"+
		"\u0c22\u0c23\3\2\2\2\u0c23\u0c2a\3\2\2\2\u0c24\u0c26\5\u029c\u014f\2\u0c25"+
		"\u0c27\5\u0160\u00b1\2\u0c26\u0c25\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c2a"+
		"\3\2\2\2\u0c28\u0c2a\5\u0160\u00b1\2\u0c29\u0c20\3\2\2\2\u0c29\u0c24\3"+
		"\2\2\2\u0c29\u0c28\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u015f\3\2\2\2\u0c2b"+
		"\u0c2c\t#\2\2\u0c2c\u0c2d\5\u02d4\u016b\2\u0c2d\u0161\3\2\2\2\u0c2e\u0c36"+
		"\5\u020c\u0107\2\u0c2f\u0c36\5\u0218\u010d\2\u0c30\u0c36\5\u017e\u00c0"+
		"\2\u0c31\u0c36\5\u01f2\u00fa\2\u0c32\u0c36\5\u01f8\u00fd\2\u0c33\u0c36"+
		"\5\u01fa\u00fe\2\u0c34\u0c36\5\u017c\u00bf\2\u0c35\u0c2e\3\2\2\2\u0c35"+
		"\u0c2f\3\2\2\2\u0c35\u0c30\3\2\2\2\u0c35\u0c31\3\2\2\2\u0c35\u0c32\3\2"+
		"\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c34\3\2\2\2\u0c36\u0163\3\2\2\2\u0c37"+
		"\u0c3c\5\u0166\u00b4\2\u0c38\u0c3c\5\u0168\u00b5\2\u0c39\u0c3c\5\u016a"+
		"\u00b6\2\u0c3a\u0c3c\5\u016c\u00b7\2\u0c3b\u0c37\3\2\2\2\u0c3b\u0c38\3"+
		"\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3a\3\2\2\2\u0c3c\u0165\3\2\2\2\u0c3d"+
		"\u0c3e\7=\2\2\u0c3e\u0c3f\5\u0308\u0185\2\u0c3f\u0167\3\2\2\2\u0c40\u0c41"+
		"\7\u0131\2\2\u0c41\u0c43\5\u0308\u0185\2\u0c42\u0c44\5\u0236\u011c\2\u0c43"+
		"\u0c42\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0169\3\2\2\2\u0c45\u0c46\7\u0099"+
		"\2\2\u0c46\u0c5b\5\u0308\u0185\2\u0c47\u0c48\7\u00d1\2\2\u0c48\u0c4d\5"+
		"\u0304\u0183\2\u0c49\u0c4a\7\u022a\2\2\u0c4a\u0c4c\5\u0304\u0183\2\u0c4b"+
		"\u0c49\3\2\2\2\u0c4c\u0c4f\3\2\2\2\u0c4d\u0c4b\3\2\2\2\u0c4d\u0c4e\3\2"+
		"\2\2\u0c4e\u0c5c\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50\u0c51\7+\2\2\u0c51"+
		"\u0c52\7?\2\2\u0c52\u0c53\7\u00d1\2\2\u0c53\u0c58\5\u0304\u0183\2\u0c54"+
		"\u0c55\7\u022a\2\2\u0c55\u0c57\5\u0304\u0183\2\u0c56\u0c54\3\2\2\2\u0c57"+
		"\u0c5a\3\2\2\2\u0c58\u0c56\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5c\3\2"+
		"\2\2\u0c5a\u0c58\3\2\2\2\u0c5b\u0c47\3\2\2\2\u0c5b\u0c50\3\2\2\2\u0c5c"+
		"\u016b\3\2\2\2\u0c5d\u0c5e\7\u0131\2\2\u0c5e\u0c5f\5\u0304\u0183\2\u0c5f"+
		"\u0c62\7\u00a2\2\2\u0c60\u0c63\5\u017e\u00c0\2\u0c61\u0c63\5\u023c\u011f"+
		"\2\u0c62\u0c60\3\2\2\2\u0c62\u0c61\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c66"+
		"\5\u029c\u014f\2\u0c65\u0c64\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u016d\3"+
		"\2\2\2\u0c67\u0c6d\5\u0170\u00b9\2\u0c68\u0c6d\5\u0172\u00ba\2\u0c69\u0c6d"+
		"\5\u0174\u00bb\2\u0c6a\u0c6d\5\u0178\u00bd\2\u0c6b\u0c6d\5\u017a\u00be"+
		"\2\u0c6c\u0c67\3\2\2\2\u0c6c\u0c68\3\2\2\2\u0c6c\u0c69\3\2\2\2\u0c6c\u0c6a"+
		"\3\2\2\2\u0c6c\u0c6b\3\2\2\2\u0c6d\u016f\3\2\2\2\u0c6e\u0c6f\7\u018c\2"+
		"\2\u0c6f\u0c7d\7\u01be\2\2\u0c70\u0c71\7\u015b\2\2\u0c71\u0c7e\t$\2\2"+
		"\u0c72\u0c73\7\u00d4\2\2\u0c73\u0c77\7\u00e1\2\2\u0c74\u0c78\7\u0188\2"+
		"\2\u0c75\u0c76\7\u015b\2\2\u0c76\u0c78\7D\2\2\u0c77\u0c74\3\2\2\2\u0c77"+
		"\u0c75\3\2\2\2\u0c78\u0c7e\3\2\2\2\u0c79\u0c7a\7\u01d1\2\2\u0c7a\u0c7b"+
		"\7\u0173\2\2\u0c7b\u0c7c\7\u0183\2\2\u0c7c\u0c7e\5\u02de\u0170\2\u0c7d"+
		"\u0c70\3\2\2\2\u0c7d\u0c72\3\2\2\2\u0c7d\u0c79\3\2\2\2\u0c7d\u0c7e\3\2"+
		"\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c80\7\u0108\2\2\u0c80\u0c82\5\u0338\u019d"+
		"\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0171\3\2\2\2\u0c83\u0c84"+
		"\7\u018c\2\2\u0c84\u0c8e\t%\2\2\u0c85\u0c8f\7\t\2\2\u0c86\u0c8b\5\u02f4"+
		"\u017b\2\u0c87\u0c88\7\u022a\2\2\u0c88\u0c8a\5\u02f4\u017b\2\u0c89\u0c87"+
		"\3\2\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b\u0c89\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c"+
		"\u0c8f\3\2\2\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c85\3\2\2\2\u0c8e\u0c86\3\2"+
		"\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c91\t\3\2\2\u0c91\u0173\3\2\2\2\u0c92"+
		"\u0c94\7C\2\2\u0c93\u0c95\7\u01e7\2\2\u0c94\u0c93\3\2\2\2\u0c94\u0c95"+
		"\3\2\2\2\u0c95\u0ca3\3\2\2\2\u0c96\u0c97\7B\2\2\u0c97\u0ca4\5\u023c\u011f"+
		"\2\u0c98\u0ca1\7\u00a4\2\2\u0c99\u0c9a\7T\2\2\u0c9a\u0ca2\5\u023c\u011f"+
		"\2\u0c9b\u0ca2\7U\2\2\u0c9c\u0c9f\5\u023c\u011f\2\u0c9d\u0c9e\7\u022a"+
		"\2\2\u0c9e\u0ca0\5\u023c\u011f\2\u0c9f\u0c9d\3\2\2\2\u0c9f\u0ca0\3\2\2"+
		"\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c99\3\2\2\2\u0ca1\u0c9b\3\2\2\2\u0ca1\u0c9c"+
		"\3\2\2\2\u0ca2\u0ca4\3\2\2\2\u0ca3\u0c96\3\2\2\2\u0ca3\u0c98\3\2\2\2\u0ca3"+
		"\u0ca4\3\2\2\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca7\5\u0176\u00bc\2\u0ca6\u0ca5"+
		"\3\2\2\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u0175\3\2\2\2\u0ca8\u0caa\7\u01e8\2"+
		"\2\u0ca9\u0cab\t&\2\2\u0caa\u0ca9\3\2\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0cad"+
		"\3\2\2\2\u0cac\u0cae\t\'\2\2\u0cad\u0cac\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae"+
		"\u0177\3\2\2\2\u0caf\u0cb1\7\u0173\2\2\u0cb0\u0cb2\7\u01e7\2\2\u0cb1\u0cb0"+
		"\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2\u0cba\3\2\2\2\u0cb3\u0cb5\7\u01bc\2"+
		"\2\u0cb4\u0cb6\7\u017b\2\2\u0cb5\u0cb4\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6"+
		"\u0cb7\3\2\2\2\u0cb7\u0cbb\5\u02dc\u016f\2\u0cb8\u0cb9\7\u00a4\2\2\u0cb9"+
		"\u0cbb\5\u0338\u019d\2\u0cba\u0cb3\3\2\2\2\u0cba\u0cb8\3\2\2\2\u0cba\u0cbb"+
		"\3\2\2\2\u0cbb\u0179\3\2\2\2\u0cbc\u0cbd\7\u017b\2\2\u0cbd\u0cbe\5\u02dc"+
		"\u016f\2\u0cbe\u017b\3\2\2\2\u0cbf\u0cc0\7\u0094\2\2\u0cc0\u0cc5\7\u014c"+
		"\2\2\u0cc1\u0cc2\7\u018c\2\2\u0cc2\u0cc3\7\u01a2\2\2\u0cc3\u0cc4\7\u023b"+
		"\2\2\u0cc4\u0cc6\5\u0338\u019d\2\u0cc5\u0cc1\3\2\2\2\u0cc5\u0cc6\3\2\2"+
		"\2\u0cc6\u0cc9\3\2\2\2\u0cc7\u0cc8\7\u00d1\2\2\u0cc8\u0cca\5\u0312\u018a"+
		"\2\u0cc9\u0cc7\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0cd1"+
		"\7\u00a2\2\2\u0ccc\u0cd2\5\u017e\u00c0\2\u0ccd\u0cd2\5\u01f2\u00fa\2\u0cce"+
		"\u0cd2\5\u01f8\u00fd\2\u0ccf\u0cd2\5\u01fa\u00fe\2\u0cd0\u0cd2\5\u020c"+
		"\u0107\2\u0cd1\u0ccc\3\2\2\2\u0cd1\u0ccd\3\2\2\2\u0cd1\u0cce\3\2\2\2\u0cd1"+
		"\u0ccf\3\2\2\2\u0cd1\u0cd0\3\2\2\2\u0cd2\u017d\3\2\2\2\u0cd3\u0cd5\5\u0180"+
		"\u00c1\2\u0cd4\u0cd3\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6"+
		"\u0cdb\5\u0188\u00c5\2\u0cd7\u0cda\5\u01ec\u00f7\2\u0cd8\u0cda\5\u01e8"+
		"\u00f5\2\u0cd9\u0cd7\3\2\2\2\u0cd9\u0cd8\3\2\2\2\u0cda\u0cdd\3\2\2\2\u0cdb"+
		"\u0cd9\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u017f\3\2\2\2\u0cdd\u0cdb\3\2"+
		"\2\2\u0cde\u0cdf\7\u01e5\2\2\u0cdf\u0ce4\5\u0182\u00c2\2\u0ce0\u0ce1\7"+
		"\u022a\2\2\u0ce1\u0ce3\5\u0182\u00c2\2\u0ce2\u0ce0\3\2\2\2\u0ce3\u0ce6"+
		"\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u0181\3\2\2\2\u0ce6"+
		"\u0ce4\3\2\2\2\u0ce7\u0cf3\5\u02f2\u017a\2\u0ce8\u0ce9\7\u0224\2\2\u0ce9"+
		"\u0cee\5\u0310\u0189\2\u0cea\u0ceb\7\u022a\2\2\u0ceb\u0ced\5\u0310\u0189"+
		"\2\u0cec\u0cea\3\2\2\2\u0ced\u0cf0\3\2\2\2\u0cee\u0cec\3\2\2\2\u0cee\u0cef"+
		"\3\2\2\2\u0cef\u0cf1\3\2\2\2\u0cf0\u0cee\3\2\2\2\u0cf1\u0cf2\7\u0225\2"+
		"\2\u0cf2\u0cf4\3\2\2\2\u0cf3\u0ce8\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5"+
		"\3\2\2\2\u0cf5\u0cf6\7\20\2\2\u0cf6\u0cf7\7\u0224\2\2\u0cf7\u0cf9\5\u0188"+
		"\u00c5\2\u0cf8\u0cfa\5\u01e8\u00f5\2\u0cf9\u0cf8\3\2\2\2\u0cf9\u0cfa\3"+
		"\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0cfd\7\u0225\2\2\u0cfc\u0cfe\5\u0184"+
		"\u00c3\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0d00\3\2\2\2\u0cff"+
		"\u0d01\5\u0186\u00c4\2\u0d00\u0cff\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0183"+
		"\3\2\2\2\u0d02\u0d03\7\u017f\2\2\u0d03\u0d04\t(\2\2\u0d04\u0d05\7\u009c"+
		"\2\2\u0d05\u0d06\7,\2\2\u0d06\u0d08\5\u0310\u0189\2\u0d07\u0d09\7\21\2"+
		"\2\u0d08\u0d07\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0b\3\2\2\2\u0d0a\u0d0c"+
		"\7v\2\2\u0d0b\u0d0a\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d0f\3\2\2\2\u0d0d"+
		"\u0d0e\7\u0125\2\2\u0d0e\u0d10\7\u009c\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10"+
		"\3\2\2\2\u0d10\u0d13\3\2\2\2\u0d11\u0d12\7\u0125\2\2\u0d12\u0d14\7\u00dc"+
		"\2\2\u0d13\u0d11\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d27\3\2\2\2\u0d15"+
		"\u0d16\7\u022a\2\2\u0d16\u0d18\5\u0310\u0189\2\u0d17\u0d19\7\21\2\2\u0d18"+
		"\u0d17\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a\u0d1c\7v"+
		"\2\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d1f\3\2\2\2\u0d1d"+
		"\u0d1e\7\u0125\2\2\u0d1e\u0d20\7\u009c\2\2\u0d1f\u0d1d\3\2\2\2\u0d1f\u0d20"+
		"\3\2\2\2\u0d20\u0d23\3\2\2\2\u0d21\u0d22\7\u0125\2\2\u0d22\u0d24\7\u00dc"+
		"\2\2\u0d23\u0d21\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d26\3\2\2\2\u0d25"+
		"\u0d15\3\2\2\2\u0d26\u0d29\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d27\u0d28\3\2"+
		"\2\2\u0d28\u0d2a\3\2\2\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2b\7\u018c\2\2\u0d2b"+
		"\u0d2c\5\u0310\u0189\2\u0d2c\u0185\3\2\2\2\u0d2d\u0d2e\7`\2\2\u0d2e\u0d33"+
		"\5\u0310\u0189\2\u0d2f\u0d30\7\u022a\2\2\u0d30\u0d32\5\u0310\u0189\2\u0d31"+
		"\u0d2f\3\2\2\2\u0d32\u0d35\3\2\2\2\u0d33\u0d31\3\2\2\2\u0d33\u0d34\3\2"+
		"\2\2\u0d34\u0d36\3\2\2\2\u0d35\u0d33\3\2\2\2\u0d36\u0d37\7\u018c\2\2\u0d37"+
		"\u0d38\5\u0310\u0189\2\u0d38\u0d39\7\u01bc\2\2\u0d39\u0d3a\5\u023c\u011f"+
		"\2\u0d3a\u0d3b\7o\2\2\u0d3b\u0d3c\5\u023c\u011f\2\u0d3c\u0187\3\2\2\2"+
		"\u0d3d\u0d41\5\u018c\u00c7\2\u0d3e\u0d40\5\u018a\u00c6\2\u0d3f\u0d3e\3"+
		"\2\2\2\u0d40\u0d43\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42"+
		"\u0189\3\2\2\2\u0d43\u0d41\3\2\2\2\u0d44\u0d46\7\u01c8\2\2\u0d45\u0d47"+
		"\7\t\2\2\u0d46\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d4b\3\2\2\2\u0d48"+
		"\u0d4b\7\u00cf\2\2\u0d49\u0d4b\7\u00ff\2\2\u0d4a\u0d44\3\2\2\2\u0d4a\u0d48"+
		"\3\2\2\2\u0d4a\u0d49\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c\u0d4d\5\u018c\u00c7"+
		"\2\u0d4d\u018b\3\2\2\2\u0d4e\u0d54\5\u018e\u00c8\2\u0d4f\u0d50\7\u0224"+
		"\2\2\u0d50\u0d51\5\u0188\u00c5\2\u0d51\u0d52\7\u0225\2\2\u0d52\u0d54\3"+
		"\2\2\2\u0d53\u0d4e\3\2\2\2\u0d53\u0d4f\3\2\2\2\u0d54\u018d\3\2\2\2\u0d55"+
		"\u0d57\7\u0184\2\2\u0d56\u0d58\t)\2\2\u0d57\u0d56\3\2\2\2\u0d57\u0d58"+
		"\3\2\2\2\u0d58\u0d62\3\2\2\2\u0d59\u0d63\7\u0227\2\2\u0d5a\u0d5f\5\u0190"+
		"\u00c9\2\u0d5b\u0d5c\7\u022a\2\2\u0d5c\u0d5e\5\u0190\u00c9\2\u0d5d\u0d5b"+
		"\3\2\2\2\u0d5e\u0d61\3\2\2\2\u0d5f\u0d5d\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60"+
		"\u0d63\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d62\u0d59\3\2\2\2\u0d62\u0d5a\3\2"+
		"\2\2\u0d63\u0d65\3\2\2\2\u0d64\u0d66\5\u02d4\u016b\2\u0d65\u0d64\3\2\2"+
		"\2\u0d65\u0d66\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\5\u0192\u00ca\2"+
		"\u0d68\u0d6a\5\u02d0\u0169\2\u0d69\u0d68\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a"+
		"\u0d6c\3\2\2\2\u0d6b\u0d6d\5\u01ba\u00de\2\u0d6c\u0d6b\3\2\2\2\u0d6c\u0d6d"+
		"\3\2\2\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d70\5\u01be\u00e0\2\u0d6f\u0d6e\3"+
		"\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0d72\3\2\2\2\u0d71\u0d73\5\u01ca\u00e6"+
		"\2\u0d72\u0d71\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u018f\3\2\2\2\u0d74\u0d76"+
		"\5\u0194\u00cb\2\u0d75\u0d77\5\u02ca\u0166\2\u0d76\u0d75\3\2\2\2\u0d76"+
		"\u0d77\3\2\2\2\u0d77\u0191\3\2\2\2\u0d78\u0d79\7\u00a8\2\2\u0d79\u0d7a"+
		"\5\u0196\u00cc\2\u0d7a\u0193\3\2\2\2\u0d7b\u0d7c\5\u0312\u018a\2\u0d7c"+
		"\u0d7d\7\u021d\2\2\u0d7d\u0d7e\7\u0227\2\2\u0d7e\u0d81\3\2\2\2\u0d7f\u0d81"+
		"\5\u023c\u011f\2\u0d80\u0d7b\3\2\2\2\u0d80\u0d7f\3\2\2\2\u0d81\u0195\3"+
		"\2\2\2\u0d82\u0d87\5\u0198\u00cd\2\u0d83\u0d84\7\u022a\2\2\u0d84\u0d86"+
		"\5\u0198\u00cd\2\u0d85\u0d83\3\2\2\2\u0d86\u0d89\3\2\2\2\u0d87\u0d85\3"+
		"\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0197\3\2\2\2\u0d89\u0d87\3\2\2\2\u0d8a"+
		"\u0d8e\5\u019a\u00ce\2\u0d8b\u0d8d\5\u019c\u00cf\2\u0d8c\u0d8b\3\2\2\2"+
		"\u0d8d\u0d90\3\2\2\2\u0d8e\u0d8c\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d93"+
		"\3\2\2\2\u0d90\u0d8e\3\2\2\2\u0d91\u0d94\5\u01a8\u00d5\2\u0d92\u0d94\5"+
		"\u01b4\u00db\2\u0d93\u0d91\3\2\2\2\u0d93\u0d92\3\2\2\2\u0d93\u0d94\3\2"+
		"\2\2\u0d94\u0199\3\2\2\2\u0d95\u0d98\5\u022a\u0116\2\u0d96\u0d99\5\u01a8"+
		"\u00d5\2\u0d97\u0d99\5\u01b4\u00db\2\u0d98\u0d96\3\2\2\2\u0d98\u0d97\3"+
		"\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0dad\3\2\2\2\u0d9a\u0d9b\7\u0224\2\2"+
		"\u0d9b\u0d9f\5\u0198\u00cd\2\u0d9c\u0d9e\5\u018a\u00c6\2\u0d9d\u0d9c\3"+
		"\2\2\2\u0d9e\u0da1\3\2\2\2\u0d9f\u0d9d\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0"+
		"\u0da2\3\2\2\2\u0da1\u0d9f\3\2\2\2\u0da2\u0da5\7\u0225\2\2\u0da3\u0da6"+
		"\5\u01a8\u00d5\2\u0da4\u0da6\5\u01b4\u00db\2\u0da5\u0da3\3\2\2\2\u0da5"+
		"\u0da4\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0dad\3\2\2\2\u0da7\u0da8\7\u0130"+
		"\2\2\u0da8\u0da9\7\u0224\2\2\u0da9\u0daa\5\u022a\u0116\2\u0daa\u0dab\7"+
		"\u0225\2\2\u0dab\u0dad\3\2\2\2\u0dac\u0d95\3\2\2\2\u0dac\u0d9a\3\2\2\2"+
		"\u0dac\u0da7\3\2\2\2\u0dad\u0db1\3\2\2\2\u0dae\u0db0\5\u01a6\u00d4\2\u0daf"+
		"\u0dae\3\2\2\2\u0db0\u0db3\3\2\2\2\u0db1\u0daf\3\2\2\2\u0db1\u0db2\3\2"+
		"\2\2\u0db2\u0db5\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db4\u0db6\5\u02cc\u0167"+
		"\2\u0db5\u0db4\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u019b\3\2\2\2\u0db7\u0db9"+
		"\5\u01a4\u00d3\2\u0db8\u0db7\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbb\3"+
		"\2\2\2\u0dba\u0dbc\t*\2\2\u0dbb\u0dba\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc"+
		"\u0dbf\3\2\2\2\u0dbd\u0dc0\7\u00c8\2\2\u0dbe\u0dc0\5\u01a2\u00d2\2\u0dbf"+
		"\u0dbd\3\2\2\2\u0dbf\u0dbe\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dc1\3\2"+
		"\2\2\u0dc1\u0dc2\7\u00d7\2\2\u0dc2\u0dc4\5\u019a\u00ce\2\u0dc3\u0dc5\5"+
		"\u01a4\u00d3\2\u0dc4\u0dc3\3\2\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u0dca\3\2"+
		"\2\2\u0dc6\u0dc9\5\u019e\u00d0\2\u0dc7\u0dc9\5\u01a0\u00d1\2\u0dc8\u0dc6"+
		"\3\2\2\2\u0dc8\u0dc7\3\2\2\2\u0dc9\u0dcc\3\2\2\2\u0dca\u0dc8\3\2\2\2\u0dca"+
		"\u0dcb\3\2\2\2\u0dcb\u019d\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcd\u0dce\7\u012f"+
		"\2\2\u0dce\u0dcf\5\u0238\u011d\2\u0dcf\u019f\3\2\2\2\u0dd0\u0dd1\7\u01d2"+
		"\2\2\u0dd1\u0dd2\7\u0224\2\2\u0dd2\u0dd7\5\u0310\u0189\2\u0dd3\u0dd4\7"+
		"\u022a\2\2\u0dd4\u0dd6\5\u0310\u0189\2\u0dd5\u0dd3\3\2\2\2\u0dd6\u0dd9"+
		"\3\2\2\2\u0dd7\u0dd5\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dda\3\2\2\2\u0dd9"+
		"\u0dd7\3\2\2\2\u0dda\u0ddb\7\u0225\2\2\u0ddb\u01a1\3\2\2\2\u0ddc\u0dde"+
		"\t+\2\2\u0ddd\u0ddf\7\u013a\2\2\u0dde\u0ddd\3\2\2\2\u0dde\u0ddf\3\2\2"+
		"\2\u0ddf\u01a3\3\2\2\2\u0de0\u0de1\7\u0141\2\2\u0de1\u0def\7,\2\2\u0de2"+
		"\u0de3\7\u0224\2\2\u0de3\u0de4\5\u0188\u00c5\2\u0de4\u0de5\7\u0225\2\2"+
		"\u0de5\u0df0\3\2\2\2\u0de6\u0df0\5\u0236\u011c\2\u0de7\u0dec\5\u023c\u011f"+
		"\2\u0de8\u0de9\7\u022a\2\2\u0de9\u0deb\5\u023c\u011f\2\u0dea\u0de8\3\2"+
		"\2\2\u0deb\u0dee\3\2\2\2\u0dec\u0dea\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded"+
		"\u0df0\3\2\2\2\u0dee\u0dec\3\2\2\2\u0def\u0de2\3\2\2\2\u0def\u0de6\3\2"+
		"\2\2\u0def\u0de7\3\2\2\2\u0df0\u01a5\3\2\2\2\u0df1\u0df2\7\u01dc\2\2\u0df2"+
		"\u0df3\7\37\2\2\u0df3\u0df4\t,\2\2\u0df4\u0dfa\5\u023c\u011f\2\u0df5\u0df6"+
		"\7\20\2\2\u0df6\u0df7\7\u012a\2\2\u0df7\u0df8\t-\2\2\u0df8\u0dfa\5\u023c"+
		"\u011f\2\u0df9\u0df1\3\2\2\2\u0df9\u0df5\3\2\2\2\u0dfa\u01a7\3\2\2\2\u0dfb"+
		"\u0dfd\7\u014b\2\2\u0dfc\u0dfe\7\u01e9\2\2\u0dfd\u0dfc\3\2\2\2\u0dfd\u0dfe"+
		"\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u0e00\7\u0224\2\2\u0e00\u0e05\5\u01aa"+
		"\u00d6\2\u0e01\u0e02\7\u022a\2\2\u0e02\u0e04\5\u01aa\u00d6\2\u0e03\u0e01"+
		"\3\2\2\2\u0e04\u0e07\3\2\2\2\u0e05\u0e03\3\2\2\2\u0e05\u0e06\3\2\2\2\u0e06"+
		"\u0e08\3\2\2\2\u0e07\u0e05\3\2\2\2\u0e08\u0e09\5\u01ac\u00d7\2\u0e09\u0e0a"+
		"\5\u01ae\u00d8\2\u0e0a\u0e0b\7\u0225\2\2\u0e0b\u01a9\3\2\2\2\u0e0c\u0e0d"+
		"\5\u02f0\u0179\2\u0e0d\u0e0e\7\u0224\2\2\u0e0e\u0e0f\5\u023c\u011f\2\u0e0f"+
		"\u0e11\7\u0225\2\2\u0e10\u0e12\5\u02ca\u0166\2\u0e11\u0e10\3\2\2\2\u0e11"+
		"\u0e12\3\2\2\2\u0e12\u01ab\3\2\2\2\u0e13\u0e20\7\u00a2\2\2\u0e14\u0e21"+
		"\5\u0310\u0189\2\u0e15\u0e16\7\u0224\2\2\u0e16\u0e1b\5\u0310\u0189\2\u0e17"+
		"\u0e18\7\u022a\2\2\u0e18\u0e1a\5\u0310\u0189\2\u0e19\u0e17\3\2\2\2\u0e1a"+
		"\u0e1d\3\2\2\2\u0e1b\u0e19\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e1e\3\2"+
		"\2\2\u0e1d\u0e1b\3\2\2\2\u0e1e\u0e1f\7\u0225\2\2\u0e1f\u0e21\3\2\2\2\u0e20"+
		"\u0e14\3\2\2\2\u0e20\u0e15\3\2\2\2\u0e21\u01ad\3\2\2\2\u0e22\u0e23\7\u00b9"+
		"\2\2\u0e23\u0e35\7\u0224\2\2\u0e24\u0e36\5\u0188\u00c5\2\u0e25\u0e2a\7"+
		"\r\2\2\u0e26\u0e27\7\u022a\2\2\u0e27\u0e29\7\r\2\2\u0e28\u0e26\3\2\2\2"+
		"\u0e29\u0e2c\3\2\2\2\u0e2a\u0e28\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e36"+
		"\3\2\2\2\u0e2c\u0e2a\3\2\2\2\u0e2d\u0e32\5\u01b0\u00d9\2\u0e2e\u0e2f\7"+
		"\u022a\2\2\u0e2f\u0e31\5\u01b0\u00d9\2\u0e30\u0e2e\3\2\2\2\u0e31\u0e34"+
		"\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e36\3\2\2\2\u0e34"+
		"\u0e32\3\2\2\2\u0e35\u0e24\3\2\2\2\u0e35\u0e25\3\2\2\2\u0e35\u0e2d\3\2"+
		"\2\2\u0e36\u0e37\3\2\2\2\u0e37\u0e38\7\u0225\2\2\u0e38\u01af\3\2\2\2\u0e39"+
		"\u0e3b\5\u01b2\u00da\2\u0e3a\u0e3c\5\u02ca\u0166\2\u0e3b\u0e3a\3\2\2\2"+
		"\u0e3b\u0e3c\3\2\2\2\u0e3c\u01b1\3\2\2\2\u0e3d\u0e40\5\u023c\u011f\2\u0e3e"+
		"\u0e40\5\u0236\u011c\2\u0e3f\u0e3d\3\2\2\2\u0e3f\u0e3e\3\2\2\2\u0e40\u01b3"+
		"\3\2\2\2\u0e41\u0e44\7\u01cb\2\2\u0e42\u0e43\t.\2\2\u0e43\u0e45\7\u0125"+
		"\2\2\u0e44\u0e42\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46"+
		"\u0e53\7\u0224\2\2\u0e47\u0e54\5\u0310\u0189\2\u0e48\u0e49\7\u0224\2\2"+
		"\u0e49\u0e4e\5\u0310\u0189\2\u0e4a\u0e4b\7\u022a\2\2\u0e4b\u0e4d\5\u0310"+
		"\u0189\2\u0e4c\u0e4a\3\2\2\2\u0e4d\u0e50\3\2\2\2\u0e4e\u0e4c\3\2\2\2\u0e4e"+
		"\u0e4f\3\2\2\2\u0e4f\u0e51\3\2\2\2\u0e50\u0e4e\3\2\2\2\u0e51\u0e52\7\u0225"+
		"\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e47\3\2\2\2\u0e53\u0e48\3\2\2\2\u0e54"+
		"\u0e55\3\2\2\2\u0e55\u0e56\5\u01ac\u00d7\2\u0e56\u0e57\5\u01b6\u00dc\2"+
		"\u0e57\u0e58\7\u0225\2\2\u0e58\u01b5\3\2\2\2\u0e59\u0e5a\7\u00b9\2\2\u0e5a"+
		"\u0e5b\7\u0224\2\2\u0e5b\u0e60\5\u01b8\u00dd\2\u0e5c\u0e5d\7\u022a\2\2"+
		"\u0e5d\u0e5f\5\u01b8\u00dd\2\u0e5e\u0e5c\3\2\2\2\u0e5f\u0e62\3\2\2\2\u0e60"+
		"\u0e5e\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63\3\2\2\2\u0e62\u0e60\3\2"+
		"\2\2\u0e63\u0e64\7\u0225\2\2\u0e64\u01b7\3\2\2\2\u0e65\u0e72\5\u0310\u0189"+
		"\2\u0e66\u0e67\7\u0224\2\2\u0e67\u0e6c\5\u0310\u0189\2\u0e68\u0e69\7\u022a"+
		"\2\2\u0e69\u0e6b\5\u0310\u0189\2\u0e6a\u0e68\3\2\2\2\u0e6b\u0e6e\3\2\2"+
		"\2\u0e6c\u0e6a\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e6c"+
		"\3\2\2\2\u0e6f\u0e70\7\u0225\2\2\u0e70\u0e72\3\2\2\2\u0e71\u0e65\3\2\2"+
		"\2\u0e71\u0e66\3\2\2\2\u0e72\u0e82\3\2\2\2\u0e73\u0e80\7\20\2\2\u0e74"+
		"\u0e81\5\u0332\u019a\2\u0e75\u0e76\7\u0224\2\2\u0e76\u0e7b\5\u0332\u019a"+
		"\2\u0e77\u0e78\7\u022a\2\2\u0e78\u0e7a\5\u0332\u019a\2\u0e79\u0e77\3\2"+
		"\2\2\u0e7a\u0e7d\3\2\2\2\u0e7b\u0e79\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c"+
		"\u0e7e\3\2\2\2\u0e7d\u0e7b\3\2\2\2\u0e7e\u0e7f\7\u0225\2\2\u0e7f\u0e81"+
		"\3\2\2\2\u0e80\u0e74\3\2\2\2\u0e80\u0e75\3\2\2\2\u0e81\u0e83\3\2\2\2\u0e82"+
		"\u0e73\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u01b9\3\2\2\2\u0e84\u0e85\7J"+
		"\2\2\u0e85\u0e87\7,\2\2\u0e86\u0e88\7\u0118\2\2\u0e87\u0e86\3\2\2\2\u0e87"+
		"\u0e88\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e8b\5\u0238\u011d\2\u0e8a\u0e8c"+
		"\5\u01bc\u00df\2\u0e8b\u0e8a\3\2\2\2\u0e8b\u0e8c\3\2\2\2\u0e8c\u0e96\3"+
		"\2\2\2\u0e8d\u0e8e\5\u01bc\u00df\2\u0e8e\u0e8f\7J\2\2\u0e8f\u0e91\7,\2"+
		"\2\u0e90\u0e92\7\u0118\2\2\u0e91\u0e90\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92"+
		"\u0e93\3\2\2\2\u0e93\u0e94\5\u0238\u011d\2\u0e94\u0e96\3\2\2\2\u0e95\u0e84"+
		"\3\2\2\2\u0e95\u0e8d\3\2\2\2\u0e96\u01bb\3\2\2\2\u0e97\u0e98\7\u019f\2"+
		"\2\u0e98\u0e99\7\u01e5\2\2\u0e99\u0e9a\5\u0238\u011d\2\u0e9a\u01bd\3\2"+
		"\2\2\u0e9b\u0e9c\7\u00ad\2\2\u0e9c\u0e9d\7,\2\2\u0e9d\u0ea2\5\u01c0\u00e1"+
		"\2\u0e9e\u0e9f\7\u022a\2\2\u0e9f\u0ea1\5\u01c0\u00e1\2\u0ea0\u0e9e\3\2"+
		"\2\2\u0ea1\u0ea4\3\2\2\2\u0ea2\u0ea0\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3"+
		"\u0ea6\3\2\2\2\u0ea4\u0ea2\3\2\2\2\u0ea5\u0ea7\5\u01c8\u00e5\2\u0ea6\u0ea5"+
		"\3\2\2\2\u0ea6\u0ea7\3\2\2\2\u0ea7\u0eb6\3\2\2\2\u0ea8\u0eb3\5\u01c8\u00e5"+
		"\2\u0ea9\u0eaa\7\u00ad\2\2\u0eaa\u0eab\7,\2\2\u0eab\u0eb0\5\u01c0\u00e1"+
		"\2\u0eac\u0ead\7\u022a\2\2\u0ead\u0eaf\5\u01c0\u00e1\2\u0eae\u0eac\3\2"+
		"\2\2\u0eaf\u0eb2\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb0\u0eb1\3\2\2\2\u0eb1"+
		"\u0eb4\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb3\u0ea9\3\2\2\2\u0eb3\u0eb4\3\2"+
		"\2\2\u0eb4\u0eb6\3\2\2\2\u0eb5\u0e9b\3\2\2\2\u0eb5\u0ea8\3\2\2\2\u0eb6"+
		"\u01bf\3\2\2\2\u0eb7\u0ebb\5\u01c4\u00e3\2\u0eb8\u0ebb\5\u01c2\u00e2\2"+
		"\u0eb9\u0ebb\5\u023c\u011f\2\u0eba\u0eb7\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba"+
		"\u0eb9\3\2\2\2\u0ebb\u01c1\3\2\2\2\u0ebc\u0ebd\t/\2\2\u0ebd\u0ebe\7\u0224"+
		"\2\2\u0ebe\u0ec3\5\u01c6\u00e4\2\u0ebf\u0ec0\7\u022a\2\2\u0ec0\u0ec2\5"+
		"\u01c6\u00e4\2\u0ec1\u0ebf\3\2\2\2\u0ec2\u0ec5\3\2\2\2\u0ec3\u0ec1\3\2"+
		"\2\2\u0ec3\u0ec4\3\2\2\2\u0ec4\u0ec6\3\2\2\2\u0ec5\u0ec3\3\2\2\2\u0ec6"+
		"\u0ec7\7\u0225\2\2\u0ec7\u01c3\3\2\2\2\u0ec8\u0ec9\7\u00af\2\2\u0ec9\u0eca"+
		"\7\u018d\2\2\u0eca\u0ecb\7\u0224\2\2\u0ecb\u0ed0\5\u01c6\u00e4\2\u0ecc"+
		"\u0ecd\7\u022a\2\2\u0ecd\u0ecf\5\u01c6\u00e4\2\u0ece\u0ecc\3\2\2\2\u0ecf"+
		"\u0ed2\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed3\3\2"+
		"\2\2\u0ed2\u0ed0\3\2\2\2\u0ed3\u0ed4\7\u0225\2\2\u0ed4\u01c5\3\2\2\2\u0ed5"+
		"\u0ed9\5\u01c2\u00e2\2\u0ed6\u0ed9\5\u0236\u011c\2\u0ed7\u0ed9\5\u023c"+
		"\u011f\2\u0ed8\u0ed5\3\2\2\2\u0ed8\u0ed6\3\2\2\2\u0ed8\u0ed7\3\2\2\2\u0ed9"+
		"\u01c7\3\2\2\2\u0eda\u0edb\7\u00b1\2\2\u0edb\u0edc\5\u0238\u011d\2\u0edc"+
		"\u01c9\3\2\2\2\u0edd\u0ee1\7\u0104\2\2\u0ede\u0ee0\5\u01cc\u00e7\2\u0edf"+
		"\u0ede\3\2\2\2\u0ee0\u0ee3\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee1\u0ee2\3\2"+
		"\2\2\u0ee2\u0ee5\3\2\2\2\u0ee3\u0ee1\3\2\2\2\u0ee4\u0ee6\5\u01ce\u00e8"+
		"\2\u0ee5\u0ee4\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0eea\3\2\2\2\u0ee7\u0ee9"+
		"\5\u01d0\u00e9\2\u0ee8\u0ee7\3\2\2\2\u0ee9\u0eec\3\2\2\2\u0eea\u0ee8\3"+
		"\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0eed\3\2\2\2\u0eec\u0eea\3\2\2\2\u0eed"+
		"\u0eee\5\u01d2\u00ea\2\u0eee\u01cb\3\2\2\2\u0eef\u0ef0\t\60\2\2\u0ef0"+
		"\u0ef8\7\u010c\2\2\u0ef1\u0ef5\7\u01c9\2\2\u0ef2\u0ef6\7x\2\2\u0ef3\u0ef4"+
		"\7\u0195\2\2\u0ef4\u0ef6\7\u0161\2\2\u0ef5\u0ef2\3\2\2\2\u0ef5\u0ef3\3"+
		"\2\2\2\u0ef6\u0ef8\3\2\2\2\u0ef7\u0eef\3\2\2\2\u0ef7\u0ef1\3\2\2\2\u0ef8"+
		"\u01cd\3\2\2\2\u0ef9\u0efa\7\u016d\2\2\u0efa\u0efb\t\61\2\2\u0efb\u0efc"+
		"\7\u0177\2\2\u0efc\u01cf\3\2\2\2\u0efd\u0efe\7\u0161\2\2\u0efe\u0eff\5"+
		"\u02ec\u0177\2\u0eff\u0f00\7\u012f\2\2\u0f00\u0f01\7\u0224\2\2\u0f01\u0f02"+
		"\5\u0188\u00c5\2\u0f02\u0f03\7\u0225\2\2\u0f03\u0f07\5\u01d4\u00eb\2\u0f04"+
		"\u0f06\5\u01cc\u00e7\2\u0f05\u0f04\3\2\2\2\u0f06\u0f09\3\2\2\2\u0f07\u0f05"+
		"\3\2\2\2\u0f07\u0f08\3\2\2\2\u0f08\u01d1\3\2\2\2\u0f09\u0f07\3\2\2\2\u0f0a"+
		"\u0f0b\7\u00f4\2\2\u0f0b\u0f0d\5\u02ee\u0178\2\u0f0c\u0f0a\3\2\2\2\u0f0c"+
		"\u0f0d\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f12\5\u01d4\u00eb\2\u0f0f\u0f11"+
		"\5\u01cc\u00e7\2\u0f10\u0f0f\3\2\2\2\u0f11\u0f14\3\2\2\2\u0f12\u0f10\3"+
		"\2\2\2\u0f12\u0f13\3\2\2\2\u0f13\u0f15\3\2\2\2\u0f14\u0f12\3\2\2\2\u0f15"+
		"\u0f16\5\u01dc\u00ef\2\u0f16\u01d3\3\2\2\2\u0f17\u0f19\5\u01d6\u00ec\2"+
		"\u0f18\u0f17\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b"+
		"\7x\2\2\u0f1b\u0f1c\7,\2\2\u0f1c\u0f1d\5\u01d8\u00ed\2\u0f1d\u0f1e\7\u00fa"+
		"\2\2\u0f1e\u0f1f\5\u01d8\u00ed\2\u0f1f\u01d5\3\2\2\2\u0f20\u0f21\7\u0141"+
		"\2\2\u0f21\u0f22\7,\2\2\u0f22\u0f23\5\u01d8\u00ed\2\u0f23\u01d7\3\2\2"+
		"\2\u0f24\u0f25\7\u0224\2\2\u0f25\u0f2a\5\u01da\u00ee\2\u0f26\u0f27\7\u022a"+
		"\2\2\u0f27\u0f29\5\u01da\u00ee\2\u0f28\u0f26\3\2\2\2\u0f29\u0f2c\3\2\2"+
		"\2\u0f2a\u0f28\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2d\3\2\2\2\u0f2c\u0f2a"+
		"\3\2\2\2\u0f2d\u0f2e\7\u0225\2\2\u0f2e\u01d9\3\2\2\2\u0f2f\u0f31\5\u023c"+
		"\u011f\2\u0f30\u0f32\5\u02cc\u0167\2\u0f31\u0f30\3\2\2\2\u0f31\u0f32\3"+
		"\2\2\2\u0f32\u01db\3\2\2\2\u0f33\u0f35\5\u01de\u00f0\2\u0f34\u0f33\3\2"+
		"\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0f36\3\2\2\2\u0f36\u0f37\7\u0224\2\2\u0f37"+
		"\u0f3c\5\u01e0\u00f1\2\u0f38\u0f39\7\u022a\2\2\u0f39\u0f3b\5\u01e0\u00f1"+
		"\2\u0f3a\u0f38\3\2\2\2\u0f3b\u0f3e\3\2\2\2\u0f3c\u0f3a\3\2\2\2\u0f3c\u0f3d"+
		"\3\2\2\2\u0f3d\u0f3f\3\2\2\2\u0f3e\u0f3c\3\2\2\2\u0f3f\u0f40\7\u0225\2"+
		"\2\u0f40\u01dd\3\2\2\2\u0f41\u0f47\7\u0178\2\2\u0f42\u0f48\7\u01cd\2\2"+
		"\u0f43\u0f45\7\u01cf\2\2\u0f44\u0f46\7\t\2\2\u0f45\u0f44\3\2\2\2\u0f45"+
		"\u0f46\3\2\2\2\u0f46\u0f48\3\2\2\2\u0f47\u0f42\3\2\2\2\u0f47\u0f43\3\2"+
		"\2\2\u0f47\u0f48\3\2\2\2\u0f48\u0f4b\3\2\2\2\u0f49\u0f4a\t\62\2\2\u0f4a"+
		"\u0f4c\7\u0135\2\2\u0f4b\u0f49\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4e"+
		"\3\2\2\2\u0f4d\u0f4f\5\u01e4\u00f3\2\u0f4e\u0f4d\3\2\2\2\u0f4e\u0f4f\3"+
		"\2\2\2\u0f4f\u01df\3\2\2\2\u0f50\u0f56\7\u01cd\2\2\u0f51\u0f53\7\u01cf"+
		"\2\2\u0f52\u0f54\7\t\2\2\u0f53\u0f52\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54"+
		"\u0f56\3\2\2\2\u0f55\u0f50\3\2\2\2\u0f55\u0f51\3\2\2\2\u0f55\u0f56\3\2"+
		"\2\2\u0f56\u0f57\3\2\2\2\u0f57\u0f59\5\u01e2\u00f2\2\u0f58\u0f5a\5\u01e8"+
		"\u00f5\2\u0f59\u0f58\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5b\3\2\2\2\u0f5b"+
		"\u0f5c\7\u023b\2\2\u0f5c\u0f5d\5\u023c\u011f\2\u0f5d\u01e1\3\2\2\2\u0f5e"+
		"\u0f5f\5\u026a\u0136\2\u0f5f\u01e3\3\2\2\2\u0f60\u0f61\7\u00d5\2\2\u0f61"+
		"\u0f62\7\u0224\2\2\u0f62\u0f63\5\u023c\u011f\2\u0f63\u0f65\7\u0225\2\2"+
		"\u0f64\u0f66\5\u01e6\u00f4\2\u0f65\u0f64\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66"+
		"\u01e5\3\2\2\2\u0f67\u0f68\7\u01cc\2\2\u0f68\u0f69\7\u0224\2\2\u0f69\u0f6a"+
		"\5\u0238\u011d\2\u0f6a\u0f6b\7\u0225\2\2\u0f6b\u01e7\3\2\2\2\u0f6c\u0f6e"+
		"\7\u0135\2\2\u0f6d\u0f6f\7\u0192\2\2\u0f6e\u0f6d\3\2\2\2\u0f6e\u0f6f\3"+
		"\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f71\7,\2\2\u0f71\u0f76\5\u01ea\u00f6"+
		"\2\u0f72\u0f73\7\u022a\2\2\u0f73\u0f75\5\u01ea\u00f6\2\u0f74\u0f72\3\2"+
		"\2\2\u0f75\u0f78\3\2\2\2\u0f76\u0f74\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77"+
		"\u01e9\3\2\2\2\u0f78\u0f76\3\2\2\2\u0f79\u0f7b\5\u023c\u011f\2\u0f7a\u0f7c"+
		"\t\63\2\2\u0f7b\u0f7a\3\2\2\2\u0f7b\u0f7c\3\2\2\2\u0f7c\u0f7f\3\2\2\2"+
		"\u0f7d\u0f7e\7\u0125\2\2\u0f7e\u0f80\t\64\2\2\u0f7f\u0f7d\3\2\2\2\u0f7f"+
		"\u0f80\3\2\2\2\u0f80\u01eb\3\2\2\2\u0f81\u0f82\7\u00a2\2\2\u0f82\u0f84"+
		"\7\u01cd\2\2\u0f83\u0f85\5\u01ee\u00f8\2\u0f84\u0f83\3\2\2\2\u0f84\u0f85"+
		"\3\2\2\2\u0f85\u0f87\3\2\2\2\u0f86\u0f88\5\u01f0\u00f9\2\u0f87\u0f86\3"+
		"\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u01ed\3\2\2\2\u0f89\u0f8a\7\u012a\2\2"+
		"\u0f8a\u0f8f\5\u0310\u0189\2\u0f8b\u0f8c\7\u022a\2\2\u0f8c\u0f8e\5\u0310"+
		"\u0189\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f91\3\2\2\2\u0f8f\u0f8d\3\2\2\2\u0f8f"+
		"\u0f90\3\2\2\2\u0f90\u01ef\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f92\u0f93\7\u0197"+
		"\2\2\u0f93\u0f98\7\u00ec\2\2\u0f94\u0f98\7\u0123\2\2\u0f95\u0f96\7\u01de"+
		"\2\2\u0f96\u0f98\5\u023c\u011f\2\u0f97\u0f92\3\2\2\2\u0f97\u0f94\3\2\2"+
		"\2\u0f97\u0f95\3\2\2\2\u0f98\u01f1\3\2\2\2\u0f99\u0f9a\7\u01cd\2\2\u0f9a"+
		"\u0f9b\5\u0220\u0111\2\u0f9b\u0f9d\5\u01f4\u00fb\2\u0f9c\u0f9e\5\u02d0"+
		"\u0169\2\u0f9d\u0f9c\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0fa0\3\2\2\2\u0f9f"+
		"\u0fa1\5\u0222\u0112\2\u0fa0\u0f9f\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa3"+
		"\3\2\2\2\u0fa2\u0fa4\5\u0224\u0113\2\u0fa3\u0fa2\3\2\2\2\u0fa3\u0fa4\3"+
		"\2\2\2\u0fa4\u01f3\3\2\2\2\u0fa5\u0fb5\7\u018c\2\2\u0fa6\u0fab\5\u01f6"+
		"\u00fc\2\u0fa7\u0fa8\7\u022a\2\2\u0fa8\u0faa\5\u01f6\u00fc\2\u0fa9\u0fa7"+
		"\3\2\2\2\u0faa\u0fad\3\2\2\2\u0fab\u0fa9\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac"+
		"\u0fb6\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fae\u0faf\7\u01d4\2\2\u0faf\u0fb0"+
		"\7\u0224\2\2\u0fb0\u0fb1\5\u033a\u019e\2\u0fb1\u0fb2\7\u0225\2\2\u0fb2"+
		"\u0fb3\7\u023b\2\2\u0fb3\u0fb4\5\u023c\u011f\2\u0fb4\u0fb6\3\2\2\2\u0fb5"+
		"\u0fa6\3\2\2\2\u0fb5\u0fae\3\2\2\2\u0fb6\u01f5\3\2\2\2\u0fb7\u0fb8\5\u0310"+
		"\u0189\2\u0fb8\u0fb9\7\u023b\2\2\u0fb9\u0fba\5\u023c\u011f\2\u0fba\u0fc9"+
		"\3\2\2\2\u0fbb\u0fbc\7\u0224\2\2\u0fbc\u0fc1\5\u0310\u0189\2\u0fbd\u0fbe"+
		"\7\u022a\2\2\u0fbe\u0fc0\5\u0310\u0189\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc3"+
		"\3\2\2\2\u0fc1\u0fbf\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc4\3\2\2\2\u0fc3"+
		"\u0fc1\3\2\2\2\u0fc4\u0fc5\7\u0225\2\2\u0fc5\u0fc6\7\u023b\2\2\u0fc6\u0fc7"+
		"\5\u0188\u00c5\2\u0fc7\u0fc9\3\2\2\2\u0fc8\u0fb7\3\2\2\2\u0fc8\u0fbb\3"+
		"\2\2\2\u0fc9\u01f7\3\2\2\2\u0fca\u0fcc\7t\2\2\u0fcb\u0fcd\7\u00a8\2\2"+
		"\u0fcc\u0fcb\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fce\3\2\2\2\u0fce\u0fd0"+
		"\5\u0220\u0111\2\u0fcf\u0fd1\5\u02d0\u0169\2\u0fd0\u0fcf\3\2\2\2\u0fd0"+
		"\u0fd1\3\2\2\2\u0fd1\u0fd3\3\2\2\2\u0fd2\u0fd4\5\u0222\u0112\2\u0fd3\u0fd2"+
		"\3\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd6\3\2\2\2\u0fd5\u0fd7\5\u0224\u0113"+
		"\2\u0fd6\u0fd5\3\2\2\2\u0fd6\u0fd7\3\2\2\2\u0fd7\u01f9\3\2\2\2\u0fd8\u0fdb"+
		"\7\u00ca\2\2\u0fd9\u0fdc\5\u01fc\u00ff\2\u0fda\u0fdc\5\u01fe\u0100\2\u0fdb"+
		"\u0fd9\3\2\2\2\u0fdb\u0fda\3\2\2\2\u0fdc\u01fb\3\2\2\2\u0fdd\u0fe3\5\u0208"+
		"\u0105\2\u0fde\u0fe0\5\u020a\u0106\2\u0fdf\u0fe1\5\u0222\u0112\2\u0fe0"+
		"\u0fdf\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe4\3\2\2\2\u0fe2\u0fe4\5\u017e"+
		"\u00c0\2\u0fe3\u0fde\3\2\2\2\u0fe3\u0fe2\3\2\2\2\u0fe4\u0fe6\3\2\2\2\u0fe5"+
		"\u0fe7\5\u0224\u0113\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u01fd"+
		"\3\2\2\2\u0fe8\u0fea\7\t\2\2\u0fe9\u0feb\5\u0200\u0101\2\u0fea\u0fe9\3"+
		"\2\2\2\u0feb\u0fec\3\2\2\2\u0fec\u0fea\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed"+
		"\u0ff0\3\2\2\2\u0fee\u0ff0\5\u0202\u0102\2\u0fef\u0fe8\3\2\2\2\u0fef\u0fee"+
		"\3\2\2\2\u0ff0\u0ff1\3\2\2\2\u0ff1\u0ff2\5\u017e\u00c0\2\u0ff2\u01ff\3"+
		"\2\2\2\u0ff3\u0ff5\5\u0208\u0105\2\u0ff4\u0ff6\5\u020a\u0106\2\u0ff5\u0ff4"+
		"\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u0ff8\3\2\2\2\u0ff7\u0ff9\5\u0224\u0113"+
		"\2\u0ff8\u0ff7\3\2\2\2\u0ff8\u0ff9\3\2\2\2\u0ff9\u0201\3\2\2\2\u0ffa\u0ffc"+
		"\t\65\2\2\u0ffb\u0ffa\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0ffe\3\2\2\2"+
		"\u0ffd\u0fff\5\u0204\u0103\2\u0ffe\u0ffd\3\2\2\2\u0fff\u1000\3\2\2\2\u1000"+
		"\u0ffe\3\2\2\2\u1000\u1001\3\2\2\2\u1001\u1003\3\2\2\2\u1002\u1004\5\u0206"+
		"\u0104\2\u1003\u1002\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u0203\3\2\2\2\u1005"+
		"\u1006\7\u01e1\2\2\u1006\u1007\5\u0238\u011d\2\u1007\u1009\7\u01b2\2\2"+
		"\u1008\u100a\5\u0200\u0101\2\u1009\u1008\3\2\2\2\u100a\u100b\3\2\2\2\u100b"+
		"\u1009\3\2\2\2\u100b\u100c\3\2\2\2\u100c\u0205\3\2\2\2\u100d\u100f\7\u0082"+
		"\2\2\u100e\u1010\5\u0200\u0101\2\u100f\u100e\3\2\2\2\u1010\u1011\3\2\2"+
		"\2\u1011\u100f\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u0207\3\2\2\2\u1013\u1014"+
		"\7\u00d1\2\2\u1014\u1020\5\u0220\u0111\2\u1015\u1016\7\u0224\2\2\u1016"+
		"\u101b\5\u0310\u0189\2\u1017\u1018\7\u022a\2\2\u1018\u101a\5\u0310\u0189"+
		"\2\u1019\u1017\3\2\2\2\u101a\u101d\3\2\2\2\u101b\u1019\3\2\2\2\u101b\u101c"+
		"\3\2\2\2\u101c\u101e\3\2\2\2\u101d\u101b\3\2\2\2\u101e\u101f\7\u0225\2"+
		"\2\u101f\u1021\3\2\2\2\u1020\u1015\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u0209"+
		"\3\2\2\2\u1022\u1023\7\u01d5\2\2\u1023\u1024\5\u0236\u011c\2\u1024\u020b"+
		"\3\2\2\2\u1025\u1026\7\u00fd\2\2\u1026\u1027\7\u00d1\2\2\u1027\u1029\5"+
		"\u0312\u018a\2\u1028\u102a\5\u02cc\u0167\2\u1029\u1028\3\2\2\2\u1029\u102a"+
		"\3\2\2\2\u102a\u102b\3\2\2\2\u102b\u102c\7\u01d2\2\2\u102c\u102d\5\u0216"+
		"\u010c\2\u102d\u102e\7\u012f\2\2\u102e\u102f\7\u0224\2\2\u102f\u1030\5"+
		"\u0238\u011d\2\u1030\u1039\7\u0225\2\2\u1031\u1033\5\u020e\u0108\2\u1032"+
		"\u1034\5\u0214\u010b\2\u1033\u1032\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u103a"+
		"\3\2\2\2\u1035\u1037\5\u0214\u010b\2\u1036\u1038\5\u020e\u0108\2\u1037"+
		"\u1036\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u103a\3\2\2\2\u1039\u1031\3\2"+
		"\2\2\u1039\u1035\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u103c\3\2\2\2\u103b"+
		"\u103d\5\u0224\u0113\2\u103c\u103b\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u020d"+
		"\3\2\2\2\u103e\u103f\7\u01e1\2\2\u103f\u1040\7\u00f6\2\2\u1040\u1041\7"+
		"\u01b2\2\2\u1041\u1042\7\u01cd\2\2\u1042\u1043\7\u018c\2\2\u1043\u1048"+
		"\5\u0210\u0109\2\u1044\u1045\7\u022a\2\2\u1045\u1047\5\u0210\u0109\2\u1046"+
		"\u1044\3\2\2\2\u1047\u104a\3\2\2\2\u1048\u1046\3\2\2\2\u1048\u1049\3\2"+
		"\2\2\u1049\u104c\3\2\2\2\u104a\u1048\3\2\2\2\u104b\u104d\5\u02d0\u0169"+
		"\2\u104c\u104b\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104f\3\2\2\2\u104e\u1050"+
		"\5\u0212\u010a\2\u104f\u104e\3\2\2\2\u104f\u1050\3\2\2\2\u1050\u020f\3"+
		"\2\2\2\u1051\u1052\5\u0310\u0189\2\u1052\u1053\7\u023b\2\2\u1053\u1054"+
		"\5\u023c\u011f\2\u1054\u0211\3\2\2\2\u1055\u1056\7t\2\2\u1056\u1057\5"+
		"\u02d0\u0169\2\u1057\u0213\3\2\2\2\u1058\u1059\7\u01e1\2\2\u1059\u105a"+
		"\7\u0121\2\2\u105a\u105b\7\u00f6\2\2\u105b\u105c\7\u01b2\2\2\u105c\u1068"+
		"\7\u00ca\2\2\u105d\u105e\7\u0224\2\2\u105e\u1063\5\u0310\u0189\2\u105f"+
		"\u1060\7\u022a\2\2\u1060\u1062\5\u0310\u0189\2\u1061\u105f\3\2\2\2\u1062"+
		"\u1065\3\2\2\2\u1063\u1061\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u1066\3\2"+
		"\2\2\u1065\u1063\3\2\2\2\u1066\u1067\7\u0225\2\2\u1067\u1069\3\2\2\2\u1068"+
		"\u105d\3\2\2\2\u1068\u1069\3\2\2\2\u1069\u106a\3\2\2\2\u106a\u106b\7\u01d5"+
		"\2\2\u106b\u106d\5\u0236\u011c\2\u106c\u106e\5\u02d0\u0169\2\u106d\u106c"+
		"\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u0215\3\2\2\2\u106f\u1075\5\u0312\u018a"+
		"\2\u1070\u1071\7\u0224\2\2\u1071\u1072\5\u017e\u00c0\2\u1072\u1073\7\u0225"+
		"\2\2\u1073\u1075\3\2\2\2\u1074\u106f\3\2\2\2\u1074\u1070\3\2\2\2\u1075"+
		"\u1077\3\2\2\2\u1076\u1078\5\u02cc\u0167\2\u1077\u1076\3\2\2\2\u1077\u1078"+
		"\3\2\2\2\u1078\u0217\3\2\2\2\u1079\u107a\7\u00eb\2\2\u107a\u107b\7\u01af"+
		"\2\2\u107b\u1080\5\u021c\u010f\2\u107c\u107d\7\u022a\2\2\u107d\u107f\5"+
		"\u021c\u010f\2\u107e\u107c\3\2\2\2\u107f\u1082\3\2\2\2\u1080\u107e\3\2"+
		"\2\2\u1080\u1081\3\2\2\2\u1081\u1083\3\2\2\2\u1082\u1080\3\2\2\2\u1083"+
		"\u1084\7\u00b9\2\2\u1084\u1085\5\u021e\u0110\2\u1085\u1087\7\u0103\2\2"+
		"\u1086\u1088\5\u021a\u010e\2\u1087\u1086\3\2\2\2\u1087\u1088\3\2\2\2\u1088"+
		"\u0219\3\2\2\2\u1089\u108a\7\u01de\2\2\u108a\u108d\5\u023c\u011f\2\u108b"+
		"\u108d\7\u0123\2\2\u108c\u1089\3\2\2\2\u108c\u108b\3\2\2\2\u108d\u021b"+
		"\3\2\2\2\u108e\u1090\5\u0312\u018a\2\u108f\u1091\5\u02c8\u0165\2\u1090"+
		"\u108f\3\2\2\2\u1090\u1091\3\2\2\2\u1091\u021d\3\2\2\2\u1092\u1093\7\u0175"+
		"\2\2\u1093\u109f\7\u018f\2\2\u1094\u1095\7\u0175\2\2\u1095\u109f\7\u0090"+
		"\2\2\u1096\u1098\7\u018f\2\2\u1097\u1099\7\u01cd\2\2\u1098\u1097\3\2\2"+
		"\2\u1098\u1099\3\2\2\2\u1099\u109f\3\2\2\2\u109a\u109b\7\u018f\2\2\u109b"+
		"\u109c\7\u0175\2\2\u109c\u109f\7\u0090\2\2\u109d\u109f\7\u0090\2\2\u109e"+
		"\u1092\3\2\2\2\u109e\u1094\3\2\2\2\u109e\u1096\3\2\2\2\u109e\u109a\3\2"+
		"\2\2\u109e\u109d\3\2\2\2\u109f\u021f\3\2\2\2\u10a0\u10a7\5\u022a\u0116"+
		"\2\u10a1\u10a2\7\u0130\2\2\u10a2\u10a3\7\u0224\2\2\u10a3\u10a4\5\u022a"+
		"\u0116\2\u10a4\u10a5\7\u0225\2\2\u10a5\u10a7\3\2\2\2\u10a6\u10a0\3\2\2"+
		"\2\u10a6\u10a1\3\2\2\2\u10a7\u10a9\3\2\2\2\u10a8\u10aa\5\u02cc\u0167\2"+
		"\u10a9\u10a8\3\2\2\2\u10a9\u10aa\3\2\2\2\u10aa\u0221\3\2\2\2\u10ab\u10ac"+
		"\t#\2\2\u10ac\u10b1\5\u023c\u011f\2\u10ad\u10ae\7\u022a\2\2\u10ae\u10b0"+
		"\5\u023c\u011f\2\u10af\u10ad\3\2\2\2\u10b0\u10b3\3\2\2\2\u10b1\u10af\3"+
		"\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10b4\3\2\2\2\u10b3\u10b1\3\2\2\2\u10b4"+
		"\u10b5\5\u02d4\u016b\2\u10b5\u0223\3\2\2\2\u10b6\u10b7\7\u00ed\2\2\u10b7"+
		"\u10b9\7\u0089\2\2\u10b8\u10ba\5\u0226\u0114\2\u10b9\u10b8\3\2\2\2\u10b9"+
		"\u10ba\3\2\2\2\u10ba\u10bc\3\2\2\2\u10bb\u10bd\5\u023e\u0120\2\u10bc\u10bb"+
		"\3\2\2\2\u10bc\u10bd\3\2\2\2\u10bd\u10bf\3\2\2\2\u10be\u10c0\5\u0228\u0115"+
		"\2\u10bf\u10be\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u0225\3\2\2\2\u10c1\u10c2"+
		"\7\u00d1\2\2\u10c2\u10c3\5\u0312\u018a\2\u10c3\u0227\3\2\2\2\u10c4\u10c5"+
		"\7\u0164\2\2\u10c5\u10c8\7\u00e8\2\2\u10c6\u10c9\7\u01ca\2\2\u10c7\u10c9"+
		"\5\u023e\u0120\2\u10c8\u10c6\3\2\2\2\u10c8\u10c7\3\2\2\2\u10c9\u0229\3"+
		"\2\2\2\u10ca\u10d7\5\u022c\u0117\2\u10cb\u10cc\7\u0224\2\2\u10cc\u10ce"+
		"\5\u017e\u00c0\2\u10cd\u10cf\5\u022e\u0118\2\u10ce\u10cd\3\2\2\2\u10ce"+
		"\u10cf\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d1\7\u0225\2\2\u10d1\u10d7"+
		"\3\2\2\2\u10d2\u10d4\5\u0312\u018a\2\u10d3\u10d5\5\u0230\u0119\2\u10d4"+
		"\u10d3\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d7\3\2\2\2\u10d6\u10ca\3\2"+
		"\2\2\u10d6\u10cb\3\2\2\2\u10d6\u10d2\3\2\2\2\u10d7\u022b\3\2\2\2\u10d8"+
		"\u10e5\t\66\2\2\u10d9\u10da\7\u0224\2\2\u10da\u10db\5\u0188\u00c5\2\u10db"+
		"\u10dc\7\u0225\2\2\u10dc\u10e6\3\2\2\2\u10dd\u10de\7\u0224\2\2\u10de\u10df"+
		"\5\u023c\u011f\2\u10df\u10e3\7\u0225\2\2\u10e0\u10e1\7\u0224\2\2\u10e1"+
		"\u10e2\7\u0228\2\2\u10e2\u10e4\7\u0225\2\2\u10e3\u10e0\3\2\2\2\u10e3\u10e4"+
		"\3\2\2\2\u10e4\u10e6\3\2\2\2\u10e5\u10d9\3\2\2\2\u10e5\u10dd\3\2\2\2\u10e6"+
		"\u022d\3\2\2\2\u10e7\u10f0\7\u01e5\2\2\u10e8\u10e9\7\u015b\2\2\u10e9\u10f1"+
		"\7\u0130\2\2\u10ea\u10eb\79\2\2\u10eb\u10ee\7\u0132\2\2\u10ec\u10ed\7"+
		"M\2\2\u10ed\u10ef\5\u02f4\u017b\2\u10ee\u10ec\3\2\2\2\u10ee\u10ef\3\2"+
		"\2\2\u10ef\u10f1\3\2\2\2\u10f0\u10e8\3\2\2\2\u10f0\u10ea\3\2\2\2\u10f1"+
		"\u022f\3\2\2\2\u10f2\u10f4\7\u0179\2\2\u10f3\u10f5\7%\2\2\u10f4\u10f3"+
		"\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10f7\7\u0224\2"+
		"\2\u10f7\u10fa\5\u023c\u011f\2\u10f8\u10f9\7\u022a\2\2\u10f9\u10fb\5\u023c"+
		"\u011f\2\u10fa\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc"+
		"\u10fe\7\u0225\2\2\u10fd\u10ff\5\u0232\u011a\2\u10fe\u10fd\3\2\2\2\u10fe"+
		"\u10ff\3\2\2\2\u10ff\u0231\3\2\2\2\u1100\u1101\7\u0182\2\2\u1101\u1102"+
		"\7\u0224\2\2\u1102\u1103\5\u023c\u011f\2\u1103\u1104\7\u0225\2\2\u1104"+
		"\u0233\3\2\2\2\u1105\u1106\7^\2\2\u1106\u1107\7\u0224\2\2\u1107\u1108"+
		"\5\u0188\u00c5\2\u1108\u1109\7\u0225\2\2\u1109\u0235\3\2\2\2\u110a\u110c"+
		"\7\u0224\2\2\u110b\u110d\5\u023c\u011f\2\u110c\u110b\3\2\2\2\u110c\u110d"+
		"\3\2\2\2\u110d\u1112\3\2\2\2\u110e\u110f\7\u022a\2\2\u110f\u1111\5\u023c"+
		"\u011f\2\u1110\u110e\3\2\2\2\u1111\u1114\3\2\2\2\u1112\u1110\3\2\2\2\u1112"+
		"\u1113\3\2\2\2\u1113\u1115\3\2\2\2\u1114\u1112\3\2\2\2\u1115\u1116\7\u0225"+
		"\2\2\u1116\u0237\3\2\2\2\u1117\u1118\5\u023c\u011f\2\u1118\u0239\3\2\2"+
		"\2\u1119\u111a\5\u023c\u011f\2\u111a\u023b\3\2\2\2\u111b\u1125\5\u0234"+
		"\u011b\2\u111c\u1121\5\u0240\u0121\2\u111d\u111e\7\u0133\2\2\u111e\u1120"+
		"\5\u0240\u0121\2\u111f\u111d\3\2\2\2\u1120\u1123\3\2\2\2\u1121\u111f\3"+
		"\2\2\2\u1121\u1122\3\2\2\2\u1122\u1125\3\2\2\2\u1123\u1121\3\2\2\2\u1124"+
		"\u111b\3\2\2\2\u1124\u111c\3\2\2\2\u1125\u023d\3\2\2\2\u1126\u1127\5\u023c"+
		"\u011f\2\u1127\u023f\3\2\2\2\u1128\u112d\5\u0242\u0122\2\u1129\u112a\7"+
		"\f\2\2\u112a\u112c\5\u0242\u0122\2\u112b\u1129\3\2\2\2\u112c\u112f\3\2"+
		"\2\2\u112d\u112b\3\2\2\2\u112d\u112e\3\2\2\2\u112e\u0241\3\2\2\2\u112f"+
		"\u112d\3\2\2\2\u1130\u1131\7\u0121\2\2\u1131\u1134\5\u0242\u0122\2\u1132"+
		"\u1134\5\u0244\u0123\2\u1133\u1130\3\2\2\2\u1133\u1132\3\2\2\2\u1134\u0243"+
		"\3\2\2\2\u1135\u1139\5\u0248\u0125\2\u1136\u1138\5\u0246\u0124\2\u1137"+
		"\u1136\3\2\2\2\u1138\u113b\3\2\2\2\u1139\u1137\3\2\2\2\u1139\u113a\3\2"+
		"\2\2\u113a\u0245\3\2\2\2\u113b\u1139\3\2\2\2\u113c\u113e\7\u00d3\2\2\u113d"+
		"\u113f\7\u0121\2\2\u113e\u113d\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u1159"+
		"\3\2\2\2\u1140\u115a\7\u0124\2\2\u1141\u115a\7\u0109\2\2\u1142\u115a\7"+
		"\u0153\2\2\u1143\u115a\7\u00c3\2\2\u1144\u1145\7\4\2\2\u1145\u115a\7\u018c"+
		"\2\2\u1146\u115a\7\u0084\2\2\u1147\u1149\7\u012a\2\2\u1148\u114a\7\u01c5"+
		"\2\2\u1149\u1148\3\2\2\2\u1149\u114a\3\2\2\2\u114a\u114b\3\2\2\2\u114b"+
		"\u114d\7\u0224\2\2\u114c\u114e\7\u0130\2\2\u114d\u114c\3\2\2\2\u114d\u114e"+
		"\3\2\2\2\u114e\u114f\3\2\2\2\u114f\u1154\5\u0322\u0192\2\u1150\u1151\7"+
		"\u022a\2\2\u1151\u1153\5\u0322\u0192\2\u1152\u1150\3\2\2\2\u1153\u1156"+
		"\3\2\2\2\u1154\u1152\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1157\3\2\2\2\u1156"+
		"\u1154\3\2\2\2\u1157\u1158\7\u0225\2\2\u1158\u115a\3\2\2\2\u1159\u1140"+
		"\3\2\2\2\u1159\u1141\3\2\2\2\u1159\u1142\3\2\2\2\u1159\u1143\3\2\2\2\u1159"+
		"\u1144\3\2\2\2\u1159\u1146\3\2\2\2\u1159\u1147\3\2\2\2\u115a\u0247\3\2"+
		"\2\2\u115b\u1162\5\u024c\u0127\2\u115c\u115e\5\u024a\u0126\2\u115d\u115f"+
		"\7\u012a\2\2\u115e\u115d\3\2\2\2\u115e\u115f\3\2\2\2\u115f\u1160\3\2\2"+
		"\2\u1160\u1161\5\u025a\u012e\2\u1161\u1163\3\2\2\2\u1162\u115c\3\2\2\2"+
		"\u1162\u1163\3\2\2\2\u1163\u0249\3\2\2\2\u1164\u1165\t\67\2\2\u1165\u024b"+
		"\3\2\2\2\u1166\u116c\5\u0250\u0129\2\u1167\u1168\5\u024e\u0128\2\u1168"+
		"\u1169\5\u0250\u0129\2\u1169\u116b\3\2\2\2\u116a\u1167\3\2\2\2\u116b\u116e"+
		"\3\2\2\2\u116c\u116a\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u024d\3\2\2\2\u116e"+
		"\u116c\3\2\2\2\u116f\u1176\7\u023b\2\2\u1170\u1176\5\u033e\u01a0\2\u1171"+
		"\u1176\7\u0232\2\2\u1172\u1176\7\u0238\2\2\u1173\u1176\5\u0342\u01a2\2"+
		"\u1174\u1176\5\u0340\u01a1\2\u1175\u116f\3\2\2\2\u1175\u1170\3\2\2\2\u1175"+
		"\u1171\3\2\2\2\u1175\u1172\3\2\2\2\u1175\u1173\3\2\2\2\u1175\u1174\3\2"+
		"\2\2\u1176\u024f\3\2\2\2\u1177\u1186\5\u025a\u012e\2\u1178\u117a\7\u0121"+
		"\2\2\u1179\u1178\3\2\2\2\u1179\u117a\3\2\2\2\u117a\u1184\3\2\2\2\u117b"+
		"\u117c\7\u00b9\2\2\u117c\u1185\5\u0256\u012c\2\u117d\u117e\7\37\2\2\u117e"+
		"\u1185\5\u0258\u012d\2\u117f\u1180\5\u0252\u012a\2\u1180\u1182\5\u025a"+
		"\u012e\2\u1181\u1183\5\u0254\u012b\2\u1182\u1181\3\2\2\2\u1182\u1183\3"+
		"\2\2\2\u1183\u1185\3\2\2\2\u1184\u117b\3\2\2\2\u1184\u117d\3\2\2\2\u1184"+
		"\u117f\3\2\2\2\u1185\u1187\3\2\2\2\u1186\u1179\3\2\2\2\u1186\u1187\3\2"+
		"\2\2\u1187\u0251\3\2\2\2\u1188\u1189\t8\2\2\u1189\u0253\3\2\2\2\u118a"+
		"\u118b\7\u008a\2\2\u118b\u118c\5\u025a\u012e\2\u118c\u0255\3\2\2\2\u118d"+
		"\u118e\7\u0224\2\2\u118e\u118f\5\u0188\u00c5\2\u118f\u1190\7\u0225\2\2"+
		"\u1190\u11a0\3\2\2\2\u1191\u1192\7\u0224\2\2\u1192\u1197\5\u025c\u012f"+
		"\2\u1193\u1194\7\u022a\2\2\u1194\u1196\5\u025c\u012f\2\u1195\u1193\3\2"+
		"\2\2\u1196\u1199\3\2\2\2\u1197\u1195\3\2\2\2\u1197\u1198\3\2\2\2\u1198"+
		"\u119a\3\2\2\2\u1199\u1197\3\2\2\2\u119a\u119b\7\u0225\2\2\u119b\u11a0"+
		"\3\2\2\2\u119c\u11a0\5\u0332\u019a\2\u119d\u11a0\5\u032a\u0196\2\u119e"+
		"\u11a0\5\u032c\u0197\2\u119f\u118d\3\2\2\2\u119f\u1191\3\2\2\2\u119f\u119c"+
		"\3\2\2\2\u119f\u119d\3\2\2\2\u119f\u119e\3\2\2\2\u11a0\u0257\3\2\2\2\u11a1"+
		"\u11a2\5\u025a\u012e\2\u11a2\u11a3\7\f\2\2\u11a3\u11a4\5\u025a\u012e\2"+
		"\u11a4\u0259\3\2\2\2\u11a5\u11ab\5\u025e\u0130\2\u11a6\u11a7\5\u0344\u01a3"+
		"\2\u11a7\u11a8\5\u025e\u0130\2\u11a8\u11aa\3\2\2\2\u11a9\u11a6\3\2\2\2"+
		"\u11aa\u11ad\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u025b"+
		"\3\2\2\2\u11ad\u11ab\3\2\2\2\u11ae\u11af\5\u025a\u012e\2\u11af\u025d\3"+
		"\2\2\2\u11b0\u11b6\5\u0262\u0132\2\u11b1\u11b2\5\u0260\u0131\2\u11b2\u11b3"+
		"\5\u0262\u0132\2\u11b3\u11b5\3\2\2\2\u11b4\u11b1\3\2\2\2\u11b5\u11b8\3"+
		"\2\2\2\u11b6\u11b4\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u025f\3\2\2\2\u11b8"+
		"\u11b6\3\2\2\2\u11b9\u11ba\t9\2\2\u11ba\u0261\3\2\2\2\u11bb\u11c1\5\u0266"+
		"\u0134\2\u11bc\u11bd\5\u0264\u0133\2\u11bd\u11be\5\u0266\u0134\2\u11be"+
		"\u11c0\3\2\2\2\u11bf\u11bc\3\2\2\2\u11c0\u11c3\3\2\2\2\u11c1\u11bf\3\2"+
		"\2\2\u11c1\u11c2\3\2\2\2\u11c2\u0263\3\2\2\2\u11c3\u11c1\3\2\2\2\u11c4"+
		"\u11c5\t:\2\2\u11c5\u0265\3\2\2\2\u11c6\u11cf\5\u026a\u0136\2\u11c7\u11cc"+
		"\7\23\2\2\u11c8\u11cd\7\u00ea\2\2\u11c9\u11ca\7\u01b3\2\2\u11ca\u11cb"+
		"\7\u01fb\2\2\u11cb\u11cd\5\u025c\u012f\2\u11cc\u11c8\3\2\2\2\u11cc\u11c9"+
		"\3\2\2\2\u11cd\u11d0\3\2\2\2\u11ce\u11d0\5\u0268\u0135\2\u11cf\u11c7\3"+
		"\2\2\2\u11cf\u11ce\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0\u0267\3\2\2\2\u11d1"+
		"\u11d6\7d\2\2\u11d2\u11d3\7\u0224\2\2\u11d3\u11d4\5\u025c\u012f\2\u11d4"+
		"\u11d5\7\u0225\2\2\u11d5\u11d7\3\2\2\2\u11d6\u11d2\3\2\2\2\u11d6\u11d7"+
		"\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11d9\7\u01bc\2\2\u11d9\u11de\7\u0180"+
		"\2\2\u11da\u11db\7\u0224\2\2\u11db\u11dc\5\u025c\u012f\2\u11dc\u11dd\7"+
		"\u0225\2\2\u11dd\u11df\3\2\2\2\u11de\u11da\3\2\2\2\u11de\u11df\3\2\2\2"+
		"\u11df\u11ea\3\2\2\2\u11e0\u11e5\7\u01f8\2\2\u11e1\u11e2\7\u0224\2\2\u11e2"+
		"\u11e3";
	private static final String _serializedATNSegment2 =
		"\5\u025c\u012f\2\u11e3\u11e4\7\u0225\2\2\u11e4\u11e6\3\2\2\2\u11e5\u11e1"+
		"\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u11e8\7\u01bc\2"+
		"\2\u11e8\u11ea\7\u0106\2\2\u11e9\u11d1\3\2\2\2\u11e9\u11e0\3\2\2\2\u11ea"+
		"\u0269\3\2\2\2\u11eb\u11f0\5\u0276\u013c\2\u11ec\u11ed\7\u023c\2\2\u11ed"+
		"\u11ee\5\u026c\u0137\2\u11ee\u11ef\7\u023d\2\2\u11ef\u11f1\3\2\2\2\u11f0"+
		"\u11ec\3\2\2\2\u11f0\u11f1\3\2\2\2\u11f1\u026b\3\2\2\2\u11f2\u11f5\7\r"+
		"\2\2\u11f3\u11f5\5\u023a\u011e\2\u11f4\u11f2\3\2\2\2\u11f4\u11f3\3\2\2"+
		"\2\u11f5\u11fd\3\2\2\2\u11f6\u11f9\7\u022a\2\2\u11f7\u11fa\7\r\2\2\u11f8"+
		"\u11fa\5\u023a\u011e\2\u11f9\u11f7\3\2\2\2\u11f9\u11f8\3\2\2\2\u11fa\u11fc"+
		"\3\2\2\2\u11fb\u11f6\3\2\2\2\u11fc\u11ff\3\2\2\2\u11fd\u11fb\3\2\2\2\u11fd"+
		"\u11fe\3\2\2\2\u11fe\u120a\3\2\2\2\u11ff\u11fd\3\2\2\2\u1200\u1205\5\u026e"+
		"\u0138\2\u1201\u1202\7\u022a\2\2\u1202\u1204\5\u026e\u0138\2\u1203\u1201"+
		"\3\2\2\2\u1204\u1207\3\2\2\2\u1205\u1203\3\2\2\2\u1205\u1206\3\2\2\2\u1206"+
		"\u120a\3\2\2\2\u1207\u1205\3\2\2\2\u1208\u120a\5\u0274\u013b\2\u1209\u11f4"+
		"\3\2\2\2\u1209\u1200\3\2\2\2\u1209\u1208\3\2\2\2\u120a\u026d\3\2\2\2\u120b"+
		"\u120c\7\u00a2\2\2\u120c\u1219\5\u0310\u0189\2\u120d\u120e\7\u00b9\2\2"+
		"\u120e\u121a\5\u0236\u011c\2\u120f\u1211\5\u0270\u0139\2\u1210\u120f\3"+
		"\2\2\2\u1210\u1211\3\2\2\2\u1211\u1212\3\2\2\2\u1212\u1213\7\u00a8\2\2"+
		"\u1213\u1214\5\u023c\u011f\2\u1214\u1215\7\u01bc\2\2\u1215\u1216\5\u023c"+
		"\u011f\2\u1216\u1217\5\u0272\u013a\2\u1217\u1218\5\u023c\u011f\2\u1218"+
		"\u121a\3\2\2\2\u1219\u120d\3\2\2\2\u1219\u1210\3\2\2\2\u121a\u026f\3\2"+
		"\2\2\u121b\u121c\7\u00e4\2\2\u121c\u121d\5\u023c\u011f\2\u121d\u0271\3"+
		"\2\2\2\u121e\u121f\t;\2\2\u121f\u0273\3\2\2\2\u1220\u1221\7\u00a2\2\2"+
		"\u1221\u1222\7\u0224\2\2\u1222\u1227\5\u0310\u0189\2\u1223\u1224\7\u022a"+
		"\2\2\u1224\u1226\5\u0310\u0189\2\u1225\u1223\3\2\2\2\u1226\u1229\3\2\2"+
		"\2\u1227\u1225\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u122a\3\2\2\2\u1229\u1227"+
		"\3\2\2\2\u122a\u122b\7\u0225\2\2\u122b\u122c\7\u00b9\2\2\u122c\u1239\7"+
		"\u0224\2\2\u122d\u123a\5\u0188\u00c5\2\u122e\u122f\7\u0224\2\2\u122f\u1234"+
		"\5\u0236\u011c\2\u1230\u1231\7\u022a\2\2\u1231\u1233\5\u0236\u011c\2\u1232"+
		"\u1230\3\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235\3\2"+
		"\2\2\u1235\u1237\3\2\2\2\u1236\u1234\3\2\2\2\u1237\u1238\7\u0225\2\2\u1238"+
		"\u123a\3\2\2\2\u1239\u122d\3\2\2\2\u1239\u122e\3\2\2\2\u123a\u123b\3\2"+
		"\2\2\u123b\u123c\7\u0225\2\2\u123c\u0275\3\2\2\2\u123d\u123e\7\u0229\2"+
		"\2\u123e\u1250\5\u0276\u013c\2\u123f\u1240\7\u0228\2\2\u1240\u1250\5\u0276"+
		"\u013c\2\u1241\u1242\7\u0155\2\2\u1242\u1250\5\u0276\u013c\2\u1243\u1244"+
		"\7K\2\2\u1244\u1250\5\u0276\u013c\2\u1245\u1246\7\u0111\2\2\u1246\u1250"+
		"\5\u0276\u013c\2\u1247\u1248\7{\2\2\u1248\u1250\5\u0276\u013c\2\u1249"+
		"\u124a\7\t\2\2\u124a\u1250\5\u0276\u013c\2\u124b\u1250\5\u0278\u013d\2"+
		"\u124c\u1250\5\u028a\u0146\2\u124d\u1250\5\u028c\u0147\2\u124e\u1250\5"+
		"\u0284\u0143\2\u124f\u123d\3\2\2\2\u124f\u123f\3\2\2\2\u124f\u1241\3\2"+
		"\2\2\u124f\u1243\3\2\2\2\u124f\u1245\3\2\2\2\u124f\u1247\3\2\2\2\u124f"+
		"\u1249\3\2\2\2\u124f\u124b\3\2\2\2\u124f\u124c\3\2\2\2\u124f\u124d\3\2"+
		"\2\2\u124f\u124e\3\2\2\2\u1250\u0277\3\2\2\2\u1251\u1254\5\u027e\u0140"+
		"\2\u1252\u1254\5\u027a\u013e\2\u1253\u1251\3\2\2\2\u1253\u1252\3\2\2\2"+
		"\u1254\u0279\3\2\2\2\u1255\u1257\5\u02f6\u017c\2\u1256\u1255\3\2\2\2\u1256"+
		"\u1257\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u1259\7\63\2\2\u1259\u125b\5"+
		"\u0284\u0143\2\u125a\u125c\5\u027c\u013f\2\u125b\u125a\3\2\2\2\u125c\u125d"+
		"\3\2\2\2\u125d\u125b\3\2\2\2\u125d\u125e\3\2\2\2\u125e\u1260\3\2\2\2\u125f"+
		"\u1261\5\u0282\u0142\2\u1260\u125f\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1262"+
		"\3\2\2\2\u1262\u1264\7\u0087\2\2\u1263\u1265\7\63\2\2\u1264\u1263\3\2"+
		"\2\2\u1264\u1265\3\2\2\2\u1265\u1267\3\2\2\2\u1266\u1268\5\u02f6\u017c"+
		"\2\u1267\u1266\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u027b\3\2\2\2\u1269\u126a"+
		"\7\u01e1\2\2\u126a\u126b\5\u023e\u0120\2\u126b\u126e\7\u01b2\2\2\u126c"+
		"\u126f\5\u0128\u0095\2\u126d\u126f\5\u023e\u0120\2\u126e\u126c\3\2\2\2"+
		"\u126e\u126d\3\2\2\2\u126f\u027d\3\2\2\2\u1270\u1272\5\u02f6\u017c\2\u1271"+
		"\u1270\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u1273\3\2\2\2\u1273\u1275\7\63"+
		"\2\2\u1274\u1276\5\u0280\u0141\2\u1275\u1274\3\2\2\2\u1276\u1277\3\2\2"+
		"\2\u1277\u1275\3\2\2\2\u1277\u1278\3\2\2\2\u1278\u127a\3\2\2\2\u1279\u127b"+
		"\5\u0282\u0142\2\u127a\u1279\3\2\2\2\u127a\u127b\3\2\2\2\u127b\u127c\3"+
		"\2\2\2\u127c\u127e\7\u0087\2\2\u127d\u127f\7\63\2\2\u127e\u127d\3\2\2"+
		"\2\u127e\u127f\3\2\2\2\u127f\u1281\3\2\2\2\u1280\u1282\5\u02f6\u017c\2"+
		"\u1281\u1280\3\2\2\2\u1281\u1282\3\2\2\2\u1282\u027f\3\2\2\2\u1283\u1284"+
		"\7\u01e1\2\2\u1284\u1285\5\u023a\u011e\2\u1285\u1288\7\u01b2\2\2\u1286"+
		"\u1289\5\u0128\u0095\2\u1287\u1289\5\u023e\u0120\2\u1288\u1286\3\2\2\2"+
		"\u1288\u1287\3\2\2\2\u1289\u0281\3\2\2\2\u128a\u128d\7\u0082\2\2\u128b"+
		"\u128e\5\u0128\u0095\2\u128c\u128e\5\u023e\u0120\2\u128d\u128b\3\2\2\2"+
		"\u128d\u128c\3\2\2\2\u128e\u0283\3\2\2\2\u128f\u1290\5\u0330\u0199\2\u1290"+
		"\u1291\5\u0346\u01a4\2\u1291\u12a4\3\2\2\2\u1292\u12a4\5\u032a\u0196\2"+
		"\u1293\u12a4\5\u0332\u019a\2\u1294\u12a4\5\u032c\u0197\2\u1295\u12a1\7"+
		"\u0224\2\2\u1296\u1297\5\u0188\u00c5\2\u1297\u129b\7\u0225\2\2\u1298\u129a"+
		"\5\u018a\u00c6\2\u1299\u1298\3\2\2\2\u129a\u129d\3\2\2\2\u129b\u1299\3"+
		"\2\2\2\u129b\u129c\3\2\2\2\u129c\u12a2\3\2\2\2\u129d\u129b\3\2\2\2\u129e"+
		"\u129f\5\u0286\u0144\2\u129f\u12a0\7\u0225\2\2\u12a0\u12a2\3\2\2\2\u12a1"+
		"\u1296\3\2\2\2\u12a1\u129e\3\2\2\2\u12a2\u12a4\3\2\2\2\u12a3\u128f\3\2"+
		"\2\2\u12a3\u1292\3\2\2\2\u12a3\u1293\3\2\2\2\u12a3\u1294\3\2\2\2\u12a3"+
		"\u1295\3\2\2\2\u12a4\u0285\3\2\2\2\u12a5\u12a7\5\u023c\u011f\2\u12a6\u12a8"+
		"\5\u0288\u0145\2\u12a7\u12a6\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u0287\3"+
		"\2\2\2\u12a9\u12aa\7\u022a\2\2\u12aa\u12af\5\u023c\u011f\2\u12ab\u12ac"+
		"\7\u022a\2\2\u12ac\u12ae\5\u023c\u011f\2\u12ad\u12ab\3\2\2\2\u12ae\u12b1"+
		"\3\2\2\2\u12af\u12ad\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0\u0289\3\2\2\2\u12b1"+
		"\u12af\3\2\2\2\u12b2\u12bb\t<\2\2\u12b3\u12b4\7\u0224\2\2\u12b4\u12b5"+
		"\5\u0188\u00c5\2\u12b5\u12b6\7\u0225\2\2\u12b6\u12bc\3\2\2\2\u12b7\u12b8"+
		"\7\u0224\2\2\u12b8\u12b9\5\u023e\u0120\2\u12b9\u12ba\7\u0225\2\2\u12ba"+
		"\u12bc\3\2\2\2\u12bb\u12b3\3\2\2\2\u12bb\u12b7\3\2\2\2\u12bc\u028b\3\2"+
		"\2\2\u12bd\u12be\5\u028e\u0148\2\u12be\u12c0\5\u031a\u018e\2\u12bf\u12c1"+
		"\5\u0294\u014b\2\u12c0\u12bf\3\2\2\2\u12c0\u12c1\3\2\2\2\u12c1\u13f5\3"+
		"\2\2\2\u12c2\u12c3\5\u0348\u01a5\2\u12c3\u12c5\5\u031c\u018f\2\u12c4\u12c6"+
		"\5\u029c\u014f\2\u12c5\u12c4\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6\u13f5\3"+
		"\2\2\2\u12c7\u12c8\7W\2\2\u12c8\u12ce\7\u0224\2\2\u12c9\u12cf\7\u0227"+
		"\2\2\u12ca\u12cc\t)\2\2\u12cb\u12ca\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc"+
		"\u12cd\3\2\2\2\u12cd\u12cf\5\u025c\u012f\2\u12ce\u12c9\3\2\2\2\u12ce\u12cb"+
		"\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u12d2\7\u0225\2\2\u12d1\u12d3\5\u0294"+
		"\u014b\2\u12d2\u12d1\3\2\2\2\u12d2\u12d3\3\2\2\2\u12d3\u13f5\3\2\2\2\u12d4"+
		"\u12d5\t=\2\2\u12d5\u12dc\7\u0224\2\2\u12d6\u12d7\7\u0107\2\2\u12d7\u12d8"+
		"\7\u0224\2\2\u12d8\u12d9\5\u0188\u00c5\2\u12d9\u12da\7\u0225\2\2\u12da"+
		"\u12dd\3\2\2\2\u12db\u12dd\5\u025c\u012f\2\u12dc\u12d6\3\2\2\2\u12dc\u12db"+
		"\3\2\2\2\u12dd\u12de\3\2\2\2\u12de\u12df\7\20\2\2\u12df\u12e0\5\u0322"+
		"\u0192\2\u12e0\u12e1\7\u0225\2\2\u12e1\u13f5\3\2\2\2\u12e2\u12e3\7:\2"+
		"\2\u12e3\u12e4\7\u0224\2\2\u12e4\u12e5\5\u025c\u012f\2\u12e5\u12e6\7\u01d2"+
		"\2\2\u12e6\u12e7\7\u010e\2\2\u12e7\u12e8\7\u0225\2\2\u12e8\u13f5\3\2\2"+
		"\2\u12e9\u12ea\7?\2\2\u12ea\u12ec\7\u0224\2\2\u12eb\u12ed\t>\2\2\u12ec"+
		"\u12eb\3\2\2\2\u12ec\u12ed\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee\u12f0\5\u025c"+
		"\u012f\2\u12ef\u12f1\5\u02a0\u0151\2\u12f0\u12ef\3\2\2\2\u12f0\u12f1\3"+
		"\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f3\7\u0225\2\2\u12f3\u13f5\3\2\2\2"+
		"\u12f4\u12f5\5\u0290\u0149\2\u12f5\u12f7\5\u0318\u018d\2\u12f6\u12f8\5"+
		"\u02a2\u0152\2\u12f7\u12f6\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12f7\3\2"+
		"\2\2\u12f9\u12fa\3\2\2\2\u12fa\u13f5\3\2\2\2\u12fb\u12fc\7l\2\2\u12fc"+
		"\u12fd\7\u0224\2\2\u12fd\u12ff\5\u025c\u012f\2\u12fe\u1300\t?\2\2\u12ff"+
		"\u12fe\3\2\2\2\u12ff\u1300\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302\7\u0225"+
		"\2\2\u1302\u13f5\3\2\2\2\u1303\u1304\7\u0096\2\2\u1304\u1305\7\u0224\2"+
		"\2\u1305\u1306\5\u0348\u01a5\2\u1306\u1307\7\u00a8\2\2\u1307\u1308\5\u025c"+
		"\u012f\2\u1308\u1309\7\u0225\2\2\u1309\u13f5\3\2\2\2\u130a\u130b\t@\2"+
		"\2\u130b\u130d\5\u031a\u018e\2\u130c\u130e\5\u031e\u0190\2\u130d\u130c"+
		"\3\2\2\2\u130d\u130e\3\2\2\2\u130e\u130f\3\2\2\2\u130f\u1310\5\u0294\u014b"+
		"\2\u1310\u13f5\3\2\2\2\u1311\u1312\5\u0292\u014a\2\u1312\u1313\7\u0224"+
		"\2\2\u1313\u1318\5\u023e\u0120\2\u1314\u1315\7\u022a\2\2\u1315\u1317\5"+
		"\u023e\u0120\2\u1316\u1314\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316\3\2"+
		"\2\2\u1318\u1319\3\2\2\2\u1319\u131c\3\2\2\2\u131a\u1318\3\2\2\2\u131b"+
		"\u131d\5\u02a4\u0153\2\u131c\u131b\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u131f"+
		"\3\2\2\2\u131e\u1320\5\u029c\u014f\2\u131f\u131e\3\2\2\2\u131f\u1320\3"+
		"\2\2\2\u1320\u1321\3\2\2\2\u1321\u1322\7\u0225\2\2\u1322\u13f5\3\2\2\2"+
		"\u1323\u1324\7\u01bf\2\2\u1324\u1325\7\u0224\2\2\u1325\u1328\5\u023e\u0120"+
		"\2\u1326\u1327\7\u01d2\2\2\u1327\u1329\tA\2\2\u1328\u1326\3\2\2\2\u1328"+
		"\u1329\3\2\2\2\u1329\u132e\3\2\2\2\u132a\u132b\7\u022a\2\2\u132b\u132d"+
		"\5\u023e\u0120\2\u132c\u132a\3\2\2\2\u132d\u1330\3\2\2\2\u132e\u132c\3"+
		"\2\2\2\u132e\u132f\3\2\2\2\u132f\u1331\3\2\2\2\u1330\u132e\3\2\2\2\u1331"+
		"\u1332\7\u0225\2\2\u1332\u13f5\3\2\2\2\u1333\u1334\7\u01c0\2\2\u1334\u1335"+
		"\7\u0224\2\2\u1335\u1336\5\u023e\u0120\2\u1336\u1338\7\20\2\2\u1337\u1339"+
		"\7\u0160\2\2\u1338\u1337\3\2\2\2\u1338\u1339\3\2\2\2\u1339\u133a\3\2\2"+
		"\2\u133a\u133b\5\u0322\u0192\2\u133b\u133c\7\u0225\2\2\u133c\u13f5\3\2"+
		"\2\2\u133d\u133e\7\u01c2\2\2\u133e\u1346\7\u0224\2\2\u133f\u1341\tB\2"+
		"\2\u1340\u133f\3\2\2\2\u1340\u1341\3\2\2\2\u1341\u1343\3\2\2\2\u1342\u1344"+
		"\5\u0338\u019d\2\u1343\u1342\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u1345\3"+
		"\2\2\2\u1345\u1347\7\u00a8\2\2\u1346\u1340\3\2\2\2\u1346\u1347\3\2\2\2"+
		"\u1347\u1348\3\2\2\2\u1348\u1349\5\u025c\u012f\2\u1349\u134a\7\u0225\2"+
		"\2\u134a\u13f5\3\2\2\2\u134b\u134c\7\u01ea\2\2\u134c\u134d\7\u0224\2\2"+
		"\u134d\u134f\5\u023e\u0120\2\u134e\u1350\5\u01e8\u00f5\2\u134f\u134e\3"+
		"\2\2\2\u134f\u1350\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1354\7\u0225\2\2"+
		"\u1352\u1353\7\u021d\2\2\u1353\u1355\5\u032e\u0198\2\u1354\u1352\3\2\2"+
		"\2\u1354\u1355\3\2\2\2\u1355\u13f5\3\2\2\2\u1356\u1357\tC\2\2\u1357\u1358"+
		"\7\u0224\2\2\u1358\u135d\5\u02b0\u0159\2\u1359\u135a\7\u022a\2\2\u135a"+
		"\u135c\5\u02b0\u0159\2\u135b\u1359\3\2\2\2\u135c\u135f\3\2\2\2\u135d\u135b"+
		"\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u1360\3\2\2\2\u135f\u135d\3\2\2\2\u1360"+
		"\u1363\7\u0225\2\2\u1361\u1362\7\u021d\2\2\u1362\u1364\5\u032e\u0198\2"+
		"\u1363\u1361\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u13f5\3\2\2\2\u1365\u1366"+
		"\7\u01ee\2\2\u1366\u1368\7\u0224\2\2\u1367\u1369\tD\2\2\u1368\u1367\3"+
		"\2\2\2\u1368\u1369\3\2\2\2\u1369\u136b\3\2\2\2\u136a\u136c\tE\2\2\u136b"+
		"\u136a\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u136d\3\2\2\2\u136d\u1370\5\u023e"+
		"\u0120\2\u136e\u136f\7\u022a\2\2\u136f\u1371\5\u02a8\u0155\2\u1370\u136e"+
		"\3\2\2\2\u1370\u1371\3\2\2\2\u1371\u1379\3\2\2\2\u1372\u1373\7\u022a\2"+
		"\2\u1373\u1375\5\u023e\u0120\2\u1374\u1376\5\u02ca\u0166\2\u1375\u1374"+
		"\3\2\2\2\u1375\u1376\3\2\2\2\u1376\u1378\3\2\2\2\u1377\u1372\3\2\2\2\u1378"+
		"\u137b\3\2\2\2\u1379\u1377\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u137c\3\2"+
		"\2\2\u137b\u1379\3\2\2\2\u137c\u137f\7\u0225\2\2\u137d\u137e\7\u021d\2"+
		"\2\u137e\u1380\5\u032e\u0198\2\u137f\u137d\3\2\2\2\u137f\u1380\3\2\2\2"+
		"\u1380\u13f5\3\2\2\2\u1381\u1382\7\u01ef\2\2\u1382\u1383\7\u0224\2\2\u1383"+
		"\u1385\5\u023e\u0120\2\u1384\u1386\5\u02a6\u0154\2\u1385\u1384\3\2\2\2"+
		"\u1385\u1386\3\2\2\2\u1386\u1387\3\2\2\2\u1387\u1388\7\u0225\2\2\u1388"+
		"\u13f5\3\2\2\2\u1389\u138a\7\u01f2\2\2\u138a\u138b\7\u0224\2\2\u138b\u138c"+
		"\tF\2\2\u138c\u138e\5\u025c\u012f\2\u138d\u138f\7\u01e0\2\2\u138e\u138d"+
		"\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1390\3\2\2\2\u1390\u1393\7\u0225\2"+
		"\2\u1391\u1392\7\u021d\2\2\u1392\u1394\5\u032e\u0198\2\u1393\u1391\3\2"+
		"\2\2\u1393\u1394\3\2\2\2\u1394\u13f5\3\2\2\2\u1395\u1396\7\u01f3\2\2\u1396"+
		"\u139b\7\u0224\2\2\u1397\u1398\7\u0108\2\2\u1398\u139c\5\u033a\u019e\2"+
		"\u1399\u139a\7\u008b\2\2\u139a\u139c\5\u025c\u012f\2\u139b\u1397\3\2\2"+
		"\2\u139b\u1399\3\2\2\2\u139c\u139f\3\2\2\2\u139d\u139e\7\u022a\2\2\u139e"+
		"\u13a0\5\u025c\u012f\2\u139f\u139d\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u13a1"+
		"\3\2\2\2\u13a1\u13a4\7\u0225\2\2\u13a2\u13a3\7\u021d\2\2\u13a3\u13a5\5"+
		"\u032e\u0198\2\u13a4\u13a2\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13f5\3\2"+
		"\2\2\u13a6\u13a7\7\u01f4\2\2\u13a7\u13a8\7\u0224\2\2\u13a8\u13aa\5\u025c"+
		"\u012f\2\u13a9\u13ab\5\u02a6\u0154\2\u13aa\u13a9\3\2\2\2\u13aa\u13ab\3"+
		"\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ad\7\u016e\2\2\u13ad\u13b1\7P\2\2"+
		"\u13ae\u13af\7\u0124\2\2\u13af\u13b0\7\u012f\2\2\u13b0\u13b2\7\u0084\2"+
		"\2\u13b1\u13ae\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u13b6"+
		"\7\u0225\2\2\u13b4\u13b5\7\u021d\2\2\u13b5\u13b7\5\u032e\u0198\2\u13b6"+
		"\u13b4\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13f5\3\2\2\2\u13b8\u13b9\7\u01f5"+
		"\2\2\u13b9\u13ba\7\u0224\2\2\u13ba\u13bb\5\u025c\u012f\2\u13bb\u13be\5"+
		"\u02b2\u015a\2\u13bc\u13bd\7\u022a\2\2\u13bd\u13bf\5\u02b4\u015b\2\u13be"+
		"\u13bc\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13c3\7\u0225"+
		"\2\2\u13c1\u13c2\7\u021d\2\2\u13c2\u13c4\5\u032e\u0198\2\u13c3\u13c1\3"+
		"\2\2\2\u13c3\u13c4\3\2\2\2\u13c4\u13f5\3\2\2\2\u13c5\u13c6\7\u01f6\2\2"+
		"\u13c6\u13c7\7\u0224\2\2\u13c7\u13c8\tF\2\2\u13c8\u13cb\5\u025c\u012f"+
		"\2\u13c9\u13ca\7\20\2\2\u13ca\u13cc\5\u0322\u0192\2\u13cb\u13c9\3\2\2"+
		"\2\u13cb\u13cc\3\2\2\2\u13cc\u13ce\3\2\2\2\u13cd\u13cf\5\u02b6\u015c\2"+
		"\u13ce\u13cd\3\2\2\2\u13ce\u13cf\3\2\2\2\u13cf\u13d1\3\2\2\2\u13d0\u13d2"+
		"\5\u02b8\u015d\2\u13d1\u13d0\3\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u13d4\3"+
		"\2\2\2\u13d3\u13d5\5\u02ba\u015e\2\u13d4\u13d3\3\2\2\2\u13d4\u13d5\3\2"+
		"\2\2\u13d5\u13d8\3\2\2\2\u13d6\u13d7\tG\2\2\u13d7\u13d9\7p\2\2\u13d8\u13d6"+
		"\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u13dd\7\u0225\2"+
		"\2\u13db\u13dc\7\u021d\2\2\u13dc\u13de\5\u032e\u0198\2\u13dd\u13db\3\2"+
		"\2\2\u13dd\u13de\3\2\2\2\u13de\u13f5\3\2\2\2\u13df\u13e0\7\u01f7\2\2\u13e0"+
		"\u13e2\7\u0224\2\2\u13e1\u13e3\5\u02aa\u0156\2\u13e2\u13e1\3\2\2\2\u13e2"+
		"\u13e3\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e6\5\u025c\u012f\2\u13e5\u13e7"+
		"\5\u02a6\u0154\2\u13e6\u13e5\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13ed\3"+
		"\2\2\2\u13e8\u13e9\7A\2\2\u13e9\u13ea\5\u02ac\u0157\2\u13ea\u13eb\7\u022a"+
		"\2\2\u13eb\u13ec\5\u02ac\u0157\2\u13ec\u13ee\3\2\2\2\u13ed\u13e8\3\2\2"+
		"\2\u13ed\u13ee\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u13f2\7\u0225\2\2\u13f0"+
		"\u13f1\7\u021d\2\2\u13f1\u13f3\5\u032e\u0198\2\u13f2\u13f0\3\2\2\2\u13f2"+
		"\u13f3\3\2\2\2\u13f3\u13f5\3\2\2\2\u13f4\u12bd\3\2\2\2\u13f4\u12c2\3\2"+
		"\2\2\u13f4\u12c7\3\2\2\2\u13f4\u12d4\3\2\2\2\u13f4\u12e2\3\2\2\2\u13f4"+
		"\u12e9\3\2\2\2\u13f4\u12f4\3\2\2\2\u13f4\u12fb\3\2\2\2\u13f4\u1303\3\2"+
		"\2\2\u13f4\u130a\3\2\2\2\u13f4\u1311\3\2\2\2\u13f4\u1323\3\2\2\2\u13f4"+
		"\u1333\3\2\2\2\u13f4\u133d\3\2\2\2\u13f4\u134b\3\2\2\2\u13f4\u1356\3\2"+
		"\2\2\u13f4\u1365\3\2\2\2\u13f4\u1381\3\2\2\2\u13f4\u1389\3\2\2\2\u13f4"+
		"\u1395\3\2\2\2\u13f4\u13a6\3\2\2\2\u13f4\u13b8\3\2\2\2\u13f4\u13c5\3\2"+
		"\2\2\u13f4\u13df\3\2\2\2\u13f5\u028d\3\2\2\2\u13f6\u13f7\tH\2\2\u13f7"+
		"\u028f\3\2\2\2\u13f8\u13f9\tI\2\2\u13f9\u0291\3\2\2\2\u13fa\u13fb\tJ\2"+
		"\2\u13fb\u0293\3\2\2\2\u13fc\u13fd\7\u013b\2\2\u13fd\u13ff\7\u0224\2\2"+
		"\u13fe\u1400\5\u01a4\u00d3\2\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2\u1400"+
		"\u1405\3\2\2\2\u1401\u1403\5\u01e8\u00f5\2\u1402\u1404\5\u0296\u014c\2"+
		"\u1403\u1402\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1406\3\2\2\2\u1405\u1401"+
		"\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u1408\7\u0225\2"+
		"\2\u1408\u0295\3\2\2\2\u1409\u1410\5\u0298\u014d\2\u140a\u140b\7\37\2"+
		"\2\u140b\u140c\5\u029a\u014e\2\u140c\u140d\7\f\2\2\u140d\u140e\5\u029a"+
		"\u014e\2\u140e\u1411\3\2\2\2\u140f\u1411\5\u029a\u014e\2\u1410\u140a\3"+
		"\2\2\2\u1410\u140f\3\2\2\2\u1411\u0297\3\2\2\2\u1412\u1413\tK\2\2\u1413"+
		"\u0299\3\2\2\2\u1414\u1415\7\u01c6\2\2\u1415\u141c\7\u0151\2\2\u1416\u1417"+
		"\7\\\2\2\u1417\u141c\7\u0175\2\2\u1418\u1419\5\u025c\u012f\2\u1419\u141a"+
		"\tL\2\2\u141a\u141c\3\2\2\2\u141b\u1414\3\2\2\2\u141b\u1416\3\2\2\2\u141b"+
		"\u1418\3\2\2\2\u141c\u029b\3\2\2\2\u141d\u1427\7\u01d2\2\2\u141e\u1428"+
		"\7\u0227\2\2\u141f\u1424\5\u029e\u0150\2\u1420\u1421\7\u022a\2\2\u1421"+
		"\u1423\5\u029e\u0150\2\u1422\u1420\3\2\2\2\u1423\u1426\3\2\2\2\u1424\u1422"+
		"\3\2\2\2\u1424\u1425\3\2\2\2\u1425\u1428\3\2\2\2\u1426\u1424\3\2\2\2\u1427"+
		"\u141e\3\2\2\2\u1427\u141f\3\2\2\2\u1428\u029d\3\2\2\2\u1429\u142b\7\u00b9"+
		"\2\2\u142a\u142c\7\u0139\2\2\u142b\u142a\3\2\2\2\u142b\u142c\3\2\2\2\u142c"+
		"\u142f\3\2\2\2\u142d\u142f\7\u0139\2\2\u142e\u1429\3\2\2\2\u142e\u142d"+
		"\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1430\3\2\2\2\u1430\u1432\5\u0194\u00cb"+
		"\2\u1431\u1433\5\u02ca\u0166\2\u1432\u1431\3\2\2\2\u1432\u1433\3\2\2\2"+
		"\u1433\u029f\3\2\2\2\u1434\u1435\7\u0135\2\2\u1435\u1436\7,\2\2\u1436"+
		"\u1437\5\u025c\u012f\2\u1437\u02a1\3\2\2\2\u1438\u1439\7\u01e6\2\2\u1439"+
		"\u143a\7\u00ad\2\2\u143a\u143b\7\u0224\2\2\u143b\u143c\5\u01e8\u00f5\2"+
		"\u143c\u143d\7\u0225\2\2\u143d\u1440\3\2\2\2\u143e\u1440\5\u0294\u014b"+
		"\2\u143f\u1438\3\2\2\2\u143f\u143e\3\2\2\2\u1440\u02a3\3\2\2\2\u1441\u1453"+
		"\7V\2\2\u1442\u1444\7\u0104\2\2\u1443\u1445\7\27\2\2\u1444\u1443\3\2\2"+
		"\2\u1444\u1445\3\2\2\2\u1445\u1454\3\2\2\2\u1446\u1447\7\u0224\2\2\u1447"+
		"\u144c\5\u02d8\u016d\2\u1448\u1449\7\u022a\2\2\u1449\u144b\5\u02d8\u016d"+
		"\2\u144a\u1448\3\2\2\2\u144b\u144e\3\2\2\2\u144c\u144a\3\2\2\2\u144c\u144d"+
		"\3\2\2\2\u144d\u144f\3\2\2\2\u144e\u144c\3\2\2\2\u144f\u1450\7\u0225\2"+
		"\2\u1450\u1451\7\u01d5\2\2\u1451\u1452\5\u0236\u011c\2\u1452\u1454\3\2"+
		"\2\2\u1453\u1442\3\2\2\2\u1453\u1446\3\2\2\2\u1454\u02a5\3\2\2\2\u1455"+
		"\u1458\7\u0142\2\2\u1456\u1457\7,\2\2\u1457\u1459\7\u01d4\2\2\u1458\u1456"+
		"\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145c\5\u023e\u0120"+
		"\2\u145b\u145d\5\u02ca\u0166\2\u145c\u145b\3\2\2\2\u145c\u145d\3\2\2\2"+
		"\u145d\u145e\3\2\2\2\u145e\u145f\7\u022a\2\2\u145f\u1461\5\u023e\u0120"+
		"\2\u1460\u1462\5\u02ca\u0166\2\u1461\u1460\3\2\2\2\u1461\u1462\3\2\2\2"+
		"\u1462\u02a7\3\2\2\2\u1463\u1464\7\u01eb\2\2\u1464\u1466\7\u0224\2\2\u1465"+
		"\u1467\tD\2\2\u1466\u1465\3\2\2\2\u1466\u1467\3\2\2\2\u1467\u1469\3\2"+
		"\2\2\u1468\u146a\tM\2\2\u1469\u1468\3\2\2\2\u1469\u146a\3\2\2\2\u146a"+
		"\u146b\3\2\2\2\u146b\u1470\5\u02b0\u0159\2\u146c\u146d\7\u022a\2\2\u146d"+
		"\u146f\5\u02b0\u0159\2\u146e\u146c\3\2\2\2\u146f\u1472\3\2\2\2\u1470\u146e"+
		"\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u1473\3\2\2\2\u1472\u1470\3\2\2\2\u1473"+
		"\u1474\7\u0225\2\2\u1474\u02a9\3\2\2\2\u1475\u1476\7\u01f1\2\2\u1476\u147a"+
		"\7\u0224\2\2\u1477\u1478\5\u025c\u012f\2\u1478\u1479\5\u02ca\u0166\2\u1479"+
		"\u147b\3\2\2\2\u147a\u1477\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u1482\3\2"+
		"\2\2\u147c\u147d\7\u022a\2\2\u147d\u147e\5\u025c\u012f\2\u147e\u147f\5"+
		"\u02ca\u0166\2\u147f\u1481\3\2\2\2\u1480\u147c\3\2\2\2\u1481\u1484\3\2"+
		"\2\2\u1482\u1480\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1486\3\2\2\2\u1484"+
		"\u1482\3\2\2\2\u1485\u1487\5\u02ae\u0158\2\u1486\u1485\3\2\2\2\u1486\u1487"+
		"\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u1489\7\u0225\2\2\u1489\u02ab\3\2\2"+
		"\2\u148a\u1495\5\u02d6\u016c\2\u148b\u148c\7\u00a2\2\2\u148c\u1496\7\u0136"+
		"\2\2\u148d\u1490\5\u0322\u0192\2\u148e\u148f\7\u0143\2\2\u148f\u1491\5"+
		"\u025c\u012f\2\u1490\u148e\3\2\2\2\u1490\u1491\3\2\2\2\u1491\u1493\3\2"+
		"\2\2\u1492\u1494\5\u02ae\u0158\2\u1493\u1492\3\2\2\2\u1493\u1494\3\2\2"+
		"\2\u1494\u1496\3\2\2\2\u1495\u148b\3\2\2\2\u1495\u148d\3\2\2\2\u1496\u02ad"+
		"\3\2\2\2\u1497\u1498\7o\2\2\u1498\u1499\5\u025c\u012f\2\u1499\u02af\3"+
		"\2\2\2\u149a\u14a1\5\u023c\u011f\2\u149b\u149f\7\20\2\2\u149c\u14a0\5"+
		"\u033c\u019f\2\u149d\u149e\7\u008b\2\2\u149e\u14a0\5\u025a\u012e\2\u149f"+
		"\u149c\3\2\2\2\u149f\u149d\3\2\2\2\u14a0\u14a2\3\2\2\2\u14a1\u149b\3\2"+
		"\2\2\u14a1\u14a2\3\2\2\2\u14a2\u02b1\3\2\2\2\u14a3\u14a7\7\u01db\2\2\u14a4"+
		"\u14a5\7\u0113\2\2\u14a5\u14a8\7\u01d4\2\2\u14a6\u14a8\5\u023e\u0120\2"+
		"\u14a7\u14a4\3\2\2\2\u14a7\u14a6\3\2\2\2\u14a8\u02b3\3\2\2\2\u14a9\u14af"+
		"\7\u019e\2\2\u14aa\u14b0\7\u01f9\2\2\u14ab\u14ad\7\u0113\2\2\u14ac\u14ae"+
		"\7\u01d4\2\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae\u14b0\3\2\2"+
		"\2\u14af\u14aa\3\2\2\2\u14af\u14ab\3\2\2\2\u14b0\u02b5\3\2\2\2\u14b1\u14b2"+
		"\7\u0086\2\2\u14b2\u14b3\5\u025c\u012f\2\u14b3\u02b7\3\2\2\2\u14b4\u14b5"+
		"\7\u01db\2\2\u14b5\u14b6\5\u025c\u012f\2\u14b6\u02b9\3\2\2\2\u14b7\u14b8"+
		"\7\u0113\2\2\u14b8\u14c0\7\u00bd\2\2\u14b9\u14bd\7\u00bd\2\2\u14ba\u14bb"+
		"\7\u0196\2\2\u14bb\u14bc\7\u023b\2\2\u14bc\u14be\5\u025c\u012f\2\u14bd"+
		"\u14ba\3\2\2\2\u14bd\u14be\3\2\2\2\u14be\u14c0\3\2\2\2\u14bf\u14b7\3\2"+
		"\2\2\u14bf\u14b9\3\2\2\2\u14c0\u02bb\3\2\2\2\u14c1\u14c2\7B\2\2\u14c2"+
		"\u14d4\7\u012f\2\2\u14c3\u14c7\7@\2\2\u14c4\u14c5\5\u02e2\u0172\2\u14c5"+
		"\u14c6\7\u021d\2\2\u14c6\u14c8\3\2\2\2\u14c7\u14c4\3\2\2\2\u14c7\u14c8"+
		"\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14ca\5\u0312\u018a\2\u14ca\u14cb\7"+
		"\u021d\2\2\u14cb\u14cc\5\u0310\u0189\2\u14cc\u14d5\3\2\2\2\u14cd\u14d1"+
		"\7\u01af\2\2\u14ce\u14cf\5\u02e2\u0172\2\u14cf\u14d0\7\u021d\2\2\u14d0"+
		"\u14d2\3\2\2\2\u14d1\u14ce\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d3\3\2"+
		"\2\2\u14d3\u14d5\5\u0312\u018a\2\u14d4\u14c3\3\2\2\2\u14d4\u14cd\3\2\2"+
		"\2\u14d5\u14d6\3\2\2\2\u14d6\u14d7\7\u00d3\2\2\u14d7\u14d8\5\u0338\u019d"+
		"\2\u14d8\u14d9\7\u0230\2\2\u14d9\u02bd\3\2\2\2\u14da\u14e0\7\u022b\2\2"+
		"\u14db\u14e0\5\u02c0\u0161\2\u14dc\u14e0\5\u02c4\u0163\2\u14dd\u14e0\5"+
		"\u02c6\u0164\2\u14de\u14e0\5\u02c2\u0162\2\u14df\u14da\3\2\2\2\u14df\u14db"+
		"\3\2\2\2\u14df\u14dc\3\2\2\2\u14df\u14dd\3\2\2\2\u14df\u14de\3\2\2\2\u14e0"+
		"\u14e2\3\2\2\2\u14e1\u14e3\7\u0230\2\2\u14e2\u14e1\3\2\2\2\u14e2\u14e3"+
		"\3\2\2\2\u14e3\u02bf\3\2\2\2\u14e4\u14e5\7\u01e2\2\2\u14e5\u14eb\tN\2"+
		"\2\u14e6\u14e7\7\u0093\2\2\u14e7\u14e8\tO\2\2\u14e8\u14ec\tP\2\2\u14e9"+
		"\u14ea\7R\2\2\u14ea\u14ec\tQ\2\2\u14eb\u14e6\3\2\2\2\u14eb\u14e9\3\2\2"+
		"\2\u14ec\u02c1\3\2\2\2\u14ed\u14ee\7\u018c\2\2\u14ee\u14f4\5\u0348\u01a5"+
		"\2\u14ef\u14f5\7\u0220\2\2\u14f0\u14f5\7\u012f\2\2\u14f1\u14f5\7\u012b"+
		"\2\2\u14f2\u14f5\5\u0334\u019b\2\u14f3\u14f5\5\u0348\u01a5\2\u14f4\u14ef"+
		"\3\2\2\2\u14f4\u14f0\3\2\2\2\u14f4\u14f1\3\2\2\2\u14f4\u14f2\3\2\2\2\u14f4"+
		"\u14f3\3\2\2\2\u14f5\u02c3\3\2\2\2\u14f6\u14f7\7\u0093\2\2\u14f7\u02c5"+
		"\3\2\2\2\u14f8\u14f9\7\u0242\2\2\u14f9\u02c7\3\2\2\2\u14fa\u14fc\tR\2"+
		"\2\u14fb\u14fd\7\u00a2\2\2\u14fc\u14fb\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd"+
		"\u14fe\3\2\2\2\u14fe\u14ff\5\u0236\u011c\2\u14ff\u02c9\3\2\2\2\u1500\u1502"+
		"\7\20\2\2\u1501\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u1505\3\2\2\2"+
		"\u1503\u1506\5\u033a\u019e\2\u1504\u1506\5\u02ce\u0168\2\u1505\u1503\3"+
		"\2\2\2\u1505\u1504\3\2\2\2\u1506\u1509\3\2\2\2\u1507\u1509\7\20\2\2\u1508"+
		"\u1501\3\2\2\2\u1508\u1507\3\2\2\2\u1509\u02cb\3\2\2\2\u150a\u150d\5\u033a"+
		"\u019e\2\u150b\u150d\5\u02ce\u0168\2\u150c\u150a\3\2\2\2\u150c\u150b\3"+
		"\2\2\2\u150d\u02cd\3\2\2\2\u150e\u150f\5\u0338\u019d\2\u150f\u02cf\3\2"+
		"\2\2\u1510\u1513\7\u01e3\2\2\u1511\u1514\5\u02d2\u016a\2\u1512\u1514\5"+
		"\u023a\u011e\2\u1513\u1511\3\2\2\2\u1513\u1512\3\2\2\2\u1514\u02d1\3\2"+
		"\2\2\u1515\u1516\7\\\2\2\u1516\u1517\7\u012a\2\2\u1517\u1518\5\u0308\u0185"+
		"\2\u1518\u02d3\3\2\2\2\u1519\u151a\7\u00d1\2\2\u151a\u151f\5\u0304\u0183"+
		"\2\u151b\u151c\7\u022a\2\2\u151c\u151e\5\u0304\u0183\2\u151d\u151b\3\2"+
		"\2\2\u151e\u1521\3\2\2\2\u151f\u151d\3\2\2\2\u151f\u1520\3\2\2\2\u1520"+
		"\u152e\3\2\2\2\u1521\u151f\3\2\2\2\u1522\u1523\7+\2\2\u1523\u1524\7?\2"+
		"\2\u1524\u1525\7\u00d1\2\2\u1525\u152a\5\u0304\u0183\2\u1526\u1527\7\u022a"+
		"\2\2\u1527\u1529\5\u0304\u0183\2\u1528\u1526\3\2\2\2\u1529\u152c\3\2\2"+
		"\2\u152a\u1528\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u152e\3\2\2\2\u152c\u152a"+
		"\3\2\2\2\u152d\u1519\3\2\2\2\u152d\u1522\3\2\2\2\u152e\u02d5\3\2\2\2\u152f"+
		"\u1532\5\u033a\u019e\2\u1530\u1532\5\u0338\u019d\2\u1531\u152f\3\2\2\2"+
		"\u1531\u1530\3\2\2\2\u1532\u02d7\3\2\2\2\u1533\u1534\5\u033a\u019e\2\u1534"+
		"\u02d9\3\2\2\2\u1535\u1536\5\u033a\u019e\2\u1536\u02db\3\2\2\2\u1537\u1538"+
		"\5\u033a\u019e\2\u1538\u02dd\3\2\2\2\u1539\u153a\5\u033a\u019e\2\u153a"+
		"\u02df\3\2\2\2\u153b\u153c\5\u033a\u019e\2\u153c\u02e1\3\2\2\2\u153d\u153e"+
		"\5\u033a\u019e\2\u153e\u02e3\3\2\2\2\u153f\u1544\5\u033a\u019e\2\u1540"+
		"\u1541\7\u021d\2\2\u1541\u1543\5\u033c\u019f\2\u1542\u1540\3\2\2\2\u1543"+
		"\u1546\3\2\2\2\u1544\u1542\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u1549\3\2"+
		"\2\2\u1546\u1544\3\2\2\2\u1547\u1548\7\u022c\2\2\u1548\u154a\5\u030e\u0188"+
		"\2\u1549\u1547\3\2\2\2\u1549\u154a\3\2\2\2\u154a\u02e5\3\2\2\2\u154b\u154c"+
		"\5\u033a\u019e\2\u154c\u02e7\3\2\2\2\u154d\u1550\5\u033a\u019e\2\u154e"+
		"\u154f\7\u021d\2\2\u154f\u1551\5\u033c\u019f\2\u1550\u154e\3\2\2\2\u1550"+
		"\u1551\3\2\2\2\u1551\u02e9\3\2\2\2\u1552\u1553\5\u033a\u019e\2\u1553\u02eb"+
		"\3\2\2\2\u1554\u1555\5\u033a\u019e\2\u1555\u02ed\3\2\2\2\u1556\u1557\5"+
		"\u033a\u019e\2\u1557\u02ef\3\2\2\2\u1558\u155d\5\u033a\u019e\2\u1559\u155a"+
		"\7\u021d\2\2\u155a\u155c\5\u033c\u019f\2\u155b\u1559\3\2\2\2\u155c\u155f"+
		"\3\2\2\2\u155d\u155b\3\2\2\2\u155d\u155e\3\2\2\2\u155e\u02f1\3\2\2\2\u155f"+
		"\u155d\3\2\2\2\u1560\u1561\5\u033a\u019e\2\u1561\u02f3\3\2\2\2\u1562\u1567"+
		"\5\u033a\u019e\2\u1563\u1564\7\u021d\2\2\u1564\u1566\5\u033c\u019f\2\u1565"+
		"\u1563\3\2\2\2\u1566\u1569\3\2\2\2\u1567\u1565\3\2\2\2\u1567\u1568\3\2"+
		"\2\2\u1568\u156c\3\2\2\2\u1569\u1567\3\2\2\2\u156a\u156b\7\u022c\2\2\u156b"+
		"\u156d\5\u030e\u0188\2\u156c\u156a\3\2\2\2\u156c\u156d\3\2\2\2\u156d\u02f5"+
		"\3\2\2\2\u156e\u156f\5\u033c\u019f\2\u156f\u02f7\3\2\2\2\u1570\u1575\5"+
		"\u033c\u019f\2\u1571\u1572\7\u021d\2\2\u1572\u1574\5\u033c\u019f\2\u1573"+
		"\u1571\3\2\2\2\u1574\u1577\3\2\2\2\u1575\u1573\3\2\2\2\u1575\u1576\3\2"+
		"\2\2\u1576\u02f9\3\2\2\2\u1577\u1575\3\2\2\2\u1578\u1579\5\u02e2\u0172"+
		"\2\u1579\u157a\7\u021d\2\2\u157a\u157c\3\2\2\2\u157b\u1578\3\2\2\2\u157b"+
		"\u157c\3\2\2\2\u157c\u157d\3\2\2\2\u157d\u157e\5\u033c\u019f\2\u157e\u02fb"+
		"\3\2\2\2\u157f\u1584\5\u033a\u019e\2\u1580\u1581\7\u021d\2\2\u1581\u1583"+
		"\5\u033c\u019f\2\u1582\u1580\3\2\2\2\u1583\u1586\3\2\2\2\u1584\u1582\3"+
		"\2\2\2\u1584\u1585\3\2\2\2\u1585\u02fd\3\2\2\2\u1586\u1584\3\2\2\2\u1587"+
		"\u1588\5\u02e2\u0172\2\u1588\u1589\7\u021d\2\2\u1589\u158b\3\2\2\2\u158a"+
		"\u1587\3\2\2\2\u158a\u158b\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158d\5\u033c"+
		"\u019f\2\u158d\u02ff\3\2\2\2\u158e\u158f\5\u02e2\u0172\2\u158f\u1590\7"+
		"\u021d\2\2\u1590\u1592\3\2\2\2\u1591\u158e\3\2\2\2\u1591\u1592\3\2\2\2"+
		"\u1592\u1593\3\2\2\2\u1593\u1594\5\u033c\u019f\2\u1594\u0301\3\2\2\2\u1595"+
		"\u1596\5\u02e2\u0172\2\u1596\u1597\7\u021d\2\2\u1597\u1599\3\2\2\2\u1598"+
		"\u1595\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a\3\2\2\2\u159a\u159b\5\u033c"+
		"\u019f\2\u159b\u0303\3\2\2\2\u159c\u159d\7\u023e\2\2\u159d\u159f\5\u0314"+
		"\u018b\2\u159e\u159c\3\2\2\2\u159e\u159f\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0"+
		"\u15a3\5\u033c\u019f\2\u15a1\u15a2\7\u021d\2\2\u15a2\u15a4\5\u033c\u019f"+
		"\2\u15a3\u15a1\3\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15a7\3\2\2\2\u15a5\u15a7"+
		"\5\u032a\u0196\2\u15a6\u159e\3\2\2\2\u15a6\u15a5\3\2\2\2\u15a7\u0305\3"+
		"\2\2\2\u15a8\u15a9\5\u033a\u019e\2\u15a9\u0307\3\2\2\2\u15aa\u15ad\5\u033a"+
		"\u019e\2\u15ab\u15ad\5\u032a\u0196\2\u15ac\u15aa\3\2\2\2\u15ac\u15ab\3"+
		"\2\2\2\u15ad\u0309\3\2\2\2\u15ae\u15b1\5\u033a\u019e\2\u15af\u15b1\5\u032a"+
		"\u0196\2\u15b0\u15ae\3\2\2\2\u15b0\u15af\3\2\2\2\u15b1\u030b\3\2\2\2\u15b2"+
		"\u15b5\5\u033a\u019e\2\u15b3\u15b4\7\u021d\2\2\u15b4\u15b6\5\u033c\u019f"+
		"\2\u15b5\u15b3\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u030d\3\2\2\2\u15b7\u15b8"+
		"\5\u033a\u019e\2\u15b8\u030f\3\2\2\2\u15b9\u15be\5\u033a\u019e\2\u15ba"+
		"\u15bb\7\u021d\2\2\u15bb\u15bd\5\u033c\u019f\2\u15bc\u15ba\3\2\2\2\u15bd"+
		"\u15c0\3\2\2\2\u15be\u15bc\3\2\2\2\u15be\u15bf\3\2\2\2\u15bf\u0311\3\2"+
		"\2\2\u15c0\u15be\3\2\2\2\u15c1\u15c4\5\u033a\u019e\2\u15c2\u15c3\7\u021d"+
		"\2\2\u15c3\u15c5\5\u033c\u019f\2\u15c4\u15c2\3\2\2\2\u15c4\u15c5\3\2\2"+
		"\2\u15c5\u15c9\3\2\2\2\u15c6\u15c7\7\u022c\2\2\u15c7\u15ca\5\u030e\u0188"+
		"\2\u15c8\u15ca\5\u02c8\u0165\2\u15c9\u15c6\3\2\2\2\u15c9\u15c8\3\2\2\2"+
		"\u15c9\u15ca\3\2\2\2\u15ca\u0313\3\2\2\2\u15cb\u15d0\5\u033c\u019f\2\u15cc"+
		"\u15cd\7\u021d\2\2\u15cd\u15cf\5\u033c\u019f\2\u15ce\u15cc\3\2\2\2\u15cf"+
		"\u15d2\3\2\2\2\u15d0\u15ce\3\2\2\2\u15d0\u15d1\3\2\2\2\u15d1\u0315\3\2"+
		"\2\2\u15d2\u15d0\3\2\2\2\u15d3\u15d4\7\u00d8\2\2\u15d4\u15d5\7\u0224\2"+
		"\2\u15d5\u15d6\7\u0203\2\2\u15d6\u15d7\t\64\2\2\u15d7\u15d8\5\u01e8\u00f5"+
		"\2\u15d8\u15da\7\u0225\2\2\u15d9\u15db\5\u0294\u014b\2\u15da\u15d9\3\2"+
		"\2\2\u15da\u15db\3\2\2\2\u15db\u0317\3\2\2\2\u15dc\u15de\7\u0224\2\2\u15dd"+
		"\u15df\5\u0320\u0191\2\u15de\u15dd\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e4"+
		"\3\2\2\2\u15e0\u15e1\7\u022a\2\2\u15e1\u15e3\5\u0320\u0191\2\u15e2\u15e0"+
		"\3\2\2\2\u15e3\u15e6\3\2\2\2\u15e4\u15e2\3\2\2\2\u15e4\u15e5\3\2\2\2\u15e5"+
		"\u15e7\3\2\2\2\u15e6\u15e4\3\2\2\2\u15e7\u15e9\7\u0225\2\2\u15e8\u15ea"+
		"\5\u0316\u018c\2\u15e9\u15e8\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u0319\3"+
		"\2\2\2\u15eb\u15f0\7\u0224\2\2\u15ec\u15ee\5\u0320\u0191\2\u15ed\u15ef"+
		"\5\u031e\u0190\2\u15ee\u15ed\3\2\2\2\u15ee\u15ef\3\2\2\2\u15ef\u15f1\3"+
		"\2\2\2\u15f0\u15ec\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u15f9\3\2\2\2\u15f2"+
		"\u15f3\7\u022a\2\2\u15f3\u15f5\5\u0320\u0191\2\u15f4\u15f6\5\u031e\u0190"+
		"\2\u15f5\u15f4\3\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u15f8\3\2\2\2\u15f7\u15f2"+
		"\3\2\2\2\u15f8\u15fb\3\2\2\2\u15f9\u15f7\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa"+
		"\u15fc\3\2\2\2\u15fb\u15f9\3\2\2\2\u15fc\u15fe\7\u0225\2\2\u15fd\u15ff"+
		"\5\u0316\u018c\2\u15fe\u15fd\3\2\2\2\u15fe\u15ff\3\2\2\2\u15ff\u031b\3"+
		"\2\2\2\u1600\u1601\7\u0224\2\2\u1601\u160e\5\u0310\u0189\2\u1602\u1605"+
		"\7\u022a\2\2\u1603\u1606\5\u0334\u019b\2\u1604\u1606\7\u0124\2\2\u1605"+
		"\u1603\3\2\2\2\u1605\u1604\3\2\2\2\u1606\u160c\3\2\2\2\u1607\u160a\7\u022a"+
		"\2\2\u1608\u160b\5\u0334\u019b\2\u1609\u160b\7\u0124\2\2\u160a\u1608\3"+
		"\2\2\2\u160a\u1609\3\2\2\2\u160b\u160d\3\2\2\2\u160c\u1607\3\2\2\2\u160c"+
		"\u160d\3\2\2\2\u160d\u160f\3\2\2\2\u160e\u1602\3\2\2\2\u160e\u160f\3\2"+
		"\2\2\u160f\u1610\3\2\2\2\u1610\u1624\7\u01d2\2\2\u1611\u1612\5\u0312\u018a"+
		"\2\u1612\u1613\7\u021d\2\2\u1613\u1614\7\u0227\2\2\u1614\u1625\3\2\2\2"+
		"\u1615\u1625\7\u0227\2\2\u1616\u1618\5\u023c\u011f\2\u1617\u1619\5\u02ca"+
		"\u0166\2\u1618\u1617\3\2\2\2\u1618\u1619\3\2\2\2\u1619\u1621\3\2\2\2\u161a"+
		"\u161b\7\u022a\2\2\u161b\u161d\5\u023c\u011f\2\u161c\u161e\5\u02ca\u0166"+
		"\2\u161d\u161c\3\2\2\2\u161d\u161e\3\2\2\2\u161e\u1620\3\2\2\2\u161f\u161a"+
		"\3\2\2\2\u1620\u1623\3\2\2\2\u1621\u161f\3\2\2\2\u1621\u1622\3\2\2\2\u1622"+
		"\u1625\3\2\2\2\u1623\u1621\3\2\2\2\u1624\u1611\3\2\2\2\u1624\u1615\3\2"+
		"\2\2\u1624\u1616\3\2\2\2\u1625\u1626\3\2\2\2\u1626\u1628\7\u0225\2\2\u1627"+
		"\u1629\5\u0316\u018c\2\u1628\u1627\3\2\2\2\u1628\u1629\3\2\2\2\u1629\u031d"+
		"\3\2\2\2\u162a\u162b\tS\2\2\u162b\u162c\7\u0125\2\2\u162c\u031f\3\2\2"+
		"\2\u162d\u162e\5\u033a\u019e\2\u162e\u162f\7\u023b\2\2\u162f\u1630\7\u0238"+
		"\2\2\u1630\u1632\3\2\2\2\u1631\u162d\3\2\2\2\u1631\u1632\3\2\2\2\u1632"+
		"\u1633\3\2\2\2\u1633\u1634\5\u023e\u0120\2\u1634\u0321\3\2\2\2\u1635\u163e"+
		"\5\u0324\u0193\2\u1636\u1638\7\u0160\2\2\u1637\u1636\3\2\2\2\u1637\u1638"+
		"\3\2\2\2\u1638\u1639\3\2\2\2\u1639\u163b\5\u02f8\u017d\2\u163a\u163c\t"+
		"!\2\2\u163b\u163a\3\2\2\2\u163b\u163c\3\2\2\2\u163c\u163e\3\2\2\2\u163d"+
		"\u1635\3\2\2\2\u163d\u1637\3\2\2\2\u163e\u0323\3\2\2\2\u163f\u1641\5\u0328"+
		"\u0195\2\u1640\u1642\5\u0326\u0194\2\u1641\u1640\3\2\2\2\u1641\u1642\3"+
		"\2\2\2\u1642\u1649\3\2\2\2\u1643\u1645\7\u01e5\2\2\u1644\u1646\7\u00ea"+
		"\2\2\u1645\u1644\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u1647\3\2\2\2\u1647"+
		"\u1648\7\u01b3\2\2\u1648\u164a\7\u01fb\2\2\u1649\u1643\3\2\2\2\u1649\u164a"+
		"\3\2\2\2\u164a\u165c\3\2\2\2\u164b\u164c\7\u00d0\2\2\u164c\u1651\tT\2"+
		"\2\u164d\u164e\7\u0224\2\2\u164e\u164f\5\u023e\u0120\2\u164f\u1650\7\u0225"+
		"\2\2\u1650\u1652\3\2\2\2\u1651\u164d\3\2\2\2\u1651\u1652\3\2\2\2\u1652"+
		"\u1653\3\2\2\2\u1653\u1654\7\u01bc\2\2\u1654\u1659\tU\2\2\u1655\u1656"+
		"\7\u0224\2\2\u1656\u1657\5\u023e\u0120\2\u1657\u1658\7\u0225\2\2\u1658"+
		"\u165a\3\2\2\2\u1659\u1655\3\2\2\2\u1659\u165a\3\2\2\2\u165a\u165c\3\2"+
		"\2\2\u165b\u163f\3\2\2\2\u165b\u164b\3\2\2\2\u165c\u0325\3\2\2\2\u165d"+
		"\u1660\7\u0224\2\2\u165e\u1661\5\u0334\u019b\2\u165f\u1661\7\u0227\2\2"+
		"\u1660\u165e\3\2\2\2\u1660\u165f\3\2\2\2\u1661\u1664\3\2\2\2\u1662\u1663"+
		"\7\u022a\2\2\u1663\u1665\5\u0334\u019b\2\u1664\u1662\3\2\2\2\u1664\u1665"+
		"\3\2\2\2\u1665\u1667\3\2\2\2\u1666\u1668\tV\2\2\u1667\u1666\3\2\2\2\u1667"+
		"\u1668\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u166a\7\u0225\2\2\u166a\u0327"+
		"\3\2\2\2\u166b\u16a8\7#\2\2\u166c\u16a8\7\u014d\2\2\u166d\u16a8\7\u010a"+
		"\2\2\u166e\u16a8\7\"\2\2\u166f\u16a8\7!\2\2\u1670\u16a8\7\u010b\2\2\u1671"+
		"\u16a8\7\u014e\2\2\u1672\u16a8\7\u014f\2\2\u1673\u16a8\7\u0193\2\2\u1674"+
		"\u16a8\7\u0194\2\2\u1675\u16a8\7\u0128\2\2\u1676\u16a8\7i\2\2\u1677\u16a8"+
		"\7\u00ce\2\2\u1678\u16a8\7\u00cd\2\2\u1679\u16a8\7\u0127\2\2\u167a\u16a8"+
		"\7\u0198\2\2\u167b\u16a8\7\u0126\2\2\u167c\u16a8\7j\2\2\u167d\u167f\7"+
		"}\2\2\u167e\u1680\7\u0152\2\2\u167f\u167e\3\2\2\2\u167f\u1680\3\2\2\2"+
		"\u1680\u16a8\3\2\2\2\u1681\u16a8\7\u009f\2\2\u1682\u16a8\7\u015d\2\2\u1683"+
		"\u16a8\7\u010d\2\2\u1684\u1686\7\u00f1\2\2\u1685\u1687\7\u015a\2\2\u1686"+
		"\u1685\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u16a8\3\2\2\2\u1688\u16a8\7\66"+
		"\2\2\u1689\u16a8\78\2\2\u168a\u16a8\7\u01d7\2\2\u168b\u16a8\7\u01d6\2"+
		"\2\u168c\u16a8\7\u01a7\2\2\u168d\u16a8\7\u015a\2\2\u168e\u16a8\7\'\2\2"+
		"\u168f\u16a8\7c\2\2\u1690\u16a8\7\u0176\2\2\u1691\u16a8\7\u01d0\2\2\u1692"+
		"\u16a8\7\u01f8\2\2\u1693\u16a8\7\u0106\2\2\u1694\u16a8\7d\2\2\u1695\u16a8"+
		"\7\u00b5\2\2\u1696\u16a8\7\u0100\2\2\u1697\u16a8\7\u0180\2\2\u1698\u16a8"+
		"\7\u01b9\2\2\u1699\u16a8\7\u01ba\2\2\u169a\u16a8\7\u01bb\2\2\u169b\u16a8"+
		"\7\u01b8\2\2\u169c\u16a8\7\u01b4\2\2\u169d\u16a8\7\u01b7\2\2\u169e\u16a8"+
		"\7\u01b6\2\2\u169f\u16a8\7\u01b5\2\2\u16a0\u16a8\7\u01fa\2\2\u16a1\u16a8"+
		"\7\177\2\2\u16a2\u16a8\7 \2\2\u16a3\u16a8\7$\2\2\u16a4\u16a8\7<\2\2\u16a5"+
		"\u16a8\7\u010f\2\2\u16a6\u16a8\7\u0102\2\2\u16a7\u166b\3\2\2\2\u16a7\u166c"+
		"\3\2\2\2\u16a7\u166d\3\2\2\2\u16a7\u166e\3\2\2\2\u16a7\u166f\3\2\2\2\u16a7"+
		"\u1670\3\2\2\2\u16a7\u1671\3\2\2\2\u16a7\u1672\3\2\2\2\u16a7\u1673\3\2"+
		"\2\2\u16a7\u1674\3\2\2\2\u16a7\u1675\3\2\2\2\u16a7\u1676\3\2\2\2\u16a7"+
		"\u1677\3\2\2\2\u16a7\u1678\3\2\2\2\u16a7\u1679\3\2\2\2\u16a7\u167a\3\2"+
		"\2\2\u16a7\u167b\3\2\2\2\u16a7\u167c\3\2\2\2\u16a7\u167d\3\2\2\2\u16a7"+
		"\u1681\3\2\2\2\u16a7\u1682\3\2\2\2\u16a7\u1683\3\2\2\2\u16a7\u1684\3\2"+
		"\2\2\u16a7\u1688\3\2\2\2\u16a7\u1689\3\2\2\2\u16a7\u168a\3\2\2\2\u16a7"+
		"\u168b\3\2\2\2\u16a7\u168c\3\2\2\2\u16a7\u168d\3\2\2\2\u16a7\u168e\3\2"+
		"\2\2\u16a7\u168f\3\2\2\2\u16a7\u1690\3\2\2\2\u16a7\u1691\3\2\2\2\u16a7"+
		"\u1692\3\2\2\2\u16a7\u1693\3\2\2\2\u16a7\u1694\3\2\2\2\u16a7\u1695\3\2"+
		"\2\2\u16a7\u1696\3\2\2\2\u16a7\u1697\3\2\2\2\u16a7\u1698\3\2\2\2\u16a7"+
		"\u1699\3\2\2\2\u16a7\u169a\3\2\2\2\u16a7\u169b\3\2\2\2\u16a7\u169c\3\2"+
		"\2\2\u16a7\u169d\3\2\2\2\u16a7\u169e\3\2\2\2\u16a7\u169f\3\2\2\2\u16a7"+
		"\u16a0\3\2\2\2\u16a7\u16a1\3\2\2\2\u16a7\u16a2\3\2\2\2\u16a7\u16a3\3\2"+
		"\2\2\u16a7\u16a4\3\2\2\2\u16a7\u16a5\3\2\2\2\u16a7\u16a6\3\2\2\2\u16a8"+
		"\u0329\3\2\2\2\u16a9\u16ad\7\u022e\2\2\u16aa\u16ab\7\u022f\2\2\u16ab\u16ad"+
		"\7\u021e\2\2\u16ac\u16a9\3\2\2\2\u16ac\u16aa\3\2\2\2\u16ad\u16b6\3\2\2"+
		"\2\u16ae\u16b0\7\u00c1\2\2\u16af\u16ae\3\2\2\2\u16af\u16b0\3\2\2\2\u16b0"+
		"\u16b4\3\2\2\2\u16b1\u16b5\7\u022e\2\2\u16b2\u16b3\7\u022f\2\2\u16b3\u16b5"+
		"\7\u021e\2\2\u16b4\u16b1\3\2\2\2\u16b4\u16b2\3\2\2\2\u16b5\u16b7\3\2\2"+
		"\2\u16b6\u16af\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16bc\3\2\2\2\u16b8\u16b9"+
		"\7\u021d\2\2\u16b9\u16bb\5\u032e\u0198\2\u16ba\u16b8\3\2\2\2\u16bb\u16be"+
		"\3\2\2\2\u16bc\u16ba\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd\u032b\3\2\2\2\u16be"+
		"\u16bc\3\2\2\2\u16bf\u16c4\5\u032e\u0198\2\u16c0\u16c1\7\u021d\2\2\u16c1"+
		"\u16c3\5\u032e\u0198\2\u16c2\u16c0\3\2\2\2\u16c3\u16c6\3\2\2\2\u16c4\u16c2"+
		"\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u032d\3\2\2\2\u16c6\u16c4\3\2\2\2\u16c7"+
		"\u16c8\7\u023e\2\2\u16c8\u16ca\5\u0314\u018b\2\u16c9\u16c7\3\2\2\2\u16c9"+
		"\u16ca\3\2\2\2\u16ca\u16cb\3\2\2\2\u16cb\u16d0\5\u033c\u019f\2\u16cc\u16cd"+
		"\7\u021d\2\2\u16cd\u16cf\5\u033c\u019f\2\u16ce\u16cc\3\2\2\2\u16cf\u16d2"+
		"\3\2\2\2\u16d0\u16ce\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1\u16d6\3\2\2\2\u16d2"+
		"\u16d0\3\2\2\2\u16d3\u16d5\5\u0318\u018d\2\u16d4\u16d3\3\2\2\2\u16d5\u16d8"+
		"\3\2\2\2\u16d6\u16d4\3\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u032f\3\2\2\2\u16d8"+
		"\u16d6\3\2\2\2\u16d9\u16da\7\u023e\2\2\u16da\u16dc\5\u0314\u018b\2\u16db"+
		"\u16d9\3\2\2\2\u16db\u16dc\3\2\2\2\u16dc\u16dd\3\2\2\2\u16dd\u16e2\5\u033c"+
		"\u019f\2\u16de\u16df\7\u021d\2\2\u16df\u16e1\5\u033c\u019f\2\u16e0\u16de"+
		"\3\2\2\2\u16e1\u16e4\3\2\2\2\u16e2\u16e0\3\2\2\2\u16e2\u16e3\3\2\2\2\u16e3"+
		"\u0331\3\2\2\2\u16e4\u16e2\3\2\2\2\u16e5\u16e8\7\u01b4\2\2\u16e6\u16e9"+
		"\5\u0338\u019d\2\u16e7\u16e9\5\u032a\u0196\2\u16e8\u16e6\3\2\2\2\u16e8"+
		"\u16e7\3\2\2\2\u16e9\u16ee\3\2\2\2\u16ea\u16eb\7\23\2\2\u16eb\u16ec\7"+
		"\u01b3\2\2\u16ec\u16ed\7\u01fb\2\2\u16ed\u16ef\5\u0338\u019d\2\u16ee\u16ea"+
		"\3\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u1724\3\2\2\2\u16f0\u16f4\7\u00d0\2"+
		"\2\u16f1\u16f5\5\u0338\u019d\2\u16f2\u16f5\5\u032a\u0196\2\u16f3\u16f5"+
		"\5\u032e\u0198\2\u16f4\u16f1\3\2\2\2\u16f4\u16f2\3\2\2\2\u16f4\u16f3\3"+
		"\2\2\2\u16f5\u16f6\3\2\2\2\u16f6\u1704\tW\2\2\u16f7\u16fa\7\u0224\2\2"+
		"\u16f8\u16fb\7\u021e\2\2\u16f9\u16fb\5\u032a\u0196\2\u16fa\u16f8\3\2\2"+
		"\2\u16fa\u16f9\3\2\2\2\u16fb\u1701\3\2\2\2\u16fc\u16ff\7\u022a\2\2\u16fd"+
		"\u1700\7\u021e\2\2\u16fe\u1700\5\u032a\u0196\2\u16ff\u16fd\3\2\2\2\u16ff"+
		"\u16fe\3\2\2\2\u1700\u1702\3\2\2\2\u1701\u16fc\3\2\2\2\u1701\u1702\3\2"+
		"\2\2\u1702\u1703\3\2\2\2\u1703\u1705\7\u0225\2\2\u1704\u16f7\3\2\2\2\u1704"+
		"\u1705\3\2\2\2\u1705\u1715\3\2\2\2\u1706\u1713\7\u01bc\2\2\u1707\u1714"+
		"\7d\2\2\u1708\u1714\7\u00b5\2\2\u1709\u1714\7\u0100\2\2\u170a\u1711\7"+
		"\u0180\2\2\u170b\u170e\7\u0224\2\2\u170c\u170f\7\u021e\2\2\u170d\u170f"+
		"\5\u032a\u0196\2\u170e\u170c\3\2\2\2\u170e\u170d\3\2\2\2\u170f\u1710\3"+
		"\2\2\2\u1710\u1712\7\u0225\2\2\u1711\u170b\3\2\2\2\u1711\u1712\3\2\2\2"+
		"\u1712\u1714\3\2\2\2\u1713\u1707\3\2\2\2\u1713\u1708\3\2\2\2\u1713\u1709"+
		"\3\2\2\2\u1713\u170a\3\2\2\2\u1714\u1716\3\2\2\2\u1715\u1706\3\2\2\2\u1715"+
		"\u1716\3\2\2\2\u1716\u1724\3\2\2\2\u1717\u1724\5\u0334\u019b\2\u1718\u1719"+
		"\7c\2\2\u1719\u1724\5\u0338\u019d\2\u171a\u1724\5\u0338\u019d\2\u171b"+
		"\u1724\7\u0124\2\2\u171c\u1724\7\u01c3\2\2\u171d\u1724\7\u0098\2\2\u171e"+
		"\u1724\7f\2\2\u171f\u1724\7\u018b\2\2\u1720\u1724\7\u0101\2\2\u1721\u1724"+
		"\7\u00f9\2\2\u1722\u1724\7o\2\2\u1723\u16e5\3\2\2\2\u1723\u16f0\3\2\2"+
		"\2\u1723\u1717\3\2\2\2\u1723\u1718\3\2\2\2\u1723\u171a\3\2\2\2\u1723\u171b"+
		"\3\2\2\2\u1723\u171c\3\2\2\2\u1723\u171d\3\2\2\2\u1723\u171e\3\2\2\2\u1723"+
		"\u171f\3\2\2\2\u1723\u1720\3\2\2\2\u1723\u1721\3\2\2\2\u1723\u1722\3\2"+
		"\2\2\u1724\u0333\3\2\2\2\u1725\u1726\tX\2\2\u1726\u0335\3\2\2\2\u1727"+
		"\u1728\7\u0229\2\2\u1728\u1729\5\u0334\u019b\2\u1729\u0337\3\2\2\2\u172a"+
		"\u172b\tY\2\2\u172b\u0339\3\2\2\2\u172c\u172d\7\u023e\2\2\u172d\u172f"+
		"\5\u0314\u018b\2\u172e\u172c\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1730\3"+
		"\2\2\2\u1730\u1731\5\u033c\u019f\2\u1731\u033b\3\2\2\2\u1732\u1735\5\u0348"+
		"\u01a5\2\u1733\u1735\7\u0221\2\2\u1734\u1732\3\2\2\2\u1734\u1733\3\2\2"+
		"\2\u1735\u033d\3\2\2\2\u1736\u173e\7\u0234\2\2\u1737\u1738\7\u0232\2\2"+
		"\u1738\u173e\7\u0238\2\2\u1739\u173a\7\u0237\2\2\u173a\u173e\7\u023b\2"+
		"\2\u173b\u173c\7\u0235\2\2\u173c\u173e\7\u023b\2\2\u173d\u1736\3\2\2\2"+
		"\u173d\u1737\3\2\2\2\u173d\u1739\3\2\2\2\u173d\u173b\3\2\2\2\u173e\u033f"+
		"\3\2\2\2\u173f\u1743\7\u0233\2\2\u1740\u1741\7\u0238\2\2\u1741\u1743\7"+
		"\u023b\2\2\u1742\u173f\3\2\2\2\u1742\u1740\3\2\2\2\u1743\u0341\3\2\2\2"+
		"\u1744\u1748\7\u0231\2\2\u1745\u1746\7\u0232\2\2\u1746\u1748\7\u023b\2"+
		"\2\u1747\u1744\3\2\2\2\u1747\u1745\3\2\2\2\u1748\u0343\3\2\2\2\u1749\u174d"+
		"\7\u0239\2\2\u174a\u174b\7\u023a\2\2\u174b\u174d\7\u023a\2\2\u174c\u1749"+
		"\3\2\2\2\u174c\u174a\3\2\2\2\u174d\u0345\3\2\2\2\u174e\u174f\7\u0224\2"+
		"\2\u174f\u1750\7\u0228\2\2\u1750\u1751\7\u0225\2\2\u1751\u0347\3\2\2\2"+
		"\u1752\u1753\tZ\2\2\u1753\u0349\3\2\2\2\u031b\u034d\u0352\u0359\u035b"+
		"\u0378\u037f\u0388\u038d\u0392\u0399\u039e\u03a3\u03a7\u03ab\u03b0\u03b3"+
		"\u03b7\u03bb\u03bd\u03c6\u03c8\u03cc\u03d9\u03db\u03f4\u03f6\u0400\u0402"+
		"\u0404\u0407\u0412\u041d\u041f\u0425\u0427\u0429\u042c\u043a\u043d\u043f"+
		"\u0441\u0447\u044a\u0451\u0456\u045d\u0466\u046c\u0470\u0474\u0479\u047d"+
		"\u0482\u0489\u048d\u0490\u049c\u049f\u04a5\u04b3\u04b8\u04bc\u04c4\u04c8"+
		"\u04d1\u04de\u04eb\u04f6\u04f9\u04ff\u0508\u050d\u0514\u0516\u0519\u0526"+
		"\u0528\u0531\u0538\u053b\u053d\u0541\u0545\u054b\u0550\u0555\u0559\u055d"+
		"\u0561\u0565\u0568\u056c\u0573\u057a\u057d\u0580\u0586\u058f\u0596\u059c"+
		"\u05a2\u05ac\u05b5\u05ba\u05be\u05ca\u05cf\u05d4\u05db\u05dd\u05e7\u05ec"+
		"\u05f4\u05f6\u05fa\u05fe\u0603\u0608\u060d\u0613\u0621\u0626\u0629\u062f"+
		"\u0638\u0646\u064e\u0658\u065b\u0660\u0665\u066c\u0671\u067b\u0682\u0684"+
		"\u0688\u068e\u0693\u069d\u06a7\u06ac\u06b8\u06bd\u06cd\u06d9\u06de\u06e3"+
		"\u06ea\u06ec\u06f6\u06fb\u06fe\u0702\u0707\u070d\u071f\u0724\u0729\u072b"+
		"\u0732\u0739\u073c\u073f\u0742\u074d\u0759\u075d\u0760\u0769\u0771\u0779"+
		"\u077c\u0783\u0787\u078e\u0794\u07bd\u07d9\u07e0\u07e5\u07f0\u07f3\u07fe"+
		"\u0806\u080a\u0816\u0819\u081f\u0822\u0827\u082c\u0830\u083a\u0844\u084a"+
		"\u0855\u085a\u085e\u0866\u086e\u0873\u0876\u0878\u087b\u0884\u0889\u0890"+
		"\u0893\u0896\u089a\u089d\u08a5\u08aa\u08af\u08b6\u08c0\u08d2\u08d9\u08e3"+
		"\u08ed\u08f4\u08f9\u08ff\u0909\u090e\u0915\u091a\u0920\u0923\u0926\u0937"+
		"\u093c\u0945\u094a\u0950\u0953\u095a\u095d\u0964\u0969\u096d\u0972\u0977"+
		"\u0981\u0987\u0991\u0996\u099d\u09a3\u09a7\u09aa\u09ad\u09be\u09c3\u09cb"+
		"\u09d9\u09e0\u09f0\u09f9\u09fb\u0a10\u0a20\u0a29\u0a2e\u0a32\u0a35\u0a3f"+
		"\u0a4b\u0a51\u0a59\u0a5d\u0a60\u0a6e\u0a72\u0a77\u0a7a\u0a87\u0a8b\u0a97"+
		"\u0a9c\u0aa0\u0aa4\u0aaa\u0aad\u0ab0\u0acb\u0ad1\u0ad5\u0adb\u0ae7\u0af0"+
		"\u0af2\u0af8\u0afc\u0aff\u0b08\u0b13\u0b17\u0b1a\u0b1e\u0b26\u0b2f\u0b38"+
		"\u0b3a\u0b59\u0b5d\u0b64\u0b68\u0b6c\u0b70\u0b7c\u0b80\u0b8e\u0b94\u0b9b"+
		"\u0ba0\u0baa\u0bb0\u0bb2\u0bbb\u0bc5\u0bca\u0bd9\u0bdd\u0be0\u0be4\u0be9"+
		"\u0bed\u0bf3\u0bfb\u0c02\u0c07\u0c09\u0c0e\u0c13\u0c1b\u0c22\u0c26\u0c29"+
		"\u0c35\u0c3b\u0c43\u0c4d\u0c58\u0c5b\u0c62\u0c65\u0c6c\u0c77\u0c7d\u0c81"+
		"\u0c8b\u0c8e\u0c94\u0c9f\u0ca1\u0ca3\u0ca6\u0caa\u0cad\u0cb1\u0cb5\u0cba"+
		"\u0cc5\u0cc9\u0cd1\u0cd4\u0cd9\u0cdb\u0ce4\u0cee\u0cf3\u0cf9\u0cfd\u0d00"+
		"\u0d08\u0d0b\u0d0f\u0d13\u0d18\u0d1b\u0d1f\u0d23\u0d27\u0d33\u0d41\u0d46"+
		"\u0d4a\u0d53\u0d57\u0d5f\u0d62\u0d65\u0d69\u0d6c\u0d6f\u0d72\u0d76\u0d80"+
		"\u0d87\u0d8e\u0d93\u0d98\u0d9f\u0da5\u0dac\u0db1\u0db5\u0db8\u0dbb\u0dbf"+
		"\u0dc4\u0dc8\u0dca\u0dd7\u0dde\u0dec\u0def\u0df9\u0dfd\u0e05\u0e11\u0e1b"+
		"\u0e20\u0e2a\u0e32\u0e35\u0e3b\u0e3f\u0e44\u0e4e\u0e53\u0e60\u0e6c\u0e71"+
		"\u0e7b\u0e80\u0e82\u0e87\u0e8b\u0e91\u0e95\u0ea2\u0ea6\u0eb0\u0eb3\u0eb5"+
		"\u0eba\u0ec3\u0ed0\u0ed8\u0ee1\u0ee5\u0eea\u0ef5\u0ef7\u0f07\u0f0c\u0f12"+
		"\u0f18\u0f2a\u0f31\u0f34\u0f3c\u0f45\u0f47\u0f4b\u0f4e\u0f53\u0f55\u0f59"+
		"\u0f65\u0f6e\u0f76\u0f7b\u0f7f\u0f84\u0f87\u0f8f\u0f97\u0f9d\u0fa0\u0fa3"+
		"\u0fab\u0fb5\u0fc1\u0fc8\u0fcc\u0fd0\u0fd3\u0fd6\u0fdb\u0fe0\u0fe3\u0fe6"+
		"\u0fec\u0fef\u0ff5\u0ff8\u0ffb\u1000\u1003\u100b\u1011\u101b\u1020\u1029"+
		"\u1033\u1037\u1039\u103c\u1048\u104c\u104f\u1063\u1068\u106d\u1074\u1077"+
		"\u1080\u1087\u108c\u1090\u1098\u109e\u10a6\u10a9\u10b1\u10b9\u10bc\u10bf"+
		"\u10c8\u10ce\u10d4\u10d6\u10e3\u10e5\u10ee\u10f0\u10f4\u10fa\u10fe\u110c"+
		"\u1112\u1121\u1124\u112d\u1133\u1139\u113e\u1149\u114d\u1154\u1159\u115e"+
		"\u1162\u116c\u1175\u1179\u1182\u1184\u1186\u1197\u119f\u11ab\u11b6\u11c1"+
		"\u11cc\u11cf\u11d6\u11de\u11e5\u11e9\u11f0\u11f4\u11f9\u11fd\u1205\u1209"+
		"\u1210\u1219\u1227\u1234\u1239\u124f\u1253\u1256\u125d\u1260\u1264\u1267"+
		"\u126e\u1271\u1277\u127a\u127e\u1281\u1288\u128d\u129b\u12a1\u12a3\u12a7"+
		"\u12af\u12bb\u12c0\u12c5\u12cb\u12ce\u12d2\u12dc\u12ec\u12f0\u12f9\u12ff"+
		"\u130d\u1318\u131c\u131f\u1328\u132e\u1338\u1340\u1343\u1346\u134f\u1354"+
		"\u135d\u1363\u1368\u136b\u1370\u1375\u1379\u137f\u1385\u138e\u1393\u139b"+
		"\u139f\u13a4\u13aa\u13b1\u13b6\u13be\u13c3\u13cb\u13ce\u13d1\u13d4\u13d8"+
		"\u13dd\u13e2\u13e6\u13ed\u13f2\u13f4\u13ff\u1403\u1405\u1410\u141b\u1424"+
		"\u1427\u142b\u142e\u1432\u143f\u1444\u144c\u1453\u1458\u145c\u1461\u1466"+
		"\u1469\u1470\u147a\u1482\u1486\u1490\u1493\u1495\u149f\u14a1\u14a7\u14ad"+
		"\u14af\u14bd\u14bf\u14c7\u14d1\u14d4\u14df\u14e2\u14eb\u14f4\u14fc\u1501"+
		"\u1505\u1508\u150c\u1513\u151f\u152a\u152d\u1531\u1544\u1549\u1550\u155d"+
		"\u1567\u156c\u1575\u157b\u1584\u158a\u1591\u1598\u159e\u15a3\u15a6\u15ac"+
		"\u15b0\u15b5\u15be\u15c4\u15c9\u15d0\u15da\u15de\u15e4\u15e9\u15ee\u15f0"+
		"\u15f5\u15f9\u15fe\u1605\u160a\u160c\u160e\u1618\u161d\u1621\u1624\u1628"+
		"\u1631\u1637\u163b\u163d\u1641\u1645\u1649\u1651\u1659\u165b\u1660\u1664"+
		"\u1667\u167f\u1686\u16a7\u16ac\u16af\u16b4\u16b6\u16bc\u16c4\u16c9\u16d0"+
		"\u16d6\u16db\u16e2\u16e8\u16ee\u16f4\u16fa\u16ff\u1701\u1704\u170e\u1711"+
		"\u1713\u1715\u1723\u172e\u1734\u173d\u1742\u1747\u174c";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}