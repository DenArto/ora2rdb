# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
#  - prepare
  - build
  - test
  - deploy

variables:
  ORA2RDB_VERSION: "1.0"

#prepare-job:
#  image: registry.red-soft.biz:5000/utils/red-release-manager/client:master
#  stage: prepare
#  script:
#    - |
#      if [ "$CUSTOM_SUFFIX" ]; then
#          RM_KIND=$CUSTOM_SUFFIX
#        elif [ "$CI_COMMIT_REF_NAME" != "$BRANCH" ]; then
#          RM_KIND=EXPERIMENTAL
#        else
#          RM_KIND=SNAPSHOT
#      fi
#      - RM_KIND_VERSION=$(relmanager_client genbuildno ${RELEASE_HUB_PROJECT} ora2rdb-${RM_KIND})
#      -   ORA2RDB_VERSION=ora2rdb-${RM_KIND}.${RM_KIND_VERSION}
#      - echo "ORA2RDB_VERSION=${ORA2RDB_VERSION}" >> vars.env
#  artifacts:
#    paths:
#      - vars.env

build-job:       # This job runs in the build stage, which runs first.
  image: ubuntu:18.04
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir build
    - apt update
    - apt install -y curl wget
    - curl -O https://download.java.net/java/GA/jdk18/43f95e8614114aeaa8e8a5fcf20a682d/36/GPL/openjdk-18_linux-x64_bin.tar.gz
    - curl -O https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.13-bin.tar.gz
    - tar xf openjdk-18_linux-x64_bin.tar.gz
    - tar xf apache-ant-1.10.13-bin.tar.gz
    - mv ./jdk-18 /opt
    - cp -r ./apache-ant-1.10.13 /opt
    - export JAVA_HOME="/opt/jdk-18"
    - export ANT_HOME="/opt/apache-ant-1.10.13-bin.tar.gz"
    - /opt/apache-ant-1.10.13/bin/ant create_run_jar
  artifacts:
    paths:
      - ./jar
      - ./jdk-18
#  needs: ["prepare"]

unit-test-job:   # This job runs in the test stage.
  image: ubuntu:18.04
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - apt update
    - apt install -y junit4
    - echo "Code coverage is 90%"

  needs: ["build-job"]
  dependencies: ["build-job"]



deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
